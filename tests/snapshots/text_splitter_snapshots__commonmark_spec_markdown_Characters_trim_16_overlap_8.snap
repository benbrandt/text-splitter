---
source: tests/text_splitter_snapshots.rs
expression: chunks
---
- "---"
- "title:"
- ": CommonMark"
- Spec
- "author: John"
- John MacFarlane
- "version: '0.31.2"
- "'0.31.2'"
- "date: '2024-01-"
- "2024-01-28'"
- "license: '[CC-BY"
- "'[CC-BY-SA 4.0]("
- "SA 4.0](https://"
- creativecommons.
- commons.org/
- /licenses/by-sa/
- "/by-sa/4.0/)'"
- "..."
- "# Introduction"
- "##"
- What is Markdown
- Markdown?
- Markdown is a
- is a plain text
- text format for
- for writing
- structured
- "documents,"
- based on
- on conventions
- for indicating
- formatting in
- in email
- and usenet posts
- posts.
- It was developed
- by John Gruber (
- Gruber (with
- help from Aaron
- Aaron Swartz)
- Swartz) and
- ) and released
- released in 2004
- in 2004 in the
- in the form of a
- "[syntax"
- "description]("
- "](https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/syntax
- /syntax)
- and a Perl
- a Perl script (
- "`Markdown.pl`"
- ) for converting
- Markdown to
- HTML.
- In the next
- "the next decade,"
- "decade, dozens"
- ", dozens of"
- implementations
- were
- developed in
- in many
- many languages.
- Some extended
- extended the
- the original
- Markdown syntax
- syntax with
- with conventions
- "for footnotes,"
- ", tables, and"
- other document
- elements.
- Some allowed
- allowed Markdown
- documents to be
- rendered in
- in formats other
- other than HTML.
- Websites like
- "like Reddit,"
- "StackOverflow,"
- ", and GitHub had"
- had millions of
- of people using
- using Markdown.
- And Markdown
- Markdown started
- started to be
- to be used
- be used beyond
- "beyond the web,"
- "the web, to"
- "web, to author"
- "author books,"
- "articles, slide"
- ", slide shows,"
- "shows, letters,"
- "letters, and"
- ", and lecture"
- lecture notes.
- What
- distinguishes
- Markdown from
- from many other
- lightweight
- markup
- "syntaxes, which"
- ", which are"
- are often easier
- "easier to write,"
- "write, is its"
- its readability.
- As Gruber writes
- "writes:"
- ">"
- The overriding
- design goal for
- "for Markdown'"
- s formatting
- " syntax is\n>"
- to make it as
- it as readable
- readable as
- as possible.
- The idea is that
- " is that a\n>"
- Markdown-
- "-formatted"
- document should
- should be
- be publishable
- " as-is, as\n>"
- "plain text,"
- "text, without"
- without looking
- "looking like it'"
- s been marked up
- " up with tags\n>"
- or formatting
- " instructions.\n>"
- (
- "<https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/>)
- The point can be
- be illustrated
- by comparing a
- a sample of
- "[AsciiDoc](https"
- "](https://"
- "://asciidoc.org/"
- /) with
- an equivalent
- sample of
- of Markdown.
- Here is a sample
- a sample of
- AsciiDoc from
- from the
- the AsciiDoc
- "AsciiDoc manual:"
- "```"
- "1."
- "List item one.\n+"
- List item one
- one continued
- with a second
- second paragraph
- followed by an
- Indented block.
- +
- "................"
- "........."
- $ ls *.sh
- $ mv *.sh ~/tmp
- "................"
- ".........\n+"
- List item
- item continued
- with a third
- third paragraph.
- "2."
- List item two
- two continued
- with an open
- an open block.
- "+\n--"
- This paragraph
- is part of the
- of the preceding
- " list item.\n\na."
- This list is
- list is nested
- nested and does
- and does not
- does not require
- require explicit
- explicit item
- "continuation.\n+"
- This paragraph
- is part of the
- of the preceding
- " list item.\n\nb."
- b. List item b.
- This paragraph
- belongs to item
- to item two of
- two of the outer
- " outer list.\n--"
- "--\n```"
- And here is the
- the equivalent
- "in Markdown:"
- "```"
- "1."
- List item one.
- List item one
- one continued
- with a second
- second paragraph
- followed by an
- Indented block.
- $ ls *.sh
- $ mv *.sh ~/tmp
- List item
- item continued
- with a third
- third paragraph.
- "2."
- List item two
- two continued
- with an open
- an open block.
- This paragraph
- is part of the
- of the preceding
- list item.
- "1."
- This list is
- list is nested
- nested and does
- and does not
- does not require
- require explicit
- explicit item
- continuation.
- This paragraph
- is part of the
- of the preceding
- list item.
- 2. List item b.
- This paragraph
- belongs to item
- to item two of
- two of the outer
- " outer list.\n```"
- The AsciiDoc
- AsciiDoc version
- "version is,"
- "is, arguably,"
- ", easier to"
- to write.
- "You don't need"
- to worry about
- indentation.
- But the Markdown
- Markdown version
- version is much
- is much easier
- to read.
- The nesting of
- of list items is
- is apparent to
- to the eye in
- eye in the
- "source, not just"
- not just in the
- in the processed
- document.
- "##"
- Why is a spec
- a spec needed?
- "John Gruber's"
- "["
- canonical
- description of
- "of Markdown's"
- "'s\nsyntax"
- "](https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/syntax
- /syntax)
- does not specify
- specify the
- the syntax
- unambiguously.
- Here are some
- some examples of
- questions it
- it does not
- "does not answer:"
- "1."
- How much
- much indentation
- is needed for a
- for a sublist?
- The spec says
- says that
- continuation
- paragraphs need
- need to be
- to be indented
- indented four
- "four spaces, but"
- ", but is"
- not fully
- fully explicit
- explicit about
- about sublists.
- It is natural to
- to think that
- "they, too, must"
- ", must be"
- must be indented
- indented four
- "four spaces, but"
- "`Markdown.pl`"
- does
- not require that
- that.
- This is hardly a
- "\"corner case,\""
- and divergences
- between
- implementations
- on this issue
- issue often lead
- lead to
- to surprises for
- users in real
- real documents.
- (See
- "["
- this comment by
- by John
- Gruber
- "](https://"
- /web.archive.org
- /web/
- /20170611172104/
- "/http://"
- article.gmane.or
- gmane.org/
- gmane.text.markd
- xt.markdown.gene
- own.general/1997
- /1997).)
- "2."
- Is a blank line
- line needed
- needed before a
- before a block
- a block quote or
- quote or heading
- heading?
- Most
- implementations
- do not require
- require the
- the blank line.
- "However,"
- this can lead to
- to unexpected
- results in hard-
- in hard-wrapped
- "-wrapped text,"
- "text, and"
- also to
- to ambiguities
- in parsing (note
- (note that some
- implementations
- put the heading
- heading inside
- inside the
- "the blockquote,"
- ", while others"
- others do not).
- (John Gruber has
- has also spoken
- "["
- in favor of
- of requiring the
- the blank
- lines
- "](https://"
- /web.archive.org
- /web/
- /20170611172104/
- "/http://"
- article.gmane.or
- gmane.org/
- gmane.text.markd
- xt.markdown.gene
- own.general/2146
- /2146).)
- "3."
- Is a blank line
- line needed
- needed before an
- an indented code
- code block?
- "(`Markdown.pl`"
- "requires it, but"
- "it, but this is"
- this is not
- is not mentioned
- in the
- "documentation,"
- ", and some"
- implementations
- do not require
- require it.)
- "``` markdown"
- paragraph
- code?
- "```"
- "4."
- What is the
- is the exact
- exact rule for
- for determining
- when list items
- items get
- "wrapped in `<p>`"
- tags?
- Can a list be
- "be partially \""
- "\"loose\""
- "\" and partially"
- "\"tight\""
- "?"
- What should we
- we do with a
- with a list like
- like this?
- "``` markdown"
- 1. one
- 2. two
- 3. three
- "3. three\n    ```"
- Or this?
- "``` markdown"
- 1.  one
- "- a"
- "- b"
- 2.  two
- "2.  two\n    ```"
- (There are some
- some relevant
- comments by John
- by John Gruber
- "[here](https://"
- /web.archive.org
- /web/
- /20170611172104/
- "/http://"
- article.gmane.or
- gmane.org/
- gmane.text.markd
- xt.markdown.gene
- own.general/2554
- /2554).)
- "5."
- Can list markers
- markers be
- be indented?
- Can ordered list
- list markers be
- be right-aligned
- "-aligned?"
- "``` markdown"
- 8. item 1
- 9. item 2
- 10. item 2a
- "```"
- "6."
- Is this one list
- one list with a
- with a thematic
- thematic break
- break in its
- in its second
- "second item,"
- or two lists
- lists separated
- by a thematic
- thematic break?
- "``` markdown"
- "* a"
- "* * * * *"
- "    * b\n    ```"
- "7."
- When list
- list markers
- markers change
- change from
- from numbers to
- "to bullets, do"
- ", do we have"
- two lists or one
- or one?
- (The Markdown
- Markdown syntax
- description
- "suggests two,"
- but the perl
- the perl scripts
- scripts and many
- and many other
- implementations
- produce one.)
- "``` markdown"
- 1. fee
- 2. fie
- "-  foe"
- "-  fum"
- "-  fum\n    ```"
- "8."
- What are the
- the precedence
- rules for the
- for the markers
- markers of
- of inline
- inline structure
- "?"
- "For example, is"
- ", is the"
- is the following
- "a valid link, or"
- "link, or does"
- or does the code
- the code span
- take precedence
- "?"
- "``` markdown"
- "[a backtick (`)]"
- "(`)](/url) and ["
- ") and [another"
- another backtick
- "backtick (`)](/"
- "(`)](/url)."
- "```"
- "9."
- What are the
- the precedence
- rules for
- for markers of
- of emphasis and
- and strong
- emphasis?
- "For example, how"
- ", how should the"
- the following be
- be parsed?
- "``` markdown"
- "*foo *bar* baz*"
- "```"
- "10."
- What are the
- the precedence
- rules between
- between block-
- block-level and
- and inline-level
- structure?
- "For example, how"
- ", how should the"
- the following be
- be parsed?
- "``` markdown"
- "- `a long code"
- code span can
- span can contain
- contain a hyphen
- a hyphen like
- like this
- "- and it can"
- it can screw
- "screw things up`"
- "```"
- "11."
- Can list items
- items include
- include section
- section headings
- headings?  (
- "`Markdown.pl`"
- does not
- "allow this, but"
- ", but does allow"
- blockquotes to
- to include
- include headings
- headings.)
- "``` markdown"
- "- # Heading"
- "```"
- "12."
- Can list items
- items be empty?
- "``` markdown"
- "* a\n    *"
- "    *\n    * b"
- "    * b\n    ```"
- "13."
- Can link
- link references
- be defined
- defined inside
- inside block
- block quotes or
- or list items?
- "``` markdown"
- "> Blockquote ["
- " [foo].\n    >"
- "> [foo]: /url"
- "```"
- "14."
- If there are
- are multiple
- definitions for
- for the same
- "same reference,"
- ", which takes"
- precedence?
- "``` markdown"
- "[foo]: /url1"
- "[foo]: /url2"
- "[foo][]"
- "[foo][]\n    ```"
- In the absence
- absence of a
- "of a spec, early"
- implementers
- consulted
- "`Markdown.pl`"
- to resolve these
- ambiguities.
- But
- "`Markdown.pl`"
- "was quite buggy,"
- "buggy, and"
- gave manifestly
- bad results in
- "in many cases,"
- "cases, so it was"
- it was not a
- satisfactory
- replacement for
- for a spec.
- Because there is
- there is no
- no unambiguous
- "spec,"
- implementations
- have diverged
- considerably.
- "As a result,"
- "result, users"
- ", users are"
- are often
- often surprised
- to find that
- a document that
- that renders one
- one way on one
- on one system (
- "system (say, a"
- "(say, a GitHub"
- a GitHub wiki)
- renders
- differently on
- "on another (say,"
- "(say, converting"
- to docbook using
- pandoc).
- To make matters
- "matters worse,"
- "worse, because"
- because nothing
- nothing in
- in Markdown
- Markdown counts
- "as a \""
- "\"syntax error,\""
- the divergence
- "often isn'"
- t discovered
- right away.
- "##"
- About this
- this document
- This document
- attempts to
- to specify
- specify Markdown
- Markdown syntax
- unambiguously.
- It contains many
- many examples
- examples with
- with side-by-
- side-by-side
- by-side Markdown
- Markdown and
- HTML.
- These are
- are intended to
- to double as
- as conformance
- tests.  An
- accompanying
- script
- "`spec_tests.py`"
- can be used to
- used to run the
- run the tests
- against any
- any Markdown
- Markdown program
- "program:"
- python test/
- /spec_tests.py -
- "--spec spec.txt"
- spec.txt --
- "--program"
- "-program PROGRAM"
- Since this
- this document
- describes how
- how Markdown is
- is to be parsed
- parsed into
- an abstract
- abstract syntax
- "syntax tree, it"
- "tree, it would"
- it would have
- have made sense
- sense to use an
- use an abstract
- representation
- of the syntax
- syntax tree
- tree instead of
- of HTML.
- But HTML is
- HTML is capable
- of representing
- the structural
- distinctions we
- "we need to make,"
- "to make, and the"
- choice of HTML
- of HTML for the
- for the tests
- tests makes it
- it possible to
- to run the tests
- tests against
- an
- implementation
- without writing
- writing an
- an abstract
- abstract syntax
- syntax tree
- tree renderer.
- Note that not
- that not every
- every feature of
- of the HTML
- the HTML samples
- samples is
- is mandated by
- the spec.
- "For example, the"
- ", the spec says"
- says what counts
- counts as a link
- "destination, but"
- ", but it doesn'"
- t mandate that
- that non-ASCII
- ASCII characters
- in
- the URL be
- URL be percent-
- percent-encoded.
- To use the
- the automatic
- "tests,"
- implementers
- will need to
- need to provide
- provide a
- a renderer that
- that conforms to
- the expectations
- of the spec
- spec examples (
- (percent-
- percent-encoding
- non-ASCII
- ASCII characters
- in URLs).
- But a conforming
- implementation
- can use a
- use a different
- renderer and may
- and may choose
- choose not to
- percent-encode
- "-encode non-"
- non-ASCII
- ASCII characters
- in URLs.
- This document is
- is generated
- from a text file
- "file, `spec.txt`"
- ", written"
- in Markdown with
- with a small
- small extension
- for the side-by-
- side-by-side
- "-by-side tests."
- The script
- "`tools/"
- "/makespec.py`"
- can be used to
- used to convert
- "`spec.txt` into"
- HTML or
- or CommonMark (
- (which can then
- can then be
- be converted
- into other
- other formats).
- "In the examples,"
- ", the `→`"
- character is
- is used to
- to represent
- tabs.
- "# Preliminaries"
- "##"
- Characters and
- and lines
- Any sequence of
- "[characters]"
- is a valid
- valid CommonMark
- document.
- "A [character](@)"
- is a Unicode
- Unicode code
- code point.
- Although some
- code points (for
- "(for example,"
- ", combining"
- accents) do not
- not correspond
- to
- characters in an
- in an intuitive
- "sense, all code"
- all code points
- points count as
- as characters
- for purposes of
- of this spec.
- This spec does
- does not specify
- specify an
- an encoding; it
- ; it thinks of
- of lines as
- " as composed\nof"
- "of [characters]"
- rather than
- than bytes.
- A conforming
- parser may be
- may be limited
- to a certain
- certain encoding
- encoding.
- "A [line](@)"
- is a sequence of
- of zero or more
- "[characters]"
- other than line
- line feed (
- "`U+000A`"
- ) or carriage
- carriage return
- "return (`U+000D`"
- "`U+000D`),"
- "),\nfollowed by a"
- "[line ending]"
- or by the end of
- end of file.
- A
- "[line ending](@)"
- is a line feed (
- "`U+000A`"
- "), a carriage"
- carriage return
- "(`U+000D`"
- ) not followed
- followed by a
- "by a line feed,"
- "feed, or a"
- ", or a carriage"
- carriage return
- return and a
- following line
- line feed.
- A line
- line containing
- "no characters,"
- ", or a line"
- line containing
- " only spaces\n("
- "(`U+0020`"
- ) or tabs (
- "`U+0009`"
- "), is called a"
- "[blank line](@)."
- The following
- definitions of
- of character
- classes will be
- will be used in
- used in this
- "in this spec:"
- A
- "[Unicode"
- whitespace
- "character](@)"
- is a character
- in the Unicode
- "`Zs` general"
- "category, or a"
- ", or a tab ("
- "`U+0009`"
- "), line feed ("
- "`U+000A`"
- "), form feed ("
- "`U+000C`), or"
- carriage return
- "return (`U+000D`"
- "`U+000D`)."
- "[Unicode"
- "whitespace](@)"
- is a sequence of
- of one or more
- "["
- Unicode
- whitespace
- "characters]."
- "A [tab](@) is"
- "is `U+0009`."
- "A [space](@) is"
- "is `U+0020`."
- An
- "[ASCII control"
- "character](@)"
- is a character
- between
- "`U+0000–1F`"
- (both
- including) or
- "`U+007F`."
- An
- "[ASCII"
- punctuation
- "character](@)"
- "is `!`, `\"`, `#`"
- "`\"`, `#`, `$`,"
- ", `$`, `%`, `&`,"
- ", `&`, `'`, `(`,"
- ", `(`, `)`,\n`*`,"
- ",\n`*`, `+`, `,`,"
- ", `,`, `-`, `.`,"
- ", `.`, `/`"
- "`/` (U+0021–2F),"
- "`:`, `;`, `<`,"
- ", `<`, `=`, `>`,"
- ", `>`, `?`, `@`"
- "(U+003A–0040),"
- "`[`, `\\`, `]`,"
- ", `]`, `^`, `_`,"
- ", `_`, `` ` ``"
- "(U+005B–0060),"
- "`{`, `|`, `}`"
- "`|`, `}`, or `~`"
- (U+007B–007E).
- A
- "[Unicode"
- punctuation
- "character](@)"
- is a character
- in the Unicode
- "`P`"
- (puncuation) or
- "`S`"
- (symbol) general
- categories.
- "## Tabs"
- Tabs in lines
- in lines are not
- are not expanded
- "expanded to ["
- "[spaces]"
- "].  However,"
- in contexts
- contexts where
- where spaces
- spaces help to
- help to define
- define block
- "block structure,"
- tabs behave as
- as if they were
- were replaced by
- by spaces with a
- with a tab stop
- of 4 characters.
- "Thus, for"
- ", for example, a"
- ", a tab can be"
- can be used
- be used instead
- instead of four
- of four spaces
- in an indented
- indented code
- code block.
- "(Note, however,"
- "however, that"
- ", that internal"
- tabs are passed
- passed through
- through as
- "as literal tabs,"
- "tabs, not"
- ", not expanded"
- expanded to
- spaces.)
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "→foo→baz→→bim\n."
- "<pre><code>foo→"
- ">foo→baz→→bim"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- →foo→baz→→bim
- "."
- "<pre><code>foo→"
- ">foo→baz→→bim"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    a→a\n    ὐ→a"
- "    ὐ→a\n."
- ".\n<pre><code>a→a"
- ὐ→a
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- In the following
- "example, a"
- ", a continuation"
- paragraph of a
- of a list
- item is indented
- indented with a
- with a tab; this
- ; this has
- this has exactly
- exactly the same
- the same effect
- as indentation
- with four spaces
- "spaces would:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "  - foo\n\n→bar\n."
- "→bar\n.\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<p>bar</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n\n→→bar\n."
- "→→bar\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<pre><code>  bar"
- "</code></pre>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Normally the `>`"
- that begins a
- begins a block
- a block quote
- quote may be
- may be followed
- optionally by a
- "by a space,"
- "a space, which"
- ", which is not"
- not considered
- part of the
- content.
- In the following
- "case `>`"
- is followed by a
- "by a tab,"
- which is treated
- treated as if it
- as if it were
- it were expanded
- expanded into
- into three
- three spaces.
- Since one of
- one of these
- of these spaces
- spaces is
- is considered
- part of the
- "delimiter, `foo`"
- is considered to
- to be indented
- indented six
- six spaces
- inside the block
- block quote
- "quote context,"
- "context, so we"
- ", so we get an"
- get an indented
- code block
- block starting
- starting with
- with two spaces.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">→→foo\n."
- ".\n<blockquote>"
- "<pre><code>  foo"
- "</code></pre>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-→→foo\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<pre><code>  foo"
- "</code></pre>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    foo\n→bar\n."
- ".\n<pre><code>foo"
- bar
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " - foo\n   - bar"
- "   - bar\n→ - baz"
- "→ - baz\n.\n<ul>"
- ".\n<ul>\n<li>foo"
- "<li>foo\n<ul>"
- "<ul>\n<li>bar"
- "<li>bar\n<ul>"
- "<li>baz</li>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "#→Foo\n."
- ".\n<h1>Foo</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*→*→*→\n.\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Insecure
- characters
- For security
- security reasons
- "reasons, the"
- ", the Unicode"
- character
- "`U+0000`"
- must be replaced
- with the
- the REPLACEMENT
- CHARACTER (
- "`U+FFFD`)."
- "##"
- Backslash
- escapes
- Any ASCII
- punctuation
- character may be
- may be backslash
- "-escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\!"
- "\\\"\\#\\$\\%\\&\\'\\(\\)"
- "\\&\\'\\(\\)\\*\\+\\,\\-"
- "\\*\\+\\,\\-\\."
- "\\/\\:\\;\\<\\=\\>\\?"
- "\\@\\[\\\\\\]\\^\\_\\`\\{"
- "\\^\\_\\`\\{\\|\\}\\~\n."
- ".\n<p>!"
- "&quot;#$%&amp;'("
- "%&amp;'()*+,-./:"
- ")*+,-./:;&lt;=&"
- ":;&lt;=&gt;?"
- "@[\\]^_`{|}~</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Backslashes
- before other
- other characters
- are treated as
- as literal
- "backslashes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\→\\A\\a\\ \\3\\φ\\«\n."
- "<p>\\→\\A\\a\\ \\3\\φ\\"
- "a\\ \\3\\φ\\«</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Escaped
- characters are
- are treated as
- as regular
- characters and
- and do
- not have their
- their usual
- usual Markdown
- "meanings:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\*not emphasized"
- "*"
- "\\<br/> not a tag"
- "\\[not a link](/"
- "link](/foo)"
- "\\`not code`"
- "1\\. not a list"
- "\\* not a list"
- "\\# not a heading"
- "\\[foo]: /url \""
- ": /url \"not a"
- "\"not a reference"
- "\""
- "\\&ouml; not a"
- not a character
- " entity\n."
- "<p>*not"
- ">*not emphasized"
- "*"
- "&lt;br/&gt; not"
- "&gt; not a tag"
- "[not a link](/"
- "link](/foo)"
- "`not code`"
- 1. not a list
- "* not a list"
- "# not a heading"
- "[foo]: /url &"
- ": /url &quot;not"
- quot;not a
- ;not a reference
- "&quot;"
- "&amp;ouml; not a"
- not a character
- entity</p>
- "````````````````"
- "````````````````"
- "````````````````"
- If a backslash
- is itself
- "itself escaped,"
- "escaped, the"
- ", the following"
- character is not
- "is not:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\\\*emphasis*\n."
- "<p>\\<em>emphasis"
- emphasis</em></p
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A backslash at
- at the end of
- end of the line
- "the line is a ["
- "[hard line break"
- "]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\\\nbar\n."
- ".\n<p>foo<br />"
- bar</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash
- escapes do not
- do not work in
- work in code
- "in code blocks,"
- "blocks, code"
- ", code spans,"
- "spans, autolinks"
- ", or\nraw HTML:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`` \\[\\` ``\n."
- "<p><code>\\[\\`</"
- ">\\[\\`</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    \\[\\]\n."
- "<pre><code>\\[\\]"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "~~~\n\\[\\]\n~~~\n."
- "<pre><code>\\[\\]"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<https://"
- "://example.com?"
- "find=\\*>\n."
- "<p><a href=\""
- "a href=\"https://"
- "://example.com?"
- "find=%5C*\">https"
- "*\">https://"
- "://example.com?"
- "find=\\*</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"/bar\\/)"
- "\"/bar\\/)\">\n."
- "<a href=\"/bar\\/)"
- "\"/bar\\/)\">"
- "````````````````"
- "````````````````"
- "````````````````"
- But they work in
- work in all
- in all other
- "other contexts,"
- ", including URLs"
- URLs and link
- "and link titles,"
- "link references,"
- ", and ["
- "[info strings]"
- "] in ["
- fenced code
- "code blocks]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo](/bar\\* \"ti"
- "\\* \"ti\\*tle\")\n."
- "<p><a href=\"/bar"
- "=\"/bar*\" title=\""
- "title=\"ti*tle\">"
- "ti*tle\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]"
- "[foo]: /bar\\* \""
- "/bar\\* \"ti\\*tle\""
- "."
- "<p><a href=\"/bar"
- "=\"/bar*\" title=\""
- "title=\"ti*tle\">"
- "ti*tle\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``` foo\\+bar\nfoo"
- "foo\n```\n."
- "<pre><code class"
- "class=\"language-"
- "-foo+bar\">foo"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Entity and
- and numeric
- character
- references
- Valid HTML
- HTML entity
- references and
- and numeric
- character
- references
- can be used in
- used in place of
- place of the
- corresponding
- Unicode
- "character,"
- with the
- the following
- "exceptions:"
- "-"
- Entity and
- and character
- references are
- are not
- not recognized
- in code
- blocks and code
- and code spans.
- "-"
- Entity and
- and character
- references
- cannot stand in
- stand in place
- in place of
- special
- characters that
- that define
- structural
- elements in
- CommonMark.
- "For example,"
- ", although"
- "`&#42;`"
- can be used
- in place of a
- "of a literal `*`"
- "`*` character,"
- "`&#42;`"
- cannot replace
- "`*`"
- in emphasis
- "delimiters,"
- ", bullet list"
- "list markers, or"
- ", or thematic"
- breaks.
- Conforming
- CommonMark
- parsers need not
- need not store
- information
- about
- whether a
- a particular
- character was
- was represented
- in the source
- using a Unicode
- character or an
- or an entity
- entity reference
- "."
- "[Entity"
- "references](@)"
- "consist of `&`"
- + any of the
- of the valid
- HTML5 entity
- entity names +
- "`;`. The"
- ". The\ndocument"
- "<https://"
- html.spec.whatwg
- c.whatwg.org/
- /entities.json>
- is used as an
- an authoritative
- source for the
- for the valid
- valid entity
- references and
- and their
- corresponding
- code points.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&nbsp; &amp; &"
- "&amp; &copy; &"
- "&copy; &AElig; &"
- AElig; &Dcaron;
- "&frac34; &"
- ; &HilbertSpace;
- ; &DifferentialD
- ;
- "&"
- ClockwiseContour
- eContourIntegral
- "; &ngE;\n."
- "<p>  &amp; © Æ Ď"
- "¾ ℋ ⅆ\n∲ ≧̸</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "["
- Decimal numeric
- character
- "references](@)"
- "](@)\nconsist of"
- "`&#`"
- + a string of 1
- "--"
- 7 arabic digits
- "digits + `;`. A"
- numeric
- character
- reference is
- is parsed as the
- corresponding
- Unicode
- character.
- Invalid Unicode
- Unicode code
- code points will
- will be replaced
- replaced by
- the REPLACEMENT
- CHARACTER (
- "`U+FFFD`"
- ).
- For security
- security reasons
- "reasons,"
- the code point
- "`U+0000`"
- will also be
- also be replaced
- replaced by
- "`U+FFFD`."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&#35; &#1234; &#"
- "1234; &#992; &#0"
- "992; &#0;\n."
- ".\n<p># Ӓ Ϡ �</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "["
- Hexadecimal
- numeric
- character
- "references](@)"
- "](@) consist of"
- "`&#` +\neither"
- "either `X` or"
- "`X` or `x`"
- + a string of 1-
- of 1-6
- 1-6 hexadecimal
- "digits + `;`."
- They too are
- too are parsed
- parsed as the
- corresponding
- Unicode
- character (this
- time specified
- with a
- a hexadecimal
- numeral instead
- instead of
- of decimal).
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&#X22; &#XD06; &"
- "#XD06; &#xcab;\n."
- "<p>&quot; ആ ಫ</p"
- ; ആ ಫ</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Here are some
- some nonentities
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&nbsp &x; &#; &#"
- "; &#; &#x;"
- "&#87654321;"
- "&#abcdef0;"
- "&"
- ThisIsNotDefined
- "; &hi?;\n."
- "<p>&amp;nbsp &"
- ;nbsp &amp;x; &
- "amp;x; &amp;#; &"
- "amp;#; &amp;#x;"
- "&amp;#87654321;"
- "&amp;#abcdef0;"
- "&amp;"
- ThisIsNotDefined
- ; &amp;hi?;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Although HTML5
- HTML5 does
- does accept some
- some entity
- references
- without a
- a trailing
- semicolon (such
- "(such as `&copy`"
- "), these are not"
- "recognized here,"
- "here, because it"
- it makes the
- the grammar too
- "too ambiguous:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&copy\n."
- "<p>&amp;copy</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Strings that are
- that are not on
- not on the list
- the list of
- list of HTML5
- of HTML5 named
- named entities
- entities are not
- recognized as
- as entity
- references
- "either:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&MadeUpEntity;\n."
- "<p>&amp;"
- amp;MadeUpEntity
- ;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Entity and
- and numeric
- character
- references are
- are recognized
- in any
- context besides
- besides code
- code spans or
- spans or code
- "or code blocks,"
- ", including"
- "URLs, ["
- "[link titles]"
- "], and ["
- fenced code
- "code block][] ["
- "[] [info strings"
- "]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"&ouml;&"
- "\"&ouml;&ouml;."
- ";&ouml;.html\">\n."
- "<a href=\"&ouml;&"
- "\"&ouml;&ouml;."
- ";&ouml;.html\">"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo](/f&ouml;&"
- "f&ouml;&ouml; \"f"
- "ouml; \"f&ouml;&"
- "f&ouml;&ouml;\")"
- "."
- "<p><a href=\"/f%"
- "=\"/f%C3%B6%C3%B6"
- "B6%C3%B6\" title="
- "\" title=\"föö\">"
- "=\"föö\">foo</a></"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]"
- "[foo]: /f&ouml;&"
- "f&ouml;&ouml; \"f"
- "ouml; \"f&ouml;&"
- "f&ouml;&ouml;\"\n."
- "<p><a href=\"/f%"
- "=\"/f%C3%B6%C3%B6"
- "B6%C3%B6\" title="
- "\" title=\"föö\">"
- "=\"föö\">foo</a></"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``` f&ouml;&ouml"
- ";&ouml;\nfoo\n```"
- "foo\n```\n."
- "<pre><code class"
- "class=\"language-"
- "-föö\">foo"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Entity and
- and numeric
- character
- references are
- are treated as
- as literal
- text in code
- in code spans
- spans and code
- "and code blocks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`f&ouml;&ouml;`"
- "."
- "<p><code>f&amp;"
- ">f&amp;ouml;&amp"
- ;&amp;ouml;</
- ;ouml;</code></p
- code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- f&ouml;f&ouml;
- "."
- "<pre><code>f&amp"
- ">f&amp;ouml;f&"
- ;ouml;f&amp;ouml
- amp;ouml;
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Entity and
- and numeric
- character
- references
- cannot be used
- in place of
- place of symbols
- indicating
- structure in
- in CommonMark
- documents.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&#42;foo&#42;"
- "*foo*\n.\n<p>*foo*"
- "<em>foo</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&#42; foo\n\n* foo"
- "* foo\n."
- ".\n<p>* foo</p>"
- "<ul>"
- "<li>foo</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo&#10;&#10;bar"
- ".\n<p>foo"
- "<p>foo\n\nbar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "&#9;foo\n."
- ".\n<p>→foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[a](url &quot;"
- "&quot;tit&quot;)"
- "."
- "<p>[a](url &quot"
- "&quot;tit&quot;)"
- "&quot;)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "#"
- Blocks and
- and inlines
- We can think of
- think of a
- of a document as
- as a sequence of
- "[blocks](@)---"
- structural
- elements like
- "like paragraphs,"
- ", block"
- "quotations,"
- ", lists,"
- "lists, headings,"
- ", rules, and"
- ", and code"
- and code blocks.
- Some blocks (
- blocks (like
- block quotes and
- and list items)
- items) contain
- contain other
- other blocks;
- blocks; others (
- others (like
- headings and
- and paragraphs)
- ) contain
- "[inline](@)"
- "content---text,"
- "links,"
- ", emphasized"
- "text, images,"
- "images, code"
- ", code spans,"
- "spans, and so on"
- so on.
- "## Precedence"
- Indicators of
- of block
- block structure
- always take
- take precedence
- over indicators
- of inline
- inline structure
- "."
- "So, for example,"
- "example, the"
- ", the following"
- is a list with
- "two items, not a"
- ", not a list"
- a list with one
- with one item
- item containing
- "a code span:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- `one\n- two`\n."
- "- two`\n.\n<ul>"
- "<li>`one</li>"
- "<li>two`</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- This means that
- that parsing can
- can proceed in
- "in two steps:"
- "steps:  first,"
- "first, the block"
- structure of the
- of the document
- document can be
- can be discerned
- "; second, text"
- ", text lines"
- lines inside
- "paragraphs,"
- ", headings, and"
- ", and other"
- other block
- block constructs
- can be parsed
- parsed for
- for inline
- structure.
- The second step
- step requires
- information
- about link
- link reference
- definitions that
- that will be
- be available
- only at the end
- the end of the
- of the first
- step.
- Note that the
- that the first
- first step
- step requires
- processing lines
- lines in
- "in sequence,"
- but the second
- second can be
- "be parallelized,"
- ", since the"
- the inline
- inline parsing
- parsing of
- one block
- block element
- element does not
- does not affect
- affect the
- the inline
- inline parsing
- parsing of any
- of any other.
- "##"
- Container blocks
- blocks and leaf
- and leaf blocks
- We can divide
- divide blocks
- blocks into two
- "into two types:"
- "[container"
- "blocks](#"
- "](#container-"
- "-blocks),"
- which can
- can contain
- contain other
- "other blocks,"
- "blocks, and"
- "[leaf blocks](#"
- "](#leaf-blocks),"
- ",\nwhich cannot."
- "# Leaf blocks"
- This section
- describes the
- the different
- kinds of leaf
- of leaf block
- block that make
- make up a
- Markdown
- document.
- "##"
- Thematic breaks
- A line
- line consisting
- of optionally up
- up to three
- to three spaces
- spaces of
- "of indentation,"
- ", followed by a"
- sequence of
- of three or more
- or more matching
- "`-`, `_`, or `*`"
- "characters, each"
- ", each followed"
- optionally by
- by any number of
- of spaces or
- "or tabs, forms a"
- "[thematic break]"
- "break](@)."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "***\n---\n___\n."
- "___\n.\n<hr />"
- ".\n<hr />\n<hr />"
- "<hr />\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- Wrong characters
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "+++\n.\n<p>+++</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "===\n.\n<p>===</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Not enough
- "characters:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "--\n**\n__\n.\n<p>--"
- ".\n<p>--\n**"
- "<p>--\n**\n__</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Up to three
- to three spaces
- spaces of
- of indentation
- "are allowed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " ***\n  ***"
- "  ***\n   ***\n."
- "   ***\n.\n<hr />"
- ".\n<hr />\n<hr />"
- "<hr />\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    ***\n."
- ".\n<pre><code>***"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n    ***\n."
- ".\n<p>Foo\n***</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- More than three
- three characters
- "may be used:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ________________
- ________________
- ________________
- "_____________\n."
- ".\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- Spaces and tabs
- and tabs are
- tabs are allowed
- allowed between
- between the
- "the characters:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " - - -\n.\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**  * ** * ** *"
- "* * ** * **\n."
- ".\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-     -      -"
- "-      -      -"
- ".\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- Spaces and tabs
- and tabs are
- tabs are allowed
- allowed at the
- "at the end:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- - - -    \n."
- ".\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, no"
- ", no other"
- other characters
- may occur in the
- "in the line:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- _ _ _ _ a
- "a------\n\n---a---"
- "---a---\n."
- "<p>_ _ _ _ a</p>"
- "<p>a------</p>"
- "<p>---a---</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- It is required
- required that
- that all of the
- the characters
- other than
- than spaces or
- or tabs be the
- be the same.
- "So, this is not"
- is not a
- not a thematic
- "thematic break:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " *-*\n."
- "<p><em>-</em></p"
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Thematic breaks
- breaks do not
- do not need
- not need blank
- blank lines
- lines before or
- "or after:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n***\n- bar"
- "- bar\n.\n<ul>"
- "<li>foo</li>"
- "</ul>\n<hr />"
- "<hr />\n<ul>"
- "<li>bar</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- Thematic breaks
- breaks can
- can interrupt a
- "a paragraph:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n***\nbar\n."
- "bar\n.\n<p>Foo</p>"
- "<hr />"
- "<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- If a line of
- line of dashes
- dashes that
- that meets the
- the above
- above conditions
- for being a
- thematic break
- break could also
- also be
- be interpreted
- as the underline
- "of a [setext"
- "[setext\nheading]"
- ", the"
- interpretation
- " as a\n["
- "[setext heading]"
- takes precedence
- "."
- "Thus, for"
- ", for example,"
- this is a setext
- a setext heading
- "heading, not a"
- not a paragraph
- followed by a
- by a thematic
- "thematic break:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n---\nbar\n."
- ".\n<h2>Foo</h2>"
- "<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- When both a
- both a thematic
- thematic break
- break and a list
- a list item are
- are possible
- interpretations
- "of a line, the"
- ", the thematic"
- thematic break
- break takes
- takes precedence
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "* Foo\n* * *"
- "* * *\n* Bar\n."
- "* Bar\n.\n<ul>"
- "<li>Foo</li>"
- "</ul>\n<hr />"
- "<hr />\n<ul>"
- "<li>Bar</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- If you want a
- want a thematic
- thematic break
- break in a list
- "a list item, use"
- ", use a"
- use a different
- "bullet:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- Foo\n- * * *\n."
- ".\n<ul>"
- "<li>Foo</li>"
- "<li>\n<hr />"
- "<hr />\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "## ATX headings"
- An
- "[ATX heading](@)"
- consists of a
- of a string of
- "of characters,"
- ", parsed as"
- as inline
- "inline content,"
- "content, between"
- between an
- opening sequence
- sequence of 1--
- "--6 unescaped"
- "`#`"
- characters and
- and an optional
- closing sequence
- sequence of any
- of any number of
- "of unescaped `#`"
- "`#` characters."
- The opening
- opening sequence
- "sequence of `#`"
- characters must
- must be followed
- followed by
- by spaces or
- "or tabs, or"
- by the end of
- end of line.
- The optional
- optional closing
- closing sequence
- "sequence of `#`"
- s must be
- must be preceded
- preceded by
- spaces or tabs
- or tabs and may
- and may be
- may be followed
- followed by
- by spaces or
- or tabs only.
- "The opening\n`#`"
- character may be
- may be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- of indentation.
- The raw
- contents of the
- of the heading
- heading are
- are stripped of
- of leading and
- and trailing
- trailing space
- space or tabs
- before being
- being parsed as
- as inline
- inline content.
- The heading
- heading level is
- level is equal
- is equal to the
- to the number
- "of `#`"
- characters in
- in the opening
- opening sequence
- sequence.
- "Simple headings:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "# foo\n## foo"
- "## foo\n### foo"
- "### foo\n#### foo"
- "##### foo"
- "###### foo\n."
- ".\n<h1>foo</h1>"
- "<h2>foo</h2>"
- "<h3>foo</h3>"
- "<h4>foo</h4>"
- "<h5>foo</h5>"
- "<h6>foo</h6>"
- "````````````````"
- "````````````````"
- "````````````````"
- More than six
- "`#`"
- characters is
- is not a heading
- "heading:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "####### foo\n."
- "<p>####### foo</"
- "## foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- At least one
- one space or tab
- or tab is
- tab is required
- required between
- "between the `#`"
- characters and
- " and the\nheading"
- "heading'"
- "s contents,"
- ", unless the"
- the heading is
- is empty.
- Note that many
- implementations
- currently do not
- do not require
- require the
- the space.
- "However, the"
- space was
- was required by
- by the
- "[original ATX"
- "implementation]("
- "](http://"
- /www.aaronsw.com
- /2002/atx/atx.py
- "/atx.py),"
- and it helps
- it helps prevent
- prevent things
- things like the
- the following
- from being
- being parsed as
- "headings:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "#5 bolt"
- "#hashtag\n."
- ".\n<p>#5 bolt</p>"
- "<p>#hashtag</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not a
- is not a heading
- "heading, because"
- because the
- "the first `#`"
- "`#` is escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\## foo\n."
- ".\n<p>## foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Contents are
- are parsed as
- "as inlines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "# foo *bar* \\*"
- "*bar* \\*baz\\*\n."
- "<h1>foo <em>bar<"
- "<em>bar</em> *"
- "</em> *baz*</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- Leading and
- and trailing
- trailing spaces
- spaces or tabs
- or tabs are
- tabs are ignored
- ignored in
- in parsing
- parsing inline
- "inline content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "#"
- foo
- ".\n<h1>foo</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- Up to three
- to three spaces
- spaces of
- of indentation
- "are allowed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "### foo"
- "## foo"
- "   # foo\n."
- ".\n<h3>foo</h3>"
- "<h2>foo</h2>"
- "<h1>foo</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    # foo\n."
- "<pre><code># foo"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\n    # bar\n."
- ".\n<p>foo"
- "<p>foo\n# bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A closing
- closing sequence
- "sequence of `#`"
- characters is
- "is optional:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "## foo ##"
- "###   bar    ###"
- ".\n<h2>foo</h2>"
- "<h3>bar</h3>"
- "````````````````"
- "````````````````"
- "````````````````"
- It need not be
- not be the same
- the same length
- length as the
- as the opening
- opening sequence
- "sequence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "# foo ##########"
- "################"
- "################"
- "################"
- "##### foo ##\n."
- ".\n<h1>foo</h1>"
- "<h5>foo</h5>"
- "````````````````"
- "````````````````"
- "````````````````"
- Spaces or tabs
- or tabs are
- tabs are allowed
- allowed after
- after the
- the closing
- closing sequence
- "sequence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "### foo ###"
- ".\n<h3>foo</h3>"
- "````````````````"
- "````````````````"
- "````````````````"
- A sequence of
- "`#`"
- characters with
- with anything
- anything but
- but spaces or
- or tabs
- tabs following
- it
- is not a closing
- closing sequence
- "sequence, but"
- ", but counts as"
- as part of the
- of the contents
- contents of the
- "heading:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "### foo ### b\n."
- "<h3>foo ### b</"
- "### b</h3>"
- "````````````````"
- "````````````````"
- "````````````````"
- The closing
- closing sequence
- sequence must be
- must be preceded
- preceded by a
- by a space or
- "space or tab:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "# foo#\n."
- ".\n<h1>foo#</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash-
- "-escaped `#`"
- characters do
- do not count as
- count as part
- of the closing
- closing sequence
- "sequence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "### foo \\###"
- "## foo #\\##"
- "# foo \\#\n."
- "<h3>foo ###</h3>"
- "<h2>foo ###</h2>"
- "<h1>foo #</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- ATX headings
- headings need
- need not be
- not be separated
- from surrounding
- content by blank
- "lines, and they"
- and they can
- can interrupt
- "paragraphs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "****\n## foo\n****"
- "****\n.\n<hr />"
- "<h2>foo</h2>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo bar\n# baz"
- "# baz\nBar foo\n."
- ".\n<p>Foo bar</p>"
- "<h1>baz</h1>"
- "<p>Bar foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- ATX headings can
- "can be empty:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "## \n#\n### ###\n."
- ".\n<h2></h2>"
- "<h1></h1>"
- "<h3></h3>"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Setext headings
- A
- "[setext heading]"
- "heading](@)"
- consists of one
- of one or more
- "lines of text,"
- "of text, not"
- not interrupted
- "by a blank line,"
- "line, of which"
- of which the
- the first line
- line does not
- have more than 3
- than 3 spaces of
- "of indentation,"
- ", followed by\na"
- "a ["
- setext heading
- "underline]"
- "."
- The lines of
- lines of text
- of text must be
- must be such
- "that, were they"
- they not
- not followed by
- by the setext
- setext heading
- "underline,"
- they would be
- be interpreted
- "as a paragraph:"
- ":  they cannot"
- cannot be
- interpretable as
- "as a [code fence"
- "], [ATX heading]"
- "][ATX headings],"
- "],\n[block quote]"
- "][block quotes],"
- "], ["
- "[thematic break]"
- "]["
- "[thematic breaks"
- "],\n[list item]["
- "][list items]"
- "], or ["
- ", or [HTML block"
- "][HTML blocks]."
- A
- "[setext heading"
- "underline](@)"
- is a sequence of
- "`=`"
- characters or a
- or a sequence of
- "`-`"
- "characters, with"
- ", with no more"
- no more than 3
- spaces of
- of indentation
- and any number
- number of
- of trailing
- trailing spaces
- spaces or tabs.
- The heading is a
- is a level 1
- level 1 heading
- "heading if `=`"
- characters are
- " are used in\nthe"
- "the ["
- setext heading
- "underline]"
- ", and a level 2"
- level 2 heading
- "heading if `-`"
- characters are
- are used.
- The contents of
- of the heading
- heading are the
- are the result
- of parsing the
- the preceding
- lines of text as
- as CommonMark
- " inline\ncontent."
- "In general, a"
- ", a setext"
- a setext heading
- heading need not
- need not be
- not be preceded
- preceded or
- or followed by a
- blank line.
- "However, it"
- ", it cannot"
- cannot interrupt
- "a paragraph, so"
- ", so when a"
- setext heading
- heading comes
- comes after a
- "a paragraph, a"
- ", a blank line"
- line is needed
- needed between
- them.
- "Simple examples:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- Foo *bar*
- "========="
- Foo *bar*
- "---------\n."
- "<h1>Foo <em>bar<"
- "<em>bar</em></h1"
- /em></h1>
- "<h2>Foo <em>bar<"
- "<em>bar</em></h2"
- /em></h2>
- "````````````````"
- "````````````````"
- "````````````````"
- The content of
- of the header
- header may span
- may span more
- more than one
- "than one line:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo *bar\nbaz*"
- "baz*\n====\n."
- "<h1>Foo <em>bar"
- baz</em></h1>
- "````````````````"
- "````````````````"
- "````````````````"
- The contents are
- are the result
- result of
- of parsing the
- "the headings'"
- "'s raw"
- content as
- as inlines.
- "The heading'"
- s raw content is
- is formed by
- concatenating
- the lines and
- and removing
- removing initial
- initial and
- and final
- spaces or tabs.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "  Foo *bar\nbaz*→"
- "baz*→\n====\n."
- "<h1>Foo <em>bar"
- baz</em></h1>
- "````````````````"
- "````````````````"
- "````````````````"
- The underlining
- can be any
- "be any length:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- Foo
- "----------------"
- "----------------"
- "---------\n\nFoo\n="
- "Foo\n=\n."
- "=\n.\n<h2>Foo</h2>"
- "<h1>Foo</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- The heading
- heading content
- content can be
- can be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- "of indentation,"
- ", and"
- need not line up
- line up with the
- "the underlining:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "   Foo\n---"
- "---\n\n  Foo\n-----"
- "-----\n\n  Foo"
- "  Foo\n  ===\n."
- ".\n<h2>Foo</h2>"
- "<h2>Foo</h2>"
- "<h1>Foo</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    Foo\n    ---"
- "    ---\n\n    Foo"
- "    Foo\n---\n."
- ".\n<pre><code>Foo"
- "---\n\nFoo"
- "</code></pre>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- The setext
- setext heading
- underline can be
- can be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- "indentation, and"
- ", and may have"
- have trailing
- trailing spaces
- "spaces or tabs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n   ----"
- "   ----      \n."
- ".\n<h2>Foo</h2>"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n    ---\n."
- ".\n<p>Foo\n---</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The setext
- setext heading
- underline cannot
- cannot contain
- contain internal
- internal spaces
- "spaces or tabs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n= =\n\nFoo"
- "= =\n\nFoo\n--- -\n."
- "--- -\n.\n<p>Foo"
- ".\n<p>Foo\n= =</p>"
- "<p>Foo</p>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- Trailing spaces
- spaces or tabs
- or tabs in the
- in the content
- content line do
- line do not
- do not cause a
- cause a hard
- a hard line
- "line break:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo  \n-----\n."
- ".\n<h2>Foo</h2>"
- "````````````````"
- "````````````````"
- "````````````````"
- Nor does a
- does a backslash
- "at the end:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\\\n----\n."
- ".\n<h2>Foo\\</h2>"
- "````````````````"
- "````````````````"
- "````````````````"
- Since indicators
- of block
- block structure
- take precedence
- over
- indicators of
- of inline
- inline structure
- ", the following"
- are setext
- "setext headings:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`Foo\n----\n`"
- "<a title=\"a lot"
- "---\nof dashes\"/>"
- ".\n<h2>`Foo</h2>"
- "<p>`</p>"
- "<h2>&lt;a title="
- a title=&quot;a
- "=&quot;a lot</h2"
- lot</h2>
- "<p>of dashes&"
- dashes&quot;/&gt
- ;/&gt;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- The setext
- setext heading
- underline cannot
- "cannot be a ["
- lazy
- continuation
- "line]"
- in a list item
- item or block
- "or block quote:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> Foo\n---\n."
- ".\n<blockquote>"
- "<p>Foo</p>"
- "</blockquote>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\nbar\n===\n."
- ".\n<blockquote>"
- "<p>foo\nbar"
- "bar\n===</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- Foo\n---\n.\n<ul>"
- "<li>Foo</li>"
- "</ul>\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- A blank line is
- line is needed
- needed between a
- a paragraph and
- and a following
- "setext heading,"
- "heading, since"
- since otherwise
- the paragraph
- becomes part
- "of the heading'"
- "'s content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\nBar\n---\n."
- "---\n.\n<h2>Foo"
- "<h2>Foo\nBar</h2>"
- "````````````````"
- "````````````````"
- "````````````````"
- But in general a
- a blank line is
- line is not
- is not required
- required before
- before or after
- "setext headings:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "---\nFoo\n---\nBar"
- "---\nBar\n---\nBaz"
- "---\nBaz\n.\n<hr />"
- "<h2>Foo</h2>"
- "<h2>Bar</h2>"
- "<p>Baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Setext headings
- headings cannot
- "cannot be empty:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "====\n."
- ".\n<p>====</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Setext heading
- heading text
- text lines must
- must not be
- be interpretable
- as block
- constructs other
- other than
- than paragraphs.
- "So, the line of"
- line of dashes
- in these
- these examples
- examples gets
- gets interpreted
- as a thematic
- "thematic break:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "---\n---\n.\n<hr />"
- ".\n<hr />\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n-----\n."
- "-----\n.\n<ul>"
- "<li>foo</li>"
- "</ul>\n<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    foo\n---\n."
- ".\n<pre><code>foo"
- "</code></pre>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\n-----\n."
- ".\n<blockquote>"
- "<p>foo</p>"
- "</blockquote>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- If you want a
- want a heading
- heading with
- "`> foo`"
- as its literal
- "literal text,"
- "text, you can"
- use backslash
- "escapes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\> foo\n------\n."
- "<h2>&gt; foo</h2"
- foo</h2>
- "````````````````"
- "````````````````"
- "````````````````"
- "**Compatibility"
- "note:**"
- Most existing
- Markdown
- implementations
- do not allow the
- the text of
- text of setext
- setext headings
- headings to span
- to span multiple
- multiple lines.
- But there is no
- is no consensus
- about how to
- how to interpret
- "``` markdown"
- "Foo\nbar\n---\nbaz"
- "```"
- One can find
- can find four
- four different
- "interpretations:"
- "1. paragraph \""
- "\"Foo\", heading \""
- "\"bar\", paragraph"
- "\"baz\""
- "2. paragraph \""
- "\"Foo bar\""
- ", thematic break"
- "break, paragraph"
- "\"baz\""
- "3. paragraph \""
- "\"Foo bar --- baz"
- "--- baz\""
- "4. heading \"Foo"
- "\"Foo bar\""
- "\", paragraph \""
- "\"baz\""
- We find
- interpretation 4
- "4 most natural,"
- "natural, and"
- interpretation 4
- increases the
- the expressive
- power of
- "of CommonMark,"
- ", by allowing"
- multiline
- headings.
- Authors who want
- interpretation 1
- 1 can
- put a blank line
- line after the
- the first
- "first paragraph:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n\nbar\n---\nbaz"
- "---\nbaz\n."
- "baz\n.\n<p>Foo</p>"
- "<h2>bar</h2>"
- "<p>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Authors who want
- interpretation 2
- 2 can put blank
- blank lines
- lines around
- the thematic
- "thematic break,"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\nbar\n\n---"
- "bar\n\n---\n\nbaz\n."
- "baz\n.\n<p>Foo"
- ".\n<p>Foo\nbar</p>"
- "bar</p>\n<hr />"
- "<p>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- or use a
- use a thematic
- thematic break
- break that
- that cannot
- cannot count as
- "count as a ["
- "[setext heading"
- "underline]"
- "], such as"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\nbar\n* * *"
- "* * *\nbaz\n."
- "baz\n.\n<p>Foo"
- ".\n<p>Foo\nbar</p>"
- "bar</p>\n<hr />"
- "<p>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Authors who want
- interpretation 3
- 3 can use
- use backslash
- "escapes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\nbar\n\\---\nbaz"
- "\\---\nbaz\n."
- "baz\n.\n<p>Foo\nbar"
- "bar\n---\nbaz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Indented code
- code blocks
- An
- "[indented code"
- "code block](@)"
- is composed of
- of one or more
- "[indented chunks"
- "]"
- separated by
- by blank lines.
- An
- "[indented chunk]"
- "chunk](@)"
- is a sequence of
- of non-blank
- "-blank lines,"
- each preceded by
- by four or more
- or more spaces
- spaces of
- of indentation.
- The contents of
- of the code
- block are the
- are the literal
- literal contents
- contents of the
- "of the lines,"
- "lines, including"
- " trailing\n["
- "[line endings]"
- ", minus four"
- four spaces of
- of indentation.
- An indented code
- code block has
- "has no ["
- "[info string]."
- An indented code
- code block
- block cannot
- cannot interrupt
- "a paragraph, so"
- ", so there must"
- must be
- a blank line
- line between a
- a paragraph and
- and a following
- indented code
- code block.
- (A blank line is
- line is not
- "is not needed,"
- "needed, however,"
- "however, between"
- between a code
- a code block and
- and a following
- paragraph.)
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- a simple
- indented code
- " code block\n."
- "<pre><code>a"
- "><code>a simple"
- indented code
- code block
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- If there is any
- is any ambiguity
- between an
- interpretation
- of indentation
- as a code block
- block and as
- as indicating
- that material
- material belongs
- "belongs to a ["
- "[list\nitem]["
- "item][list items"
- "]"
- ", the list item"
- interpretation
- takes precedence
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "  - foo\n\n    bar"
- "    bar\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<p>bar</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  foo
- "    - bar\n.\n<ol>"
- ".\n<ol>\n<li>"
- "<li>\n<p>foo</p>"
- "<ul>"
- "<li>bar</li>"
- "</ul>\n</li>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- The contents of
- of a code block
- block are
- are literal text
- "text, and do not"
- do not get
- not get parsed
- "as Markdown:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a/>"
- "*hi*"
- "    - one\n."
- "<pre><code>&lt;a"
- ">&lt;a/&gt;\n*hi*"
- "*hi*\n\n- one"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Here we have
- we have three
- three chunks
- chunks separated
- "by blank lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- chunk1
- chunk2
- chunk3
- " \n \n    chunk3\n."
- "<pre><code>"
- "><code>chunk1"
- "chunk2\n\n\n\nchunk3"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Any initial
- initial spaces
- spaces or tabs
- or tabs beyond
- beyond four
- four spaces of
- of indentation
- will be included
- included in
- "the content,"
- "content, even in"
- even in interior
- interior blank
- "blank lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- chunk1
- chunk2
- "      chunk2\n."
- "<pre><code>"
- "><code>chunk1"
- chunk2
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- An indented code
- code block
- block cannot
- cannot interrupt
- a paragraph.
- (This
- allows hanging
- hanging indents
- indents and the
- and the like.)
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n    bar\n\n."
- ".\n<p>Foo\nbar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, any non"
- any non-blank
- "-blank line with"
- with fewer than
- than four spaces
- spaces of
- of indentation
- ends
- the code block
- immediately.
- So a paragraph
- may occur
- immediately
- after indented
- "indented code:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    foo\nbar\n."
- ".\n<pre><code>foo"
- "</code></pre>"
- "<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- And indented
- indented code
- code can occur
- immediately
- before and after
- after other
- other kinds of
- "blocks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "# Heading"
- "    foo\nHeading"
- "Heading\n------"
- "------\n    foo"
- "    foo\n----\n."
- "<h1>Heading</h1>"
- "<pre><code>foo"
- "</code></pre>"
- "<h2>Heading</h2>"
- "<pre><code>foo"
- "</code></pre>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- The first line
- line can be
- can be preceded
- preceded by more
- by more than
- than four spaces
- spaces of
- "of indentation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo
- "    bar\n."
- "<pre><code>"
- "><code>    foo"
- bar
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Blank lines
- lines preceding
- or following an
- an indented code
- code block
- are not included
- "included in it:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo
- "    foo\n    \n\n."
- ".\n<pre><code>foo"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Trailing spaces
- spaces or tabs
- or tabs are
- are included in
- in the code
- "the code block'"
- "'s content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    foo  \n."
- ".\n<pre><code>foo"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Fenced code
- code blocks
- A
- "[code fence](@)"
- is a sequence
- of at least
- at least three
- consecutive
- backtick
- characters (
- "`` ` ``) or"
- ") or\ntildes (`~`"
- ).
- (Tildes and
- and backticks
- cannot be mixed.
- " mixed.)\nA"
- "[fenced code"
- "code block](@)"
- begins with a
- with a code
- "a code fence,"
- "fence, preceded"
- preceded by up
- by up to three
- to three spaces
- spaces of
- of indentation.
- The line with
- with the opening
- opening code
- code fence may
- may optionally
- contain some
- some text
- following the
- the code fence;
- fence; this is
- this is trimmed
- trimmed of
- of leading and
- and trailing
- spaces or tabs
- or tabs and
- tabs and called
- called the
- "[info string](@)"
- ". If the ["
- "[info string]"
- "] comes"
- after a backtick
- "backtick fence,"
- "fence, it may"
- ", it may not"
- may not contain
- contain any
- any backtick
- characters.
- (The reason for
- for this
- this restriction
- is that
- that otherwise
- some inline code
- code would be
- be incorrectly
- interpreted as
- as the
- beginning of a
- of a fenced code
- code block.)
- The content of
- of the code
- the code block
- block consists
- consists of all
- all subsequent
- "lines, until"
- "a closing ["
- "[code fence]"
- of the same type
- type as the code
- the code block
- began with (
- with (backticks
- "or tildes), and"
- "), and with at"
- with at least as
- least as many
- many backticks
- or tildes as the
- as the opening
- opening code
- code fence.
- If the leading
- leading code
- code fence is
- preceded by N
- by N spaces of
- "of indentation,"
- ", then up to N"
- up to N spaces
- N spaces of
- of indentation
- are
- removed from
- from each line
- line of the
- of the content (
- (if present).
- (If a content
- content line is
- line is not
- "indented, it is"
- it is preserved
- unchanged.
- If it is
- it is indented N
- N spaces or less
- "or less, all"
- of the
- the indentation
- is removed.)
- The closing code
- code fence may
- may be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- "of indentation,"
- ", and"
- may be followed
- followed only by
- only by spaces
- "spaces or tabs,"
- "or tabs, which"
- ", which are"
- are ignored.
- If the end of
- end of the
- containing block
- block (or
- (or document) is
- ) is reached and
- and no closing
- closing code
- code fence
- "has been found,"
- "found, the code"
- the code block
- block contains
- contains all of
- all of the lines
- lines after the
- opening code
- code fence until
- until the end of
- end of the
- the containing
- block (or
- document).
- (An alternative
- spec would
- would require
- backtracking in
- in the
- event that a
- that a closing
- closing code
- code fence is
- fence is not
- is not found.
- But this makes
- makes parsing
- much less
- "less efficient,"
- ", and there"
- there seems to
- seems to be no
- to be no real
- no real downside
- downside to the
- behavior
- described here.)
- A fenced code
- code block may
- may interrupt a
- "a paragraph, and"
- ", and does not"
- does not require
- a blank line
- line either
- either before or
- or after.
- The content of a
- of a code fence
- fence is treated
- treated as
- "as literal text,"
- "text, not parsed"
- as inlines.
- The first word
- "word of the ["
- "[info string]"
- is typically
- used to
- specify the
- the language of
- of the code
- "the code sample,"
- "sample, and"
- ", and rendered"
- rendered in the
- "`class`"
- attribute of the
- "`code`"
- tag.
- "However, this"
- ", this spec does"
- does not mandate
- mandate any
- particular
- treatment of the
- "[info string]."
- Here is a simple
- a simple example
- example with
- "with backticks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\n<\n >\n```\n."
- "<pre><code>&lt;"
- "&gt;"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "With tildes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "~~~\n<\n >\n~~~\n."
- "<pre><code>&lt;"
- "&gt;"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Fewer than three
- three backticks
- "is not enough:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``\nfoo\n``\n."
- "<p><code>foo</"
- ">foo</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The closing code
- code fence must
- must use the
- use the same
- same character
- as the opening
- "fence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\naaa\n~~~\n```"
- "~~~\n```\n."
- ".\n<pre><code>aaa"
- ~~~
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "~~~\naaa\n```\n~~~"
- "```\n~~~\n."
- ".\n<pre><code>aaa"
- "```"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- The closing code
- code fence must
- must be at least
- at least as long
- as long as the
- as the opening
- "opening fence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "````\naaa\n```"
- "aaa\n```\n``````\n."
- ".\n<pre><code>aaa"
- "```"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "~~~~\naaa\n~~~"
- "aaa\n~~~\n~~~~\n."
- ".\n<pre><code>aaa"
- ~~~
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Unclosed code
- code blocks are
- are closed by
- by the end of
- end of the
- of the document
- (or the
- or the enclosing
- "[block quote]["
- "][block quotes]"
- "] or [list item]"
- "][list items]):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\n."
- "<pre><code></"
- "<code></code></"
- /code></pre>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`````\n\n```\naaa\n."
- ".\n<pre><code>"
- "```\naaa"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> ```\n> aaa\n\nbbb"
- "bbb\n."
- ".\n<blockquote>"
- "<pre><code>aaa"
- "</code></pre>"
- "</blockquote>"
- "<p>bbb</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A code block can
- can have all
- have all empty
- empty lines as
- lines as its
- "as its content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\n\n  \n```\n."
- ".\n<pre><code>"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- A code block can
- "can be empty:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\n```\n."
- "<pre><code></"
- "<code></code></"
- /code></pre>
- "````````````````"
- "````````````````"
- "````````````````"
- Fences can be
- can be indented.
- If the opening
- opening fence is
- "is indented,"
- content lines
- lines will have
- have equivalent
- opening
- indentation
- "removed,"
- "if present:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " ```\n aaa\naaa"
- " aaa\naaa\n```\n."
- ".\n<pre><code>aaa"
- aaa
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "  ```\naaa\n  aaa"
- "  aaa\naaa\n  ```"
- "  ```\n."
- ".\n<pre><code>aaa"
- "aaa\naaa"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "   ```\n   aaa"
- "   aaa\n    aaa"
- "    aaa\n  aaa"
- "  aaa\n   ```\n."
- ".\n<pre><code>aaa"
- " aaa\naaa"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    ```\n    aaa"
- "    aaa\n    ```"
- "    ```\n."
- ".\n<pre><code>```"
- "aaa\n```"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Closing fences
- fences may be
- may be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- "of indentation,"
- ", and their"
- indentation need
- need not match
- match that of
- that of the
- of the opening
- "opening fence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\naaa\n  ```\n."
- ".\n<pre><code>aaa"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "   ```\naaa\n  ```"
- "  ```\n."
- ".\n<pre><code>aaa"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not a
- is not a closing
- "closing fence,"
- "fence, because"
- because it is
- it is indented 4
- "4 spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\naaa\n    ```"
- "    ```\n."
- ".\n<pre><code>aaa"
- "```"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Code fences (
- fences (opening
- (opening and
- and closing)
- closing) cannot
- ) cannot contain
- contain internal
- internal spaces
- "spaces or tabs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``` ```\naaa\n."
- "<p><code> </code"
- "> </code>"
- aaa</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "~~~~~~\naaa"
- "aaa\n~~~ ~~\n."
- ".\n<pre><code>aaa"
- ~~~ ~~
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Fenced code
- code blocks can
- can interrupt
- "paragraphs, and"
- ", and can be"
- can be followed
- directly by
- "by paragraphs,"
- ", without a"
- a blank line
- "line between:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\n```\nbar\n```"
- "bar\n```\nbaz\n."
- "baz\n.\n<p>foo</p>"
- "<pre><code>bar"
- "</code></pre>"
- "<p>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Other blocks can
- can also occur
- occur before and
- and after fenced
- fenced code
- code blocks
- without an
- an intervening
- "blank line:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\n---\n~~~\nbar"
- "~~~\nbar\n~~~"
- "bar\n~~~\n# baz\n."
- ".\n<h2>foo</h2>"
- "<pre><code>bar"
- "</code></pre>"
- "<h1>baz</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- "An [info string]"
- can be provided
- provided after
- after the
- the opening code
- code fence.
- Although this
- "this spec doesn'"
- t mandate any
- any particular
- treatment of
- "the info string,"
- "string, the"
- ", the first word"
- word is
- is typically
- used to specify
- the language of
- of the code
- the code block.
- "In HTML output,"
- "output, the"
- ", the language"
- language is
- normally
- indicated by
- by adding a
- adding a class
- a class to the
- "`code`"
- element
- " consisting\nof"
- "of `language-`"
- followed by the
- by the language
- language name.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```ruby"
- def foo(x)
- "  return 3\nend"
- "end\n```\n."
- "<pre><code class"
- "class=\"language-"
- "-ruby\">def foo(x"
- foo(x)
- "  return 3\nend"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ~~~~    ruby
- ruby startline=3
- "=3 $%@#$"
- def foo(x)
- "  return 3\nend"
- "end\n~~~~~~~\n."
- "<pre><code class"
- "class=\"language-"
- "-ruby\">def foo(x"
- foo(x)
- "  return 3\nend"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "````;\n````\n."
- "<pre><code class"
- "class=\"language-"
- "-;\"></code></pre"
- "></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "[Info strings]"
- for backtick
- backtick code
- code blocks
- blocks cannot
- cannot contain
- "backticks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``` aa ```\nfoo\n."
- "<p><code>aa</"
- ">aa</code>"
- foo</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "[Info strings]"
- for tilde code
- code blocks can
- can contain
- backticks and
- "and tildes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "~~~ aa ``` ~~~"
- "foo\n~~~\n."
- "<pre><code class"
- "class=\"language-"
- "-aa\">foo"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- Closing code
- code fences
- fences cannot
- "cannot have ["
- "[info strings]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\n``` aaa\n```"
- "```\n."
- "<pre><code>```"
- "code>``` aaa"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "## HTML blocks"
- An
- "[HTML block](@)"
- is a group of
- group of lines
- of lines that is
- that is treated
- as raw HTML (and
- (and will not be
- not be escaped
- escaped in HTML
- in HTML output).
- There are seven
- "seven kinds of ["
- "[HTML block]"
- ", which can be"
- can be defined
- defined by their
- start and end
- end conditions.
- The block begins
- begins with a
- with a line that
- that meets a
- "[start condition"
- "](@)"
- (after up to
- up to three
- three optional
- optional spaces
- spaces of
- of indentation).
- It ends with the
- with the first
- first subsequent
- line that meets
- meets a matching
- "[end condition]("
- "](@)"
- ", or the last"
- the last line of
- line of the
- "of the document,"
- ", or the last"
- the last line of
- the
- "[container block"
- "block](#"
- "](#container-"
- "-blocks)"
- containing the
- the current HTML
- "block, if no"
- ", if no line is"
- is encountered
- "that meets the ["
- "[end condition]"
- "].  If"
- the first line
- line meets both
- "both the ["
- "[start condition"
- "] and the [end"
- "[end\ncondition]"
- ", the block will"
- will contain
- contain just
- just that line.
- "1."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with the string
- "`<pre`,"
- ",\n`<script`,"
- ", `<style`, or"
- ", or `<textarea`"
- (case-
- case-insensitive
- "), followed by a"
- "by a space,"
- "a tab, the"
- "tab, the string"
- "`>`"
- ", or the end of"
- end of the line.
- "\\"
- "**End condition:"
- ":**"
- line contains an
- an end tag
- "`</pre>`,"
- ", `</script>`,"
- ", `</style>`, or"
- "`</textarea>`"
- (case-
- case-insensitive
- ; it
- need not match
- match the start
- start tag).
- "2."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with the string
- "`<!--`.\\"
- "**End condition:"
- ":**"
- line contains
- contains the
- "the string `-->`"
- "`-->`."
- "3."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with the string
- "`<?`.\\"
- "**End condition:"
- ":**"
- line contains
- contains the
- "the string `?>`."
- "4."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with the string
- "`<!`"
- followed by an
- by an ASCII
- an ASCII letter.
- "\\"
- "**End condition:"
- ":**"
- line contains
- contains the
- the character
- "`>`."
- "5."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with the string
- "`<![CDATA[`.\\"
- "**End condition:"
- ":**"
- line contains
- contains the
- "the string `]]>`"
- "`]]>`."
- "6."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with the string
- "`<` or `</`"
- followed by one
- by one of the
- of the strings (
- (case-
- case-insensitive
- ") `address`,"
- ",\n`article`,"
- ", `aside`,"
- "`aside`, `base`,"
- ", `basefont`,"
- ", `blockquote`,"
- ", `body`,"
- ",\n`caption`,"
- ", `center`,"
- ", `col`,"
- ", `colgroup`,"
- ", `dd`,"
- "`dd`, `details`,"
- ", `dialog`,"
- ",\n`dir`, `div`,"
- ", `div`, `dl`,"
- ", `dl`, `dt`,"
- "`dt`, `fieldset`"
- ", `figcaption`,"
- ", `figure`,"
- ",\n`footer`,"
- ", `form`,"
- "`form`, `frame`,"
- ", `frameset`,"
- ",\n`h1`, `h2`,"
- ", `h2`, `h3`,"
- ", `h3`, `h4`,"
- ", `h4`, `h5`,"
- ", `h5`, `h6`,"
- ", `h6`, `head`,"
- "`head`, `header`"
- "`header`, `hr`,"
- ", `hr`,\n`html`,"
- "`html`, `iframe`"
- "`iframe`,"
- ", `legend`, `li`"
- ", `li`, `link`,"
- "`link`, `main`,"
- "`main`, `menu`,"
- ", `menuitem`,"
- ",\n`nav`,"
- ", `noframes`,"
- ", `ol`,"
- "`ol`, `optgroup`"
- ", `option`, `p`,"
- ", `p`, `param`,"
- ",\n`search`,"
- ", `section`,"
- ", `summary`,"
- ", `table`,"
- "`table`, `tbody`"
- "`tbody`, `td`,"
- ", `td`,\n`tfoot`,"
- "`tfoot`, `th`,"
- ", `th`, `thead`,"
- "`thead`, `title`"
- "`title`, `tr`,"
- ", `tr`, `track`,"
- "`track`, `ul`"
- ", `ul`, followed"
- "by a space, a"
- "space, a tab,"
- ", a tab, the end"
- the end of the
- "of the line, the"
- ", the string `>`"
- "`>`, or"
- ", or\nthe string"
- "`/>`.\\"
- "**End condition:"
- ":**"
- line is followed
- "followed by a ["
- "[blank line]."
- "7."
- "**Start"
- "Start condition:"
- "**"
- line begins with
- with a complete
- "[open tag]"
- "]\n(with any ["
- "[tag name]"
- "] other than"
- "`pre`, `script`,"
- ",\n`style`, or"
- ", or `textarea`"
- ) or a complete
- "[closing tag],"
- followed by zero
- by zero or more
- or more spaces
- "spaces and tabs,"
- "tabs, followed"
- followed by the
- by the end of
- end of the line.
- "\\"
- "**End condition:"
- ":**"
- line is followed
- "followed by a ["
- "[blank line]."
- HTML blocks
- blocks continue
- continue until
- until they are
- they are closed
- closed by their
- " appropriate\n["
- "[end condition]"
- ", or the last"
- the last line of
- line of the
- of the document
- document or
- or other
- "[container\nblock"
- "](#container-"
- "-blocks)"
- "."
- This means any
- any HTML
- "**within an HTML"
- block**
- that might
- might otherwise
- be recognised as
- as a start
- start condition
- will
- be ignored by
- by the parser
- parser and
- and passed
- passed through
- "through as-is,"
- "as-is, without"
- without changing
- "the parser'"
- "'s state."
- "For instance,"
- "`<pre>`"
- within an HTML
- an HTML block
- block started by
- "`<table>`"
- will not affect
- the parser state
- state; as the
- ; as the HTML
- the HTML block
- block was
- was started in
- in by start
- start condition
- "6, it"
- will end at any
- at any blank
- blank line.
- This can be
- "be surprising:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<table><tr><td>"
- "<pre>\n**Hello**,"
- "_world_.\n</pre>"
- "</td></tr></"
- "></tr></table>\n."
- "<table><tr><td>"
- "<pre>\n**Hello**,"
- "<p><em>world</em"
- "</em>."
- "</pre></p>"
- "</td></tr></"
- "></tr></table>"
- "````````````````"
- "````````````````"
- "````````````````"
- "In this case,"
- "case, the HTML"
- the HTML block
- block is
- is terminated by
- by the blank
- blank line — the
- "`**Hello**`"
- text remains
- remains verbatim
- verbatim — and
- — and regular
- regular parsing
- "parsing resumes,"
- "resumes, with a"
- with a paragraph
- ",\nemphasised"
- "`world`"
- and inline and
- and block HTML
- HTML following.
- "All types of ["
- "[HTML blocks]"
- except type 7
- type 7 may
- 7 may interrupt
- a paragraph.
- Blocks of type 7
- type 7 may not
- not interrupt a
- a paragraph.
- (This
- This restriction
- is intended to
- to prevent
- prevent unwanted
- interpretation
- of long tags
- tags inside a
- inside a wrapped
- paragraph as
- as starting HTML
- HTML blocks.)
- Some simple
- simple examples
- examples follow.
- Here are some
- are some basic
- basic HTML
- HTML blocks
- "of type 6:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<table>\n  <tr>"
- "  <tr>\n    <td>"
- hi
- "</td>"
- "  </tr>\n</table>"
- "</table>\n\nokay."
- "okay.\n.\n<table>"
- "<table>\n  <tr>"
- "  <tr>\n    <td>"
- hi
- "</td>"
- "  </tr>\n</table>"
- "<p>okay.</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " <div>\n  *hello*"
- "<foo><a>"
- ".\n <div>"
- " <div>\n  *hello*"
- "<foo><a>"
- "````````````````"
- "````````````````"
- "````````````````"
- A block can also
- can also start
- start with a
- with a closing
- "closing tag:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "</div>\n*foo*\n."
- "*foo*\n.\n</div>"
- ".\n</div>\n*foo*"
- "````````````````"
- "````````````````"
- "````````````````"
- Here we have two
- have two HTML
- two HTML blocks
- blocks with a
- with a Markdown
- paragraph
- "between them:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<DIV CLASS=\"foo\""
- "=\"foo\">"
- "*Markdown*"
- "</DIV>\n."
- "<DIV CLASS=\"foo\""
- "=\"foo\">"
- "<p><em>Markdown<"
- "</em></p>\n</DIV>"
- "````````````````"
- "````````````````"
- "````````````````"
- The tag on the
- on the first
- first line can
- line can be
- "can be partial,"
- "partial, as long"
- as it is split
- is split where
- where there
- there would be
- "be whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div id=\"foo\""
- "class=\"bar\">"
- "</div>\n."
- ".\n<div id=\"foo\""
- "class=\"bar\">"
- "</div>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div id=\"foo\""
- "id=\"foo\" class=\""
- "class=\"bar"
- "  baz\">\n</div>\n."
- "<div id=\"foo\""
- "id=\"foo\" class=\""
- "class=\"bar"
- "  baz\">\n</div>"
- "````````````````"
- "````````````````"
- "````````````````"
- An open tag need
- tag need not be
- "not be closed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div>\n*foo*"
- "*foo*\n\n*bar*\n."
- "*bar*\n.\n<div>"
- ".\n<div>\n*foo*"
- "<p><em>bar</em><"
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A partial tag
- tag need not
- need not even be
- be completed (
- (garbage
- "in, garbage out)"
- "out):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div id=\"foo\""
- "*hi*\n."
- ".\n<div id=\"foo\""
- "*hi*"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div class\nfoo\n."
- "foo\n.\n<div class"
- foo
- "````````````````"
- "````````````````"
- "````````````````"
- The initial tag
- "tag doesn'"
- t even need to
- need to be a
- to be a valid
- "tag, as long as"
- long as it
- as it starts
- "starts like one:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div *???-&&&-<-"
- "?-&&&-<---\n*foo*"
- "*foo*\n."
- "<div *???-&&&-<-"
- "?-&&&-<---\n*foo*"
- "````````````````"
- "````````````````"
- "````````````````"
- In type 6 blocks
- "6 blocks, the"
- ", the initial"
- initial tag need
- tag need not be
- not be on a line
- a line by
- "itself:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div><a href=\""
- "a href=\"bar\">*"
- "=\"bar\">*foo*</a>"
- "foo*</a></div>\n."
- "<div><a href=\""
- "a href=\"bar\">*"
- "=\"bar\">*foo*</a>"
- foo*</a></div>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<table><tr><td>"
- foo
- "</td></tr></"
- "></tr></table>\n."
- "<table><tr><td>"
- foo
- "</td></tr></"
- "></tr></table>"
- "````````````````"
- "````````````````"
- "````````````````"
- Everything until
- until the next
- the next blank
- blank line or
- line or end of
- end of document
- gets included in
- in the HTML
- the HTML block.
- "So, in the"
- in the following
- "example, what"
- ", what looks"
- looks like a
- like a Markdown
- Markdown code
- code block
- is actually part
- part of the HTML
- "the HTML block,"
- "block, which"
- which continues
- until a blank
- line or the end
- the end of the
- of the document
- document is
- "is reached:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div></div>"
- "``` c"
- "int x = 33;\n```"
- "```\n."
- ".\n<div></div>"
- "``` c"
- "int x = 33;\n```"
- "````````````````"
- "````````````````"
- "````````````````"
- "To start an ["
- "[HTML block]"
- with a tag that
- tag that is
- "*not* in the"
- list of block-
- block-level tags
- "tags in (6), you"
- "(6), you must"
- you must put the
- put the tag by
- itself on the
- on the first
- first line (and
- (and it must be
- must be complete
- "complete):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"foo\">"
- "*bar*\n</a>\n."
- ".\n<a href=\"foo\">"
- "*bar*\n</a>"
- "````````````````"
- "````````````````"
- "````````````````"
- In type 7 blocks
- "7 blocks, the ["
- "[tag name]"
- "can be anything:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<Warning>\n*bar*"
- "*bar*\n</Warning>"
- ".\n<Warning>"
- "*bar*\n</Warning>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<i class=\"foo\">"
- "*bar*\n</i>\n."
- "<i class=\"foo\">"
- "*bar*\n</i>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "</ins>\n*bar*\n."
- "*bar*\n.\n</ins>"
- ".\n</ins>\n*bar*"
- "````````````````"
- "````````````````"
- "````````````````"
- These rules are
- are designed to
- to allow us to
- us to work with
- with tags that
- can function as
- as either block-
- block-level or
- level or inline-
- inline-level
- "-level tags.\nThe"
- "The `<del>`"
- tag is a nice
- a nice example.
- We can surround
- surround content
- content with
- "`<del>`"
- tags in three
- three different
- ways.
- "In this case, we"
- "case, we get a"
- we get a raw
- "HTML block,"
- "block, because"
- because the
- "`<del>`"
- tag is on a line
- a line by itself
- "itself:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<del>\n*foo*"
- "*foo*\n</del>\n."
- "</del>\n.\n<del>"
- ".\n<del>\n*foo*"
- "*foo*\n</del>"
- "````````````````"
- "````````````````"
- "````````````````"
- "In this case, we"
- "case, we get a"
- we get a raw
- a raw HTML block
- block that just
- just includes
- "the `<del>`"
- tag (because it
- it ends with the
- the following
- blank
- line).
- So the contents
- contents get
- get interpreted
- "as CommonMark:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<del>\n\n*foo*"
- "*foo*\n\n</del>\n."
- "</del>\n.\n<del>"
- "<p><em>foo</em><"
- "</em></p>\n</del>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Finally, in this"
- "in this case,"
- "case, the"
- "`<del>`"
- tags are
- are interpreted
- "as [raw HTML]"
- "] *inside*"
- the CommonMark
- paragraph.
- (Because
- the tag is not
- is not on a line
- a line by itself
- "itself, we get"
- ", we get inline"
- inline HTML
- "rather than an ["
- "[HTML block].)"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<del>*foo*</del>"
- "."
- "<p><del><em>foo<"
- "<em>foo</em></"
- "</em></del></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- HTML tags
- tags designed to
- to contain
- contain literal
- literal content
- "(`pre`, `script`"
- "`script`,"
- ", `style`,"
- ", `textarea`"
- "), comments,"
- ", processing"
- "instructions,"
- and declarations
- are treated
- treated somewhat
- differently.
- Instead of
- of ending at the
- at the first
- first blank line
- "line, these"
- ", these blocks"
- end at the first
- first line
- line containing
- a corresponding
- end tag.
- "As a result,"
- "result, these"
- ", these blocks"
- blocks can
- can contain
- contain blank
- "blank lines:"
- A pre tag (type
- "(type 1):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<pre language=\""
- "=\"haskell\"><code"
- "\"><code>"
- import
- Text.HTML.TagSou
- L.TagSoup
- "main :: IO ()"
- main = print $
- $ parseTags tags
- "</code></pre>"
- "okay\n."
- "<pre language=\""
- "=\"haskell\"><code"
- "\"><code>"
- import
- Text.HTML.TagSou
- L.TagSoup
- "main :: IO ()"
- main = print $
- $ parseTags tags
- "</code></pre>"
- "<p>okay</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A script tag (
- "tag (type 1):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<script type=\""
- "type=\"text/"
- "\"text/javascript"
- "\">"
- // JavaScript
- example
- document.getElem
- ".getElementById("
- "(\"demo\")."
- "demo\").innerHTML"
- "= \"Hello"
- Hello JavaScript
- "!\";\n</script>"
- "okay\n."
- "<script type=\""
- "type=\"text/"
- "\"text/javascript"
- "\">"
- // JavaScript
- example
- document.getElem
- ".getElementById("
- "(\"demo\")."
- "demo\").innerHTML"
- "= \"Hello"
- Hello JavaScript
- "!\";\n</script>"
- "<p>okay</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A textarea tag (
- "tag (type 1):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<textarea>"
- "*foo*\n\n_bar_"
- "</textarea>\n."
- ".\n<textarea>"
- "*foo*\n\n_bar_"
- "</textarea>"
- "````````````````"
- "````````````````"
- "````````````````"
- A style tag (
- "tag (type 1):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<style"
- "type=\"text/css\">"
- "h1 {color:red;}"
- "p {color:blue;}"
- "</style>\nokay\n."
- "okay\n.\n<style"
- "type=\"text/css\">"
- "h1 {color:red;}"
- "p {color:blue;}"
- "</style>"
- "<p>okay</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- If there is no
- is no matching
- matching end tag
- "end tag, the"
- "tag, the block"
- block will end
- will end at the
- end of the
- of the document
- document (or the
- or the enclosing
- "[block quote]["
- "][block quotes]"
- "]\nor [list item]"
- "][list items]):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<style"
- "type=\"text/css\">"
- "foo\n.\n<style"
- "type=\"text/css\">"
- foo
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> <div>\n> foo"
- "> foo\n\nbar\n."
- ".\n<blockquote>"
- "<div>\nfoo"
- "</blockquote>"
- "<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- <div>\n- foo\n."
- "- foo\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<div>\n</li>"
- "<li>foo</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- The end tag can
- tag can occur on
- occur on the
- on the same line
- line as the
- as the start tag
- "tag:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<style>p{"
- ">p{color:red;}</"
- ";}</style>\n*foo*"
- "*foo*\n."
- "<style>p{"
- ">p{color:red;}</"
- ";}</style>"
- "<p><em>foo</em><"
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<!-- foo -->*bar"
- " -->*bar*\n*baz*"
- "*baz*\n."
- "<!-- foo -->*bar"
- "-->*bar*"
- "<p><em>baz</em><"
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that
- that anything on
- on the last line
- line after the
- end tag will be
- will be included
- included in the
- "[HTML block]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<script>\nfoo"
- "</script>1. *bar"
- ">1. *bar*\n."
- ".\n<script>\nfoo"
- "</script>1. *bar"
- ">1. *bar*"
- "````````````````"
- "````````````````"
- "````````````````"
- A comment (type
- "(type 2):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<!-- Foo\n\nbar"
- "bar\n   baz -->"
- "   baz -->\nokay"
- "okay\n.\n<!-- Foo"
- "<!-- Foo\n\nbar"
- "bar\n   baz -->"
- "<p>okay</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A processing
- instruction (
- "(type 3):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<?php"
- "php\n\n  echo '>';"
- "?>\nokay\n.\n<?php"
- "php\n\n  echo '>';"
- "?>\n<p>okay</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A declaration (
- "(type 4):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<!DOCTYPE html>"
- ".\n<!"
- "<!DOCTYPE html>"
- "````````````````"
- "````````````````"
- "````````````````"
- "CDATA (type 5):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<![CDATA["
- function matchwo
- " matchwo(a,b)\n{"
- if (a < b && a <
- b && a < 0) then
- "0) then {"
- return 1;
- "} else {"
- return 0;
- "  }\n}\n]]>\nokay\n."
- "okay\n.\n<![CDATA["
- function matchwo
- " matchwo(a,b)\n{"
- if (a < b && a <
- b && a < 0) then
- "0) then {"
- return 1;
- "} else {"
- return 0;
- "  }\n}\n]]>"
- "]]>\n<p>okay</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The opening tag
- tag can be
- can be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- "of indentation,"
- ", but not\nfour:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<!-- foo -->"
- "<!-- foo -->"
- ".\n  <!-- foo -->"
- "<pre><code>&lt;!"
- ">&lt;!-- foo --&"
- foo --&gt;
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div>"
- "    <div>\n."
- ".\n  <div>"
- "<pre><code>&lt;"
- ">&lt;div&gt;"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- An HTML block of
- block of types 1
- "--"
- 6 can interrupt
- "a paragraph, and"
- ", and need not"
- need not be
- preceded by a
- by a blank line.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n<div>\nbar"
- "bar\n</div>\n."
- ".\n<p>Foo</p>"
- "<div>\nbar\n</div>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, a"
- ", a following"
- blank line is
- "line is needed,"
- "needed, except"
- ", except at the"
- at the end of
- "a document, and"
- ", and except for"
- for blocks of
- "of types 1--5, ["
- "--5, [above]["
- "[above][HTML"
- "][HTML\nblock]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div>\nbar\n</div>"
- "</div>\n*foo*\n."
- "*foo*\n.\n<div>"
- ".\n<div>\nbar"
- "bar\n</div>\n*foo*"
- "````````````````"
- "````````````````"
- "````````````````"
- HTML blocks of
- of type 7 cannot
- cannot interrupt
- "a paragraph:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- Foo
- "<a href=\"bar\">"
- "baz\n.\n<p>Foo"
- "<a href=\"bar\">"
- baz</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This rule
- rule differs
- differs from
- from John Gruber
- "'"
- s original
- Markdown syntax
- "specification,"
- ", which says:"
- ">"
- The only
- restrictions are
- are that block-
- block-level HTML
- HTML elements —
- "> e.g. `<div>`,"
- ", `<table>`,"
- ", `<pre>`, `<p>`"
- ", etc. — must be"
- be separated
- " from\n>"
- surrounding
- content by blank
- "by blank lines,"
- "lines, and the"
- and the start
- start and end
- and end tags of
- " tags of the\n>"
- block should not
- not be indented
- indented with
- with spaces or
- or tabs.
- In some ways
- "ways Gruber'"
- s rule is more
- more restrictive
- than the one
- the one given
- "here:"
- "-"
- It requires that
- that an HTML
- an HTML block be
- be preceded by a
- by a blank line.
- "-"
- It does not
- does not allow
- allow the start
- start tag to be
- to be indented.
- "-"
- It requires a
- a matching end
- "end tag, which"
- ", which it also"
- it also does not
- does not allow
- allow to
- be indented.
- Most Markdown
- implementations
- (including some
- "some of Gruber'"
- "'s own) do not"
- respect all of
- all of these
- restrictions.
- There is one
- "is one respect,"
- "respect, however"
- "however, in"
- ", in which"
- "in which Gruber'"
- s rule is more
- is more liberal
- than the one
- the one given
- "given here,"
- "here, since it"
- since it allows
- allows blank
- blank lines to
- lines to occur
- to occur inside
- an HTML block.
- There are two
- are two reasons
- reasons for
- for disallowing
- them here.
- "First, it"
- ", it removes the"
- the need to
- need to parse
- parse balanced
- "balanced tags,"
- "tags, which is"
- expensive and
- and can require
- backtracking
- from the end of
- end of the
- of the document
- if no matching
- matching end tag
- end tag is found
- is found.
- "Second, it"
- ", it provides a"
- a very simple
- and flexible way
- way of including
- Markdown content
- content inside
- inside HTML tags
- "tags:"
- simply separate
- separate the
- the Markdown
- Markdown from
- from the HTML
- the HTML using
- using blank
- "blank lines:"
- "Compare:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div>"
- "*Emphasized*"
- "* text.\n\n</div>"
- "</div>\n.\n<div>"
- "<p><em>"
- p><em>Emphasized
- "</em> text.</p>"
- "</div>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<div>"
- "*Emphasized*"
- "* text.\n</div>\n."
- "</div>\n.\n<div>"
- "*Emphasized*"
- "* text.\n</div>"
- "````````````````"
- "````````````````"
- "````````````````"
- Some Markdown
- implementations
- have adopted a
- a convention of
- interpreting
- content inside
- inside tags as
- tags as text if
- text if the open
- the open tag has
- the attribute
- "`markdown=1`"
- "."
- The rule given
- given above
- above seems a
- seems a simpler
- simpler and
- more elegant way
- way of achieving
- the same
- same expressive
- "power, which is"
- which is also
- much simpler to
- to parse.
- The main
- main potential
- drawback is that
- is that one can
- one can no
- can no longer
- longer paste
- paste HTML
- blocks into
- into Markdown
- documents with
- with 100%
- 100% reliability
- ".  However,"
- "*in most cases*"
- this will work
- "work fine,"
- "fine, because"
- because the
- the blank lines
- lines in
- HTML are usually
- usually followed
- followed by HTML
- by HTML block
- block tags.
- "For example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<table>\n\n<tr>"
- "<tr>\n\n<td>\nHi"
- "<td>\nHi\n</td>"
- "Hi\n</td>\n\n</tr>"
- "</tr>\n\n</table>"
- "</table>\n."
- ".\n<table>\n<tr>"
- "<tr>\n<td>\nHi"
- "<td>\nHi\n</td>"
- "Hi\n</td>\n</tr>"
- "</tr>\n</table>"
- "````````````````"
- "````````````````"
- "````````````````"
- There are
- "are problems,"
- ", however, if"
- ", if the inner"
- inner tags are
- are indented
- "*and*"
- separated by
- "by spaces, as"
- ", as then they"
- they will be
- be interpreted
- as
- an indented code
- "code block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<table>\n\n  <tr>"
- "  <tr>\n\n    <td>"
- Hi
- "</td>"
- "</tr>"
- "</table>\n."
- ".\n<table>\n  <tr>"
- "<pre><code>&lt;"
- ">&lt;td&gt;\n  Hi"
- "  Hi\n&lt;/td&gt;"
- "</code></pre>"
- "  </tr>\n</table>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Fortunately,"
- ", blank lines"
- lines are
- are usually not
- not necessary
- and can be
- deleted.
- The exception is
- is inside
- "`<pre>`"
- "tags, but as"
- but as described
- "[above]["
- "][HTML blocks]"
- ", raw HTML"
- raw HTML blocks
- blocks starting
- starting with
- "`<pre>`\n*can*"
- contain blank
- blank lines.
- "##"
- Link reference
- definitions
- A
- "[link reference"
- "definition](@)"
- "consists of a ["
- "[link label]"
- ", optionally"
- preceded by up
- by up to three
- to three spaces
- spaces of
- "indentation,"
- ", followed"
- "by a colon (`:`"
- "), optional"
- optional spaces
- spaces or tabs (
- tabs (including
- " up to one\n["
- "[line ending]"
- "]), a ["
- link destination
- "],"
- optional spaces
- spaces or tabs (
- tabs (including
- " up to one\n["
- "[line ending]"
- "), and an"
- and an optional
- "[link\ntitle]"
- ", which if it is"
- if it is present
- present must be
- be separated
- "from the ["
- link destination
- "]"
- by spaces or
- or tabs.
- No further
- character may
- may occur.
- "A ["
- link reference
- "definition]"
- does not
- not correspond
- to a structural
- element of a
- of a document.
- "Instead, it"
- defines a label
- a label which
- which can be
- "can be used in ["
- "[reference links"
- "]"
- and reference-
- "-style [images]"
- elsewhere in the
- in the document.
- "[Link"
- reference
- "definitions]"
- can come either
- either before or
- or after the
- the links that
- " that use\nthem."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url \""
- ": /url \"title\""
- "[foo]\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]:"
- /url
- "'the title'"
- "[foo]\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"the title"
- "title\">foo</a></"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[Foo*bar\\]]:my_("
- "\\]]:my_(url) '"
- "(url) 'title ("
- "'title (with"
- "(with parens)'"
- "[Foo*bar\\]]\n."
- "<p><a href=\"my_("
- "=\"my_(url)\""
- "(url)\" title=\""
- "title=\"title ("
- "\"title (with"
- "(with parens)\">"
- ")\">Foo*bar]</a><"
- "]</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[Foo bar]:"
- "<my url>\n'title'"
- "[Foo bar]\n."
- "<p><a href=\"my%"
- "=\"my%20url\""
- "%20url\" title=\""
- "title=\"title\">"
- "\"title\">Foo bar<"
- Foo bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The title may
- may extend over
- over multiple
- "multiple lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url '"
- "title\nline1"
- "line1\nline2\n'"
- "line2\n'\n\n[foo]\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title\nline1"
- "line1\nline2"
- "\">foo</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, it may"
- ", it may not"
- may not contain
- "contain a ["
- "[blank line]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url '"
- ": /url 'title"
- "with blank line'"
- "[foo]\n."
- "<p>[foo]: /url '"
- ": /url 'title</p"
- title</p>
- "<p>with blank"
- "blank line'</p>"
- "<p>[foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The title may be
- "may be omitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]:\n/url"
- "/url\n\n[foo]\n."
- "<p><a href=\"/url"
- "=\"/url\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The link
- link destination
- may not be
- "not be omitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]:\n\n[foo]\n."
- ".\n<p>[foo]:</p>"
- "<p>[foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, an"
- ", an empty link"
- link destination
- may be specified
- using
- "angle brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: <>\n\n[foo]"
- "[foo]\n."
- "<p><a href=\"\">"
- "href=\"\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The title must
- must be
- be separated
- from the link
- link destination
- by
- "spaces or tabs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: <bar>(baz"
- "bar>(baz)\n\n[foo]"
- "[foo]\n."
- "<p>[foo]: <bar>("
- ": <bar>(baz)</p>"
- "<p>[foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Both title and
- and destination
- can contain
- backslash
- escapes
- and literal
- "backslashes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url\\bar\\"
- "url\\bar\\*baz \""
- "\\*baz \"foo\\\"bar\\"
- "\\\"bar\\baz\""
- "[foo]\n."
- "<p><a href=\"/url"
- "=\"/url%5Cbar*baz"
- "*baz\" title=\"foo"
- "=\"foo&quot;bar\\"
- ";bar\\baz\">foo</a"
- "\">foo</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A link can come
- can come before
- before its
- corresponding
- "definition:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]"
- "[foo]: url\n."
- "<p><a href=\"url\""
- "=\"url\">foo</a></"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- If there are
- are several
- several matching
- "definitions, the"
- ", the first one"
- one takes
- "precedence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]"
- "[foo]: first"
- "[foo]: second\n."
- "<p><a href=\""
- "a href=\"first\">"
- "\"first\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- As noted in the
- in the section
- "section on ["
- "[Links]"
- ", matching of"
- of labels is
- case-insensitive
- "(see [matches])."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[FOO]: /url"
- "[Foo]\n."
- "<p><a href=\"/url"
- "=\"/url\">Foo</a><"
- Foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[ΑΓΩ]: /φου"
- "[αγω]\n."
- "<p><a href=\"/%CF"
- "=\"/%CF%86%CE%BF%"
- "%CE%BF%CF%85\">"
- "%CF%85\">αγω</a><"
- αγω</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Whether
- "something is a ["
- link reference
- "definition] is"
- independent of
- of whether the
- the link
- link reference
- it defines is
- used in the
- in the document.
- "Thus, for"
- ", for example,"
- "example, the"
- ", the following"
- document
- contains just a
- just a link
- a link reference
- "definition, and"
- no visible
- "visible content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url\n."
- "````````````````"
- "````````````````"
- "````````````````"
- Here is another
- "another one:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[\nfoo\n]: /url"
- "]: /url\nbar\n."
- "bar\n.\n<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not a
- is not a link
- a link reference
- "definition,"
- ", because there"
- there are
- characters other
- other than
- than spaces or
- or tabs after
- "after the title:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url \""
- ": /url \"title\""
- " \"title\" ok\n."
- "<p>[foo]: /url &"
- ": /url &quot;"
- "&quot;title&quot"
- "&quot; ok</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is a link
- a link reference
- "definition, but"
- ", but it has no"
- "has no title:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url"
- "\"title\" ok\n."
- "<p>&quot;title&"
- ;title&quot; ok<
- ; ok</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not a
- is not a link
- a link reference
- "definition,"
- ", because it is"
- it is indented
- "four spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url \""
- ": /url \"title\""
- "[foo]\n."
- "<pre><code>[foo]"
- ">[foo]: /url &"
- ": /url &quot;"
- "&quot;title&quot"
- "&quot;"
- "</code></pre>"
- "<p>[foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not a
- is not a link
- a link reference
- "definition,"
- ", because it"
- it occurs inside
- "a code block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```\n[foo]: /url"
- "```\n\n[foo]\n."
- "<pre><code>[foo]"
- ">[foo]: /url"
- "</code></pre>"
- "<p>[foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "A ["
- link reference
- "definition]"
- cannot interrupt
- a paragraph.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n[bar]: /baz"
- "[bar]\n.\n<p>Foo"
- "[bar]: /baz</p>"
- "<p>[bar]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, it can"
- it can directly
- directly follow
- follow other
- other block
- "block elements,"
- ", such as"
- such as headings
- and thematic
- "thematic breaks,"
- "breaks, and it"
- ", and it need"
- it need not be
- not be followed
- followed by a
- by a blank line.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "# [Foo]"
- "[foo]: /url"
- "> bar\n."
- "<h1><a href=\"/"
- "href=\"/url\">Foo<"
- "\">Foo</a></h1>"
- "<blockquote>"
- "<p>bar</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url\nbar"
- "bar\n===\n[foo]\n."
- ".\n<h1>bar</h1>"
- "<p><a href=\"/url"
- "=\"/url\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url\n==="
- "===\n[foo]\n."
- "[foo]\n.\n<p>==="
- "<a href=\"/url\">"
- "=\"/url\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Several ["
- link reference
- "definitions]"
- can occur one
- one after
- "after another,"
- "another, without"
- intervening
- blank lines.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /foo-url"
- "/foo-url \"foo\""
- "[bar]: /bar-url"
- "\"bar\""
- "[baz]: /baz-url"
- "[foo],\n[bar],"
- "[bar],\n[baz]\n."
- "<p><a href=\"/foo"
- "=\"/foo-url\""
- "foo-url\" title=\""
- "title=\"foo\">foo<"
- "\">foo</a>,"
- "<a href=\"/bar-"
- "=\"/bar-url\""
- "bar-url\" title=\""
- "title=\"bar\">bar<"
- "\">bar</a>,"
- "<a href=\"/baz-"
- "=\"/baz-url\">baz<"
- "\">baz</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "["
- Link reference
- "definitions]"
- "] can occur"
- inside block
- block containers
- ", like lists and"
- and block
- block quotations
- ".  They"
- affect the
- the entire
- "entire document,"
- ", not just the"
- the container in
- in which they
- "are defined:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]"
- "> [foo]: /url\n."
- "<p><a href=\"/url"
- "=\"/url\">foo</a><"
- foo</a></p>
- "<blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "## Paragraphs"
- A sequence of
- of non-blank
- "-blank lines"
- lines that
- that cannot be
- be interpreted
- as other
- kinds of blocks
- blocks forms a
- "[paragraph](@)."
- The contents of
- of the paragraph
- are the result
- result of
- of parsing the
- "paragraph'"
- s raw content as
- as inlines.
- "The paragraph'"
- "'s raw content"
- is formed by
- by concatenating
- the lines and
- and removing
- removing initial
- initial and
- and final
- spaces or tabs.
- A simple example
- example with two
- "two paragraphs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "aaa\n\nbbb\n."
- "bbb\n.\n<p>aaa</p>"
- "<p>bbb</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Paragraphs can
- can contain
- contain multiple
- "multiple lines,"
- "lines, but no"
- ", but no blank"
- "no blank lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "aaa\nbbb\n\nccc\nddd"
- "ccc\nddd\n.\n<p>aaa"
- ".\n<p>aaa\nbbb</p>"
- "bbb</p>\n<p>ccc"
- "<p>ccc\nddd</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Multiple blank
- blank lines
- lines between
- paragraphs have
- "have no effect:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "aaa\n\n\nbbb\n."
- "bbb\n.\n<p>aaa</p>"
- "<p>bbb</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Leading spaces
- spaces or tabs
- or tabs are
- tabs are skipped
- "skipped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "  aaa\n bbb\n."
- " bbb\n.\n<p>aaa"
- ".\n<p>aaa\nbbb</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Lines after the
- the first may be
- may be indented
- indented any
- "any amount,"
- "amount, since"
- ", since indented"
- code blocks
- blocks cannot
- cannot interrupt
- paragraphs.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- aaa
- bbb
- ccc
- ".\n<p>aaa\nbbb"
- "bbb\nccc</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, the"
- ", the first line"
- line may be
- may be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- of indentation.
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "   aaa\nbbb\n."
- "bbb\n.\n<p>aaa"
- ".\n<p>aaa\nbbb</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "    aaa\nbbb\n."
- ".\n<pre><code>aaa"
- "</code></pre>"
- "<p>bbb</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Final spaces or
- or tabs are
- are stripped
- stripped before
- before inline
- "inline parsing,"
- "parsing, so a"
- ", so a paragraph"
- that ends with
- with two or more
- or more spaces
- spaces will not
- will not end
- "not end with a ["
- "[hard line\nbreak"
- "break]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "aaa     \nbbb"
- "bbb     \n."
- ".\n<p>aaa<br />"
- bbb</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "## Blank lines"
- "[Blank lines]"
- between block-
- block-level
- "-level elements"
- elements are
- "are ignored,"
- except for the
- for the role
- the role they
- they play in
- in determining
- "whether a [list]"
- "[list]\nis [tight"
- "[tight] or ["
- "] or [loose]."
- Blank lines at
- lines at the
- at the beginning
- and end of the
- of the document
- document are
- are also ignored
- ignored.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- aaa
- "aaa\n  \n\n# aaa"
- "  \n\n# aaa\n\n  \n."
- "  \n.\n<p>aaa</p>"
- "<h1>aaa</h1>"
- "````````````````"
- "````````````````"
- "````````````````"
- "#"
- Container blocks
- A
- "[container block"
- "block](#"
- "](#container-"
- "-blocks)"
- is a block that
- that has other
- blocks as its
- as its contents.
- There are two
- are two basic
- basic kinds of
- of container
- " blocks:\n["
- "[block quotes]"
- "] and ["
- "and [list items]"
- "].\n[Lists]"
- are meta-
- meta-containers
- "for [list items]"
- "]."
- We define the
- the syntax for
- for container
- blocks
- recursively.
- The general
- form of the
- the definition
- "is:"
- ">"
- If X is a
- X is a sequence
- sequence of
- "of blocks, then"
- ", then the"
- then the result
- " result of\n>"
- transforming X
- X in such-and-
- "-and-such a way"
- a way is a
- is a container
- " of type Y\n>"
- with these
- these blocks as
- as its content.
- "So, we explain"
- explain what
- what counts as a
- as a block quote
- quote or list
- or list item by
- by explaining
- how these can be
- "*generated*"
- from their
- their contents.
- This should
- should suffice
- to define the
- "the syntax,"
- "syntax, although"
- although it does
- it does not give
- not give a
- give a recipe
- a recipe for
- "*parsing*"
- these
- constructions.
- (A recipe is
- is provided
- provided below
- below in the
- in the section
- section entitled
- "[A parsing"
- parsing strategy
- "strategy](#"
- "](#appendix-a-"
- "-a-parsing-"
- parsing-strategy
- strategy).)
- "## Block quotes"
- A
- "[block quote"
- "quote marker](@)"
- ","
- optionally
- preceded by up
- by up to three
- to three spaces
- spaces of
- "of indentation,"
- consists of (a)
- of (a) the
- a) the character
- "`>`"
- together with a
- with a following
- space of
- "indentation, or"
- ", or (b) a"
- or (b) a single
- single character
- "`>`"
- not followed by
- by a space of
- indentation.
- The following
- "rules define ["
- "[block quotes]:"
- "1."
- "**Basic case.**"
- If a string of
- of lines *Ls*
- constitute a
- a sequence
- of blocks *Bs*
- ", then the"
- then the result
- result of
- of prepending a
- "[block quote"
- "marker]"
- to the beginning
- of each line in
- "*Ls*\n    is a"
- "[block quote](#"
- "quote](#block-"
- "(#block-quotes)"
- containing *Bs*.
- "2."
- "**Laziness.**"
- If a string of
- of lines *Ls*
- constitute a
- "[block\n    quote"
- "](#block-quotes)"
- with contents
- "*Bs*"
- ", then the"
- then the result
- result of
- of deleting
- "the initial ["
- block quote
- "quote marker]"
- "] from one or"
- more lines in
- lines in which
- in which the
- the next
- next character
- other than a
- than a space or
- space or tab
- or tab after the
- "["
- block quote
- "quote marker] is"
- "] is ["
- paragraph
- continuation
- "text]"
- is a block quote
- quote with *Bs*
- as its content.
- "[Paragraph"
- continuation
- "text](@) is text"
- that will be
- will be parsed
- parsed as part
- as part of the
- of the content
- content of a
- "of a paragraph,"
- ", but does"
- not occur at the
- at the beginning
- of the paragraph
- "."
- "3."
- "**"
- Consecutiveness.
- "**"
- A document
- document cannot
- cannot contain
- "contain two ["
- "[block"
- "block\n    quotes"
- "quotes]"
- in a row unless
- unless there is
- "there is a ["
- "[blank line]"
- "] between them."
- Nothing else
- else counts as a
- "[block quote](#"
- "quote](#block-"
- "(#block-quotes)."
- Here is a simple
- a simple example
- "example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> # Foo\n> bar"
- "> bar\n> baz\n."
- ".\n<blockquote>"
- "<h1>Foo</h1>"
- "<p>bar\nbaz</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- The space or tab
- or tab after the
- "`>`"
- characters can
- "can be omitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "># Foo\n>bar"
- ">bar\n> baz\n."
- ".\n<blockquote>"
- "<h1>Foo</h1>"
- "<p>bar\nbaz</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "The `>`"
- characters can
- can be preceded
- preceded by up
- by up to three
- to three spaces
- spaces of
- "of indentation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> # Foo"
- "   > bar\n > baz"
- " > baz\n."
- ".\n<blockquote>"
- "<h1>Foo</h1>"
- "<p>bar\nbaz</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces of
- of indentation
- "is too many:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> # Foo"
- "> bar"
- "    > baz\n."
- "<pre><code>&gt;"
- ">&gt; # Foo"
- "&gt; bar"
- "&gt; baz"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- The Laziness
- Laziness clause
- clause allows us
- us to omit the
- "`>` before\n["
- paragraph
- continuation
- "text]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> # Foo\n> bar"
- "> bar\nbaz\n."
- ".\n<blockquote>"
- "<h1>Foo</h1>"
- "<p>bar\nbaz</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- A block quote
- quote can
- can contain some
- some lazy and
- lazy and some
- and some non-
- non-lazy
- continuation
- "lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> bar\nbaz\n> foo"
- "> foo\n."
- ".\n<blockquote>"
- "<p>bar\nbaz"
- "baz\nfoo</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- Laziness only
- only applies to
- to lines that
- that would have
- have been
- continuations of
- paragraphs had
- had they been
- been prepended
- "with ["
- block quote
- "quote markers]."
- "For example, the"
- "`> `"
- cannot be
- be omitted in
- in the second
- second line of
- "``` markdown"
- "> foo\n> ---\n```"
- without changing
- changing the
- "the meaning:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\n---\n."
- ".\n<blockquote>"
- "<p>foo</p>"
- "</blockquote>"
- "<hr />"
- "````````````````"
- "````````````````"
- "````````````````"
- "Similarly, if we"
- ", if we omit the"
- "`> `"
- in the second
- second line of
- "``` markdown"
- "> - foo\n> - bar"
- "```"
- then the block
- block quote ends
- ends after the
- "the first line:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> - foo\n- bar\n."
- ".\n<blockquote>"
- "<ul>"
- "<li>foo</li>"
- "</ul>"
- "</blockquote>"
- "<ul>"
- "<li>bar</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- For the same
- "the same reason,"
- "reason, we can'"
- "'t omit the `> `"
- "`> ` in front of"
- subsequent lines
- lines of an
- of an indented
- indented or
- or fenced code
- "code block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">     foo"
- "    bar\n."
- ".\n<blockquote>"
- "<pre><code>foo"
- "</code></pre>"
- "</blockquote>"
- "<pre><code>bar"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> ```\nfoo\n```\n."
- ".\n<blockquote>"
- "<pre><code></"
- "<code></code></"
- /code></pre>
- "</blockquote>"
- "<p>foo</p>"
- "<pre><code></"
- "<code></code></"
- /code></pre>
- "````````````````"
- "````````````````"
- "````````````````"
- Note that in the
- in the following
- "case, we have a"
- "[lazy"
- continuation
- "line]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\n    - bar"
- "    - bar\n."
- ".\n<blockquote>"
- "<p>foo\n- bar</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "To see why, note"
- ", note that in"
- "```markdown"
- "> foo"
- ">     - bar\n```"
- "the `- bar`"
- is indented too
- too far to start
- "to start a list,"
- "a list, and can'"
- "'t"
- be an indented
- indented code
- code block
- block because
- because indented
- indented code
- code blocks
- blocks cannot
- interrupt
- "paragraphs, so"
- ", so it is ["
- paragraph
- continuation
- "text]."
- A block quote
- quote can be
- "can be empty:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">\n.\n<blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">\n>  \n> \n."
- ".\n<blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- A block quote
- quote can have
- can have initial
- initial or final
- or final blank
- "blank lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">\n> foo\n>  \n."
- ".\n<blockquote>"
- "<p>foo</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- A blank line
- line always
- always separates
- "block quotes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\n\n> bar\n."
- ".\n<blockquote>"
- "<p>foo</p>"
- "</blockquote>"
- "<blockquote>"
- "<p>bar</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- (Most current
- current Markdown
- "implementations,"
- ", including John"
- "John Gruber's"
- "'s\noriginal"
- "`Markdown.pl`"
- ", will parse"
- parse this
- this example as
- as a single
- a single block
- block quote
- with two
- two paragraphs.
- But it seems
- it seems better
- better to allow
- to allow the
- the author to
- to decide
- whether two
- two block quotes
- quotes or one
- or one are
- one are wanted.)
- Consecutiveness
- means that if we
- if we put these
- these block
- block quotes
- "quotes together,"
- we get a single
- a single block
- "block quote:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\n> bar\n."
- ".\n<blockquote>"
- "<p>foo\nbar</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- To get a block
- a block quote
- quote with two
- "two paragraphs,"
- ", use:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> foo\n>\n> bar\n."
- ".\n<blockquote>"
- "<p>foo</p>"
- "<p>bar</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- Block quotes can
- can interrupt
- "paragraphs:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\n> bar\n."
- ".\n<p>foo</p>"
- "<blockquote>"
- "<p>bar</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "In general,"
- "general, blank"
- ", blank lines"
- lines are not
- are not needed
- needed before or
- or after block
- "quotes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> aaa\n***\n> bbb"
- "> bbb\n."
- ".\n<blockquote>"
- "<p>aaa</p>"
- "</blockquote>"
- "<hr />"
- "<blockquote>"
- "<p>bbb</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, because"
- because of
- "of laziness, a"
- ", a blank line"
- line is needed
- needed between
- a block quote
- quote and a
- and a following
- "paragraph:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> bar\nbaz\n."
- ".\n<blockquote>"
- "<p>bar\nbaz</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> bar\n\nbaz\n."
- ".\n<blockquote>"
- "<p>bar</p>"
- "</blockquote>"
- "<p>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> bar\n>\nbaz\n."
- ".\n<blockquote>"
- "<p>bar</p>"
- "</blockquote>"
- "<p>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- It is a
- is a consequence
- of the Laziness
- Laziness rule
- rule that any
- that any number
- "of initial `>`"
- s may be omitted
- omitted on a
- a continuation
- line of a
- nested block
- "block quote:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> > > foo\nbar\n."
- ".\n<blockquote>"
- "<blockquote>"
- "<blockquote>"
- "<p>foo\nbar</p>"
- "</blockquote>"
- "</blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">>> foo\n> bar"
- "> bar\n>>baz\n."
- ".\n<blockquote>"
- "<blockquote>"
- "<blockquote>"
- "<p>foo\nbar"
- "bar\nbaz</p>"
- "</blockquote>"
- "</blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- When including
- an indented code
- code block in a
- in a block quote
- "quote,"
- remember that
- "that the ["
- block quote
- "quote marker]"
- "] includes"
- "both the `>`"
- and a following
- space of
- of indentation.
- So *five spaces*
- are needed
- "after the `>`:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">     code"
- ">    not code\n."
- ".\n<blockquote>"
- "<pre><code>code"
- "</code></pre>"
- "</blockquote>"
- "<blockquote>"
- "<p>not code</p>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "## List items"
- A
- "[list marker](@)"
- " is a\n["
- bullet list
- "list marker]"
- "] or an ["
- ordered list
- "list marker]."
- A
- "[bullet list"
- "list marker](@)"
- "is a `-`, `+`"
- "`-`, `+`, or `*`"
- "`*` character."
- An
- "[ordered list"
- "list marker](@)"
- is a sequence of
- of 1--
- 9 arabic digits
- "digits (`0-9`"
- "), followed by"
- " by either a\n`.`"
- character or a
- "`)`"
- character.
- (The reason for
- for the length
- limit is that
- is that with 10
- with 10 digits
- digits we start
- we start seeing
- seeing integer
- overflows
- in some browsers
- browsers.)
- The following
- "rules define ["
- "[list items]:"
- "1."
- "**Basic case.**"
- If a sequence of
- of lines *Ls*
- constitute a
- a sequence of
- blocks *Bs*
- starting with a
- with a character
- other than a
- than a space or
- "space or tab,"
- "or tab, and *M*"
- "*M* is"
- a list marker of
- of width *W*
- followed by 1 ≤
- "*N*"
- ≤ 4 spaces of
- "of indentation,"
- then the result
- result of
- of prepending
- "*M*"
- and the
- the following
- spaces to the
- to the first
- first line
- of *Ls*
- ", and indenting"
- subsequent lines
- lines of *Ls* by
- "*Ls* by *W + N*"
- "spaces, is a"
- list item with
- "*Bs*"
- as its contents.
- The type of the
- of the list item
- (bullet or
- or ordered) is
- ) is determined
- by the type of
- type of its list
- its list marker.
- If the list item
- "item is ordered,"
- "ordered, then it"
- then it is also
- is also assigned
- assigned a start
- "number, based on"
- based on the
- on the ordered
- ordered list
- list marker.
- "Exceptions:"
- "1."
- When the first
- first list item
- "item in a [list]"
- "list] interrupts"
- a paragraph---
- "that is, when it"
- when it starts
- starts on a line
- a line that
- that would
- otherwise count
- "count as ["
- paragraph
- continuation
- "text]---then (a)"
- the lines *Ls*
- must not begin
- begin with a
- with a blank
- "a blank line,"
- "line, and (b) if"
- the list item is
- "item is ordered,"
- "ordered, the"
- ", the start"
- start number
- number must be 1
- be 1.
- "2."
- If any line is a
- "[thematic break]"
- "]["
- "[thematic breaks"
- "] then"
- that line is not
- is not a list
- a list item.
- "For example, let"
- "*Ls*"
- be the lines
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<p>A paragraph"
- with two lines.<
- lines.</p>
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<blockquote>"
- "<p>A block quote"
- quote.</p>
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- And let *M*
- be the marker
- "`1.`, and *N*"
- "= 2."
- "Then rule #1"
- "rule #1 says"
- that the
- the following is
- is an ordered
- ordered list
- list item with
- with start
- "start number 1,"
- and the same
- same contents as
- "*Ls*:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<ol>\n<li>"
- "<p>A paragraph"
- with two lines.<
- lines.</p>
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<blockquote>"
- "<p>A block quote"
- quote.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- The most
- most important
- thing to notice
- notice is that
- is that the
- the position of
- the text after
- after the list
- the list marker
- determines how
- how much
- much indentation
- is needed in
- in subsequent
- blocks in the
- in the list item
- item.
- If the list
- marker takes up
- takes up two
- up two spaces of
- "of indentation,"
- ", and there are"
- are three spaces
- spaces between
- the list marker
- marker and the
- and the next
- next character
- other than a
- than a space or
- "space or tab,"
- "or tab, then"
- ", then blocks"
- must be indented
- indented five
- five spaces in
- in order to fall
- to fall under
- under the list
- item.
- Here are some
- some examples
- examples showing
- showing how far
- how far content
- content must be
- must be indented
- indented to be
- put under the
- "the list item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- one\n\n two\n."
- " two\n.\n<ul>"
- "<li>one</li>"
- "</ul>\n<p>two</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- one\n\n  two\n."
- "  two\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>one</p>"
- "<p>two</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-    one"
- "     two\n.\n<ul>"
- "<li>one</li>"
- "</ul>"
- "<pre><code> two"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-    one"
- "      two\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>one</p>"
- "<p>two</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- It is tempting
- tempting to
- to think of this
- of this in terms
- in terms of
- terms of columns
- "columns:  the"
- the continuation
- blocks must be
- must be indented
- indented at
- at least to the
- to the column of
- of the first
- first character
- other than
- a space or tab
- or tab after the
- the list marker.
- "However, that is"
- that is not
- is not quite
- quite right.
- The spaces of
- of indentation
- after the list
- the list marker
- marker determine
- how much
- much relative
- indentation is
- is needed.
- Which column
- column this
- this indentation
- reaches will
- will depend on
- how the list
- the list item is
- item is embedded
- embedded in
- in other
- "constructions,"
- ", as shown by"
- "this example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> > 1.  one"
- ">>\n>>     two\n."
- ".\n<blockquote>"
- "<blockquote>"
- "<ol>\n<li>"
- "<li>\n<p>one</p>"
- "<p>two</p>\n</li>"
- "</li>\n</ol>"
- "</blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Here `two`"
- occurs in the
- in the same
- the same column
- column as the
- as the list
- the list marker
- "`1.`,"
- but is actually
- contained in the
- in the list item
- "item, because"
- because there is
- sufficient
- indentation
- after the last
- last containing
- blockquote
- marker.
- The converse is
- is also possible
- possible.
- In the following
- "example, the"
- ", the word `two`"
- occurs far to
- far to the right
- right of the
- of the initial
- initial text of
- text of the list
- "the list item,"
- "`one`, but"
- it is not
- not considered
- part of the list
- "the list item,"
- "item, because it"
- it is not
- is not indented
- far enough past
- past the
- the blockquote
- "marker:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ">>- one\n>>"
- ">>\n  >  > two\n."
- ".\n<blockquote>"
- "<blockquote>"
- "<ul>"
- "<li>one</li>"
- "</ul>\n<p>two</p>"
- "</blockquote>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that at
- that at least
- at least one
- one space or tab
- or tab is needed
- needed between
- between the list
- the list marker
- marker and
- any following
- "content, so"
- ", so these are"
- are not list
- "not list items:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-one\n\n2.two\n."
- ".\n<p>-one</p>"
- "<p>2.two</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list item may
- item may contain
- contain blocks
- blocks that are
- are separated by
- by more than
- one blank line.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n\n\n  bar\n."
- "  bar\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<p>bar</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list item may
- item may contain
- contain any kind
- any kind of
- "kind of block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1.  foo\n\n    ```"
- "    ```\n    bar"
- "    bar\n    ```"
- "    ```\n\n    baz"
- "    > bam\n.\n<ol>"
- ".\n<ol>\n<li>"
- "<li>\n<p>foo</p>"
- "<pre><code>bar"
- "</code></pre>"
- "<p>baz</p>"
- "<blockquote>"
- "<p>bam</p>"
- "</blockquote>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list item that
- that contains an
- an indented code
- code block will
- will preserve
- empty lines
- lines within the
- the code block
- block verbatim.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- Foo\n\n      bar"
- "      baz\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>Foo</p>"
- "<pre><code>bar"
- baz
- "</code></pre>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that
- that ordered
- ordered list
- list start
- start numbers
- numbers must be
- must be nine
- be nine digits
- "digits or less:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "123456789. ok\n."
- "<ol start=\""
- "start=\"123456789"
- "\">\n<li>ok</li>"
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1234567890. not
- ". not ok\n."
- "<p>1234567890."
- ". not ok</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A start number
- number may begin
- "begin with 0s:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "0. ok\n."
- ".\n<ol start=\"0\">"
- "<li>ok</li>"
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "003. ok\n."
- ".\n<ol start=\"3\">"
- "<li>ok</li>"
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- A start number
- number may not
- may not be
- "not be negative:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-1. not ok\n."
- "<p>-1. not ok</p"
- ok</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "2."
- "**Item starting"
- starting with
- with indented
- indented code.**
- If a sequence of
- of lines *Ls*
- constitute a
- a sequence of
- of blocks *Bs*
- starting with an
- with an indented
- indented code
- "block, and *M*"
- is a list marker
- marker of width
- "*W* followed by"
- one space of
- "of indentation,"
- ", then the"
- then the result
- result of
- of prepending
- "*M* and the"
- following space
- space to the
- to the first
- first line of
- "*Ls*"
- ", and indenting"
- subsequent lines
- of *Ls* by
- "*Ls* by *W + 1*"
- "spaces, is a"
- ", is a list item"
- item with *Bs*
- as its contents.
- If a line is
- "line is empty,"
- "empty, then it"
- then it need not
- need not be
- not be indented.
- The type of the
- list item (
- item (bullet or
- or ordered) is
- ) is determined
- by the type of
- type of its list
- marker.
- If the list item
- "item is ordered,"
- "ordered, then it"
- then it is also
- is also assigned
- assigned a
- "start number,"
- "number, based on"
- based on the
- on the ordered
- ordered list
- list marker.
- An indented code
- code block will
- will have to be
- to be preceded
- preceded by four
- by four spaces
- spaces of
- of indentation
- beyond the edge
- the edge of the
- of the region
- region where
- where text will
- will be included
- included in the
- in the list item
- item.
- In the following
- case that is 6
- "is 6 spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n\n      bar"
- "      bar\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<pre><code>bar"
- "</code></pre>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- And in this case
- case it is 11
- "it is 11 spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 10.  foo
- "           bar\n."
- "<ol start=\"10\">"
- "<li>\n<p>foo</p>"
- "<pre><code>bar"
- "</code></pre>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- If the *first*
- block in the
- in the list item
- item is an
- is an indented
- indented code
- "code block,"
- "then by rule #2,"
- "rule #2, the"
- "#2, the contents"
- contents must be
- must be preceded
- preceded by
- "*one*"
- space of
- of indentation
- after the list
- "the list marker:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- indented code
- paragraph
- "    more code\n."
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<p>paragraph</p>"
- "<pre><code>more"
- ">more code"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.     indented
- indented code
- paragraph
- more code
- ".\n<ol>\n<li>"
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<p>paragraph</p>"
- "<pre><code>more"
- ">more code"
- "</code></pre>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that an
- an additional
- space of
- of indentation
- is interpreted
- as space
- inside the code
- "the code block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.      indented
- indented code
- paragraph
- more code
- ".\n<ol>\n<li>"
- "<pre><code>"
- "><code> indented"
- indented code
- "</code></pre>"
- "<p>paragraph</p>"
- "<pre><code>more"
- ">more code"
- "</code></pre>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that rules
- "rules #1 and #2"
- "1 and #2 only"
- "#2 only apply to"
- apply to two
- "to two cases:  ("
- ":  (a) cases"
- in which the
- the lines to be
- to be included
- included in a
- in a list item
- item begin with
- with a
- character other
- other than a
- than a space or
- "space or tab,"
- "or tab, and (b)"
- and (b) cases in
- cases in which
- they begin with
- with an indented
- indented code
- block.
- In a case like
- like the
- "the following,"
- ", where the"
- the first block
- block begins
- begins with
- three spaces of
- "of indentation,"
- ", the rules do"
- rules do not
- do not allow us
- allow us to form
- to form a list
- a list item by
- indenting the
- the whole thing
- thing and
- and prepending a
- "a list marker:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "   foo\n\nbar\n."
- "bar\n.\n<p>foo</p>"
- "<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-    foo\n\n  bar"
- "  bar\n.\n<ul>"
- "<li>foo</li>"
- "</ul>\n<p>bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not a
- a significant
- "restriction,"
- ", because when a"
- when a block is
- is preceded by
- by up to
- three spaces of
- "of indentation,"
- ", the"
- the indentation
- can always be
- be removed
- removed without
- a change in
- "interpretation,"
- ", allowing rule"
- "rule #1 to be"
- "#1 to be applied"
- "applied.  So, in"
- "the above case:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-  foo\n\n   bar\n."
- "   bar\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<p>bar</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "3."
- "**Item starting"
- starting with a
- with a blank
- a blank line.**
- If a sequence of
- of lines *Ls*
- starting with a
- "with a single ["
- "[blank line]"
- constitute a (
- a (possibly
- possibly empty)
- sequence of
- of blocks *Bs*
- "*Bs*, and *M*"
- is a list marker
- marker of width
- "*W*,"
- then the result
- result of
- of prepending
- "*M*"
- to the first
- first line of
- "*Ls*, and"
- preceding
- subsequent lines
- lines of *Ls* by
- "*Ls* by *W + 1*"
- spaces of
- "of indentation,"
- ", is a"
- list item with
- "*Bs*"
- as its contents.
- If a line is
- "line is empty,"
- "empty, then it"
- then it need not
- need not be
- not be indented.
- The type of the
- list item (
- item (bullet or
- or ordered) is
- ) is determined
- by the type of
- type of its list
- marker.
- If the list item
- "item is ordered,"
- "ordered, then it"
- then it is also
- is also assigned
- assigned a
- "start number,"
- "number, based on"
- based on the
- on the ordered
- ordered list
- list marker.
- Here are some
- are some list
- list items that
- that start with
- with a blank
- a blank line but
- line but are not
- "are not empty:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-\n  foo\n-\n  ```"
- "-\n  ```\n  bar"
- "  bar\n  ```\n-"
- "-\n      baz\n."
- ".\n<ul>"
- "<li>foo</li>"
- "<li>"
- "<pre><code>bar"
- "</code></pre>"
- "</li>\n<li>"
- "<pre><code>baz"
- "</code></pre>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- When the list
- the list item
- item starts with
- with a blank
- "a blank line,"
- "line, the number"
- number of spaces
- following the
- the list marker
- "marker doesn'"
- t change the
- the required
- "indentation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-   \n  foo\n."
- "  foo\n.\n<ul>"
- "<li>foo</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list item can
- item can begin
- begin with at
- with at most one
- most one blank
- blank line.
- In the following
- "example, `foo`"
- is not part of
- part of the list
- "item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-\n\n  foo\n.\n<ul>"
- ".\n<ul>\n<li></li>"
- "</ul>\n<p>foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Here is an empty
- an empty bullet
- bullet list item
- "item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n-\n- bar\n."
- "- bar\n.\n<ul>"
- "<li>foo</li>"
- "<li></li>"
- "<li>bar</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- It does not
- does not matter
- matter whether
- whether there
- there are spaces
- spaces or tabs
- tabs following
- "the [list marker"
- "]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n-   \n- bar"
- "- bar\n.\n<ul>"
- "<li>foo</li>"
- "<li></li>"
- "<li>bar</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- Here is an empty
- an empty ordered
- ordered list
- "list item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1. foo\n2.\n3. bar"
- "3. bar\n.\n<ol>"
- "<li>foo</li>"
- "<li></li>"
- "<li>bar</li>"
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list may start
- start or end
- or end with an
- with an empty
- an empty list
- "list item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*\n.\n<ul>"
- ".\n<ul>\n<li></li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, an"
- ", an empty list"
- list item cannot
- cannot interrupt
- "a paragraph:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\n*\n\nfoo\n1.\n."
- "foo\n1.\n.\n<p>foo"
- ".\n<p>foo\n*</p>"
- "*</p>\n<p>foo"
- "<p>foo\n1.</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "4."
- "**Indentation.**"
- If a sequence of
- of lines *Ls*
- constitutes a
- a list item
- according to
- "to rule #1, #2,"
- "#1, #2, or #3,"
- ", or #3, then"
- "#3, then the"
- then the result
- result of
- of preceding
- each line
- of *Ls*
- by up to three
- to three spaces
- spaces of
- of indentation (
- (the same for
- same for each
- for each line)
- line) also
- constitutes a
- a list item with
- with the same
- same contents
- contents and
- and attributes.
- If a line is
- "empty, then it"
- then it need not
- need not be
- not be indented.
- Indented one
- "one space:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<ol>\n<li>"
- "<p>A paragraph"
- with two lines.<
- lines.</p>
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<blockquote>"
- "<p>A block quote"
- quote.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Indented two
- "two spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<ol>\n<li>"
- "<p>A paragraph"
- with two lines.<
- lines.</p>
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<blockquote>"
- "<p>A block quote"
- quote.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Indented three
- "three spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<ol>\n<li>"
- "<p>A paragraph"
- with two lines.<
- lines.</p>
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<blockquote>"
- "<p>A block quote"
- quote.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Four spaces
- spaces indent
- indent gives a
- gives a code
- "a code block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<pre><code>1."
- A paragraph
- with two lines.
- indented code
- "&gt; A block"
- A block quote.
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- "5."
- "**Laziness.**"
- If a string of
- of lines *Ls*
- constitute a
- "[list\n    item"
- "](#list-items)"
- with contents
- "*Bs*"
- ", then the"
- then the result
- result of
- of deleting
- some or all of
- all of the
- the indentation
- from one or more
- or more lines in
- lines in which
- in which the
- next character
- other than a
- than a space or
- space or tab
- or tab after the
- the indentation
- " is\n    ["
- paragraph
- continuation
- "text] is a"
- list item with
- with the same
- same contents
- contents and
- and attributes.
- The unindented
- lines are called
- "[lazy"
- continuation
- "line](@)s."
- Here is an
- is an example
- "example with ["
- lazy
- continuation
- "lines]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "> A block quote."
- ".\n<ol>\n<li>"
- "<p>A paragraph"
- with two lines.<
- lines.</p>
- "<pre><code>"
- "><code>indented"
- indented code
- "</code></pre>"
- "<blockquote>"
- "<p>A block quote"
- quote.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Indentation can
- can be partially
- "deleted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 1.  A paragraph
- with two lines.
- ".\n<ol>"
- "<li>A paragraph"
- with two lines.<
- lines.</li>
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- These examples
- examples show
- show how
- how laziness can
- can work in
- work in nested
- "structures:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> 1."
- "> Blockquote"
- continued here.
- ".\n<blockquote>"
- "<ol>\n<li>"
- "<blockquote>"
- "<p>Blockquote"
- continued here.<
- here.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "> 1."
- "> Blockquote"
- "> continued here"
- " here.\n."
- ".\n<blockquote>"
- "<ol>\n<li>"
- "<blockquote>"
- "<p>Blockquote"
- continued here.<
- here.</p>
- "</blockquote>"
- "</li>\n</ol>"
- "</blockquote>"
- "````````````````"
- "````````````````"
- "````````````````"
- "6."
- "**That's all.**"
- Nothing that is
- that is not
- is not counted
- counted as a
- as a list item
- item by rules
- "#1--"
- "--5 counts as a"
- "[list item](#"
- "item](#list-"
- "](#list-items)."
- The rules for
- for sublists
- sublists follow
- follow from the
- from the general
- " general rules\n["
- "[above]["
- "][List items]"
- "."
- A sublist must
- must be indented
- indented the
- the same number
- of spaces of
- of indentation a
- a paragraph
- would need to be
- to be in order
- in order to be
- to be included
- in the list item
- item.
- "So, in this case"
- case we need two
- need two spaces
- "spaces indent:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n  - bar"
- "- baz"
- "      - boo\n."
- ".\n<ul>\n<li>foo"
- "<li>foo\n<ul>"
- "<ul>\n<li>bar"
- "<li>bar\n<ul>"
- "<ul>\n<li>baz"
- "<li>baz\n<ul>"
- "<li>boo</li>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- One is not
- "is not enough:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n - bar"
- " - bar\n  - baz"
- "  - baz\n   - boo"
- "   - boo\n.\n<ul>"
- "<li>foo</li>"
- "<li>bar</li>"
- "<li>baz</li>"
- "<li>boo</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- Here we need
- "we need four,"
- "four, because"
- because the list
- the list marker
- "marker is wider:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- 10) foo
- "    - bar\n."
- "<ol start=\"10\">"
- "<li>foo\n<ul>"
- "<li>bar</li>"
- "</ul>\n</li>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Three is not
- "is not enough:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "10) foo\n   - bar"
- "   - bar\n."
- "<ol start=\"10\">"
- "<li>foo</li>"
- "</ol>\n<ul>"
- "<li>bar</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list may be
- may be the first
- first block in a
- "in a list item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- - foo\n.\n<ul>"
- ".\n<ul>\n<li>\n<ul>"
- "<li>foo</li>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1. - 2. foo\n."
- ".\n<ol>\n<li>\n<ul>"
- "<ul>\n<li>"
- "<ol start=\"2\">"
- "<li>foo</li>"
- "</ol>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- A list item can
- item can contain
- contain a
- "a heading:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- # Foo\n- Bar"
- "- Bar\n  ---"
- "  ---\n  baz\n."
- "  baz\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<h1>Foo</h1>"
- "</li>\n<li>"
- "<h2>Bar</h2>"
- "baz</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "### Motivation"
- "John Gruber'"
- s Markdown spec
- spec says the
- the following
- about list items
- "items:"
- "1. \""
- List markers
- typically start
- start at the
- at the left
- "the left margin,"
- "margin, but may"
- but may be
- may be indented
- by up to three
- to three spaces.
- List markers
- markers must be
- must be followed
- followed by one
- by one or more
- spaces or a tab.
- "\""
- "2. \""
- To make lists
- "lists look nice,"
- "nice, you can"
- you can wrap
- can wrap items
- items with
- with hanging
- hanging indents
- "...."
- "But if you don'"
- "t want to, you"
- "to, you don'"
- "'t have to.\""
- "3. \""
- List items may
- may consist of
- of multiple
- paragraphs.
- Each subsequent
- paragraph in a
- in a list item
- item must be
- must be indented
- indented by
- by either 4
- either 4 spaces
- 4 spaces or one
- "tab.\""
- "4. \""
- It looks nice if
- nice if you
- if you indent
- indent every
- every line of
- line of the
- the subsequent
- "paragraphs,"
- "but here again,"
- "again, Markdown"
- Markdown will
- will allow you
- "you to be lazy.\""
- "5. \""
- To put a
- put a blockquote
- within a list
- "a list item, the"
- ", the blockquote"
- "'s `>`"
- delimiters need
- need to be
- "to be indented.\""
- "6. \""
- To put a code
- a code block
- block within a
- within a list
- "a list item, the"
- ", the code block"
- block needs to
- needs to be
- indented twice —
- twice — 8 spaces
- 8 spaces or two
- "or two tabs.\""
- These rules
- rules specify
- specify that a
- that a paragraph
- under a list
- a list item must
- must be indented
- four spaces (
- "(presumably,"
- ", from the left"
- "the left margin,"
- "margin, rather"
- ", rather than"
- than the start
- start of
- "the list marker,"
- "marker, but this"
- but this is not
- "is not said),"
- "said), and that"
- and that code
- code under a
- under a list
- a list item
- must be indented
- indented eight
- eight spaces
- spaces instead
- instead of the
- of the usual
- usual four.
- They also say
- that a block
- a block quote
- quote must be
- must be indented
- "indented, but"
- ", but not by how"
- by how much;
- "much; however,"
- "however, the"
- example given
- given has four
- has four spaces
- indentation.
- Although nothing
- nothing is said
- about other
- other kinds of
- kinds of block-
- block-level
- "-level content,"
- "content, it is"
- it is certainly
- reasonable to
- infer that *all*
- block elements
- elements under a
- under a list
- "a list item,"
- "item, including"
- other
- "lists, must be"
- must be indented
- indented four
- four spaces.
- This principle
- has been called
- called the
- "*four-space rule"
- rule*.
- The four-space
- "-space rule is"
- rule is clear
- is clear and
- "and principled,"
- ", and if the"
- if the reference
- implementation
- "`Markdown.pl`"
- "had followed it,"
- "it, it probably"
- probably would
- would have
- become the
- the standard.
- "However,"
- "`Markdown.pl`"
- allowed
- paragraphs and
- sublists to
- to start with
- with only two
- only two spaces
- "indentation, at"
- ", at least on"
- least on the
- outer level.
- "Worse, its"
- ", its behavior"
- behavior was
- was inconsistent
- ": a sublist of"
- of an
- outer-level list
- list needed two
- two spaces
- "indentation, but"
- ", but a sublist"
- sublist of this
- sublist needed
- needed three
- three spaces.
- It is not
- "not surprising,"
- ", then, that"
- ", that different"
- implementations
- of Markdown have
- have developed
- very different
- rules for
- determining what
- what comes under
- under a list
- a list item.
- (Pandoc and
- and python-
- "python-Markdown,"
- "for example,"
- "example, stuck"
- ", stuck with"
- "with Gruber'"
- s syntax
- description and
- and the four-
- four-space
- "rule, while"
- ", while discount"
- "discount,"
- ", redcarpet,"
- ", marked, PHP"
- ", PHP Markdown,"
- ", and others"
- followed
- "`Markdown.pl`'"
- s behavior more
- more closely.)
- "Unfortunately,"
- ", given the"
- the divergences
- between
- "implementations,"
- ", there"
- is no way to
- way to give a
- give a spec for
- spec for list
- for list items
- items that will
- will be
- be guaranteed
- not
- to break any
- any existing
- documents.
- "However, the"
- ", the spec given"
- given here
- here should
- correctly handle
- handle lists
- lists formatted
- with either the
- the four-space
- "-space rule or"
- the more
- more forgiving
- "`Markdown.pl`"
- "behavior,"
- ", provided they"
- they are laid
- are laid out
- in a way that is
- that is natural
- natural for a
- for a human to
- human to read.
- The strategy
- strategy here is
- here is to let
- to let the width
- width and
- and indentation
- of the list
- the list marker
- determine the
- the indentation
- necessary for
- for blocks to
- to fall under
- under the list
- "item, rather"
- ", rather than"
- than having a
- having a fixed
- a fixed and
- and arbitrary
- number.
- The writer can
- think of the
- of the body of
- body of the list
- the list item as
- item as a unit
- a unit which
- which gets
- gets indented to
- to the
- right enough to
- to fit the list
- the list marker
- marker (and any
- any indentation
- on the list
- marker).
- (The laziness
- "laziness rule, #"
- "rule, #5, then"
- "#5, then allows"
- continuation
- lines to be
- unindented if
- if needed.)
- This rule is
- rule is superior
- "superior, we"
- ", we claim, to"
- ", to any rule"
- rule requiring a
- a fixed level of
- indentation from
- from the margin.
- The four-space
- "-space rule is"
- rule is clear
- is clear but
- unnatural.
- It is quite
- unintuitive that
- "``` markdown"
- "- foo\n\n  bar"
- "  bar\n\n  - baz"
- "  - baz\n```"
- should be parsed
- parsed as two
- as two lists
- lists with an
- an intervening
- "paragraph,"
- "``` html"
- "<ul>"
- "<li>foo</li>"
- "</ul>\n<p>bar</p>"
- "<ul>"
- "<li>baz</li>"
- "</ul>\n```"
- as the four-
- four-space rule
- "rule demands,"
- "demands, rather"
- ", rather than a"
- than a single
- "a single list,"
- "``` html"
- "<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<p>bar</p>\n<ul>"
- "<li>baz</li>"
- "</ul>\n</li>"
- "</li>\n</ul>\n```"
- The choice of
- of four spaces
- spaces is
- is arbitrary.
- It can be
- "can be learned,"
- "learned, but it"
- ", but it is"
- not likely to be
- "to be guessed,"
- "guessed, and it"
- ", and it trips"
- it trips up
- up beginners
- regularly.
- Would it help to
- help to adopt a
- adopt a two-
- a two-space rule
- rule?
- The problem is
- is that such
- "a rule, together"
- together with
- with the rule
- rule allowing up
- up to three
- to three spaces
- spaces of
- of indentation
- for
- the initial list
- "list marker,"
- "marker, allows"
- ", allows text"
- text that is
- that is indented
- "*less than* the"
- original list
- list marker to
- to be included
- included in the
- in the list item
- item.
- "For example,"
- "`Markdown.pl`"
- parses
- "``` markdown"
- "   - one\n\n  two"
- "```"
- as a single list
- "list item, with"
- "`two`"
- a continuation
- "paragraph:"
- "``` html"
- "<ul>\n<li>"
- "<li>\n<p>one</p>"
- "<p>two</p>\n</li>"
- "</li>\n</ul>\n```"
- and similarly
- "``` markdown"
- ">   - one\n>"
- ">\n>  two\n```\n\nas"
- "``` html"
- "<blockquote>"
- "<ul>\n<li>"
- "<li>\n<p>one</p>"
- "<p>two</p>\n</li>"
- "</li>\n</ul>"
- "</blockquote>"
- "```"
- This is
- is extremely
- unintuitive.
- Rather than
- than requiring a
- a fixed indent
- indent from the
- "from the margin,"
- "margin, we could"
- we could require
- a fixed indent (
- "indent (say, two"
- "say, two spaces,"
- "spaces, or even"
- or even one
- even one space)
- space) from the
- from the list
- the list marker
- marker (which
- may itself be
- be indented).
- This proposal
- proposal would
- would remove the
- the last anomaly
- discussed.
- Unlike the spec
- spec presented
- "above, it would"
- it would count
- count the
- the following
- as a list item
- item with a
- "a subparagraph,"
- ", even though"
- though the
- the paragraph
- "`bar`"
- is not indented
- indented as far
- as far as the
- as the first
- first paragraph
- "`foo`:"
- "``` markdown"
- " 10. foo\n\n   bar"
- "```"
- Arguably this
- this text does
- does read like a
- like a list item
- "item with `bar`"
- as a
- "a subparagraph,"
- which may count
- count in favor
- in favor of the
- of the proposal.
- "However, on this"
- on this proposal
- indented
- code would have
- have to be
- to be indented
- indented six
- six spaces after
- after the list
- the list marker.
- And this
- would break a
- break a lot of
- lot of existing
- "Markdown, which"
- ", which has the"
- "has the pattern:"
- "``` markdown"
- 1.  foo
- indented code
- "```"
- where the code
- the code is
- code is indented
- indented eight
- eight spaces.
- "The spec above,"
- "above, by"
- ", by contrast,"
- ", will"
- parse this text
- text as expected
- "expected, since"
- ", since the code"
- "the code block'"
- s indentation is
- is measured
- from the
- the beginning of
- "`foo`."
- The one case
- one case that
- that needs
- needs special
- treatment is a
- is a list item
- item that
- "*starts*"
- with indented
- indented code.
- How much
- much indentation
- is required in
- "in that case,"
- "case, since"
- "we don't have a"
- "t have a \""
- "\"first paragraph"
- "\""
- to measure from?
- "Rule #2 simply"
- stipulates
- that in such
- "in such cases,"
- "cases, we"
- ", we require one"
- one space
- indentation from
- from the list
- the list marker
- (and then the
- then the normal
- normal four
- four spaces for
- for the indented
- indented code).
- This will match
- match the
- four-space rule
- rule in cases
- in cases where
- where the list
- the list marker
- marker plus its
- plus its initial
- indentation
- takes four
- four spaces (a
- "(a common case),"
- "case), but"
- "), but diverge"
- diverge in other
- in other cases.
- "## Lists"
- "A [list](@)"
- is a sequence of
- of one or more
- "list items ["
- of the same type
- "]"
- "."
- The list items
- may be separated
- by any number of
- of blank lines.
- Two list items
- items are
- "[of the same"
- "the same type](@"
- "type](@)"
- if they begin
- "begin with a ["
- "[list marker]"
- of the same type
- type.
- Two list markers
- markers are of
- are of the
- same type if (a)
- if (a) they are
- they are bullet
- bullet list
- list markers
- markers using
- using the same
- same character
- "(`-`, `+`, or"
- "`+`, or `*`"
- ) or (b) they
- (b) they are
- they are ordered
- ordered list
- list numbers
- numbers with the
- with the same
- delimiter (
- "(either `.` or"
- "`.` or `)`)."
- A list is an
- "[ordered list](@"
- "list](@)"
- if its
- its constituent
- list items begin
- " begin with\n["
- ordered list
- "list markers]"
- "], and a"
- "[bullet list](@)"
- if its
- its constituent
- list
- items begin with
- "["
- bullet list
- "list markers]."
- The
- "[start number](@"
- "](@)\nof an ["
- "[ordered list]"
- is determined by
- by the list
- the list number
- number of
- its initial list
- list item.
- The numbers of
- of subsequent
- list items are
- disregarded.
- A list is
- "[loose](@)"
- if any of its
- its constituent
- list items are
- are separated by
- "by blank lines,"
- "lines, or if any"
- if any of its
- its constituent
- list items
- items directly
- directly contain
- contain two
- two block-level
- "-level elements"
- elements with a
- with a blank
- a blank line
- between them.
- Otherwise a list
- a list is
- "[tight](@)."
- (The difference
- in HTML output
- output is that
- that paragraphs
- in a loose list
- list are
- "wrapped in `<p>`"
- "tags, while"
- while paragraphs
- in a tight list
- list are not.)
- Changing the
- the bullet or
- or ordered list
- list delimiter
- starts a new
- "a new list:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n- bar"
- "- bar\n+ baz\n."
- "+ baz\n.\n<ul>"
- "<li>foo</li>"
- "<li>bar</li>"
- "</ul>\n<ul>"
- "<li>baz</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1. foo\n2. bar"
- "2. bar\n3) baz\n."
- "3) baz\n.\n<ol>"
- "<li>foo</li>"
- "<li>bar</li>"
- "</ol>"
- "<ol start=\"3\">"
- "<li>baz</li>"
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- "In CommonMark, a"
- ", a list can"
- can interrupt a
- a paragraph.
- "That is,"
- no blank line is
- line is needed
- needed to
- to separate a
- a paragraph from
- from a following
- "list:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo\n- bar\n- baz"
- "- baz\n."
- ".\n<p>Foo</p>"
- "<ul>"
- "<li>bar</li>"
- "<li>baz</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "`Markdown.pl`"
- does not allow
- "allow this,"
- "this, through"
- through fear of
- of triggering a
- a list
- via a numeral in
- in a hard-
- a hard-wrapped
- "-wrapped line:"
- "``` markdown"
- The number of
- of windows in my
- in my house is
- "14."
- The number of
- of doors is 6.
- "```"
- "Oddly, though,"
- "`Markdown.pl`"
- "*does*"
- allow a
- a blockquote to
- interrupt a
- "a paragraph,"
- ", even though"
- though the same
- considerations
- " might\napply."
- "In CommonMark,"
- ", we do allow"
- do allow lists
- lists to
- to interrupt
- "paragraphs, for"
- two reasons.
- "First, it is"
- ", it is natural"
- natural and not
- and not uncommon
- uncommon for
- for people
- to start lists
- lists without
- without blank
- "blank lines:"
- "``` markdown"
- I need to buy
- "- new shoes"
- "- a coat"
- "- a plane ticket"
- "```"
- "Second, we are"
- we are attracted
- to a
- ">"
- "[principle of"
- "of uniformity](@"
- "](@):\n>"
- if a chunk of
- chunk of text
- of text has a
- " has a certain\n>"
- "meaning, it will"
- it will continue
- continue to have
- to have the same
- the same meaning
- meaning when put
- when put into a
- ">"
- container block
- block (such as a
- as a list item
- item or
- or blockquote).
- "(Indeed, the"
- ", the spec for ["
- "[list items] and"
- "] and ["
- "[block quotes]"
- "] presupposes"
- this principle.)
- This principle
- implies that if
- "``` markdown"
- "* I need to buy"
- "- new shoes"
- "- a coat"
- "- a plane ticket"
- "```"
- is a list item
- item containing
- a paragraph
- followed by a
- by a nested
- a nested sublist
- "sublist,"
- as all Markdown
- implementations
- agree it is (
- it is (though
- (though the
- the paragraph
- may be rendered
- rendered without
- "`<p>`"
- "tags, since the"
- "the list is \""
- "\"tight\"),\nthen"
- "``` markdown"
- I need to buy
- "- new shoes"
- "- a coat"
- "- a plane ticket"
- "```"
- by itself should
- should be a
- be a paragraph
- followed by a
- by a nested
- a nested sublist
- sublist.
- Since it is well
- well established
- Markdown
- practice to
- to allow lists
- lists to
- interrupt
- paragraphs
- inside list
- "list items, the"
- "[principle of"
- "uniformity]"
- requires us to
- us to allow this
- this outside
- outside list
- list items as
- well.  (
- "["
- reStructuredText
- "](https://"
- docutils.sourcef
- ".sourceforge.net"
- /rst.html)
- takes a
- a different
- "approach,"
- ", requiring"
- blank lines
- lines before
- before lists
- even inside
- inside other
- other list items
- items.)
- In order to
- order to solve
- to solve the
- the problem of
- of unwanted
- unwanted lists
- lists in
- in paragraphs
- with
- hard-wrapped
- wrapped numerals
- "numerals, we"
- ", we allow only"
- only lists
- lists starting
- starting with
- "`1` to"
- interrupt
- paragraphs.
- "Thus,"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- The number of
- of windows in my
- in my house is
- "14."
- The number of
- of doors is 6.
- "."
- "<p>The number of"
- of windows in my
- in my house is
- "14."
- The number of
- of doors is 6.</
- is 6.</p>
- "````````````````"
- "````````````````"
- "````````````````"
- We may still get
- get an
- an unintended
- result in cases
- in cases like
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- The number of
- of windows in my
- in my house is
- "1."
- The number of
- of doors is 6.
- "."
- "<p>The number of"
- of windows in my
- in my house is</
- " is</p>\n<ol>"
- "<li>The number"
- number of doors
- of doors is 6.</
- is 6.</li>
- "</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- but this rule
- rule should
- should prevent
- prevent most
- most spurious
- spurious list
- list captures.
- There can be any
- be any number of
- of blank lines
- lines between
- "between items:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n\n- bar"
- "- bar\n\n\n- baz\n."
- "- baz\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "</li>\n<li>"
- "<li>\n<p>bar</p>"
- "</li>\n<li>"
- "<li>\n<p>baz</p>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n  - bar"
- "- baz"
- "      bim\n.\n<ul>"
- ".\n<ul>\n<li>foo"
- "<li>foo\n<ul>"
- "<ul>\n<li>bar"
- "<li>bar\n<ul>"
- "<ul>\n<li>"
- "<li>\n<p>baz</p>"
- "<p>bim</p>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- To separate
- consecutive
- lists of the
- of the same type
- "type, or to"
- ", or to separate"
- separate a
- list from an
- from an indented
- indented code
- code block that
- that would
- would otherwise
- be parsed
- as a
- a subparagraph
- of the final
- "final list item,"
- "item, you can"
- you can insert a
- insert a blank
- a blank HTML
- "comment:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- foo\n- bar"
- "- bar\n\n<!-- -->"
- "<!-- -->\n\n- baz"
- "- baz\n- bim\n."
- "- bim\n.\n<ul>"
- "<li>foo</li>"
- "<li>bar</li>"
- "</ul>\n<!-- -->"
- "<!-- -->\n<ul>"
- "<li>baz</li>"
- "<li>bim</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "-   foo"
- notcode
- "-   foo"
- "<!-- -->"
- "    code\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<p>notcode</p>"
- "</li>\n<li>"
- "<li>\n<p>foo</p>"
- "</li>\n</ul>"
- "</ul>\n<!-- -->"
- "<pre><code>code"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- List items need
- need not be
- not be indented
- indented to the
- to the same
- the same level.
- The following
- list items will
- will be treated
- treated as items
- as items at the
- at the same list
- "list level,"
- since none is
- none is indented
- indented enough
- enough to belong
- belong to the
- to the previous
- previous list
- "item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n - b\n  - c"
- "  - c\n   - d"
- "   - d\n  - e"
- "  - e\n - f\n- g\n."
- "- g\n.\n<ul>"
- "<ul>\n<li>a</li>"
- "<li>b</li>"
- "<li>c</li>"
- "<li>d</li>"
- "<li>e</li>"
- "<li>f</li>"
- "<li>g</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1. a\n\n  2. b"
- "  2. b\n\n   3. c"
- "   3. c\n.\n<ol>"
- ".\n<ol>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>b</p>"
- "<p>b</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>c</p>"
- "<p>c</p>\n</li>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Note, however,"
- "however, that"
- ", that list"
- list items may
- may not be
- not be preceded
- preceded by more
- by more than
- three spaces of
- of indentation.
- "Here `- e`"
- is treated as a
- as a paragraph
- continuation
- "line, because it"
- it is indented
- indented more
- more than three
- "three spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n - b\n  - c"
- "  - c\n   - d"
- "   - d\n    - e\n."
- ".\n<ul>"
- "<ul>\n<li>a</li>"
- "<li>b</li>"
- "<li>c</li>\n<li>d"
- "<li>d\n- e</li>"
- "- e</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "And here, `3. c`"
- is treated as in
- as in indented
- indented code
- "code block,"
- because it is
- it is indented
- indented four
- four spaces and
- and preceded by
- by a
- blank line.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1. a\n\n  2. b"
- "  2. b\n\n    3. c"
- "    3. c\n.\n<ol>"
- ".\n<ol>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>b</p>"
- "<p>b</p>\n</li>"
- "</li>\n</ol>"
- "<pre><code>3. c"
- "</code></pre>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is a loose
- "a loose list,"
- "list, because"
- because there is
- there is a blank
- a blank line
- line between
- two of the list
- "the list items:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n- b\n\n- c\n."
- "- c\n.\n<ul>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>b</p>"
- "<p>b</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>c</p>"
- "<p>c</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "So is this, with"
- ", with a empty"
- a empty second
- "second item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "* a\n*\n\n* c\n."
- "*\n\n* c\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n</li>"
- "</li>\n<li></li>"
- "<li>\n<p>c</p>"
- "<p>c</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- These are loose
- "loose lists,"
- "lists, even"
- ", even though"
- though there are
- are no blank
- no blank lines
- lines between
- between the
- "the items,"
- because one of
- one of the items
- items directly
- contains two
- two block-level
- "-level elements"
- with a blank
- a blank line
- line between
- "between them:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n- b\n\n  c\n- d"
- "  c\n- d\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>b</p>"
- "<p>c</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>d</p>"
- "<p>d</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n- b"
- "[ref]: /url"
- "- d\n.\n<ul>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>b</p>"
- "<p>b</p>\n</li>"
- "</li>\n<li>"
- "<li>\n<p>d</p>"
- "<p>d</p>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is a tight
- "a tight list,"
- "list, because"
- because the
- the blank lines
- lines are in a
- are in a code
- "a code block:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n- ```\n  b"
- "  b\n\n\n  ```\n- c"
- "- c\n.\n<ul>"
- "<ul>\n<li>a</li>"
- "<li>"
- "<pre><code>b"
- "</code></pre>"
- "</li>\n<li>c</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is a tight
- "a tight list,"
- "list, because"
- because the
- the blank line
- line is between
- between two
- paragraphs of a
- of a sublist.
- So the sublist
- sublist is loose
- is loose while
- the outer list
- "list is tight:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n  - b\n\n    c"
- "    c\n- d\n.\n<ul>"
- ".\n<ul>\n<li>a"
- "<li>a\n<ul>\n<li>"
- "<li>\n<p>b</p>"
- "<p>c</p>\n</li>"
- "</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n<li>d</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is a tight
- "a tight list,"
- "list, because"
- because the
- the blank line
- line is inside
- inside the
- "block quote:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "* a\n  > b\n  >"
- "  >\n* c\n.\n<ul>"
- ".\n<ul>\n<li>a"
- "<blockquote>"
- "<p>b</p>"
- "</blockquote>"
- "</li>\n<li>c</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- This list is
- "list is tight,"
- "tight, because"
- because the
- the consecutive
- block elements
- are not
- not separated by
- "by blank lines:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n  > b\n  ```"
- "  ```\n  c\n  ```"
- "  ```\n- d\n.\n<ul>"
- ".\n<ul>\n<li>a"
- "<blockquote>"
- "<p>b</p>"
- "</blockquote>"
- "<pre><code>c"
- "</code></pre>"
- "</li>\n<li>d</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- A single-
- single-paragraph
- "list is tight:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n.\n<ul>"
- "<ul>\n<li>a</li>"
- "</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n  - b\n.\n<ul>"
- ".\n<ul>\n<li>a"
- "<li>a\n<ul>"
- "<ul>\n<li>b</li>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- This list is
- "list is loose,"
- "loose, because"
- because of the
- of the blank
- blank line
- line between the
- two block
- block elements
- elements in the
- in the list item
- "item:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "1. ```\n   foo"
- "   foo\n   ```"
- "   ```\n\n   bar\n."
- "   bar\n.\n<ol>"
- ".\n<ol>\n<li>"
- "<pre><code>foo"
- "</code></pre>"
- "<p>bar</p>\n</li>"
- "</li>\n</ol>"
- "````````````````"
- "````````````````"
- "````````````````"
- Here the outer
- outer list is
- "list is loose,"
- "loose, the inner"
- inner list tight
- "tight:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "* foo\n  * bar"
- "  * bar\n\n  baz\n."
- "  baz\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>foo</p>"
- "<ul>"
- "<li>bar</li>"
- "</ul>\n<p>baz</p>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "- a\n  - b\n  - c"
- "  - c\n\n- d\n  - e"
- "  - e\n  - f\n."
- "  - f\n.\n<ul>"
- ".\n<ul>\n<li>"
- "<li>\n<p>a</p>"
- "<p>a</p>\n<ul>"
- "<ul>\n<li>b</li>"
- "<li>c</li>\n</ul>"
- "</ul>\n</li>\n<li>"
- "<li>\n<p>d</p>"
- "<p>d</p>\n<ul>"
- "<ul>\n<li>e</li>"
- "<li>f</li>\n</ul>"
- "</ul>\n</li>"
- "</li>\n</ul>"
- "````````````````"
- "````````````````"
- "````````````````"
- "# Inlines"
- Inlines are
- are parsed
- sequentially
- from the
- the beginning of
- of the character
- stream to the
- to the end (left
- "(left to right,"
- "right, in left-"
- in left-to-right
- "-right languages"
- ).
- "Thus, for"
- ", for example,"
- "example, in"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`hi`lo`\n."
- "<p><code>hi</"
- ">hi</code>lo`</p"
- ">lo`</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "`hi`"
- is parsed as
- "as code, leaving"
- leaving the
- the backtick at
- at the end as a
- end as a literal
- backtick.
- "## Code spans"
- A
- "[backtick string"
- "string](@)"
- is a string of
- of one or more
- or more backtick
- characters (
- "`` ` ``"
- ) that is
- that is neither
- preceded nor
- nor followed by
- by a backtick.
- "A [code span](@)"
- begins with a
- with a backtick
- backtick string
- string and ends
- and ends with
- a backtick
- backtick string
- string of equal
- of equal length.
- The contents of
- of the code span
- span are
- the characters
- between these
- these two
- two backtick
- backtick strings
- "strings,"
- ", normalized in"
- in the
- "following ways:"
- "- First, ["
- "[line endings]"
- are converted to
- "[spaces]."
- "-"
- If the resulting
- string both
- both begins
- "*and*"
- "ends with a ["
- "[space]"
- "character, but"
- ", but does not"
- does not consist
- consist entirely
- "entirely of ["
- "[space]"
- "characters, a"
- ", a single ["
- "[space]"
- character is
- is removed from
- from the
- front and back.
- This allows you
- you to include
- include code
- code that begins
- or ends with
- with backtick
- "characters,"
- ", which must be"
- be separated by
- whitespace from
- from the opening
- opening or
- or closing
- closing backtick
- backtick strings
- strings.
- This is a simple
- a simple code
- "code span:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`foo`\n."
- "<p><code>foo</"
- ">foo</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Here two
- two backticks
- "are used,"
- "used, because"
- because the code
- code contains a
- a backtick.
- This example
- example also
- also illustrates
- stripping of a
- of a single
- a single leading
- leading and
- "trailing space:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`` foo ` bar ``"
- "."
- "<p><code>foo `"
- ">foo ` bar</code"
- "</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This example
- example shows
- shows the
- the motivation
- for stripping
- leading and
- and trailing
- "spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "` `` `\n."
- "<p><code>``</"
- ">``</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that only
- "*one*"
- space is
- "is stripped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`  ``  `\n."
- "<p><code> `` </"
- "> `` </code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The stripping
- only happens if
- if the space is
- space is on both
- sides of the
- "of the string:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "` a`\n."
- "<p><code> a</"
- "> a</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Only [spaces]"
- "spaces], and not"
- "["
- unicode
- "whitespace]"
- "in general, are"
- stripped in this
- "in this way:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "` b `\n."
- "<p><code> b </"
- "> b </code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- No stripping
- occurs if the
- if the code span
- span contains
- contains only
- "only spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "` `\n`  `\n."
- "<p><code> </code"
- "> </code>"
- "<code>  </code><"
- "</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "[Line endings]"
- are treated like
- "like spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``\nfoo\nbar  \nbaz"
- "baz\n``\n."
- "<p><code>foo bar"
- ">foo bar   baz</"
- baz</code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``\nfoo \n``\n."
- "<p><code>foo </"
- ">foo </code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Interior spaces
- spaces are not
- "not collapsed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`foo   bar \nbaz`"
- "baz`\n."
- "<p><code>foo"
- code>foo   bar
- bar  baz</code><
- "</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that
- that browsers
- browsers will
- will typically
- collapse
- consecutive
- spaces
- when rendering
- "`<code>`"
- "elements, so it"
- ", so it is"
- is recommended
- that
- the following
- "CSS be used:"
- "code{white-space"
- "-space: pre-wrap"
- "pre-wrap;}"
- Note that
- that backslash
- escapes do not
- do not work in
- work in code
- in code spans.
- All backslashes
- are treated
- "literally:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`foo\\`bar`\n."
- "<p><code>foo\\</"
- ">foo\\</code>bar`"
- ">bar`</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash
- escapes are
- are never needed
- "needed, because"
- because one can
- one can always
- always choose a
- string of *n*
- backtick
- characters as
- "as delimiters,"
- ", where the code"
- the code does
- not contain any
- any strings of
- of exactly *n*
- backtick
- characters.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "``foo`bar``\n."
- "<p><code>foo`bar"
- ">foo`bar</code><"
- "</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "` foo `` bar `\n."
- "<p><code>foo ``"
- ">foo `` bar</"
- "`` bar</code></p"
- code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Code span
- span backticks
- have higher
- precedence than
- than any other
- other inline
- constructs
- except HTML tags
- tags and
- and autolinks.
- "Thus, for"
- ", for example,"
- "example, this is"
- not parsed as
- as emphasized
- "text, since the"
- "the second `*`"
- is part of a
- " of a code\nspan:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo`*`\n."
- "<p>*foo<code>*</"
- code>*</code></p
- code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- And this is not
- is not parsed as
- "as a link:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[not a `link](/"
- " `link](/foo`)\n."
- "<p>[not a <code>"
- "a <code>link](/"
- ">link](/foo</"
- "](/foo</code>)</"
- code>)</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Code spans, HTML"
- ", HTML tags, and"
- ", and autolinks"
- have the same
- same precedence.
- "Thus, this is"
- "this is code:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`<a href=\"`\">`\n."
- "<p><code>&lt;a"
- ">&lt;a href=&"
- a href=&quot;</
- "&quot;</code>&"
- "</code>&quot;&gt"
- "quot;&gt;`</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- But this is an
- "is an HTML tag:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"`\">`\n."
- "<p><a href=\"`\">`"
- "=\"`\">`</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- And this is code
- "is code:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`<https://"
- "https://foo.bar."
- "foo.bar.`baz>`\n."
- "<p><code>&lt;"
- ">&lt;https://"
- "https://foo.bar."
- foo.bar.</code>
- ".</code>baz&gt;`"
- "baz&gt;`</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- But this is an
- "is an autolink:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<https://foo.bar"
- "/foo.bar.`baz>`"
- "."
- "<p><a href=\""
- "a href=\"https://"
- "https://foo.bar."
- "foo.bar.%60baz\">"
- "%60baz\">https://"
- "https://foo.bar."
- "foo.bar.`baz</a>"
- "`baz</a>`</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- When a backtick
- backtick string
- string is not
- is not closed by
- by a matching
- "backtick string,"
- we just have
- have literal
- "backticks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "```foo``\n."
- "<p>```foo``</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`foo\n."
- ".\n<p>`foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The following
- case also
- also illustrates
- the need for
- need for opening
- opening and
- closing backtick
- backtick strings
- strings to be
- to be equal in
- "equal in length:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`foo``bar``\n."
- "<p>`foo<code>bar"
- code>bar</code><
- "</code></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Emphasis and
- and strong
- strong emphasis
- "John Gruber'"
- "'s original"
- "[Markdown syntax"
- description
- "](https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/syntax
- "/syntax#em)"
- "says:"
- ">"
- Markdown treats
- treats asterisks
- "(`*`"
- ) and
- and underscores
- "(`_`"
- ) as indicators
- " of\n>"
- emphasis.
- Text wrapped
- wrapped with one
- "`*` or `_`"
- will be wrapped
- wrapped with an
- " with an HTML\n>"
- "`<em>`"
- "tag; double `*`'"
- "`*`'s or `_`'"
- s will be
- will be wrapped
- wrapped with an
- with an HTML
- "`<strong>`\n>"
- "> tag."
- This is enough
- enough for most
- "for most users,"
- "users, but these"
- these rules
- rules leave much
- "much undecided,"
- especially when
- when it comes to
- comes to nested
- nested emphasis.
- The original
- "`Markdown.pl`"
- test suite makes
- makes it clear
- it clear that
- that triple
- "`***` and\n`___`"
- delimiters can
- can be used for
- used for strong
- "strong emphasis,"
- ", and most"
- implementations
- have also
- also allowed the
- the following
- "patterns:"
- "``` markdown"
- "***strong emph**"
- emph***
- "***strong** in"
- "** in emph*"
- "***emph* in"
- emph* in strong*
- strong**
- "**in strong *"
- strong *emph***
- "*in emph **"
- emph **strong***
- "```"
- The following
- patterns are
- are less widely
- widely supported
- ", but the intent"
- is clear and
- and they are
- they are useful
- useful (
- (especially in
- in contexts like
- bibliography
- "entries):"
- "``` markdown"
- "*emph *with emph"
- emph* in it*
- "**strong **with"
- "**with strong**"
- strong** in it**
- "```"
- Many
- implementations
- have also
- also restricted
- intraword
- " emphasis to\nthe"
- "the `*`"
- "forms, to avoid"
- avoid unwanted
- emphasis in
- in words
- words containing
- internal
- underscores.
- (It is best
- is best practice
- practice to put
- to put these in
- these in code
- "spans, but users"
- users often do
- often do not.)
- "``` markdown"
- internal
- "emphasis: foo*"
- ": foo*bar*baz"
- "no emphasis:"
- ": foo_bar_baz"
- "```"
- The rules given
- given below
- below capture
- capture all of
- all of these
- "these patterns,"
- ", while allowing"
- for efficient
- parsing
- strategies that
- that do not
- do not backtrack
- "."
- "First, some"
- some definitions
- ".  A"
- "[delimiter run]("
- "run](@)"
- is either
- a sequence of
- of one or more
- "`*`"
- characters that
- that is not
- is not preceded
- preceded or
- followed by a
- by a non-
- a non-backslash-
- "-escaped `*`"
- "character, or a"
- ", or a sequence"
- of one or more
- "`_`"
- characters that
- that is not
- is not preceded
- preceded or
- or followed by
- a non-backslash-
- "-escaped `_`"
- "`_` character."
- A
- "[left-flanking"
- "delimiter run](@"
- " run](@) is\na ["
- "a [delimiter run"
- "]"
- that is (1) not
- (1) not followed
- "followed by ["
- Unicode
- "whitespace],"
- and either (2a)
- (2a) not
- 2a) not followed
- "followed by a ["
- Unicode
- punctuation
- "character], or"
- (2b) followed by
- "by a ["
- Unicode
- punctuation
- "character] and"
- " and\npreceded by"
- "["
- Unicode
- "whitespace] or a"
- "] or a ["
- Unicode
- punctuation
- "character]."
- For purposes of
- of this
- "this definition,"
- ", the beginning"
- and the end of
- the line count
- count as Unicode
- whitespace.
- A
- "[right-flanking"
- "delimiter run](@"
- " run](@) is\na ["
- "a [delimiter run"
- "]"
- that is (1) not
- (1) not preceded
- "preceded by ["
- Unicode
- "whitespace],"
- and either (2a)
- (2a) not
- 2a) not preceded
- "preceded by a ["
- Unicode
- punctuation
- "character], or"
- (2b) preceded by
- "by a ["
- Unicode
- punctuation
- "character] and"
- " and\nfollowed by"
- "["
- Unicode
- "whitespace] or a"
- "] or a ["
- Unicode
- punctuation
- "character]."
- For purposes of
- of this
- "this definition,"
- ", the beginning"
- and the end of
- the line count
- count as Unicode
- whitespace.
- Here are some
- some examples of
- of delimiter
- runs.
- "- left-flanking"
- flanking but not
- but not right-
- "right-flanking:"
- "```\n    ***abc"
- _abc
- "**\"abc\""
- "_\"abc\""
- " _\"abc\"\n    ```"
- "- right-flanking"
- flanking but not
- but not left-
- "left-flanking:"
- "```\n     abc***"
- abc_
- "\"abc\"**"
- "\"abc\"_"
- "\"abc\"_\n    ```"
- "- Both left and"
- left and right-
- "right-flanking:"
- "```"
- abc***def
- "\"abc\"_\"def\""
- "```"
- "- Neither left"
- left nor right-
- "right-flanking:"
- "```"
- abc *** def
- a _ b
- "a _ b\n    ```"
- (The idea of
- distinguishing
- left-flanking
- flanking and
- and right-
- right-flanking
- delimiter runs
- runs based on
- based on the
- on the character
- before and the
- the character
- after comes from
- from Roopesh
- "Roopesh Chander'"
- "'s"
- "[vfmd](https://"
- /web.archive.org
- /web/
- /20220608143320/
- "/http://"
- "://www.vfmd.org/"
- /vfmd-spec/
- "/specification/#"
- "/#procedure-for-"
- "-for-identifying"
- "-emphasis-tags)."
- vfmd uses the
- the terminology
- "\""
- emphasis
- indicator string
- "\" instead of \""
- "\"delimiter\nrun,\""
- and its rules
- rules for
- distinguishing
- left- and right-
- right-flanking
- flanking runs
- are a bit more
- bit more complex
- complex than the
- than the ones
- the ones given
- given here.)
- The following
- rules define
- define emphasis
- emphasis and
- and strong
- "strong emphasis:"
- "1.  A single `*`"
- "`*` character"
- "[can open"
- "open emphasis](@"
- "](@)"
- iff (if and only
- and only if) it
- if) it is part
- "is part of a ["
- left-flanking
- "delimiter run]."
- "2.  A single `_`"
- "`_` character ["
- can open
- "open emphasis]"
- "] iff"
- it is part of a
- "["
- left-flanking
- "delimiter run]"
- and either (a)
- (a) not part of
- "part of a ["
- right-flanking
- "delimiter run]"
- or (b) part of a
- "["
- right-flanking
- "delimiter run]"
- "preceded by a ["
- Unicode
- punctuation
- "character]."
- "3.  A single `*`"
- "`*` character"
- "[can close"
- "close emphasis]("
- "](@)"
- iff it is part
- "is part of a ["
- right-flanking
- "delimiter run]."
- "4.  A single `_`"
- "`_` character ["
- can close
- "close emphasis]"
- "] iff"
- it is part of a
- "["
- right-flanking
- "delimiter run]"
- and either (a)
- (a) not part of
- "part of a ["
- left-flanking
- "delimiter run]"
- or (b) part of a
- "["
- left-flanking
- "delimiter run]"
- "followed by a ["
- Unicode
- punctuation
- "character]."
- 5.  A double
- "A double `**`"
- "[can open strong"
- "strong emphasis]"
- "](@)"
- iff it is part
- "is part of a ["
- left-flanking
- "delimiter run]."
- 6.  A double
- "A double `__` ["
- can open strong
- "strong emphasis]"
- "] iff"
- it is part of a
- "["
- left-flanking
- "delimiter run]"
- and either (a)
- (a) not part of
- "part of a ["
- right-flanking
- "delimiter run]"
- or (b) part of a
- "["
- right-flanking
- "delimiter run]"
- "preceded by a ["
- Unicode
- punctuation
- "character]."
- 7.  A double
- "A double `**`"
- "[can close"
- close strong
- "strong emphasis]"
- "](@)"
- iff it is part
- "is part of a ["
- right-flanking
- "delimiter run]."
- 8.  A double
- "A double `__` ["
- can close strong
- "strong emphasis]"
- "] iff"
- it is part of a
- "["
- right-flanking
- "delimiter run]"
- and either (a)
- (a) not part of
- "part of a ["
- left-flanking
- "delimiter run]"
- or (b) part of a
- "["
- left-flanking
- "delimiter run]"
- "followed by a ["
- Unicode
- punctuation
- "character]."
- "9."
- Emphasis begins
- begins with a
- with a delimiter
- "that ["
- can open
- "open emphasis]"
- "] and ends"
- with a delimiter
- "that ["
- can close
- "close emphasis]"
- ", and that uses"
- uses the same
- "character (`_`"
- "`_` or `*`"
- ) as the opening
- delimiter.  The
- opening and
- and closing
- delimiters must
- must belong to
- to separate
- "[delimiter runs]"
- "."
- If one of the
- the delimiters
- can both
- open and close
- "close emphasis,"
- ", then the sum"
- the sum of the
- of the lengths
- lengths of the
- delimiter runs
- runs containing
- the opening and
- and closing
- delimiters
- must not be a
- be a multiple of
- of 3 unless both
- both lengths are
- multiples of 3.
- "10."
- Strong emphasis
- emphasis begins
- begins with a
- with a delimiter
- " that\n    ["
- can open strong
- "strong emphasis]"
- and ends with a
- with a delimiter
- " that\n    ["
- can close strong
- "strong emphasis]"
- ", and that uses"
- uses the same
- same character
- "(`_` or `*`"
- ) as the opening
- delimiter.  The
- opening and
- and closing
- delimiters must
- must belong to
- to separate
- "[delimiter runs]"
- "."
- If one of the
- the delimiters
- can both open
- and close strong
- "strong emphasis,"
- ", then the sum"
- the sum of the
- of the lengths
- lengths of
- the delimiter
- runs containing
- the opening and
- and closing
- delimiters must
- must not be a
- be a multiple of
- of 3 unless both
- both lengths
- are multiples of
- of 3.
- 11. A literal
- "`*`"
- character cannot
- cannot occur at
- occur at the
- at the beginning
- or end of
- "`*`"
- "-delimited"
- "emphasis or `**`"
- "-delimited"
- "strong emphasis,"
- ", unless it"
- is backslash-
- "-escaped."
- 12. A literal
- "`_`"
- character cannot
- cannot occur at
- occur at the
- at the beginning
- or end of
- "`_`"
- "-delimited"
- "emphasis or `__`"
- "-delimited"
- "strong emphasis,"
- ", unless it"
- is backslash-
- "-escaped."
- Where rules 1--
- 12 above are
- are compatible
- with multiple
- "parsings,"
- the following
- principles
- resolve
- "ambiguity:"
- "13."
- The number of
- of nestings
- nestings should
- should be
- be minimized.
- "Thus, for"
- ", for example,"
- an
- interpretation
- "`<strong>...</"
- ">...</strong>`"
- is always
- always preferred
- to
- "`<em><em>...</em"
- ">...</em></em>`."
- "14."
- An
- interpretation
- "`<em><strong>..."
- ">...</strong></"
- "></em>`"
- is always
- preferred to
- "`<strong><em>..."
- "><em>...</em></"
- ".</em></strong>`"
- "."
- "15."
- When two
- two potential
- emphasis or
- or strong
- strong emphasis
- emphasis spans
- "spans overlap,"
- so that the
- that the second
- second begins
- begins before
- before the first
- first ends and
- ends and ends
- and ends after
- "the first ends,"
- "ends, the first"
- first takes
- takes precedence
- "."
- "Thus, for"
- ", for example,"
- "`*foo _bar* baz_"
- "* baz_`"
- is parsed as
- "`<em>foo _bar</"
- "_bar</em> baz_`"
- " rather\n    than"
- "`*foo <em>bar*"
- "<em>bar* baz</em"
- "baz</em>`."
- "16."
- When there are
- are two
- two potential
- emphasis or
- or strong
- strong emphasis
- emphasis spans
- with the same
- the same closing
- "delimiter, the"
- ", the shorter"
- shorter one (the
- one (the one
- (the one that
- opens later)
- later) takes
- takes precedence
- "."
- "Thus, for"
- ", for example,"
- "`**foo **bar baz"
- "*bar baz**`"
- is parsed as
- "`**foo <strong>"
- "<strong>bar baz<"
- bar baz</strong>
- "/strong>`"
- rather than
- "`<strong>foo **"
- ">foo **bar baz</"
- "baz</strong>`."
- "17."
- Inline code
- "code spans,"
- "spans, links,"
- ", links, images,"
- "images, and HTML"
- and HTML tags
- tags group more
- more tightly
- than emphasis.
- "So, when there"
- there is a
- is a choice
- a choice between
- between an
- interpretation
- that contains
- contains one of
- one of these
- these elements
- elements and one
- and one that
- one that does
- "does not, the"
- former always
- always wins.
- "Thus, for"
- ", for example,"
- "`*[foo*](bar)`"
- is
- parsed as
- "`*<a href=\"bar\">"
- "=\"bar\">foo*</a>`"
- rather than as
- "`<em>[foo</em>]("
- "</em>](bar)`."
- These rules can
- can be
- be illustrated
- through a series
- a series of
- of examples.
- "Rule 1:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo bar*\n."
- "<p><em>foo bar</"
- bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the opening `*`"
- is followed by
- "whitespace, and"
- ", and hence not"
- "not part of a ["
- left-flanking
- "delimiter run]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "a * foo bar*\n."
- "<p>a * foo bar*<"
- bar*</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the opening `*`"
- "`*` is preceded"
- by an
- an alphanumeric
- and followed by
- "by punctuation,"
- ", and hence"
- "not part of a ["
- left-flanking
- "delimiter run]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "a*\"foo\"*\n."
- "<p>a*&quot;foo&"
- ;foo&quot;*</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Unicode
- nonbreaking
- spaces count as
- "as whitespace,"
- ", too:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "* a *\n."
- ".\n<p>* a *</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Unicode symbols
- symbols count as
- "as punctuation,"
- ", too:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*$*alpha."
- "*£*bravo."
- "*€*charlie.\n."
- "<p>*$*alpha.</p>"
- "<p>*£*bravo.</p>"
- "<p>*€*charlie.</"
- ".</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword
- emphasis with
- "`*`"
- "is permitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo*bar*\n."
- "<p>foo<em>bar</"
- em>bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "5*6*78\n."
- "<p>5<em>6</em>78"
- 6</em>78</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 2:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo bar_\n."
- "<p><em>foo bar</"
- bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the opening `_`"
- is followed by
- "whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_ foo bar_\n."
- "<p>_ foo bar_</p"
- bar_</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the opening `_`"
- "`_` is preceded"
- by an
- an alphanumeric
- and followed by
- "by punctuation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "a_\"foo\"_\n."
- "<p>a_&quot;foo&"
- ;foo&quot;_</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Emphasis with
- "`_`"
- is not allowed
- allowed inside
- "inside words:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo_bar_\n."
- "<p>foo_bar_</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "5_6_78\n."
- ".\n<p>5_6_78</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- пристаням_стремя
- "м_стремятся_\n."
- "<p>"
- пристаням_стремя
- м_стремятся_</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Here `_`"
- does not
- not generate
- "emphasis,"
- ", because the"
- the first
- first delimiter
- run
- is right-
- right-flanking
- flanking and the
- and the second
- second left-
- "left-flanking:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "aa_\"bb\"_cc\n."
- "<p>aa_&quot;bb&"
- quot;bb&quot;_cc
- quot;_cc</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is emphasis
- "emphasis, even"
- ", even though"
- though the
- the opening
- delimiter is
- both left- and
- "- and right-"
- "right-flanking,"
- ", because it is"
- it is preceded
- preceded by
- "punctuation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo-_(bar)_\n."
- "<p>foo-<em>(bar)"
- em>(bar)</em></p
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 3:"
- This is not
- "is not emphasis,"
- ", because the"
- the closing
- delimiter does
- not match the
- the opening
- "delimiter:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo*\n."
- ".\n<p>_foo*</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the closing `*`"
- is preceded by
- "whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo bar *\n."
- "<p>*foo bar *</p"
- bar *</p>
- "````````````````"
- "````````````````"
- "````````````````"
- A line ending
- ending also
- also counts as
- "as whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo bar\n*\n."
- "*\n.\n<p>*foo bar"
- "*</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the second `*`"
- "`*` is"
- preceded by
- by punctuation
- and followed by
- by an
- an alphanumeric
- (hence it is not
- is not part of a
- "["
- right-flanking
- "delimiter run]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*(*foo)\n."
- ".\n<p>*(*foo)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The point of
- point of this
- this restriction
- is more easily
- appreciated
- with this
- "this example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*(*foo*)*\n."
- "<p><em>(<em>foo<"
- "<em>foo</em>)</"
- "</em>)</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword
- emphasis with
- "`*` is allowed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo*bar\n."
- "<p><em>foo</em>"
- foo</em>bar</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 4:"
- This is not
- "is not emphasis,"
- ", because the"
- "the closing `_`"
- is preceded by
- "whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo bar _\n."
- "<p>_foo bar _</p"
- bar _</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- "is not emphasis,"
- ", because the"
- "the second `_`"
- "`_` is"
- preceded by
- by punctuation
- and followed by
- by an
- "an alphanumeric:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_(_foo)\n."
- ".\n<p>_(_foo)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is emphasis
- emphasis within
- "within emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_(_foo_)_\n."
- "<p><em>(<em>foo<"
- "<em>foo</em>)</"
- "</em>)</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword
- emphasis is
- is disallowed
- "for `_`:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo_bar\n."
- "<p>_foo_bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- _пристаням_стрем
- "ям_стремятся\n."
- "<p>"
- _пристаням_стрем
- ям_стремятся</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo_bar_baz_\n."
- "<p><em>"
- "><em>foo_bar_baz"
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is emphasis
- "emphasis, even"
- ", even though"
- though the
- the closing
- delimiter is
- both left- and
- "- and right-"
- "right-flanking,"
- ", because it is"
- it is followed
- followed by
- "punctuation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_(bar)_.\n."
- "<p><em>(bar)</em"
- bar)</em>.</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 5:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo bar**\n."
- "<p><strong>foo"
- ">foo bar</strong"
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- the opening
- delimiter is
- followed by
- "by whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "** foo bar**\n."
- "<p>** foo bar**<"
- bar**</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- "the opening `**`"
- "`**` is preceded"
- by an
- an alphanumeric
- and followed by
- "by punctuation,"
- ", and hence"
- "not part of a ["
- left-flanking
- "delimiter run]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "a**\"foo\"**\n."
- "<p>a**&quot;foo&"
- ;foo&quot;**</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword strong
- strong emphasis
- emphasis with
- "`**`"
- "is permitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo**bar**\n."
- "<p>foo<strong>"
- "<strong>bar</"
- ">bar</strong></p"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 6:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo bar__\n."
- "<p><strong>foo"
- ">foo bar</strong"
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- the opening
- delimiter is
- followed by
- "by whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__ foo bar__\n."
- "<p>__ foo bar__<"
- bar__</p>
- "````````````````"
- "````````````````"
- "````````````````"
- A line ending
- ending counts as
- "as whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__\nfoo bar__\n."
- ".\n<p>__"
- foo bar__</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- "the opening `__`"
- "`__` is preceded"
- by an
- an alphanumeric
- and followed by
- "by punctuation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "a__\"foo\"__\n."
- "<p>a__&quot;foo&"
- ;foo&quot;__</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword strong
- strong emphasis
- emphasis is
- is forbidden
- "with `__`:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo__bar__\n."
- "<p>foo__bar__</p"
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "5__6__78\n."
- "<p>5__6__78</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- пристаням__стрем
- "м__стремятся__\n."
- "<p>"
- пристаням__стрем
- м__стремятся__</
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo, __bar__,"
- "__bar__, baz__"
- "."
- "<p><strong>foo,"
- ">foo, <strong>"
- "<strong>bar</"
- ">bar</strong>,"
- "strong>, baz</"
- ">, baz</strong><"
- strong></p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is strong
- "strong emphasis,"
- ", even though"
- though the
- the opening
- delimiter is
- both left- and
- "- and right-"
- "right-flanking,"
- ", because it is"
- it is preceded
- preceded by
- "punctuation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo-__(bar)__\n."
- "<p>foo-<strong>("
- strong>(bar)</
- ">(bar)</strong><"
- strong></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 7:"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- the closing
- delimiter is
- is preceded
- "by whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo bar **\n."
- "<p>**foo bar **<"
- bar **</p>
- "````````````````"
- "````````````````"
- "````````````````"
- (Nor can it be
- be interpreted
- as an emphasized
- "`*foo bar *`"
- ", because of"
- Rule 11.)
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- "the second `**`"
- "`**` is"
- preceded by
- by punctuation
- and followed by
- by an
- "an alphanumeric:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**(**foo)\n."
- "<p>**(**foo)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The point of
- point of this
- this restriction
- is more easily
- appreciated
- with these
- "these examples:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*(**foo**)*\n."
- "<p><em>(<strong>"
- "<strong>foo</"
- ">foo</strong>)</"
- ">)</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**Gomphocarpus ("
- (*Gomphocarpus
- "physocarpus*,"
- "*, syn."
- "*Asclepias"
- physocarpa*)**
- "."
- "<p><strong>"
- ">Gomphocarpus (<"
- (<em>
- "<em>Gomphocarpus"
- physocarpus</em>
- "</em>, syn."
- "<em>Asclepias"
- physocarpa</em>)
- "</em>)</strong><"
- strong></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo \"*bar*\""
- " \"*bar*\" foo**\n."
- "<p><strong>foo &"
- ">foo &quot;<em>"
- ;<em>bar</em>&
- "</em>&quot; foo<"
- ; foo</strong></
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword
- "emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo**bar\n."
- "<p><strong>foo</"
- ">foo</strong>bar"
- ">bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 8:"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- the closing
- delimiter is
- preceded by
- "by whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo bar __\n."
- "<p>__foo bar __<"
- bar __</p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is not
- is not strong
- "strong emphasis,"
- ", because the"
- "the second `__`"
- "`__` is"
- preceded by
- by punctuation
- and followed by
- by an
- "an alphanumeric:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__(__foo)\n."
- "<p>__(__foo)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The point of
- point of this
- this restriction
- is more easily
- appreciated
- with this
- "this example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_(__foo__)_\n."
- "<p><em>(<strong>"
- "<strong>foo</"
- ">foo</strong>)</"
- ">)</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Intraword strong
- strong emphasis
- emphasis is
- is forbidden
- "with `__`:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo__bar\n."
- "<p>__foo__bar</p"
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- __пристаням__стр
- "ням__стремятся\n."
- "<p>"
- __пристаням__стр
- ням__стремятся</
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- __foo__bar__baz_
- "ar__baz__\n."
- "<p><strong>"
- ">foo__bar__baz</"
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- This is strong
- "strong emphasis,"
- ", even though"
- though the
- the closing
- delimiter is
- both left- and
- "- and right-"
- "right-flanking,"
- ", because it is"
- it is followed
- followed by
- "punctuation:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__(bar)__.\n."
- "<p><strong>(bar)"
- ">(bar)</strong>."
- strong>.</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 9:"
- Any nonempty
- sequence of
- of inline
- inline elements
- elements can be
- can be the
- be the contents
- contents of an
- emphasized span.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo [bar](/url)"
- "](/url)*\n."
- "<p><em>foo <a"
- ">foo <a href=\"/"
- "href=\"/url\">bar<"
- "\">bar</a></em></"
- "></em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo\nbar*\n."
- ".\n<p><em>foo"
- bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "In particular,"
- ", emphasis and"
- and strong
- strong emphasis
- emphasis can be
- can be nested
- "inside emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- _foo __bar__
- " __bar__ baz_\n."
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong>"
- /strong> baz</em
- baz</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- _foo _bar_ baz_
- "."
- "<p><em>foo <em>"
- foo <em>bar</em>
- bar</em> baz</em
- baz</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo_ bar_\n."
- "<p><em><em>foo</"
- em>foo</em> bar<
- em> bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo *bar**\n."
- "<p><em>foo <em>"
- foo <em>bar</em>
- bar</em></em></p
- "</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo **bar** baz"
- "** baz*\n."
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong>"
- /strong> baz</em
- baz</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo**bar**baz*"
- "."
- "<p><em>foo<"
- "<em>foo<strong>"
- "<strong>bar</"
- ">bar</strong>baz"
- ">baz</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that in the
- in the preceding
- "case, the"
- interpretation
- "``` markdown"
- "<p><em>foo</em><"
- "</em><em>bar<em>"
- ">bar<em></em>baz"
- "</em>baz</em></p"
- "</em></p>\n```"
- is precluded by
- by the condition
- that a delimiter
- that
- can both open
- open and close (
- close (like the
- "`*` after `foo`)"
- cannot form
- form emphasis if
- if the sum of
- sum of the
- of the lengths
- lengths of
- the delimiter
- runs containing
- the opening and
- closing
- delimiters is a
- is a multiple of
- of 3 unless
- both lengths are
- are multiples of
- of 3.
- For the same
- "the same reason,"
- "reason, we don'"
- t get two
- two consecutive
- emphasis
- sections in this
- "in this example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo**bar*\n."
- "<p><em>foo**bar<"
- "**bar</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The same
- same condition
- ensures that the
- the following
- cases are all
- are all strong
- strong emphasis
- emphasis nested
- nested inside
- "emphasis, even"
- ", even when the"
- the interior
- whitespace is
- "omitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "***foo** bar*\n."
- "<p><em><strong>"
- "<strong>foo</"
- ">foo</strong>"
- /strong> bar</em
- bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo **bar***\n."
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong></"
- "></em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo**bar***\n."
- "<p><em>foo<"
- "<em>foo<strong>"
- "<strong>bar</"
- ">bar</strong></"
- "></em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- When the lengths
- lengths of the
- of the interior
- interior closing
- closing and
- and opening
- delimiter runs
- runs are *both*
- "multiples of 3,"
- "of 3, though,"
- they can match
- match to create
- "create emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo***bar***baz
- "."
- "<p>foo<em><"
- foo<em><strong>
- "<strong>bar</"
- ">bar</strong></"
- "></em>baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo******bar****
- "*bar*********baz"
- "."
- "<p>foo<strong><"
- strong><strong><
- strong><strong>
- "<strong>bar</"
- ">bar</strong></"
- "></strong></"
- "></strong>***baz"
- ">***baz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Indefinite
- levels of
- of nesting are
- "are possible:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo **bar *baz*"
- "*baz* bim** bop*"
- "."
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar <em>"
- bar <em>baz</em>
- baz</em> bim</
- "> bim</strong>"
- /strong> bop</em
- bop</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo [*bar*](/"
- "*bar*](/url)*\n."
- "<p><em>foo <a"
- ">foo <a href=\"/"
- "href=\"/url\"><em>"
- "\"><em>bar</em></"
- "</em></a></em></"
- "></em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- There can be no
- be no empty
- empty emphasis
- emphasis or
- or strong
- "strong emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "** is not an"
- not an empty
- empty emphasis
- "."
- "<p>** is not an"
- not an empty
- empty emphasis</
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**** is not an"
- not an empty
- an empty strong
- strong emphasis
- "."
- "<p>**** is not"
- "* is not an"
- not an empty
- an empty strong
- strong emphasis<
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 10:"
- Any nonempty
- sequence of
- of inline
- inline elements
- elements can be
- can be the
- be the contents
- contents of an
- strongly
- emphasized span.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo [bar](/url"
- "](/url)**\n."
- "<p><strong>foo <"
- ">foo <a href=\"/"
- "href=\"/url\">bar<"
- "\">bar</a></"
- "</a></strong></p"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo\nbar**\n."
- ".\n<p><strong>foo"
- bar</strong></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "In particular,"
- ", emphasis and"
- and strong
- strong emphasis
- emphasis can be
- can be nested
- inside strong
- "strong emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- __foo _bar_
- " _bar_ baz__\n."
- "<p><strong>foo <"
- ">foo <em>bar</em"
- ">bar</em> baz</"
- "> baz</strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- __foo __bar__
- " __bar__ baz__\n."
- "<p><strong>foo <"
- ">foo <strong>bar"
- ">bar</strong>"
- /strong> baz</
- "> baz</strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ____foo__ bar__
- "."
- "<p><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong>"
- /strong> bar</
- "> bar</strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo **bar****"
- "."
- "<p><strong>foo <"
- ">foo <strong>bar"
- ">bar</strong></"
- "></strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo *bar* baz*"
- "* baz**\n."
- "<p><strong>foo <"
- ">foo <em>bar</em"
- ">bar</em> baz</"
- "> baz</strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo*bar*baz**"
- "."
- "<p><strong>foo<"
- ">foo<em>bar</em>"
- bar</em>baz</
- em>baz</strong><
- strong></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "***foo* bar**\n."
- "<p><strong><em>"
- "><em>foo</em>"
- foo</em> bar</
- "> bar</strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo *bar***\n."
- "<p><strong>foo <"
- ">foo <em>bar</em"
- ">bar</em></"
- "</em></strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Indefinite
- levels of
- of nesting are
- "are possible:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo *bar **baz"
- "**baz**"
- "bim* bop**\n."
- "<p><strong>foo <"
- ">foo <em>bar <"
- em>bar <strong>
- "<strong>baz</"
- ">baz</strong>"
- bim</em> bop</
- "> bop</strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo [*bar*](/"
- "*bar*](/url)**\n."
- "<p><strong>foo <"
- ">foo <a href=\"/"
- "href=\"/url\"><em>"
- "\"><em>bar</em></"
- "</em></a></"
- "></a></strong></"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- There can be no
- be no empty
- empty emphasis
- emphasis or
- or strong
- "strong emphasis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- __ is not an
- not an empty
- empty emphasis
- "."
- "<p>__ is not an"
- not an empty
- empty emphasis</
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- ____ is not an
- not an empty
- an empty strong
- strong emphasis
- "."
- "<p>____ is not"
- is not an empty
- an empty strong
- strong emphasis<
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 11:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo ***\n."
- ".\n<p>foo ***</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo *\\**\n."
- "<p>foo <em>*</em"
- em>*</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo *_*\n."
- "<p>foo <em>_</em"
- em>_</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo *****\n."
- "<p>foo *****</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo **\\***\n."
- "<p>foo <strong>*"
- strong>*</strong
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo **_**\n."
- "<p>foo <strong>_"
- strong>_</strong
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that when
- when delimiters
- do not match
- "match evenly,"
- "evenly, Rule 11"
- 11 determines
- that the excess
- excess literal
- "`*`"
- characters will
- will appear
- appear outside
- outside of the
- "emphasis, rather"
- ", rather than"
- "than inside it:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo*\n."
- "<p>*<em>foo</em>"
- foo</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo**\n."
- "<p><em>foo</em>*"
- "</em>*</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "***foo**\n."
- "<p>*<strong>foo<"
- ">foo</strong></p"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "****foo*\n."
- "<p>***<em>foo</"
- em>foo</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo***\n."
- "<p><strong>foo</"
- ">foo</strong>*</"
- ">*</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo****\n."
- "<p><em>foo</em>*"
- "</em>***</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 12:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo ___\n."
- ".\n<p>foo ___</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo _\\__\n."
- "<p>foo <em>_</em"
- em>_</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo _*_\n."
- "<p>foo <em>*</em"
- em>*</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo _____\n."
- "<p>foo _____</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo __\\___\n."
- "<p>foo <strong>_"
- strong>_</strong
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo __*__\n."
- "<p>foo <strong>*"
- strong>*</strong
- "</strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo_\n."
- "<p>_<em>foo</em>"
- foo</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Note that when
- when delimiters
- do not match
- "match evenly,"
- "evenly, Rule 12"
- 12 determines
- that the excess
- excess literal
- "`_`"
- characters will
- will appear
- appear outside
- outside of the
- "emphasis, rather"
- ", rather than"
- "than inside it:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo__\n."
- "<p><em>foo</em>_"
- "</em>_</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "___foo__\n."
- "<p>_<strong>foo<"
- ">foo</strong></p"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "____foo_\n."
- "<p>___<em>foo</"
- em>foo</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo___\n."
- "<p><strong>foo</"
- ">foo</strong>_</"
- ">_</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo____\n."
- "<p><em>foo</em>"
- foo</em>___</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Rule 13 implies
- implies that if
- that if you want
- want emphasis
- emphasis nested
- nested directly
- directly inside
- "emphasis, you"
- ", you must use"
- use different
- "delimiters:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo**\n."
- "<p><strong>foo</"
- ">foo</strong></p"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*_foo_*\n."
- "<p><em><em>foo</"
- em>foo</em></em>
- em></em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__foo__\n."
- "<p><strong>foo</"
- ">foo</strong></p"
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_*foo*_\n."
- "<p><em><em>foo</"
- em>foo</em></em>
- em></em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "However, strong"
- strong emphasis
- emphasis within
- within strong
- strong emphasis
- emphasis is
- is possible
- possible without
- switching
- "delimiters:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "****foo****\n."
- "<p><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "____foo____\n."
- "<p><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Rule 13 can be
- can be applied
- applied to
- to arbitrarily
- long sequences
- " of\ndelimiters:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "******foo******"
- "."
- "<p><strong><"
- strong><strong><
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></"
- "></strong></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 14:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "***foo***\n."
- "<p><em><strong>"
- "<strong>foo</"
- ">foo</strong></"
- "></em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_____foo_____\n."
- "<p><em><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></em><"
- "></em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 15:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo _bar* baz_"
- "."
- "<p><em>foo _bar<"
- _bar</em> baz_</
- "> baz_</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo __bar *baz"
- "*baz bim__ bam*"
- "."
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar *baz"
- bar *baz bim</
- bim</strong> bam
- "> bam</em></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 16:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**foo **bar baz*"
- "bar baz**\n."
- "<p>**foo <strong"
- "<strong>bar baz<"
- bar baz</strong>
- /strong></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo *bar baz*\n."
- "<p>*foo <em>bar"
- "<em>bar baz</em>"
- baz</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Rule 17:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*[bar*](/url)\n."
- "<p>*<a href=\"/"
- "href=\"/url\">bar*"
- "\">bar*</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_foo [bar_](/url"
- "](/url)\n."
- "<p>_foo <a href="
- "<a href=\"/url\">"
- "=\"/url\">bar_</a>"
- bar_</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*<img src=\"foo\""
- "=\"foo\" title=\"*\""
- "=\"*\"/>\n."
- "<p>*<img src=\""
- "src=\"foo\" title="
- "\" title=\"*\"/></p"
- "\"*\"/></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**<a href=\"**\">"
- "."
- "<p>**<a href=\"**"
- "href=\"**\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__<a href=\"__\">"
- "."
- "<p>__<a href=\"__"
- "href=\"__\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*a `*`*\n."
- "<p><em>a <code>*"
- "<code>*</code></"
- /code></em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "_a `_`_\n."
- "<p><em>a <code>_"
- "<code>_</code></"
- /code></em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "**a<https://"
- "https://foo.bar/"
- "foo.bar/?q=**>\n."
- "<p>**a<a href=\""
- "a href=\"https://"
- "https://foo.bar/"
- foo.bar/?
- "q=**\">https://"
- "https://foo.bar/"
- foo.bar/?
- q=**</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "__a<https://"
- "https://foo.bar/"
- "foo.bar/?q=__>\n."
- "<p>__a<a href=\""
- "a href=\"https://"
- "https://foo.bar/"
- foo.bar/?
- "q=__\">https://"
- "https://foo.bar/"
- foo.bar/?
- q=__</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "## Links"
- A link contains
- "[link text]"
- (the visible
- "visible text), a"
- "["
- link destination
- "]"
- (the URI that is
- that is the link
- link destination
- "), and"
- ", and optionally"
- "a [link title]."
- There are two
- are two basic
- basic kinds of
- kinds of links
- of links in
- in Markdown.  In
- "[inline links]"
- "] the"
- destination and
- and title are
- are given
- immediately
- after the link
- the link text.
- "In\n["
- "[reference links"
- "]"
- the destination
- and title are
- are defined
- elsewhere in
- the document.
- "A [link text](@)"
- consists of a
- of a sequence of
- of zero or more
- inline elements
- enclosed by
- by square
- square brackets
- "brackets (`[`"
- "`[` and `]`"
- "and `]`).  The"
- following rules
- "rules apply:"
- "-"
- Links may not
- may not contain
- contain other
- "other links, at"
- ", at any level"
- level of nesting
- nesting. If
- multiple
- otherwise valid
- valid link
- link definitions
- appear nested
- nested inside
- inside each
- "other, the inner"
- inner-most
- "-most definition"
- is used.
- "-"
- Brackets are
- are allowed in
- "in the ["
- "[link text]"
- only if (a) they
- are backslash-
- "-escaped or (b)"
- or (b) they
- (b) they appear
- appear as a
- as a matched
- matched pair of
- pair of brackets
- "brackets,"
- with an open
- an open bracket
- "`[`"
- ", a sequence of"
- of zero or more
- "or more inlines,"
- "inlines, and"
- a close bracket
- "`]`."
- "- Backtick ["
- "[code spans], ["
- "], [autolinks]"
- "], and raw ["
- "[HTML tags]"
- bind more
- more tightly
- than the
- the brackets in
- in link text.
- "Thus, for"
- ", for example,"
- "`` [foo`]` ``"
- could not be a
- not be a link
- "a link text,"
- "text, since the"
- "the second `]`"
- is part of a
- of a code span.
- "-"
- The brackets in
- in link text
- text bind more
- more tightly
- tightly than
- than markers for
- "["
- emphasis and
- and strong
- "strong emphasis]"
- "."
- "Thus, for"
- ", for example,"
- "`*[foo*](url)`"
- is a link.
- A
- "[link"
- link destination
- "](@)"
- consists of
- of either
- "-"
- a sequence of
- of zero or more
- more characters
- between an
- "an opening `<`"
- "`<` and a"
- " and a\n  closing"
- "closing `>`"
- that contains no
- no line endings
- endings or
- or unescaped
- "`<` or `>`"
- "characters, or"
- "-"
- a nonempty
- sequence of
- of characters
- that does not
- does not start
- "start with `<`,"
- does not include
- "["
- ASCII control
- "characters]["
- ASCII control
- " character]\n  or"
- "]\n  or [space]"
- "character, and"
- ", and includes"
- parentheses only
- only if (a) they
- (a) they are
- backslash-
- "-escaped or (b)"
- or (b) they are
- they are part of
- part of a
- of a balanced
- balanced pair of
- unescaped
- parentheses.
- (Implementations
- may impose
- impose limits on
- on parentheses
- nesting to
- avoid
- performance
- "issues, but at"
- ", but at least"
- at least three
- three levels of
- of nesting
- should be
- be supported.)
- A
- "[link title](@)"
- consists of
- of either
- "-"
- a sequence of
- of zero or more
- more characters
- between straight
- straight double-
- double-quote
- "characters (`\"`"
- "), including a"
- "`\"`"
- character only
- only if it is
- backslash-
- "-escaped, or"
- "-"
- a sequence of
- of zero or more
- more characters
- between straight
- straight single-
- single-quote
- "characters (`'`"
- "), including a"
- "`'`"
- character only
- only if it is
- backslash-
- "-escaped, or"
- "-"
- a sequence of
- of zero or more
- more characters
- between matching
- " parentheses\n  ("
- "(`(...)`"
- "), including a"
- "`(` or `)`"
- character only
- only if it is
- backslash-
- "-escaped."
- "Although ["
- "[link titles]"
- may span
- span multiple
- "multiple lines,"
- "lines, they may"
- they may not
- may not contain
- "a [blank line]."
- An
- "[inline link](@)"
- "consists of a ["
- "[link text]"
- followed
- immediately
- by a left
- left parenthesis
- "`(`, an optional"
- "["
- link destination
- "], an optional\n["
- "[link title]"
- ", and a right"
- "parenthesis `)`."
- These four
- four components
- may be separated
- "by spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "ending.\nIf both"
- "If both ["
- link destination
- "] and ["
- "and [link title]"
- "are present,"
- "present, they"
- "*must* be"
- separated by
- "by spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- one line ending.
- "The link'"
- s text consists
- consists of the
- of the inlines
- contained
- "in the ["
- "[link text]"
- (excluding the
- the enclosing
- square brackets)
- ").\nThe link'"
- s URI consists
- consists of the
- of the link
- link destination
- ", excluding"
- enclosing
- "`<...>`"
- "if present, with"
- ", with backslash"
- "-escapes in"
- in effect as
- as described
- above.  The link
- "'"
- s title consists
- consists of the
- of the link
- "the link title,"
- "title, excluding"
- its
- enclosing
- "delimiters, with"
- ", with backslash"
- "-escapes in"
- in effect as
- as described
- above.
- Here is a simple
- a simple inline
- "inline link:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/uri \""
- "](/uri \"title\")"
- "."
- "<p><a href=\"/uri"
- "=\"/uri\" title=\""
- "title=\"title\">"
- "\"title\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "The title, the"
- ", the link text"
- text and even
- the destination
- "may be omitted:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/uri)\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[](./target.md)"
- "."
- "<p><a href=\"./"
- "=\"./target.md\"><"
- "\"></a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link]()\n."
- "<p><a href=\"\">"
- "href=\"\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](<>)\n."
- "<p><a href=\"\">"
- "href=\"\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[]()\n."
- "<p><a href=\"\"></"
- "=\"\"></a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The destination
- can only contain
- contain spaces
- spaces if it is
- enclosed in
- in pointy
- "pointy brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/my uri)"
- "."
- "<p>[link](/my"
- "](/my uri)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](</my uri>"
- "/my uri>)\n."
- "<p><a href=\"/my%"
- "=\"/my%20uri\">"
- "%20uri\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The destination
- cannot contain
- contain line
- "line endings,"
- even if enclosed
- enclosed in
- in pointy
- "pointy brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo\nbar)"
- "bar)\n."
- ".\n<p>[link](foo"
- bar)</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](<foo"
- "bar>)\n."
- ".\n<p>[link](<foo"
- bar>)</p>
- "````````````````"
- "````````````````"
- "````````````````"
- The destination
- "can contain `)`"
- if it is
- it is enclosed
- in pointy
- "pointy brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[a](<b)c>)\n."
- "<p><a href=\"b)c\""
- "=\"b)c\">a</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Pointy brackets
- brackets that
- that enclose
- enclose links
- links must be
- "be unescaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](<foo\\>)\n."
- "<p>[link](&lt;"
- "](&lt;foo&gt;)</"
- "&gt;)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- These are not
- "are not links,"
- "links, because"
- because the
- the opening
- opening pointy
- pointy bracket
- is not matched
- matched properly
- "properly:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[a](<b)c"
- "[a](<b)c>"
- "[a](<b>c)\n."
- ".\n<p>[a](&lt;b)c"
- "[a](&lt;b)c&gt;"
- "[a](<b>c)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Parentheses
- inside the link
- link destination
- "may be escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](\\(foo\\))"
- "."
- "<p><a href=\"(foo"
- "=\"(foo)\">link</a"
- ">link</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Any number of
- of parentheses
- are allowed
- allowed without
- without escaping
- "escaping, as"
- ", as long as"
- long as they are
- "balanced:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo(and("
- "foo(and(bar)))\n."
- "<p><a href=\"foo("
- "=\"foo(and(bar))\""
- "(bar))\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "However, if you"
- ", if you have"
- have unbalanced
- "parentheses, you"
- ", you need to"
- need to escape
- escape or use
- or use the
- "`<...>` form:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo(and("
- "foo(and(bar))\n."
- "<p>[link](foo("
- "](foo(and(bar))<"
- (bar))</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo\\(and\\"
- "\\(and\\(bar\\))\n."
- "<p><a href=\"foo("
- "=\"foo(and(bar)\">"
- "(bar)\">link</a><"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](<foo(and("
- "foo(and(bar)>)\n."
- "<p><a href=\"foo("
- "=\"foo(and(bar)\">"
- "(bar)\">link</a><"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Parentheses and
- and other
- other symbols
- symbols can also
- can also be
- "also be escaped,"
- "escaped, as"
- ", as usual"
- "in Markdown:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo\\)\\:)"
- "."
- "<p><a href=\"foo)"
- "=\"foo):\">link</a"
- ">link</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A link can
- link can contain
- contain fragment
- identifiers and
- "and queries:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](#fragment"
- fragment)
- "[link](https://"
- "://example.com#"
- "#fragment)"
- "[link](https://"
- "://example.com?"
- "foo=3#frag)\n."
- "<p><a href=\"#"
- "href=\"#fragment\""
- "\">link</a></p>"
- "<p><a href=\""
- "a href=\"https://"
- "://example.com#"
- "#fragment\">link<"
- "\">link</a></p>"
- "<p><a href=\""
- "a href=\"https://"
- "://example.com?"
- "foo=3#frag\">link"
- "\">link</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that a
- that a backslash
- before a non-
- a non-escapable
- character is
- just a backslash
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo\\bar)"
- "."
- "<p><a href=\"foo%"
- "=\"foo%5Cbar\">"
- "%5Cbar\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- URL-escaping
- escaping should
- should be left
- be left alone
- alone inside the
- "the destination,"
- ", as all"
- URL-escaped
- characters are
- are also valid
- valid URL
- URL characters.
- Entity and
- numerical
- character
- references in
- in the
- the destination
- will be parsed
- into the
- corresponding
- Unicode code
- "code points, as"
- ", as usual."
- These may
- be optionally
- URL-escaped when
- when written as
- "as HTML, but"
- ", but this spec"
- does not enforce
- enforce any
- any particular
- policy for
- for rendering
- URLs in
- HTML or other
- or other formats
- formats.
- Renderers may
- may make
- make different
- decisions
- about how to
- how to escape or
- or normalize
- URLs in the
- in the output.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](foo%20b&"
- "foo%20b&auml;)\n."
- "<p><a href=\"foo%"
- "=\"foo%20b%C3%A4\""
- "%C3%A4\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Note that,"
- "that, because"
- because titles
- titles can often
- often be parsed
- parsed as
- "as destinations,"
- if you try to
- try to omit the
- the destination
- and keep the
- "keep the title,"
- "title, you'll"
- get unexpected
- "results:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](\"title\")"
- "."
- "<p><a href=\"%"
- "href=\"%22title%"
- "22title%22\">link"
- "22\">link</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Titles may be in
- be in single
- "single quotes,"
- "quotes, double"
- ", double quotes,"
- "quotes, or"
- ", or parentheses"
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/url \""
- "](/url \"title\")"
- "[link](/url '"
- "](/url 'title')"
- "[link](/url ("
- "](/url (title))"
- "."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">link</a>"
- "<a href=\"/url\""
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">link</a>"
- "<a href=\"/url\""
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash
- escapes and
- and entity and
- and numeric
- character
- references
- may be used in
- "used in titles:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/url \""
- "](/url \"title \\\""
- "title \\\"&quot;\")"
- "."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title &"
- "\"title &quot;&"
- "&quot;&quot;\">"
- "&quot;\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Titles must be
- be separated
- from the link
- the link using
- "using spaces,"
- "spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "ending.\nOther ["
- Unicode
- "whitespace]"
- like non-
- non-breaking
- breaking space
- "space doesn'"
- "'t work."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/url \""
- "](/url \"title\")"
- "."
- "<p><a href=\"/url"
- "=\"/url%C2%A0%"
- "%C2%A0%22title%"
- "22title%22\">link"
- "22\">link</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Nested balanced
- balanced quotes
- quotes are not
- are not allowed
- allowed without
- without escaping
- "escaping:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/url \""
- "](/url \"title \""
- "\"title \"and\""
- " \"and\" title\")\n."
- "<p>[link](/url &"
- "](/url &quot;"
- "&quot;title &"
- ;title &quot;and
- quot;and&quot;
- "&quot; title&"
- ; title&quot;)</
- quot;)</p>
- "````````````````"
- "````````````````"
- "````````````````"
- But it is easy
- is easy to work
- to work around
- around this by
- this by using a
- a different
- "quote type:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](/url '"
- "](/url 'title \""
- "'title \"and\""
- " \"and\" title')\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title &"
- "\"title &quot;and"
- quot;and&quot;
- "&quot; title\">"
- "title\">link</a><"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "(Note:"
- "`Markdown.pl`"
- did allow double
- double quotes
- quotes inside a
- inside a double-
- double-quoted
- "title, and its"
- and its test
- its test suite
- suite included a
- a test
- demonstrating
- this.
- But it is hard
- is hard to see a
- to see a good
- a good rationale
- for the extra
- extra complexity
- this
- "brings, since"
- ", since there"
- there are
- are already many
- many ways---
- backslash
- "escaping,"
- entity and
- and numeric
- character
- "references, or"
- ", or using a"
- a different
- quote type for
- type for the
- the enclosing
- title---
- to write titles
- containing
- double quotes.
- "`Markdown.pl`'"
- s handling of
- of titles has a
- has a number
- of other strange
- strange features
- features.
- "For example, it"
- ", it allows"
- allows single-
- single-quoted
- titles in inline
- "inline links,"
- "links, but not"
- not reference
- "links.  And, in"
- reference links
- links but not
- but not inline
- "inline links, it"
- ", it allows a"
- allows a title
- a title to begin
- "with `\"`"
- "`\"` and end with"
- "`)`."
- ".  `Markdown.pl`"
- 1.0.1 even
- even allows
- titles with no
- with no closing
- "quotation mark,"
- "mark, though"
- ", though 1.0.2b8"
- 1.0.2b8 does not
- does not.
- It seems
- seems preferable
- to adopt a
- "adopt a simple,"
- "simple, rational"
- rational rule
- rule that works
- the same way in
- way in inline
- inline links and
- and link
- link reference
- definitions.)
- "Spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- one line ending
- ending is
- is allowed
- allowed around
- around the
- the destination
- " and\ntitle:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link](   /uri"
- "  \"title\"  )\n."
- "<p><a href=\"/uri"
- "=\"/uri\" title=\""
- "title=\"title\">"
- "\"title\">link</a>"
- link</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- But it is not
- is not allowed
- allowed between
- between the link
- the link text
- text and the
- following
- "parenthesis:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link] (/uri)\n."
- "<p>[link] (/uri)"
- "] (/uri)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The link text
- text may contain
- contain balanced
- "brackets, but"
- ", but not"
- not unbalanced
- "ones,"
- unless they are
- they are escaped
- "escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link [foo [bar]"
- " [bar]]](/uri)\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [foo [bar"
- "foo [bar]]</a></"
- "]]</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link] bar](/uri"
- "](/uri)\n."
- "<p>[link] bar](/"
- "] bar](/uri)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link [bar](/uri"
- "](/uri)\n."
- "<p>[link <a href"
- "<a href=\"/uri\">"
- "=\"/uri\">bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link \\[bar](/"
- " \\[bar](/uri)\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The link text
- text may contain
- contain inline
- "inline content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link *foo **bar"
- "**bar** `#`*](/"
- " `#`*](/uri)\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link <em"
- link <em>foo <
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong> <"
- "> <code>#</code>"
- "#</code></em></a"
- "</em></a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[!["
- "moon](moon.jpg)]"
- ")](/uri)\n."
- "<p><a href=\"/uri"
- "=\"/uri\"><img src"
- "<img src=\""
- "src=\"moon.jpg\""
- "\" alt=\"moon\" /><"
- "\" /></a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, links"
- ", links may not"
- may not contain
- contain other
- "other links, at"
- ", at any level"
- level of nesting
- nesting.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo [bar](/uri)"
- "](/uri)](/uri)\n."
- "<p>[foo <a href="
- "<a href=\"/uri\">"
- "=\"/uri\">bar</a>]"
- "bar</a>](/uri)</"
- (/uri)</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo *[bar [baz]"
- "[baz](/uri)](/"
- "/uri)](/uri)*](/"
- "uri)*](/uri)\n."
- "<p>[foo <em>[bar"
- "<em>[bar <a href"
- "<a href=\"/uri\">"
- "=\"/uri\">baz</a>]"
- "baz</a>](/uri)</"
- "(/uri)</em>](/"
- "</em>](/uri)</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![[["
- "foo](uri1)](uri2"
- ")](uri2)](uri3)"
- "."
- "<p><img src=\""
- "src=\"uri3\" alt=\""
- "\" alt=\"[foo]("
- "=\"[foo](uri2)\" /"
- "uri2)\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- These cases
- cases illustrate
- the precedence
- of link text
- text grouping
- grouping over
- emphasis
- "grouping:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*[foo*](/uri)\n."
- "<p>*<a href=\"/"
- "href=\"/uri\">foo*"
- "\">foo*</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo *bar](baz*)"
- "."
- "<p><a href=\"baz*"
- "=\"baz*\">foo *bar"
- foo *bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Note that
- that brackets
- brackets that
- "*aren't*"
- part of links do
- links do not
- do not take
- "precedence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo [bar* baz]"
- "."
- "<p><em>foo [bar<"
- "[bar</em> baz]</"
- "> baz]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- These cases
- cases illustrate
- the precedence
- "of HTML tags,"
- "tags, code spans"
- "spans,"
- and autolinks
- over link
- "link grouping:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo <bar attr=\""
- "attr=\"](baz)\">"
- "."
- "<p>[foo <bar"
- "foo <bar attr=\"]"
- "attr=\"](baz)\"></"
- "baz)\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo`](/uri)`\n."
- "<p>[foo<code>](/"
- "code>](/uri)</"
- (/uri)</code></p
- code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo<https://"
- "://example.com/?"
- "search=](uri)>\n."
- "<p>[foo<a href=\""
- "a href=\"https://"
- "://example.com/?"
- "search=%5D(uri)\""
- "5D(uri)\">https:/"
- ">https://"
- "://example.com/?"
- "search=](uri)</a"
- (uri)</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- There are three
- three kinds of
- "[reference link]"
- "link](@)s:"
- "[full](#full-"
- "(#full-reference"
- "-link),"
- "[collapsed](#"
- "](#collapsed-"
- "-reference-link)"
- ",\nand"
- "[shortcut](#"
- "](#shortcut-"
- "-reference-link)"
- "."
- A
- "[full reference"
- "link](@)"
- "consists of a ["
- "[link text]"
- immediately
- "followed by a ["
- "[link label]"
- "]\nthat [matches]"
- "matches] a ["
- link reference
- "definition]"
- elsewhere in the
- in the document.
- A
- "[link label](@)"
- begins with a
- with a left
- a left bracket (
- "`[`) and ends"
- with the first
- first right
- right bracket (
- "`]`"
- ) that is not
- is not backslash
- "-escaped."
- Between these
- these brackets
- brackets there
- there must be at
- be at least one
- one character
- that is not a
- "is not a space,"
- "tab, or line"
- or line ending.
- Unescaped square
- square bracket
- characters are
- are not allowed
- allowed inside
- inside the
- opening and
- and closing
- closing square
- square brackets
- "brackets of ["
- "[link labels]"
- "].  A link"
- label can have
- can have at most
- at most 999
- 999 characters
- inside the
- the square
- brackets.
- One label
- "[matches](@)"
- another just in
- just in case
- in case their
- their normalized
- forms are equal.
- To normalize a
- "label, strip off"
- off the opening
- opening and
- and closing
- closing brackets
- "brackets,"
- perform the
- "*Unicode case"
- case fold*
- ", strip leading"
- leading and
- and trailing
- "spaces, tabs,"
- ", tabs, and line"
- and line endings
- "endings, and"
- ", and collapse"
- consecutive
- internal
- "spaces, tabs,"
- ", tabs, and line"
- and line endings
- endings to a
- to a single
- a single space.
- If there are
- are multiple
- matching
- reference link
- link definitions
- ", the one that"
- one that comes
- comes first in
- first in the
- document is used
- is used.
- (It is desirable
- in such cases to
- cases to emit a
- emit a warning.)
- "The link'"
- s URI and title
- title are
- are provided by
- by the matching
- "[link"
- reference
- "definition]."
- Here is a simple
- a simple example
- "example:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][bar]"
- "[bar]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The rules for
- "for the ["
- "[link text]"
- are the same as
- " same as with\n["
- "[inline links]"
- "].  Thus:"
- The link text
- text may contain
- contain balanced
- "brackets, but"
- ", but not"
- not unbalanced
- "ones,"
- unless they are
- they are escaped
- "escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link [foo [bar]"
- "[bar]]][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [foo [bar"
- "foo [bar]]</a></"
- "]]</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link \\[bar][ref"
- "bar][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The link text
- text may contain
- contain inline
- "inline content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[link *foo **bar"
- "**bar** `#`*]["
- "* `#`*][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri"
- "=\"/uri\">link <em"
- link <em>foo <
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong> <"
- "> <code>#</code>"
- "#</code></em></a"
- "</em></a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[!["
- "moon](moon.jpg)]"
- ")][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri"
- "=\"/uri\"><img src"
- "<img src=\""
- "src=\"moon.jpg\""
- "\" alt=\"moon\" /><"
- "\" /></a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "However, links"
- ", links may not"
- may not contain
- contain other
- "other links, at"
- ", at any level"
- level of nesting
- nesting.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo [bar](/uri)"
- "](/uri)][ref]"
- "[ref]: /uri\n."
- "<p>[foo <a href="
- "<a href=\"/uri\">"
- "=\"/uri\">bar</a>]"
- "bar</a>]<a href="
- "<a href=\"/uri\">"
- "=\"/uri\">ref</a><"
- ref</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo *bar [baz]["
- "[baz][ref]*][ref"
- "]*][ref]"
- "[ref]: /uri\n."
- "<p>[foo <em>bar"
- "<em>bar <a href="
- "<a href=\"/uri\">"
- "=\"/uri\">baz</a><"
- "baz</a></em>]<a"
- "</em>]<a href=\"/"
- "href=\"/uri\">ref<"
- "\">ref</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- (In the examples
- "examples above,"
- "above, we have"
- "we have two ["
- shortcut
- "reference links]"
- "]\ninstead of one"
- "["
- full reference
- "link].)"
- The following
- cases illustrate
- the precedence
- of link text
- text grouping
- grouping over
- emphasis
- "grouping:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*[foo*][ref]"
- "[ref]: /uri\n."
- "<p>*<a href=\"/"
- "href=\"/uri\">foo*"
- "\">foo*</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo *bar][ref]*"
- "[ref]: /uri\n."
- "<p><a href=\"/uri"
- "=\"/uri\">foo *bar"
- foo *bar</a>*</p
- "</a>*</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- These cases
- cases illustrate
- the precedence
- "of HTML tags,"
- "tags, code spans"
- "spans,"
- and autolinks
- over link
- "link grouping:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo <bar attr=\""
- "attr=\"][ref]\">"
- "[ref]: /uri\n."
- "<p>[foo <bar"
- "foo <bar attr=\"]"
- "attr=\"][ref]\"></"
- "ref]\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo`][ref]`"
- "[ref]: /uri\n."
- "<p>[foo<code>]["
- "<code>][ref]</"
- "][ref]</code></p"
- code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo<https://"
- "://example.com/?"
- "search=][ref]>"
- "[ref]: /uri\n."
- "<p>[foo<a href=\""
- "a href=\"https://"
- "://example.com/?"
- search=%5D%5Bref
- "5D%5Bref%5D\">"
- "%5D\">https://"
- "://example.com/?"
- "search=][ref]</a"
- "[ref]</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Matching is case
- is case-
- case-insensitive
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][BaR]"
- "[bar]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Unicode case
- case fold is
- "fold is used:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[ẞ]\n\n[SS]: /url"
- "."
- "<p><a href=\"/url"
- "=\"/url\">ẞ</a></p"
- ẞ</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Consecutive
- "internal spaces,"
- "spaces, tabs,"
- ", tabs, and line"
- and line endings
- endings are
- are treated as
- as one space for
- purposes of
- of determining
- "matching:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[Foo"
- "bar]: /url"
- "[Baz][Foo bar]\n."
- "<p><a href=\"/url"
- "=\"/url\">Baz</a><"
- Baz</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "No spaces, tabs,"
- ", tabs, or line"
- or line endings
- endings are
- are allowed
- allowed between
- "between the ["
- "[link text]"
- "] and the\n["
- "[link label]:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo] [bar]"
- "[bar]: /url \""
- ": /url \"title\"\n."
- "<p>[foo] <a href"
- "<a href=\"/url\""
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]\n[bar]"
- "[bar]: /url \""
- ": /url \"title\"\n."
- ".\n<p>[foo]"
- "<a href=\"/url\""
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- This is a
- is a departure
- from John Gruber
- "'"
- s original
- Markdown syntax
- "description,"
- ", which"
- which explicitly
- allows
- whitespace
- between the link
- text and the
- and the link
- the link label.
- It brings
- brings reference
- links in line
- " in line with\n["
- "[inline links]"
- ", which ("
- which (according
- to both original
- Markdown and
- this spec)
- spec) cannot
- ) cannot have
- have whitespace
- after the link
- the link text.
- More
- "importantly, it"
- ", it prevents"
- inadvertent
- capture of
- of consecutive
- "["
- shortcut
- "reference links]"
- "."
- If whitespace is
- is allowed
- allowed between
- between the
- link text and
- text and the
- and the link
- "the link label,"
- "label, then in"
- then in the
- in the following
- we will have
- a single
- single reference
- "link, not two"
- not two shortcut
- "reference links,"
- "links, as"
- "intended:"
- "``` markdown"
- "[foo]\n[bar]"
- "[foo]: /url1"
- "[bar]: /url2\n```"
- "(Note that ["
- shortcut
- "reference links]"
- were introduced
- by Gruber
- himself in a
- in a beta
- a beta version
- version of
- "`Markdown.pl`"
- ", but never"
- never included
- in the official
- official syntax
- description.
- Without shortcut
- reference
- "links, it is"
- ", it is harmless"
- harmless to
- to allow space
- space between
- between the link
- the link text
- text and
- link label; but
- ; but once
- once shortcut
- references are
- "are introduced,"
- ", it is"
- too dangerous to
- "to allow this,"
- "this, as it"
- as it frequently
- leads to
- unintended
- results.)
- When there are
- are multiple
- "matching ["
- link reference
- "definitions],"
- the first is
- "first is used:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]: /url1"
- "[foo]: /url2"
- "[bar][foo]\n."
- "<p><a href=\"/"
- "href=\"/url1\">bar"
- "\">bar</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that
- that matching is
- is performed on
- on normalized
- "strings, not"
- ", not parsed"
- inline content.
- So the following
- "does not match,"
- "match, even"
- ", even though"
- though the
- labels define
- equivalent
- "inline content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[bar][foo\\!]"
- "[foo!]: /url\n."
- ".\n<p>[bar][foo!]"
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "[Link labels]"
- cannot contain
- contain brackets
- "brackets, unless"
- ", unless they"
- they are
- backslash-
- "-escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][ref[]"
- "[ref[]: /uri\n."
- "<p>[foo][ref[]</"
- "[ref[]</p>"
- "<p>[ref[]: /uri<"
- "]: /uri</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][ref[bar]]"
- "[ref[bar]]: /uri"
- "."
- "<p>[foo][ref[bar"
- "[ref[bar]]</p>"
- "<p>[ref[bar]]: /"
- "bar]]: /uri</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[[[foo]]]"
- "[[[foo]]]: /url"
- "."
- "<p>[[[foo]]]</p>"
- "<p>[[[foo]]]: /"
- "]]]: /url</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][ref\\[]"
- "[ref\\[]: /uri\n."
- "<p><a href=\"/uri"
- "=\"/uri\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Note that in
- that in this
- in this example
- "`]`"
- is not backslash
- "-escaped:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[bar\\\\]: /uri"
- "[bar\\\\]\n."
- "<p><a href=\"/uri"
- "=\"/uri\">bar\\</a>"
- "bar\\</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "A [link label]"
- must contain at
- at least one
- one character
- that is not a
- "is not a space,"
- "a space, tab, or"
- "line ending:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[]\n\n[]: /uri\n."
- ".\n<p>[]</p>"
- "<p>[]: /uri</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[\n ]\n\n[\n ]: /uri"
- " ]: /uri\n.\n<p>["
- ".\n<p>[\n]</p>"
- "]</p>\n<p>["
- "<p>[\n]: /uri</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A
- "[collapsed"
- "reference link]("
- "link](@)"
- "consists of a ["
- "[link label]"
- "] that [matches]"
- "matches] a\n["
- link reference
- "definition]"
- elsewhere in the
- "document,"
- ", followed by"
- by the string
- "`[]`."
- The contents of
- of the link
- the link label
- label are parsed
- parsed as
- "as inlines,"
- which are used
- are used as the
- "as the link'"
- s text.
- "The link'"
- s URI and title
- title are
- provided by the
- by the matching
- reference link
- link definition.
- "Thus,\n`[foo][]`"
- is equivalent to
- "`[foo][foo]`."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[*foo* bar][]"
- "[*foo* bar]: /"
- "bar]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\"><"
- "title\"><em>foo</"
- em>foo</em> bar<
- em> bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The link labels
- labels are case-
- case-insensitive
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[Foo][]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">Foo</a><"
- Foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- As with full
- full reference
- "links, spaces,"
- "spaces, tabs, or"
- "tabs, or line"
- or line endings
- endings are not
- allowed between
- between the two
- the two sets of
- sets of brackets
- "brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo] \n[]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a>"
- "[]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A
- "[shortcut"
- "reference link]("
- "link](@)"
- "consists of a ["
- "[link label]"
- "] that [matches]"
- "matches] a\n["
- link reference
- "definition]"
- elsewhere in the
- document and is
- and is not
- is not followed
- "followed by `[]`"
- or a link label.
- The contents of
- of the link
- the link label
- label are parsed
- parsed as
- "as inlines,"
- which are used
- are used as the
- "as the link'"
- s text.
- "The link'"
- "'s URI and title"
- are provided by
- by the matching
- matching link
- link reference
- definition.
- "Thus, `[foo]`"
- is equivalent to
- "`[foo][]`."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[*foo* bar]"
- "[*foo* bar]: /"
- "bar]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\"><"
- "title\"><em>foo</"
- em>foo</em> bar<
- em> bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[[*foo* bar]]"
- "[*foo* bar]: /"
- "bar]: /url \""
- ": /url \"title\"\n."
- "<p>[<a href=\"/"
- "href=\"/url\""
- "=\"/url\" title=\""
- "title=\"title\"><"
- "title\"><em>foo</"
- em>foo</em> bar<
- "em> bar</a>]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[[bar [foo]"
- "[foo]: /url\n."
- "<p>[[bar <a href"
- "<a href=\"/url\">"
- "=\"/url\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- The link labels
- labels are case-
- case-insensitive
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[Foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">Foo</a><"
- Foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- A space after
- after the link
- the link text
- text should be
- "be preserved:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo] bar"
- "[foo]: /url\n."
- "<p><a href=\"/url"
- "=\"/url\">foo</a>"
- ">foo</a> bar</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- If you just want
- want bracketed
- "text, you can"
- can backslash-
- "-escape the"
- opening bracket
- bracket to avoid
- "to avoid links:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\[foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- ".\n<p>[foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that this
- "this is a link,"
- "a link, because"
- because a link
- a link label
- label ends with
- with the first
- following
- "closing bracket:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo*]: /url"
- "*[foo*]\n."
- "<p>*<a href=\"/"
- "href=\"/url\">foo*"
- "\">foo*</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Full and
- and collapsed
- references take
- take precedence
- over shortcut
- "references:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][bar]"
- "[foo]: /url1"
- "[bar]: /url2\n."
- "<p><a href=\"/"
- "href=\"/url2\">foo"
- "\">foo</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][]"
- "[foo]: /url1\n."
- "<p><a href=\"/"
- "href=\"/url1\">foo"
- "\">foo</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Inline links
- links also take
- "take precedence:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo]()"
- "[foo]: /url1\n."
- "<p><a href=\"\">"
- "href=\"\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo](not a link"
- a link)
- "[foo]: /url1\n."
- "<p><a href=\"/"
- "href=\"/url1\">foo"
- "\">foo</a>(not a"
- a>(not a link)</
- link)</p>
- "````````````````"
- "````````````````"
- "````````````````"
- In the following
- case
- "`[bar][baz]`"
- is parsed as a
- "as a reference,"
- "`[foo]`"
- "as normal text:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][bar][baz]"
- "[baz]: /url\n."
- "<p>[foo]<a href="
- "<a href=\"/url\">"
- "=\"/url\">bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "Here, though,"
- "`[foo][bar]`"
- is parsed as a
- "as a reference,"
- ", since\n`[bar]`"
- "is defined:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][bar][baz]"
- "[baz]: /url1"
- "[bar]: /url2\n."
- "<p><a href=\"/"
- "href=\"/url2\">foo"
- "\">foo</a><a href"
- "><a href=\"/url1\""
- "=\"/url1\">baz</a>"
- ">baz</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Here `[foo]`"
- is not parsed as
- as a shortcut
- "reference,"
- ", because it"
- is followed by a
- by a link label
- label (even
- (even though
- "`[bar]`"
- "is not defined):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "[foo][bar][baz]"
- "[baz]: /url1"
- "[foo]: /url2\n."
- "<p>[foo]<a href="
- "<a href=\"/url1\">"
- "\"/url1\">bar</a><"
- bar</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "## Images"
- Syntax for
- for images is
- is like the
- like the syntax
- syntax for links
- "links, with one"
- difference.
- "Instead of ["
- "[link text]"
- "], we have an"
- "[image"
- "description](@)"
- "."
- The rules for
- for this are the
- "same as for ["
- "[link text]"
- ", except that (a"
- that (a) an
- image
- description
- "starts with `![`"
- "`![` rather than"
- "`[`, and"
- (b) an image
- description may
- may contain
- contain links.
- An image
- description has
- has inline
- inline elements
- as its contents.
- When an image is
- is rendered to
- "to HTML,"
- this is
- is standardly
- used as the
- "as the image's"
- "'s `alt`"
- "`alt` attribute."
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "!["
- "foo](/url \"title"
- " \"title\")\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo\""
- "=\"foo\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo *bar*]"
- "[foo *bar*]:"
- "bar*]: train.jpg"
- "\"train & tracks\""
- "."
- "<p><img src=\""
- "src=\"train.jpg\""
- "\" alt=\"foo bar\""
- "foo bar\" title=\""
- "title=\"train &"
- "\"train &amp;"
- "&amp; tracks\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo !["
- "bar](/url)](/"
- "/url)](/url2)\n."
- "<p><img src=\"/"
- "src=\"/url2\" alt="
- "\" alt=\"foo bar\""
- "foo bar\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "!["
- "foo [bar](/url)]"
- "](/url)](/url2)"
- "."
- "<p><img src=\"/"
- "src=\"/url2\" alt="
- "\" alt=\"foo bar\""
- "foo bar\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Though this spec
- spec is
- is concerned
- "with parsing,"
- "parsing, not"
- ", not rendering,"
- ", it is"
- recommended that
- that in
- in rendering to
- "to HTML, only"
- ", only the plain"
- plain string
- string content
- "of the ["
- image
- "description]"
- be used.
- Note that in
- the above
- "above example,"
- "example, the alt"
- "alt attribute'"
- "'s value is"
- "`foo bar`, not"
- "`foo"
- "[bar](/url)` or"
- "`foo <a href=\"/"
- "href=\"/url\">bar<"
- "\">bar</a>`"
- "."
- Only the plain
- plain string
- content is
- "is rendered,"
- ", without"
- formatting.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo *bar*][]"
- "[foo *bar*]:"
- "bar*]: train.jpg"
- "\"train & tracks\""
- "."
- "<p><img src=\""
- "src=\"train.jpg\""
- "\" alt=\"foo bar\""
- "foo bar\" title=\""
- "title=\"train &"
- "\"train &amp;"
- "&amp; tracks\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "!["
- "foo *bar*]["
- "*bar*][foobar]"
- "[FOOBAR]:"
- "]: train.jpg \""
- "\"train & tracks\""
- "."
- "<p><img src=\""
- "src=\"train.jpg\""
- "\" alt=\"foo bar\""
- "foo bar\" title=\""
- "title=\"train &"
- "\"train &amp;"
- "&amp; tracks\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "!["
- "foo](train.jpg)"
- "."
- "<p><img src=\""
- "src=\"train.jpg\""
- "\" alt=\"foo\" /></"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "My !["
- "foo bar](/path/"
- "](/path/to/"
- "/to/train.jpg  \""
- "  \"title\"   )\n."
- "<p>My <img src=\""
- "src=\"/path/to/"
- "/to/train.jpg\""
- "\" alt=\"foo bar\""
- "foo bar\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo](<url>)\n."
- "<p><img src=\"url"
- "src=\"url\" alt=\""
- "\" alt=\"foo\" /></"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![](/url)\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Reference-style:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo][bar]"
- "[bar]: /url\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo\" /></"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo][bar]"
- "[BAR]: /url\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo\" /></"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Collapsed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo][]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo\""
- "=\"foo\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![*foo* bar][]"
- "[*foo* bar]: /"
- "bar]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo bar\""
- "foo bar\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The labels are
- are case-
- case-insensitive
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![Foo][]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"Foo\""
- "=\"Foo\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- As with
- with reference
- "links, spaces,"
- "spaces, tabs,"
- ", tabs, and line"
- and line endings
- "endings, are not"
- are not allowed
- between the two
- the two sets of
- sets of brackets
- "brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo] \n[]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo\""
- "=\"foo\" title=\""
- "title=\"title\" />"
- "[]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Shortcut:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo\""
- "=\"foo\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![*foo* bar]"
- "[*foo* bar]: /"
- "bar]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"foo bar\""
- "foo bar\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that link
- link labels
- labels cannot
- cannot contain
- unescaped
- "brackets:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![[foo]]"
- "[[foo]]: /url \""
- ": /url \"title\"\n."
- ".\n<p>![["
- "<p>![[foo]]</p>"
- "<p>[[foo]]: /url"
- "]]: /url &quot;"
- "&quot;title&quot"
- "&quot;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- The link labels
- labels are case-
- case-insensitive
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "![Foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- "<p><img src=\"/"
- "src=\"/url\" alt=\""
- "\" alt=\"Foo\""
- "=\"Foo\" title=\""
- "title=\"title\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- If you just want
- want a literal
- "`!`"
- followed by
- by bracketed
- "text, you can"
- backslash-escape
- "-escape the"
- "the opening `[`:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "!\\[foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- ".\n<p>![foo]</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- If you want a
- want a link
- a link after a
- after a literal
- "`!`"
- ", backslash-"
- "-escape the\n`!`:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "\\![foo]"
- "[foo]: /url \""
- ": /url \"title\"\n."
- ".\n<p>!"
- "<a href=\"/url\""
- "=\"/url\" title=\""
- "title=\"title\">"
- "\"title\">foo</a><"
- foo</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "## Autolinks"
- "[Autolink](@)"
- s are absolute
- absolute URIs
- URIs and email
- email addresses
- " inside\n`<` and"
- "`<` and `>`"
- "."
- They are parsed
- "parsed as links,"
- "links, with the"
- with the URL or
- URL or email
- or email address
- as the link
- the link label.
- A
- "[URI autolink](@"
- "](@) consists of"
- "`<`"
- ", followed by an"
- "[absolute URI]"
- "] followed by"
- "`>`"
- "."
- It is parsed as
- a link to the
- "to the URI, with"
- ", with the URI"
- the URI as the
- "as the link'"
- "'s label."
- An
- "[absolute URI](@"
- "URI](@),"
- for these
- "these purposes,"
- ", consists of a"
- "[scheme]"
- followed by a
- "by a colon (`:`)"
- followed by zero
- by zero or more
- more characters
- "other than ["
- "[ASCII control"
- "characters]["
- ASCII control
- "character], ["
- "], [space], `<`"
- "], `<`, and `>`."
- If the URI
- the URI includes
- includes these
- these characters
- ", they must be"
- must be percent-
- percent-encoded
- "(e.g. `%20`"
- for a space).
- For purposes of
- "of this spec, a"
- "[scheme](@)"
- is any sequence
- of 2--
- 32 characters
- beginning with
- with an ASCII
- an ASCII letter
- letter and
- and followed
- by any
- any combination
- of ASCII letters
- "letters, digits,"
- "digits, or the"
- ", or the symbols"
- " symbols plus\n(\""
- "(\"+\"), period (\""
- "\".\""
- ".\"), or hyphen ("
- "\"-\")."
- Here are some
- are some valid
- "valid autolinks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<http://"
- "://foo.bar.baz>"
- "."
- "<p><a href=\"http"
- "=\"http://"
- "://foo.bar.baz\">"
- "\">http://"
- "://foo.bar.baz</"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<https://"
- "://foo.bar.baz/"
- /test?
- q=hello&id=22&
- "&id=22&boolean>"
- "."
- "<p><a href=\""
- "a href=\"https://"
- "://foo.bar.baz/"
- /test?
- q=hello&amp;id=
- "&amp;id=22&amp;"
- "=22&amp;boolean\""
- "boolean\">https:/"
- ">https://"
- "://foo.bar.baz/"
- /test?
- q=hello&amp;id=
- "&amp;id=22&amp;"
- "=22&amp;boolean<"
- boolean</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<irc://foo.bar:"
- "foo.bar:2233/baz"
- "2233/baz>\n."
- "<p><a href=\"irc:"
- "=\"irc://foo.bar:"
- "foo.bar:2233/baz"
- "2233/baz\">irc://"
- "\">irc://foo.bar:"
- "foo.bar:2233/baz"
- 2233/baz</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Uppercase is
- "is also fine:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<MAILTO:FOO@"
- "@BAR.BAZ>\n."
- "<p><a href=\""
- "href=\"MAILTO:FOO"
- "@BAR.BAZ\">"
- "\">MAILTO:FOO@"
- "@BAR.BAZ</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Note that many
- many strings
- strings that
- "that count as ["
- "[absolute URIs]"
- "] for"
- purposes of this
- of this spec are
- spec are not
- are not valid
- "valid URIs,"
- "URIs, because"
- because their
- schemes are not
- not registered
- or because of
- of other
- other problems
- with their
- "their syntax:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a+b+c:d>\n."
- "<p><a href=\"a+b+"
- "=\"a+b+c:d\">a+b+"
- "\">a+b+c:d</a></p"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<made-up-scheme:"
- "-scheme://foo,"
- "://foo,bar>\n."
- "<p><a href=\"made"
- "=\"made-up-scheme"
- "-scheme://foo,"
- "://foo,bar\">made"
- "\">made-up-scheme"
- "-scheme://foo,"
- "://foo,bar</a></"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<https://../>\n."
- "<p><a href=\""
- "a href=\"https://"
- "https://../\">"
- "://../\">https://"
- "https://../</a><"
- "../</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<localhost:5001/"
- ":5001/foo>\n."
- "<p><a href=\""
- "href=\"localhost:"
- ":5001/foo\">"
- "/foo\">localhost:"
- ":5001/foo</a></p"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Spaces are not
- are not allowed
- allowed in
- "in autolinks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<https://foo.bar"
- /foo.bar/baz bim
- "/baz bim>\n."
- "<p>&lt;https://"
- "https://foo.bar/"
- foo.bar/baz bim&
- baz bim&gt;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash-
- "-escapes do not"
- do not work
- not work inside
- inside autolinks
- ":"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<https://"
- "://example.com/\\"
- "/\\[\\>\n."
- "<p><a href=\""
- "a href=\"https://"
- "://example.com/%"
- "/%5C%5B%5C\">"
- "%5B%5C\">https://"
- "://example.com/\\"
- "/\\[\\</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- An
- "[email autolink]"
- "](@)\nconsists of"
- "`<`"
- ", followed by an"
- "[email address],"
- "],\nfollowed by"
- "`>`.  The link'"
- s label is the
- is the email
- "email address,"
- and the URL is
- "`mailto:`"
- followed by the
- by the email
- email address.
- An
- "[email address]("
- "](@),"
- for these
- "these purposes,"
- ", is anything"
- anything that
- that matches
- the
- "["
- non-normative
- regex from the
- from the HTML5
- spec
- "](https://"
- html.spec.whatwg
- c.whatwg.org/
- /multipage/
- "/forms.html#e-"
- "#e-mail-state-("
- "-state-(type="
- "-(type=email)):"
- "/^[a-zA-Z0-9.!"
- "#$%&'*+/=?"
- "^_`{|}~-]+@[a-zA"
- "]+@[a-zA-Z0-9](?"
- "-Z0-9](?:[a-zA-"
- "?:[a-zA-Z0-9-]{"
- "-Z0-9-]{0,61}[a-"
- "0,61}[a-zA-Z0-9]"
- "zA-Z0-9])?"
- "(?:\\.[a-zA-Z0-9]"
- "zA-Z0-9](?:[a-zA"
- "(?:[a-zA-Z0-9-]{"
- "-Z0-9-]{0,61}[a-"
- "0,61}[a-zA-Z0-9]"
- "zA-Z0-9])?)*$/"
- Examples of
- of email
- "email autolinks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<foo@"
- "@bar.example.com"
- ">\n."
- "<p><a href=\""
- "href=\"mailto:foo"
- "@bar.example.com"
- "\">foo@"
- "@bar.example.com"
- "</a></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<foo+special@"
- special@Bar.baz-
- Bar.baz-bar0.com
- "bar0.com>\n."
- "<p><a href=\""
- "href=\"mailto:foo"
- +special@Bar.baz
- "@Bar.baz-bar0."
- "-bar0.com\">foo+"
- "\">foo+special@"
- special@Bar.baz-
- Bar.baz-bar0.com
- bar0.com</a></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash-
- "-escapes do not"
- do not work
- not work inside
- inside email
- "email autolinks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<foo\\+@"
- "@bar.example.com"
- ">\n."
- "<p>&lt;foo+@"
- "@bar.example.com"
- "&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- These are not
- "not autolinks:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<>\n."
- "<p>&lt;&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "< https://"
- "https://foo.bar"
- "/foo.bar >\n."
- "<p>&lt; https://"
- "https://foo.bar"
- /foo.bar &gt;</p
- "&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<m:abc>\n."
- "<p>&lt;m:abc&gt;"
- "&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<foo.bar.baz>\n."
- "<p>&lt;"
- ">&lt;foo.bar.baz"
- "&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "https://"
- "://example.com\n."
- "<p>https://"
- "://example.com</"
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo@
- "@bar.example.com"
- "."
- "<p>foo@"
- "@bar.example.com"
- "</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "## Raw HTML"
- "Text between `<`"
- "`<` and `>`"
- that looks like
- like an HTML tag
- HTML tag is
- tag is parsed as
- as a
- raw HTML tag and
- tag and will be
- will be rendered
- rendered in HTML
- in HTML without
- without escaping
- escaping.
- Tag and
- and attribute
- names are not
- are not limited
- limited to
- to current HTML
- "HTML tags,"
- so custom tags (
- "tags (and even,"
- "even, say,"
- ", say, DocBook"
- DocBook tags)
- tags) may be
- ) may be used.
- Here is the
- is the grammar
- grammar for tags
- "for tags:"
- "A [tag name](@)"
- consists of an
- of an ASCII
- an ASCII letter
- followed by zero
- by zero or more
- or more ASCII
- "ASCII letters,"
- "letters, digits,"
- "digits, or"
- "hyphens (`-`)."
- An
- "[attribute](@)"
- consists of
- "of spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "one line ending,"
- "an ["
- "[attribute name]"
- ", and an"
- and an optional
- "["
- attribute value
- "specification]."
- An
- "[attribute name]"
- "name](@)"
- consists of an
- of an ASCII
- "an ASCII letter,"
- "`_`, or `:`"
- ", followed by"
- by zero or more
- or more ASCII
- "letters, digits,"
- "`_`, `.`, `:`"
- "`.`, `:`, or `-`"
- "."
- "(Note:  This is"
- This is the XML
- specification
- restricted to
- to ASCII.
- HTML5 is laxer.)
- An
- "[attribute value"
- "specification](@"
- "](@)"
- consists of
- of optional
- "optional spaces,"
- "spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "one line ending,"
- "a `=`"
- "character,"
- ", optional"
- "optional spaces,"
- "spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "one line ending,"
- "and an ["
- "[attribute value"
- "]."
- An
- "[attribute value"
- "value](@)"
- "consists of an ["
- unquoted
- "attribute value]"
- "],\na ["
- single-quoted
- quoted attribute
- "value], or a ["
- double-quoted
- quoted attribute
- "value]."
- An
- "[unquoted"
- "attribute value]"
- "value](@)"
- is a nonempty
- nonempty string
- string of
- of characters
- not
- including spaces
- "spaces, tabs,"
- ", tabs, line"
- ", line endings,"
- "`\"`, `'`, `=`,"
- ", `=`, `<`, `>`"
- "`<`, `>`, or"
- "`>`, or `` ` ``."
- A
- "[single-quoted"
- quoted attribute
- "value](@)"
- "consists of `'`"
- ", zero or more"
- characters not
- not including
- "`'`, and a final"
- "`'`."
- A
- "[double-quoted"
- quoted attribute
- "value](@)"
- "consists of `\"`"
- ", zero or more"
- characters not
- not including
- "`\"`, and a final"
- "`\"`."
- "An [open tag](@)"
- consists of a
- "`<` character, a"
- "[tag name],"
- "],\nzero or more"
- "[attributes]"
- ", optional"
- "optional spaces,"
- "spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "one line ending,"
- "an optional `/`"
- "character, and a"
- "`>` character."
- A
- "[closing tag](@)"
- consists of the
- of the string
- "`</`, a\n["
- ", a\n[tag name]"
- ", optional"
- "optional spaces,"
- "spaces, tabs,"
- ", tabs, and up"
- ", and up to one"
- to one line
- "one line ending,"
- "ending, and the"
- the character
- "`>`."
- An
- "[HTML comment](@"
- "](@) consists of"
- "`<!-->`,"
- ", `<!--->`, or"
- ", or  `<!--`"
- ", a string of"
- characters not
- not including
- "the string `-->`"
- "`-->`, and `-->`"
- "`-->` (see the"
- "[HTML spec]("
- "spec](https://"
- html.spec.whatwg
- c.whatwg.org/
- /multipage/
- "/parsing.html#"
- "#markup-"
- "-declaration-"
- "-open-state))."
- A
- "[processing"
- "instruction](@)"
- consists of the
- of the string
- "`<?`, a string"
- of characters
- not including
- "the string `?>`"
- ", and the string"
- "`?>`."
- A
- "[declaration](@)"
- consists of the
- of the string
- "`<!`"
- ", an ASCII"
- "an ASCII letter,"
- "letter, zero or"
- zero or more
- characters not
- not including
- the character
- "`>`"
- ", and the"
- the character
- "`>`."
- A
- "[CDATA section]("
- "](@) consists of"
- the string
- "`<![CDATA[`"
- ", a string of"
- of characters
- not including
- the string
- "`]]>`"
- ", and the string"
- "`]]>`."
- "An [HTML tag](@)"
- "consists of an ["
- "[open tag], a ["
- ", a [closing tag"
- "],\nan ["
- "an [HTML comment"
- "], a ["
- processing
- "instruction], a"
- "], a ["
- ", a [declaration"
- "],\nor a ["
- "[CDATA section]."
- Here are some
- are some simple
- simple open tags
- "tags:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a><bab><c2c>\n."
- "<p><a><bab><c2c>"
- "><c2c></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Empty elements:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a/><b2/>\n."
- "<p><a/><b2/></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Whitespace is
- "is allowed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a  /><b2"
- "data=\"foo\" >\n."
- ".\n<p><a  /><b2"
- "data=\"foo\" ></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "With attributes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a foo=\"bar\" bam"
- "bar\" bam = 'baz"
- "= 'baz <em>\"</em"
- "em>\"</em>'"
- "_boolean zoop:33"
- "zoop:33=zoop:33"
- "=zoop:33 />\n."
- "<p><a foo=\"bar\""
- "=\"bar\" bam = '"
- "bam = 'baz <em>\""
- "<em>\"</em>'"
- "_boolean zoop:33"
- "zoop:33=zoop:33"
- "=zoop:33 /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Custom tag names
- names can be
- "can be used:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- Foo <responsive-
- "-image src=\""
- "src=\"foo.jpg\" />"
- "."
- "<p>Foo <"
- ">Foo <responsive"
- "-image src=\""
- "src=\"foo.jpg\" />"
- "\" /></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Illegal tag
- "tag names, not"
- ", not parsed as"
- "as HTML:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<33> <__>\n."
- "<p>&lt;33&gt; &"
- 33&gt; &lt;__&gt
- lt;__&gt;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Illegal
- "attribute names:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a h*#ref=\"hi\">"
- "."
- "<p>&lt;a h*#ref="
- "h*#ref=&quot;hi&"
- quot;hi&quot;&gt
- quot;&gt;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Illegal
- attribute values
- "values:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"hi'> <a"
- "\"hi'> <a href=hi"
- " href=hi'>\n."
- "<p>&lt;a href=&"
- "a href=&quot;hi'"
- "quot;hi'&gt; &lt"
- "&gt; &lt;a href="
- ";a href=hi'&gt;<"
- "hi'&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Illegal
- "whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "< a><"
- foo><bar/ >
- "<foo bar=baz"
- "bim!bop />\n."
- "<p>&lt; a&gt;&lt"
- a&gt;&lt;
- foo&gt;&lt;bar/
- "&lt;bar/ &gt;"
- "&lt;foo bar=baz"
- bim!
- bop /&gt;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Missing
- "whitespace:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href='"
- "href='bar'title="
- "=title>\n."
- "<p>&lt;a href='"
- "href='bar'title="
- "=title&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Closing tags:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "</a></foo >\n."
- "<p></a></foo ></"
- /foo ></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Illegal
- attributes in
- "in closing tag:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "</a href=\"foo\">"
- "."
- "<p>&lt;/a href=&"
- a href=&quot;foo
- quot;foo&quot;&
- "&quot;&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Comments:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo <!-- this is
- this is a --
- comment - with
- "- with hyphens -"
- " -->\n."
- "<p>foo <!-- this"
- "!-- this is a --"
- comment - with
- "- with hyphens -"
- "--></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo <!--> foo --
- "> foo -->"
- foo <!---> foo -
- "-> foo -->\n."
- "<p>foo <!--> foo"
- "!--> foo --&gt;<"
- "--&gt;</p>"
- "<p>foo <!--->"
- "<!---> foo --&gt"
- "--&gt;</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Processing
- "instructions:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo <?
- php echo $a; ?>
- ">\n.\n<p>foo <?"
- php echo $a; ?
- "></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "Declarations:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- foo <!
- ELEMENT br EMPTY
- "br EMPTY>\n."
- ".\n<p>foo <!"
- ELEMENT br EMPTY
- br EMPTY></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "CDATA sections:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo <!["
- "CDATA[>&<]]>\n."
- ".\n<p>foo <!["
- "CDATA[>&<]]></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Entity and
- and numeric
- character
- references are
- are preserved in
- in HTML
- "attributes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo <a href=\"&"
- "href=\"&ouml;\">"
- "."
- "<p>foo <a href=\""
- "a href=\"&ouml;\">"
- "&ouml;\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Backslash
- escapes do not
- do not work in
- work in HTML
- "HTML attributes:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo <a href=\"\\*\""
- "=\"\\*\">\n."
- "<p>foo <a href=\""
- "a href=\"\\*\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"\\\"\">\n."
- "<p>&lt;a href=&"
- a href=&quot;&
- "=&quot;&quot;&"
- ;&quot;&quot;&gt
- quot;&gt;</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Hard line breaks
- A line ending (
- ending (not in a
- not in a code
- a code span or
- span or HTML tag
- HTML tag) that
- ) that is
- that is preceded
- by two or more
- or more spaces
- spaces and does
- and does not
- does not occur
- occur at the end
- the end of a
- end of a block
- is parsed as a
- "[hard line break"
- "break](@)"
- (rendered
- in HTML as a
- "`<br />` tag):"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo  \nbaz\n."
- ".\n<p>foo<br />"
- baz</p>
- "````````````````"
- "````````````````"
- "````````````````"
- For a more
- a more visible
- "alternative, a"
- ", a backslash"
- " before the\n["
- "[line ending]"
- may be used
- be used instead
- instead of two
- of two or more
- "or more spaces:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\\\nbaz\n."
- ".\n<p>foo<br />"
- baz</p>
- "````````````````"
- "````````````````"
- "````````````````"
- More than two
- than two spaces
- spaces can be
- "can be used:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo       \nbaz\n."
- ".\n<p>foo<br />"
- baz</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Leading spaces
- spaces at the
- at the beginning
- of the next line
- line are ignored
- "ignored:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo  \n     bar\n."
- ".\n<p>foo<br />"
- bar</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\\\n     bar\n."
- ".\n<p>foo<br />"
- bar</p>
- "````````````````"
- "````````````````"
- "````````````````"
- Hard line breaks
- breaks can occur
- occur inside
- "inside emphasis,"
- ", links, and"
- ", and other"
- other constructs
- that allow
- allow inline
- "inline content:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo  \nbar*\n."
- "<p><em>foo<br />"
- bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "*foo\\\nbar*\n."
- "<p><em>foo<br />"
- bar</em></p>
- "````````````````"
- "````````````````"
- "````````````````"
- Hard line breaks
- breaks do not
- do not occur
- occur inside
- inside code
- code spans
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`code  \nspan`\n."
- "<p><code>code"
- ">code   span</"
- span</code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "`code\\\nspan`\n."
- "<p><code>code\\"
- ">code\\ span</"
- "\\ span</code></p"
- code></p>
- "````````````````"
- "````````````````"
- "````````````````"
- "or HTML tags:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"foo"
- "bar\">\n."
- "<p><a href=\"foo"
- "bar\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "<a href=\"foo\\"
- "bar\">\n."
- "<p><a href=\"foo\\"
- "bar\"></p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Hard line breaks
- breaks are for
- for separating
- inline content
- content within a
- within a block.
- Neither syntax
- syntax for hard
- for hard line
- line breaks
- breaks works at
- works at the end
- the end of a
- of a paragraph
- or
- other block
- "block element:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\\\n."
- ".\n<p>foo\\</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo  \n."
- ".\n<p>foo</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "### foo\\\n."
- ".\n<h3>foo\\</h3>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "### foo  \n."
- ".\n<h3>foo</h3>"
- "````````````````"
- "````````````````"
- "````````````````"
- "##"
- Soft line breaks
- A regular line
- line ending (not
- (not in a code
- a code span or
- span or HTML tag
- HTML tag) that
- ) that is not
- preceded by two
- by two or more
- or more spaces
- spaces or a
- or a backslash
- is parsed as a
- "[softbreak](@)"
- "."
- (A soft line
- line break may
- may be rendered
- rendered in HTML
- in HTML either
- " either as a\n["
- "[line ending]"
- or as a space.
- The result will
- will be the same
- the same in
- browsers.
- In the examples
- "examples here, a"
- "[line ending]"
- "] will be used.)"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo\nbaz\n.\n<p>foo"
- ".\n<p>foo\nbaz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Spaces at the
- at the end of
- end of the line
- the line and
- and beginning of
- of the next line
- line are
- "removed:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "foo \n baz\n."
- " baz\n.\n<p>foo"
- ".\n<p>foo\nbaz</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- A conforming
- parser may
- may render a
- render a soft
- a soft line
- line break in
- break in HTML
- in HTML either
- either as a
- line ending or
- or as a space.
- A renderer may
- may also provide
- provide an
- an option to
- to render soft
- soft line breaks
- as hard line
- line breaks.
- "##"
- Textual content
- Any characters
- not given an
- interpretation
- by the above
- above rules will
- be parsed as
- as plain textual
- textual content.
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "hello $.;'there"
- "."
- "<p>hello $.;'"
- "$.;'there</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- "Foo χρῆν\n."
- "<p>Foo χρῆν</p>"
- "````````````````"
- "````````````````"
- "````````````````"
- Internal spaces
- spaces are
- are preserved
- "verbatim:"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- Multiple
- "     spaces\n."
- "<p>Multiple"
- spaces</p>
- "````````````````"
- "````````````````"
- "````````````````"
- "<!-- END TESTS -"
- TESTS -->
- "#"
- "Appendix: A"
- ": A parsing"
- parsing strategy
- In this appendix
- appendix we
- we describe some
- some features of
- of the parsing
- parsing strategy
- used in the
- the CommonMark
- reference
- implementations.
- "## Overview"
- Parsing has two
- "has two phases:"
- "1."
- In the first
- "first phase,"
- "phase, lines of"
- lines of input
- of input are
- are consumed and
- and the block
- structure of the
- of the document
- "---"
- its division
- division into
- "into paragraphs,"
- ", block quotes,"
- "list items, and"
- ", and so on---"
- is constructed.
- Text is assigned
- assigned to
- to these
- blocks but not
- but not parsed.
- Link reference
- definitions are
- are parsed and a
- map of links is
- is constructed.
- "2."
- In the second
- "second phase,"
- "phase, the raw"
- the raw text
- text contents of
- of paragraphs
- and headings
- are parsed into
- into sequences
- of Markdown
- Markdown inline
- inline elements
- elements (
- "(strings,"
- "code spans,"
- "spans, links,"
- "links, emphasis,"
- ", and so on),"
- "so on), using"
- "), using the map"
- the map of link
- references
- constructed in
- in phase 1.
- At each point in
- "in processing,"
- ", the document"
- document is
- is represented
- as a tree of
- "**blocks**"
- "."
- The root of the
- of the tree is a
- "`document`"
- block.  The
- "`document`"
- may have any
- have any number
- number of other
- of other blocks
- blocks as
- "**children**"
- "."
- These children
- "may, in turn,"
- "in turn, have"
- ", have other"
- other blocks as
- as children.
- The last child
- child of a block
- is normally
- considered
- "**open**"
- ", meaning that"
- that subsequent
- lines of input
- can alter its
- its contents.
- (Blocks that are
- that are not
- are not open are
- "**closed**.)"
- "Here, for"
- ", for example,"
- "example, is a"
- ", is a possible"
- "document tree,"
- "tree, with the"
- with the open
- the open blocks
- marked by arrows
- "arrows:"
- "``` tree"
- "-> document"
- "-> block_quote"
- paragraph
- "\"Lorem ipsum"
- "ipsum dolor\\nsit"
- "\\nsit amet.\""
- "-> list (type="
- (type=bullet
- "=bullet tight="
- tight=true
- true bullet_char
- "=-)"
- list_item
- paragraph
- "\"Qui *quodsi"
- quodsi iracundia
- "*\""
- "-> list_item"
- "-> paragraph"
- "\"aliquando id\""
- "```"
- "##"
- "Phase 1: block"
- block structure
- Each line that
- that is
- is processed has
- has an effect on
- on this tree.
- The line is
- "analyzed and,"
- "and, depending"
- "on its contents,"
- ", the document"
- document may be
- may be altered
- in one or more
- or more of the
- of the following
- "ways:"
- "1."
- One or more open
- open blocks may
- may be closed.
- "2."
- One or more new
- more new blocks
- blocks may be
- may be created
- created as
- as children of
- of the
- last open block.
- "3."
- Text may be
- may be added to
- added to the
- to the last (
- last (deepest)
- deepest) open
- ) open block
- block remaining
- on the tree.
- Once a line has
- line has been
- incorporated
- into the tree in
- tree in this way
- "this way,"
- it can be
- can be discarded
- ", so input can"
- can be read in a
- in a stream.
- "For each line,"
- "line, we follow"
- follow this
- "this procedure:"
- "1."
- First we iterate
- iterate through
- through the open
- "the open blocks,"
- "blocks, starting"
- starting with
- with the
- "root document,"
- ", and descending"
- through last
- last children
- children down to
- down to the last
- open block.
- Each block
- block imposes a
- a condition that
- that the line
- the line must
- must satisfy
- if the block is
- block is to
- is to remain
- remain open.
- "For example, a"
- ", a block quote"
- quote requires a
- "`>`"
- character.
- A paragraph
- requires a non-
- a non-blank line
- line.
- In this phase we
- phase we may
- we may match all
- all or just some
- some of the open
- blocks.
- But we cannot
- cannot close
- close unmatched
- "blocks yet,"
- "yet, because we"
- " we may have a\n["
- lazy
- continuation
- "line]."
- "2."
- "Next, after"
- after consuming
- the continuation
- markers for
- for existing
- "blocks, we look"
- we look for new
- for new block
- block starts (
- "starts (e.g. `>`"
- for a block
- a block quote).
- If we encounter
- a new block
- "block start, we"
- ", we close any"
- any blocks
- blocks unmatched
- in step 1 before
- before creating
- creating the new
- the new block as
- block as a child
- a child of the
- of the last
- matched
- container block.
- "3."
- "Finally, we look"
- we look at the
- at the remainder
- of the line (
- line (after
- (after block
- "markers like `>`"
- ", list markers,"
- "markers, and"
- and indentation
- have been
- been consumed).
- This is text
- is text that can
- that can be
- be incorporated
- into the last
- the last open
- block (a
- "(a paragraph,"
- ", code block,"
- "block, heading,"
- "heading, or raw"
- ", or raw HTML)."
- Setext headings
- headings are
- are formed when
- when we see a
- we see a line of
- line of a
- of a paragraph
- "that is a ["
- setext heading
- "underline]."
- Reference link
- link definitions
- are detected
- detected when a
- when a paragraph
- is closed;
- the accumulated
- text lines are
- are parsed to
- to see if they
- if they begin
- begin with
- one or more
- more reference
- link definitions
- "."
- Any remainder
- becomes a
- normal paragraph
- "."
- We can see how
- see how this
- how this works
- works by
- by considering
- how the tree
- the tree above
- above is
- generated by
- by four lines of
- "of Markdown:"
- "``` markdown"
- "> Lorem ipsum"
- ipsum dolor
- sit amet.
- "> - Qui *quodsi"
- quodsi iracundia
- "*"
- "> - aliquando id"
- "```"
- "At the outset,"
- "outset, our"
- ", our document"
- document model
- model is just
- "``` tree"
- "-> document\n```"
- The first line
- line of our text
- "our text,"
- "``` markdown"
- "> Lorem ipsum"
- " ipsum dolor\n```"
- causes a
- "`block_quote`"
- block to be
- to be created as
- as a child of
- child of our
- "open `document`"
- "block, and a"
- "`paragraph`"
- block as a child
- " a child of\nthe"
- "`block_quote`"
- "."
- Then the text is
- text is added to
- added to the
- to the last open
- "block, the"
- "`paragraph`:"
- "``` tree"
- "-> document"
- "-> block_quote"
- "-> paragraph"
- "\"Lorem ipsum"
- "ipsum dolor\""
- "```"
- "The next line,"
- "``` markdown"
- "sit amet.\n```"
- "is a \""
- lazy
- "continuation\""
- "\" of the open"
- "`paragraph`"
- ", so it gets"
- it gets added
- to the paragraph
- "'s text:"
- "``` tree"
- "-> document"
- "-> block_quote"
- "-> paragraph"
- "\"Lorem ipsum"
- "ipsum dolor\\nsit"
- "\\nsit amet.\"\n```"
- "The third line,"
- "``` markdown"
- "> - Qui *quodsi"
- quodsi iracundia
- "*\n```"
- causes the
- "`paragraph`"
- block to be
- "to be closed,"
- "closed, and a"
- ", and a new"
- "`list` block"
- opened as a
- as a child of
- child of the
- "`block_quote`"
- ".  A `list_item`"
- is also
- added as a child
- a child of the
- "`list`, and a"
- "`paragraph`"
- as a child of
- "the `list_item`"
- "."
- The text is then
- is then added to
- added to the new
- "`paragraph`:"
- "``` tree"
- "-> document"
- "-> block_quote"
- paragraph
- "\"Lorem ipsum"
- "ipsum dolor\\nsit"
- "\\nsit amet.\""
- "-> list (type="
- (type=bullet
- "=bullet tight="
- tight=true
- true bullet_char
- "=-)"
- "-> list_item"
- "-> paragraph"
- "\"Qui *quodsi"
- quodsi iracundia
- "*\"\n```"
- "The fourth line,"
- "``` markdown"
- "> - aliquando id"
- "```"
- causes the
- "`list_item`"
- (and its child
- child the
- "`paragraph`"
- ") to be closed,"
- and a new
- "`list_item`"
- opened up as
- up as child of
- child of the
- "`list`.  A"
- ".  A `paragraph`"
- is added as a
- as a child of
- child of the new
- "`list_item`"
- ", to contain the"
- the text.
- We thus obtain
- obtain the final
- "final tree:"
- "``` tree"
- "-> document"
- "-> block_quote"
- paragraph
- "\"Lorem ipsum"
- "ipsum dolor\\nsit"
- "\\nsit amet.\""
- "-> list (type="
- (type=bullet
- "=bullet tight="
- tight=true
- true bullet_char
- "=-)"
- list_item
- paragraph
- "\"Qui *quodsi"
- quodsi iracundia
- "*\""
- "-> list_item"
- "-> paragraph"
- "\"aliquando id\""
- "```"
- "##"
- "Phase 2: inline"
- inline structure
- Once all of the
- of the input has
- "has been parsed,"
- "parsed, all open"
- all open blocks
- blocks are
- are closed.
- "We then \""
- "\"walk the tree,\""
- visiting every
- "every node, and"
- ", and parse raw"
- string contents
- contents of
- of paragraphs
- and headings as
- as inlines.
- At this
- point we have
- we have seen all
- seen all the
- all the link
- link reference
- "definitions, so"
- ", so we can"
- resolve
- reference links
- links as we go.
- "``` tree"
- document
- block_quote
- paragraph
- "str \"Lorem ipsum"
- "ipsum dolor\""
- softbreak
- "str \"sit amet.\""
- list (type=
- (type=bullet
- "=bullet tight="
- tight=true
- true bullet_char
- "=-)"
- list_item
- paragraph
- "str \"Qui \""
- emph
- "str \"quodsi"
- quodsi iracundia
- "\""
- list_item
- paragraph
- "str \"aliquando"
- " id\"\n```"
- "Notice how the ["
- "[line ending]"
- in the first
- first paragraph
- has
- been parsed as a
- "`softbreak`"
- ", and the"
- the asterisks in
- in the first
- first list item
- have become an
- "`emph`."
- "###"
- An algorithm for
- for parsing
- parsing nested
- nested emphasis
- emphasis and
- and links
- By far the
- the trickiest
- part of inline
- inline parsing
- parsing is
- is handling
- "emphasis,"
- "strong emphasis,"
- ", links, and"
- ", and images."
- This is done
- is done using
- using the
- the following
- algorithm.
- "When we'"
- re parsing
- parsing inlines
- inlines and we
- and we hit
- we hit either
- "- a run of `*`"
- "of `*` or `_`"
- "characters, or"
- "- a `[` or `![`"
- we insert a text
- a text node with
- with these
- these symbols as
- as its literal
- "literal content,"
- "content, and we"
- add a pointer to
- to this text
- text node to the
- "[delimiter stack"
- "stack](@)."
- "The ["
- "[delimiter stack"
- "]"
- is a doubly
- a doubly linked
- linked list.
- Each
- element contains
- contains a
- a pointer to a
- "to a text node,"
- "node, plus"
- plus information
- about
- "- the type of"
- of delimiter (
- "`[`, `![`, `*`,"
- ", `*`, `_`)"
- "-"
- the number of
- "of delimiters,"
- "-"
- whether the
- the delimiter is
- "\"active\""
- (all are active
- active to start)
- "start), and"
- "-"
- whether the
- the delimiter is
- is a potential
- "opener, a"
- ", a potential"
- "closer,"
- or both (which
- (which depends
- depends on what
- on what sort of
- of characters
- precede
- and follow the
- the delimiters).
- When we hit a
- "`]`"
- "character, we"
- ", we call the"
- "*look for link"
- for link or
- link or image*
- procedure (see
- (see below).
- When we hit the
- hit the end of
- end of the input
- "input, we call"
- we call the
- "*process"
- process emphasis
- "*"
- procedure (see
- "(see below),"
- "below), with"
- "`stack_bottom`"
- "= NULL."
- "####"
- "*look for link"
- for link or
- link or image*
- Starting at the
- at the top of
- top of the
- of the delimiter
- "stack, we look"
- look backwards
- through the
- the stack for an
- for an opening
- "`[` or `![`"
- "`![` delimiter."
- "- If we don't"
- "t find one, we"
- "one, we return a"
- return a literal
- literal text
- "text node `]`."
- "-"
- If we do find
- "do find one, but"
- "one, but it'"
- "'s not *active*"
- ", we remove the"
- the inactive
- delimiter from
- "from the stack,"
- "stack, and"
- ", and return a"
- return a literal
- literal text
- "text node `]`."
- "-"
- If we find one
- "find one and it'"
- "s active, then"
- ", then we parse"
- we parse ahead
- ahead to see if
- we have an
- have an inline
- inline link/
- "link/image,"
- "image, reference"
- "link/image,"
- "image, collapsed"
- reference
- "link/image, or"
- ", or shortcut"
- reference link/
- link/image.
- "+ If we don'"
- "t, then we"
- then we remove
- remove the
- the opening
- delimiter from
- from the
- delimiter stack
- stack and return
- return a literal
- literal text
- "text node `]`."
- "+ If we do, then"
- "*"
- We return a link
- a link or image
- or image node
- node whose
- whose children
- children are the
- are the inlines
- after the text
- the text node
- node pointed to
- to by the
- by the opening
- delimiter.
- "* We run"
- "*process"
- process emphasis
- "*"
- on these inlines
- "inlines, with"
- ", with the `[`"
- "`[` opener"
- " opener\n      as"
- "`stack_bottom`."
- "* We remove the"
- the opening
- delimiter.
- "*"
- If we have a
- have a link (and
- (and not an
- "not an image),"
- "image), we also"
- we also set all
- "`[`"
- delimiters
- before the
- the opening
- delimiter to
- "*inactive*"
- ".  (This"
- will prevent us
- us from getting
- getting links
- links within
- within links.)
- "####"
- "*process"
- process emphasis
- "*"
- Parameter
- "`stack_bottom`"
- sets a lower
- a lower bound to
- bound to how far
- how far we
- "descend in the ["
- "[delimiter stack"
- "]"
- "."
- "If it is NULL,"
- "is NULL, we can"
- go all the way
- the way to the
- to the bottom.
- "Otherwise, we"
- ", we stop before"
- visiting
- "`stack_bottom`."
- Let
- "`"
- current_position
- "`"
- point to the
- to the element
- "element on the ["
- "[delimiter stack"
- "]\njust above"
- "`stack_bottom`"
- (or the first
- first element if
- "`stack_bottom`"
- is NULL).
- We keep track of
- track of the
- "`openers_bottom`"
- for each
- each delimiter
- "type (`*`, `_`"
- "), indexed to"
- to the length of
- of the closing
- delimiter run
- (modulo 3) and
- 3) and to
- ) and to whether
- whether the
- the closing
- delimiter can
- can also be an
- opener.
- Initialize this
- this to
- "`stack_bottom`."
- Then we repeat
- repeat the
- the following
- until we run out
- run out of
- out of potential
- "closers:"
- "- Move"
- "`"
- current_position
- "`"
- forward in the
- in the delimiter
- stack (if needed
- needed)
- until we find
- we find the
- find the first
- first potential
- closer with
- with delimiter
- "`*` or `_`."
- (This will be
- will be the
- be the potential
- closer closest
- to the beginning
- of the input --
- the first one in
- one in parse
- in parse order.)
- "-"
- "Now, look back"
- back in the
- in the stack (
- stack (staying
- (staying above
- "`stack_bottom`"
- " and\n  the"
- "`openers_bottom`"
- for this
- this delimiter
- type) for the
- first matching
- potential opener
- "opener (\""
- "\"matching\""
- means same
- same delimiter).
- "-"
- "If one is found:"
- +
- Figure out
- out whether we
- we have emphasis
- emphasis or
- or strong
- "strong emphasis:"
- if both closer
- closer and
- and opener spans
- spans have
- have length >= 2
- ">= 2, we have"
- "strong,"
- ", otherwise"
- regular.
- +
- Insert an emph
- an emph or
- emph or strong
- strong emph node
- node accordingly
- ", after"
- the text node
- corresponding to
- to the opener.
- +
- Remove any
- any delimiters
- between the
- the opener and
- and closer from
- the delimiter
- stack.
- +
- Remove 1 (for
- 1 (for regular
- regular emph) or
- emph) or 2 (for
- 2 (for strong
- strong emph)
- emph) delimiters
- from the opening
- opening and
- and closing text
- text nodes.
- If they become
- become empty
- "as a result,"
- "result, remove"
- ", remove them"
- them and remove
- remove the
- corresponding
- element
- of the delimiter
- stack.
- If the closing
- closing node is
- "node is removed,"
- "removed, reset"
- "`"
- current_position
- "`"
- to the next
- the next element
- element in the
- in the stack.
- "-"
- If none is found
- "is found:"
- + Set
- "`openers_bottom`"
- to the element
- element before
- "`"
- current_position
- "`."
- (We know that
- that there are
- are no openers
- openers for this
- for this kind of
- kind of closer
- closer up to and
- including this
- "this point, so"
- ", so this puts a"
- puts a lower
- a lower bound on
- bound on future
- future searches.
- ".)"
- +
- If the closer at
- "`"
- current_position
- "`"
- is not a
- not a potential
- "opener,"
- remove it from
- it from the
- the delimiter
- stack (since we
- since we know it
- "know it can't"
- be a closer
- a closer either)
- either).
- "+ Advance `"
- current_position
- "`"
- to the next
- the next element
- element in the
- in the stack.
- "After we'"
- "re done, we"
- "done, we remove"
- remove all
- all delimiters
- above
- "`stack_bottom`"
- from the
- delimiter stack.
