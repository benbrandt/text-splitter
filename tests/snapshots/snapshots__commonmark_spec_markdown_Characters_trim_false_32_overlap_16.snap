---
source: tests/snapshots.rs
expression: chunks
---
- "---\n"
- "title: CommonMark Spec\n"
- "author: John MacFarlane\n"
- "version: '0.31.2'\n"
- "date: '2024-01-28'\n"
- "license: '[CC-BY-SA 4.0](https:/"
- "-SA 4.0](https://"
- "4.0](https://creativecommons.org"
- "/licenses/by-sa/4.0/)'\n...\n\n"
- "# Introduction\n\n"
- "## What is Markdown?\n\n"
- "Markdown is a plain text format "
- " text format for writing "
- " for writing structured "
- " structured documents,\n"
- "based on conventions for "
- "conventions for indicating "
- " for indicating formatting in "
- " formatting in email\n"
- "and usenet posts.  "
- "It was developed by John Gruber "
- " by John Gruber (with\n"
- "help from Aaron Swartz) and "
- " Swartz) and released in 2004 in"
- " in 2004 in the form of a\n"
- "[syntax description](https://"
- "](https://daringfireball.net/"
- "/projects/markdown/syntax)\n"
- "and a Perl script (`Markdown.pl`"
- ") for converting Markdown to\n"
- "HTML.  "
- "In the next decade, dozens of "
- ", dozens of implementations were"
- "\n"
- "developed in many languages.  "
- "Some extended the original\n"
- Markdown syntax with conventions
- "with conventions for footnotes, "
- " for footnotes, tables, and\n"
- "other document elements.  "
- "Some allowed Markdown documents "
- " documents to be\n"
- "rendered in formats other than "
- " other than HTML.  "
- "Websites like Reddit,\n"
- "StackOverflow, and GitHub had "
- " and GitHub had millions of "
- "had millions of people using "
- "of people using Markdown.\n"
- "And Markdown started to be used "
- " to be used beyond the web, to "
- " the web, to author books,\n"
- "articles, slide shows, letters, "
- "shows, letters, and lecture "
- ", and lecture notes.\n\n"
- What distinguishes Markdown from
- " Markdown from many other "
- "from many other lightweight "
- " lightweight markup\n"
- "syntaxes, which are often easier"
- "are often easier to write, is "
- " to write, is its readability.\n"
- "As Gruber writes:\n\n"
- "> "
- "The overriding design goal for "
- "design goal for Markdown'"
- "'s formatting syntax is\n> "
- "to make it as readable as "
- " as readable as possible. "
- "The idea is that a\n> "
- "Markdown-formatted document "
- " document should be publishable "
- " be publishable as-is, as\n> "
- "plain text, without looking like"
- " looking like it'"
- "'s been marked up with tags\n> "
- "\n> or formatting instructions."
- "\n> ("
- "<https://daringfireball.net/"
- "/projects/markdown/>)\n\n"
- "The point can be illustrated by "
- " illustrated by comparing a "
- " by comparing a sample of\n"
- "[AsciiDoc](https://asciidoc.org/"
- "://asciidoc.org/) with\n"
- an equivalent sample of Markdown
- " of Markdown.  "
- "Here is a sample of\n"
- "AsciiDoc from the AsciiDoc "
- " the AsciiDoc manual:\n\n"
- "```\n"
- "1. List item one.\n+\n"
- "List item one continued with a "
- " with a second paragraph "
- " paragraph followed by an\n"
- "Indented block.\n+\n"
- "+\n.................\n$ ls *.sh\n"
- "$ ls *.sh\n$ mv *.sh ~/tmp\n"
- ".................\n+\n"
- List item continued with a third
- " with a third paragraph.\n\n2. "
- "List item two continued with an "
- " with an open block.\n+\n--\n"
- "This paragraph is part of the "
- " is part of the preceding list "
- " preceding list item.\n\na. "
- This list is nested and does not
- " and does not require explicit "
- " explicit item\ncontinuation.\n+\n"
- "This paragraph is part of the "
- " is part of the preceding list "
- " preceding list item.\n\nb. "
- "\nb. List item b.\n\n"
- "This paragraph belongs to item "
- belongs to item two of the outer
- "two of the outer list.\n--\n```\n\n"
- "And here is the equivalent in "
- " equivalent in Markdown:\n"
- "```\n"
- "1.  List item one.\n\n"
- "    List item one continued with"
- " continued with a second "
- " with a second paragraph "
- " paragraph followed by an\n"
- "    Indented block.\n\n"
- "\n        $ ls *.sh\n"
- "        $ mv *.sh ~/tmp\n\n"
- "    List item continued with a "
- " with a third paragraph.\n\n2.  "
- "List item two continued with an "
- " with an open block.\n\n"
- "    This paragraph is part of "
- " is part of the preceding list "
- " preceding list item.\n\n    1. "
- This list is nested and does not
- " and does not require explicit "
- " explicit item continuation.\n\n"
- "       This paragraph is part of"
- " is part of the preceding list "
- " preceding list item.\n\n    2. "
- "\n    2. List item b.\n\n"
- "    This paragraph belongs to "
- " belongs to item two of the "
- "item two of the outer list.\n```\n"
- "```\n\n"
- "The AsciiDoc version is, "
- " version is, arguably, easier to"
- ", easier to write. You don'"
- "'t need\n"
- "to worry about indentation.  "
- But the Markdown version is much
- " version is much easier\n"
- "to read.  "
- "The nesting of list items is "
- " list items is apparent to the "
- "apparent to the eye in the\n"
- "source, not just in the "
- "not just in the processed "
- " the processed document.\n\n"
- "## Why is a spec needed?\n\n"
- "John Gruber's "
- "["
- "canonical description of "
- " description of Markdown's\n"
- "'s\nsyntax"
- "](https://daringfireball.net/"
- "/projects/markdown/syntax)\n"
- "does not specify the syntax "
- " the syntax unambiguously.  "
- "Here are some examples of\n"
- "questions it does not answer:\n\n"
- "1.  "
- "How much indentation is needed "
- " is needed for a sublist?  "
- "The spec says that\n    "
- "continuation paragraphs need to "
- " need to be indented four spaces"
- " four spaces, but is\n    "
- "not fully explicit about "
- " explicit about sublists.  "
- "It is natural to think that\n    "
- "they, too, must be indented four"
- "be indented four spaces, but "
- "`Markdown.pl` does\n    "
- "not require that.  "
- "This is hardly a \"corner case,\""
- "\"corner case,\" and divergences"
- " and divergences\n    "
- "between implementations on this "
- " on this issue often lead to "
- " often lead to surprises for\n"
- "\n    "
- "users in real documents. (See "
- "[this comment by John\n    Gruber"
- "](https://web.archive.org/web/"
- "/web/20170611172104/http://"
- "/http://article.gmane.org/"
- /gmane.text.markdown.general/
- "/1997).)\n\n"
- "2.  "
- "Is a blank line needed before a "
- "needed before a block quote or "
- " block quote or heading?\n    "
- "Most implementations do not "
- " do not require the blank line."
- " the blank line.  However,\n    "
- "this can lead to unexpected "
- " to unexpected results in hard-"
- "results in hard-wrapped text, "
- "-wrapped text, and\n    "
- also to ambiguities in parsing (
- " in parsing (note that some "
- "(note that some implementations\n"
- "\n    "
- "put the heading inside the "
- " inside the blockquote, while "
- ", while others do not).\n    "
- "(John Gruber has also spoken "
- "[in favor of requiring the blank"
- "\n    lines"
- "](https://web.archive.org/web/"
- "/web/20170611172104/http://"
- "/http://article.gmane.org/"
- /gmane.text.markdown.general/
- "/2146).)\n\n"
- "3.  "
- Is a blank line needed before an
- "needed before an indented code "
- " indented code block?\n    ("
- "(`Markdown.pl`"
- " requires it, but this is not "
- but this is not mentioned in the
- "\n    "
- "documentation, and some "
- ", and some implementations do "
- " do not require it.)\n\n    "
- "``` markdown\n    paragraph\n    "
- "paragraph\n        code?\n"
- "        code?\n    ```\n\n"
- "4.  "
- "What is the exact rule for "
- " exact rule for determining when"
- "determining when list items get\n"
- "\n    wrapped in `<p>`"
- " tags?  Can a list be partially "
- "\"loose\" and partially\n    \"tight"
- "\n    \"tight\""
- "?  "
- "What should we do with a list "
- " do with a list like this?\n\n    "
- "``` markdown\n    1. one\n\n    "
- "1. one\n\n    2. two\n    3. three\n"
- "    3. three\n    ```\n\n    "
- "Or this?\n"
- "\n    ``` markdown\n    1.  one\n"
- "1.  one\n        - a\n\n    "
- "    - a\n\n        - b\n    "
- "        - b\n    2.  two\n"
- "    2.  two\n    ```\n\n    "
- "(There are some relevant "
- " some relevant comments by John "
- " by John Gruber\n    "
- "[here](https://web.archive.org/"
- web.archive.org/web/
- "/web/20170611172104/http://"
- "/http://article.gmane.org/"
- /gmane.text.markdown.general/
- "/2554).)\n\n"
- "5.  "
- "Can list markers be indented?  "
- "Can ordered list markers be "
- "list markers be right-aligned?\n\n"
- "\n    ``` markdown\n    "
- " 8. item 1\n     9. item 2\n    "
- " 9. item 2\n    10. item 2a\n"
- "    10. item 2a\n    ```\n\n"
- "6.  "
- Is this one list with a thematic
- " with a thematic break in its "
- " break in its second item,\n    "
- "or two lists separated by a "
- " separated by a thematic break?\n"
- "\n    ``` markdown\n    * a\n    "
- "* a\n    * * * * *\n    * b\n"
- "    * b\n    ```\n\n"
- "7.  "
- "When list markers change from "
- " change from numbers to bullets,"
- " to bullets, do we have\n    "
- "two lists or one?  "
- (The Markdown syntax description
- " description suggests two,\n    "
- "but the perl scripts and many "
- " and many other implementations "
- "implementations produce one.)\n\n"
- "\n    ``` markdown\n    1. fee\n"
- "1. fee\n    2. fie\n    -  foe\n"
- "    -  foe\n    -  fum\n    ```\n\n"
- "8.  "
- "What are the precedence rules "
- " rules for the markers of inline"
- " of inline structure?\n    "
- "For example, is the following a "
- "the following a valid link, or "
- " valid link, or does the code "
- " does the code span\n    "
- "take precedence ?\n\n    "
- "``` markdown\n    "
- "[a backtick (`)](/url) and ["
- "(`)](/url) and [another backtick"
- "another backtick (`)](/url).\n"
- "    ```\n\n"
- "9.  "
- "What are the precedence rules "
- " rules for markers of emphasis "
- " of emphasis and strong\n    "
- "emphasis?  "
- "For example, how should the "
- " how should the following be "
- " following be parsed?\n\n    "
- "``` markdown\n    "
- "*foo *bar* baz*\n    ```\n\n"
- "10. "
- "What are the precedence rules "
- " rules between block-level and "
- "block-level and inline-level\n"
- "\n    "
- "structure?  "
- "For example, how should the "
- " how should the following be "
- " following be parsed?\n\n    "
- "``` markdown\n    "
- "- `a long code span can contain "
- " can contain a hyphen like this\n"
- "    "
- "  - and it can screw things up`\n"
- "    ```\n\n"
- "11. "
- "Can list items include section "
- include section headings?  (
- "`Markdown.pl` does not\n    "
- "allow this, but does allow "
- " but does allow blockquotes to "
- " blockquotes to include headings"
- "include headings.)\n\n    "
- "``` markdown\n    - # Heading\n"
- "- # Heading\n    ```\n\n"
- 12. Can list items be empty?
- "\n\n    ``` markdown\n    * a\n    "
- "* a\n    *\n    * b\n    ```\n\n"
- "13. "
- "Can link references be defined "
- " be defined inside block quotes "
- " block quotes or list items?\n\n"
- "\n    ``` markdown\n    "
- "> Blockquote [foo].\n    >\n    "
- "    >\n    > [foo]: /url\n"
- "> [foo]: /url\n    ```\n\n"
- "14. "
- "If there are multiple "
- " are multiple definitions for "
- "definitions for the same "
- " for the same reference, which "
- ", which takes\n    precedence?"
- "precedence?\n\n    "
- "``` markdown\n    [foo]: /url1\n"
- "[foo]: /url1\n    [foo]: /url2\n\n"
- "[foo]: /url2\n\n    [foo][]\n"
- "    [foo][]\n    ```\n\n"
- "In the absence of a spec, early "
- " a spec, early implementers "
- " implementers consulted "
- "`Markdown.pl`\n"
- "to resolve these ambiguities.  "
- "But `Markdown.pl`"
- " was quite buggy, and\n"
- "gave manifestly bad results in "
- " bad results in many cases, so "
- " many cases, so it was not a\n"
- "satisfactory replacement for a "
- " for a spec.\n\n"
- "Because there is no unambiguous "
- " no unambiguous spec, "
- " spec, implementations have "
- " have diverged\n"
- "considerably.  "
- "As a result, users are often "
- "users are often surprised to "
- " surprised to find that\n"
- "a document that renders one way "
- renders one way on one system (
- " on one system (say, a GitHub "
- " (say, a GitHub wiki)\n"
- renders differently on another (
- " on another (say, converting to "
- ", converting to docbook using\n"
- "pandoc).  "
- "To make matters worse, because "
- " worse, because nothing in "
- " nothing in Markdown counts\n"
- "as a \"syntax error,\""
- "\" the divergence often isn'"
- "'t discovered right away.\n\n"
- "## About this document\n\n"
- "This document attempts to "
- " attempts to specify Markdown "
- " Markdown syntax unambiguously.\n"
- "It contains many examples with "
- " examples with side-by-side "
- " side-by-side Markdown and\n"
- "HTML.  "
- "These are intended to double as "
- " to double as conformance tests."
- " tests.  An\naccompanying script "
- "`spec_tests.py`"
- " can be used to run the tests\n"
- "\nagainst any Markdown program:"
- "\n\n    "
- python test/spec_tests.py --spec
- " --spec spec.txt --program "
- " --program PROGRAM\n\n"
- "Since this document describes "
- " describes how Markdown is to be"
- " is to be parsed into\n"
- "an abstract syntax tree, it "
- "syntax tree, it would have made "
- "would have made sense to use an "
- "sense to use an abstract\n"
- "representation of the syntax "
- " of the syntax tree instead of "
- "tree instead of HTML.  "
- "But HTML is capable\n"
- "of representing the structural "
- " the structural distinctions we "
- "distinctions we need to make, "
- " need to make, and the\n"
- "choice of HTML for the tests "
- " for the tests makes it possible"
- " it possible to run the tests "
- " run the tests against\n"
- "an implementation without "
- " without writing an abstract "
- " an abstract syntax tree "
- " syntax tree renderer.\n\n"
- "Note that not every feature of "
- " feature of the HTML samples is "
- "HTML samples is mandated by\n"
- "the spec.  "
- "For example, the spec says what "
- " spec says what counts as a link"
- "\ndestination, but it doesn'"
- "t mandate that non-ASCII "
- " that non-ASCII characters in\n"
- "the URL be percent-encoded.  "
- "To use the automatic tests,\n"
- "implementers will need to "
- " will need to provide a renderer"
- " a renderer that conforms to\n"
- "the expectations of the spec "
- " of the spec examples (percent-"
- " (percent-encoding\n"
- "non-ASCII characters in URLs).  "
- "But a conforming implementation\n"
- can use a different renderer and
- " renderer and may choose not to\n"
- "percent-encode non-ASCII "
- " non-ASCII characters in URLs.\n\n"
- "This document is generated from "
- " generated from a text file, "
- "`spec.txt`, written\n"
- "in Markdown with a small "
- " with a small extension for the "
- " for the side-by-side tests.\n"
- "The script `tools/makespec.py`"
- " can be used to convert "
- "`spec.txt` into\n"
- "HTML or CommonMark (which can "
- " (which can then be converted "
- " be converted into other formats"
- " other formats).\n\n"
- "In the examples, the `→`"
- " character is used to represent "
- " to represent tabs.\n\n"
- "# Preliminaries\n\n"
- "## Characters and lines\n\n"
- "Any sequence of [characters]"
- "] is a valid CommonMark\n"
- "\ndocument.\n\n"
- "A [character](@)"
- " is a Unicode code point.  "
- "Although some\n"
- "code points (for example, "
- " (for example, combining accents"
- " accents) do not correspond to\n"
- characters in an intuitive sense
- " intuitive sense, all code "
- "sense, all code points count as "
- "points count as characters\n"
- "for purposes of this spec.\n\n"
- "This spec does not specify an "
- " not specify an encoding; it "
- "an encoding; it thinks of lines "
- "thinks of lines as composed\nof ["
- "of [characters]"
- " rather than bytes.  "
- "A conforming parser may be "
- " parser may be limited\n"
- "to a certain encoding.\n\n"
- "A [line](@)"
- " is a sequence of zero or more ["
- "[characters]\n"
- "]\nother than line feed (`U+000A`"
- "`U+000A`) or carriage return ("
- "`U+000D`),\nfollowed by a ["
- "\nfollowed by a [line ending]"
- "] or by the end of file.\n\n"
- "A [line ending](@)"
- " is a line feed (`U+000A`"
- "`U+000A`), a carriage return\n("
- "\n(`U+000D`"
- ") not followed by a line feed, "
- "by a line feed, or a carriage "
- ", or a carriage return and a\n"
- "following line feed.\n\n"
- "A line containing no characters,"
- " no characters, or a line "
- ", or a line containing only "
- "containing only spaces\n(`U+0020`"
- "(`U+0020`) or tabs (`U+0009`"
- "`U+0009`), is called a "
- "), is called a [blank line](@)."
- "[blank line](@).\n\n"
- "The following definitions of "
- " definitions of character "
- " of character classes will be "
- "classes will be used in this "
- "be used in this spec:\n\n"
- "A "
- "[Unicode whitespace character](@"
- " character](@)"
- " is a character in the Unicode "
- "`Zs` general\n"
- " general\ncategory, or a tab ("
- "`U+0009`), line feed (`U+000A`"
- "`U+000A`), form feed (`U+000C`"
- "`U+000C`), or\ncarriage return ("
- "`U+000D`).\n\n"
- "[Unicode whitespace](@)"
- " is a sequence of one or more\n["
- "\n[Unicode whitespace characters]"
- "].\n\nA [tab](@) is `U+0009`.\n"
- "\nA [space](@) is `U+0020`.\n"
- "\nAn [ASCII control character](@)"
- " is a character between "
- "`U+0000–1F` (both\nincluding) or "
- "\nincluding) or `U+007F`.\n\n"
- "An "
- "[ASCII punctuation character](@)"
- "\nis `!`, `\"`, `#`, `$`, `%`, `&`"
- ", `$`, `%`, `&`, `'`, `(`, `)`,\n"
- "`'`, `(`, `)`,\n`*`, `+`, `,`, "
- "\n`*`, `+`, `,`, `-`, `.`, `/`"
- ", `-`, `.`, `/` (U+0021–2F), \n"
- " (U+0021–2F), \n`:`, `;`, `<`, "
- "`:`, `;`, `<`, `=`, `>`, `?`, "
- "`=`, `>`, `?`, `@`"
- ", `>`, `?`, `@` (U+003A–0040),\n"
- " (U+003A–0040),\n`[`, `\\`, `]`, "
- "\n`[`, `\\`, `]`, `^`, `_`, "
- "`]`, `^`, `_`, `` ` ``"
- ", `_`, `` ` `` (U+005B–0060), \n"
- " \n`{`, `|`, `}`, or `~`"
- "`|`, `}`, or `~` (U+007B–007E)."
- " (U+007B–007E).\n\n"
- "A "
- "[Unicode punctuation character]("
- " character](@)"
- " is a character in the Unicode "
- "`P`\n(puncuation) or `S`"
- "`S` (symbol) general categories."
- "\n\n"
- "## Tabs\n\n"
- "Tabs in lines are not expanded "
- " not expanded to [spaces]"
- "[spaces].  However,\n"
- in contexts where spaces help to
- " spaces help to define block "
- "to define block structure,\n"
- "tabs behave as if they were "
- "as if they were replaced by "
- " replaced by spaces with a tab "
- " with a tab stop\n"
- "of 4 characters.\n\n"
- "Thus, for example, a tab can be "
- ", a tab can be used instead of "
- "used instead of four spaces\n"
- "in an indented code block.  "
- "(Note, however, that internal\n"
- "tabs are passed through as "
- " through as literal tabs, not "
- " tabs, not expanded to\nspaces.)"
- "spaces.)\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "→foo→baz→→bim\n.\n"
- ".\n<pre><code>foo→baz→→bim\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  →foo→baz→→bim\n.\n"
- ".\n<pre><code>foo→baz→→bim\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    a→a\n    ὐ→a\n.\n"
- "    ὐ→a\n.\n<pre><code>a→a\nὐ→a\n"
- "ὐ→a\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "In the following example, a "
- " example, a continuation "
- " a continuation paragraph of a "
- " paragraph of a list\n"
- "item is indented with a tab; "
- " with a tab; this has exactly "
- " has exactly the same effect\n"
- "as indentation with four spaces "
- " four spaces would:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  - foo\n\n→bar\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<p>bar</p>\n"
- "<p>bar</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n\n→→bar\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<p>foo</p>\n<pre><code>  bar\n"
- "</code></pre>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Normally the `>`"
- " that begins a block quote may "
- "block quote may be followed\n"
- "optionally by a space, which is "
- "space, which is not considered "
- " not considered part of the\n"
- "content.  In the following case "
- "`>` is followed by a tab,\n"
- "which is treated as if it were "
- " as if it were expanded into "
- " expanded into three spaces.\n"
- "Since one of these spaces is "
- "these spaces is considered part "
- "considered part of the\n"
- "delimiter, `foo`"
- " is considered to be indented "
- " to be indented six spaces\n"
- "inside the block quote context, "
- " quote context, so we get an "
- ", so we get an indented\n"
- "code block starting with two "
- " with two spaces.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">→→foo\n.\n<blockquote>\n"
- ".\n<blockquote>\n<pre><code>  foo\n"
- "</code></pre>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-→→foo\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<pre><code>  foo\n"
- "</code></pre>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    foo\n→bar\n.\n<pre><code>foo\n"
- "<pre><code>foo\nbar\n"
- "bar\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " - foo\n   - bar\n→ - baz\n.\n<ul>\n"
- "→ - baz\n.\n<ul>\n<li>foo\n<ul>\n"
- "<li>foo\n<ul>\n<li>bar\n<ul>\n"
- "<li>bar\n<ul>\n<li>baz</li>\n</ul>\n"
- "</ul>\n</li>\n</ul>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "#→Foo\n.\n<h1>Foo</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*→*→*→\n.\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Insecure characters\n\n"
- "For security reasons, the "
- " reasons, the Unicode character "
- "`U+0000` must be replaced\n"
- with the REPLACEMENT CHARACTER (
- "`U+FFFD`).\n\n\n"
- "## Backslash escapes\n\n"
- "Any ASCII punctuation character "
- " character may be backslash-"
- " be backslash-escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\."
- "\\/\\:\\;\\<\\=\\>\\?"
- "\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n.\n<p>!"
- "&quot;#$%&amp;'()*+,-./:;&lt;=&"
- "()*+,-./:;&lt;=&gt;?"
- "@[\\]^_`{|}~</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Backslashes before other "
- " before other characters are "
- " characters are treated as "
- " are treated as literal\n"
- "backslashes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\→\\A\\a\\ \\3\\φ\\«\n.\n"
- ".\n<p>\\→\\A\\a\\ \\3\\φ\\«</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Escaped characters are treated "
- " are treated as regular "
- " as regular characters and do\n"
- "not have their usual Markdown "
- " usual Markdown meanings:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\*not emphasized*\n"
- "\\<br/> not a tag\n"
- "\\[not a link](/foo)\n\\`not code`\n"
- "\\`not code`\n1\\. not a list\n"
- "1\\. not a list\n\\* not a list\n"
- "\\* not a list\n\\# not a heading\n"
- "\\[foo]: /url \"not a reference\"\n"
- "\\&ouml; not a character entity\n"
- ".\n<p>*not emphasized*\n"
- "&lt;br/&gt; not a tag\n"
- "[not a link](/foo)\n`not code`\n"
- "`not code`\n1. not a list\n"
- "1. not a list\n* not a list\n"
- "* not a list\n# not a heading\n"
- "[foo]: /url &quot;not a "
- "url &quot;not a reference&quot;\n"
- "&amp;ouml; not a character "
- "not a character entity</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- If a backslash is itself escaped
- " itself escaped, the following "
- ", the following character is not"
- "character is not:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\\\*emphasis*\n.\n"
- ".\n<p>\\<em>emphasis</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A backslash at the end of the "
- " the end of the line is a ["
- "[hard line break]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\\\nbar\n.\n<p>foo<br />\nbar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Backslash escapes do not work in
- " do not work in code blocks, "
- "in code blocks, code spans, "
- ", code spans, autolinks, or\n"
- "raw HTML:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`` \\[\\` ``\n.\n"
- ".\n<p><code>\\[\\`</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    \\[\\]\n.\n<pre><code>\\[\\]\n"
- "<pre><code>\\[\\]\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~\n\\[\\]\n~~~\n.\n<pre><code>\\[\\]\n"
- "<pre><code>\\[\\]\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<https://example.com?find=\\*>\n.\n"
- "<p><a href=\"https://example.com?"
- "find=%5C*\">https://example.com?"
- "find=\\*</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"/bar\\/)\">\n.\n"
- ".\n<a href=\"/bar\\/)\">\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "But they work in all other "
- " in all other contexts, "
- "other contexts, including URLs "
- " including URLs and link titles,"
- "\nlink references, and ["
- "[info strings] in ["
- "] in [fenced code blocks]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo](/bar\\* \"ti\\*tle\")\n.\n"
- "<p><a href=\"/bar*\" title=\"ti*tle"
- "*\" title=\"ti*tle\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n"
- ".\n"
- "<p><a href=\"/bar*\" title=\"ti*tle"
- "*\" title=\"ti*tle\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``` foo\\+bar\nfoo\n```\n.\n"
- "<pre><code class=\"language-foo+"
- "=\"language-foo+bar\">foo\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## "
- "Entity and numeric character "
- " character references\n\n"
- Valid HTML entity references and
- " references and numeric "
- " and numeric character "
- " character references\n"
- "can be used in place of the "
- "in place of the corresponding "
- " corresponding Unicode character"
- " character,\n"
- "with the following exceptions:\n\n"
- "- "
- "Entity and character references "
- " references are not recognized "
- " not recognized in code\n  "
- "blocks and code spans.\n\n"
- "- "
- "Entity and character references "
- " references cannot stand in "
- "cannot stand in place of\n  "
- "special characters that define "
- " that define structural elements"
- " elements in\n  "
- "CommonMark.  "
- "For example, although `&#42;`"
- "`&#42;` can be used\n  "
- "\n  in place of a literal `*`"
- "`*` character, `&#42;`"
- "`&#42;` cannot replace\n  `*`"
- " in emphasis delimiters, bullet "
- ", bullet list markers, or "
- " markers, or thematic\n  breaks."
- "breaks.\n\n"
- "Conforming CommonMark parsers "
- " parsers need not store "
- " need not store information "
- " information about\n"
- "whether a particular character "
- " character was represented in "
- " represented in the source\n"
- "using a Unicode character or an "
- character or an entity reference
- "entity reference.\n\n"
- "[Entity references](@)"
- " consist of `&`"
- "`&` + any of the valid\n"
- "\nHTML5 entity names + `;`. The\n"
- "`;`. The\ndocument "
- "<https://html.spec.whatwg.org/"
- "/entities.json>\n"
- "is used as an authoritative "
- " authoritative source for the "
- " source for the valid entity\n"
- "references and their "
- " and their corresponding code "
- " code points.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&nbsp; &amp; &copy; &AElig; &"
- "&copy; &AElig; &Dcaron;\n"
- "&frac34; &HilbertSpace; &"
- "&HilbertSpace; &DifferentialD;\n"
- "&ClockwiseContourIntegral; &ngE;"
- "; &ngE;\n.\n<p>  &amp; © Æ Ď\n"
- "¾ ℋ ⅆ\n∲ ≧̸</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Decimal numeric character\n"
- "\nreferences](@)\nconsist of `&#`"
- "consist of `&#` + a string of 1"
- " + a string of 1--"
- "--7 arabic digits + `;`. A\n"
- "numeric character reference is "
- " reference is parsed as the "
- " parsed as the corresponding\n"
- "Unicode character. "
- Invalid Unicode code points will
- "code points will be replaced by\n"
- the REPLACEMENT CHARACTER (
- "`U+FFFD`"
- ").  For security reasons,\n"
- "\nthe code point `U+0000`"
- " will also be replaced by "
- "`U+FFFD`.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&#35; &#1234; &#992; &#0;\n.\n"
- ".\n<p># Ӓ Ϡ �</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Hexadecimal numeric character\n"
- "\nreferences](@) consist of `&#`"
- " consist of `&#` +\neither `X`"
- " +\neither `X` or `x`"
- " + a string of 1-6 hexadecimal "
- "1-6 hexadecimal digits + `;`.\n"
- "They too are parsed as the "
- " parsed as the corresponding "
- " corresponding Unicode character"
- " character (this\n"
- "time specified with a "
- " with a hexadecimal numeral "
- " numeral instead of decimal).\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&#X22; &#XD06; &#xcab;\n.\n"
- ".\n<p>&quot; ആ ಫ</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here are some nonentities:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&nbsp &x; &#; &#x;\n&#87654321;\n"
- "&#87654321;\n&#abcdef0;\n"
- "&ThisIsNotDefined; &hi?;\n.\n"
- "<p>&amp;nbsp &amp;x; &amp;#; &"
- "amp;x; &amp;#; &amp;#x;\n"
- "&amp;#87654321;\n&amp;#abcdef0;\n"
- "&amp;ThisIsNotDefined; &amp;hi?;"
- "; &amp;hi?;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Although HTML5 does accept some "
- " accept some entity references\n"
- without a trailing semicolon (
- " semicolon (such as `&copy`"
- "`&copy`), these are not\n"
- "recognized here, because it "
- ", because it makes the grammar "
- " the grammar too ambiguous:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&copy\n.\n<p>&amp;copy</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Strings that are not on the list
- " not on the list of HTML5 named "
- " of HTML5 named entities are not"
- "\n"
- "recognized as entity references "
- " references either:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&MadeUpEntity;\n.\n"
- ".\n<p>&amp;MadeUpEntity;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character "
- " character references are "
- " references are recognized in "
- " recognized in any\n"
- "context besides code spans or "
- " code spans or code blocks, "
- "or code blocks, including\nURLs, "
- "URLs, [link titles], and ["
- "], and [fenced code block][] ["
- "][] [info strings]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"&ouml;&ouml;.html\">\n.\n"
- ".\n<a href=\"&ouml;&ouml;.html\">\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo](/f&ouml;&ouml; \"f&ouml;&"
- "&ouml; \"f&ouml;&ouml;\")\n.\n"
- "<p><a href=\"/f%C3%B6%C3%B6\" "
- "/f%C3%B6%C3%B6\" title=\"föö\">foo<"
- "title=\"föö\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n\n"
- "[foo]: /f&ouml;&ouml; \"f&ouml;&"
- "&ouml; \"f&ouml;&ouml;\"\n.\n"
- "<p><a href=\"/f%C3%B6%C3%B6\" "
- "/f%C3%B6%C3%B6\" title=\"föö\">foo<"
- "title=\"föö\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``` f&ouml;&ouml;\nfoo\n```\n.\n"
- "<pre><code class=\"language-föö\">"
- "=\"language-föö\">foo\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character "
- " character references are "
- " references are treated as "
- " are treated as literal\n"
- "text in code spans and code "
- " spans and code blocks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`f&ouml;&ouml;`\n.\n"
- "<p><code>f&amp;ouml;&amp;ouml;</"
- ";&amp;ouml;</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    f&ouml;f&ouml;\n.\n"
- "<pre><code>f&amp;ouml;f&amp;ouml"
- ";ouml;f&amp;ouml;\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character "
- " character references cannot be "
- " cannot be used\n"
- "in place of symbols indicating "
- " indicating structure in "
- " structure in CommonMark\n"
- "documents.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&#42;foo&#42;\n*foo*\n.\n<p>*foo*\n"
- ".\n<p>*foo*\n<em>foo</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&#42; foo\n\n* foo\n.\n<p>* foo</p>\n"
- ".\n<p>* foo</p>\n<ul>\n"
- "<ul>\n<li>foo</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo&#10;&#10;bar\n.\n<p>foo\n\n"
- ".\n<p>foo\n\nbar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "&#9;foo\n.\n<p>→foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[a](url &quot;tit&quot;)\n.\n"
- "<p>[a](url &quot;tit&quot;)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "# Blocks and inlines\n\n"
- "We can think of a document as a "
- "a document as a sequence of\n"
- "[blocks](@)---"
- "structural elements like "
- " elements like paragraphs, block"
- "\n"
- "quotations, lists, headings, "
- ", headings, rules, and code "
- "rules, and code blocks.  "
- "Some blocks (like\n"
- "block quotes and list items) "
- "and list items) contain other "
- ) contain other blocks; others (
- "blocks; others (like\n"
- headings and paragraphs) contain
- ") contain [inline](@) content---"
- " content---text,\n"
- "links, emphasized text, images, "
- " text, images, code spans, and "
- "code spans, and so on.\n\n"
- "## Precedence\n\n"
- "Indicators of block structure "
- "block structure always take "
- " always take precedence over "
- "precedence over indicators\n"
- "of inline structure.  "
- "So, for example, the following "
- ", the following is a list with\n"
- "two items, not a list with one "
- "a list with one item containing "
- "item containing a code span:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- `one\n- two`\n.\n<ul>\n"
- "- two`\n.\n<ul>\n<li>`one</li>\n"
- "<li>`one</li>\n<li>two`</li>\n"
- "<li>two`</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This means that parsing can "
- " parsing can proceed in two "
- " proceed in two steps:  first, "
- " steps:  first, the block\n"
- structure of the document can be
- " document can be discerned; "
- " be discerned; second, text "
- "; second, text lines inside\n"
- "paragraphs, headings, and other "
- ", and other block constructs can"
- " constructs can be parsed for "
- " be parsed for inline\n"
- "structure.  "
- "The second step requires "
- " step requires information about"
- " about link reference\n"
- "definitions that will be "
- " that will be available only at "
- " only at the end of the first\n"
- "step.  "
- "Note that the first step "
- " the first step requires "
- " step requires processing lines "
- " lines in sequence,\n"
- "but the second can be "
- " second can be parallelized, "
- " parallelized, since the inline "
- " the inline parsing of\n"
- "one block element does not "
- " does not affect the inline "
- " the inline parsing of any other"
- " of any other.\n\n"
- "## "
- Container blocks and leaf blocks
- "\n\n"
- "We can divide blocks into two "
- "blocks into two types:\n"
- "[container blocks](#container-"
- "](#container-blocks),\n"
- "which can contain other blocks, "
- " other blocks, and "
- "[leaf blocks](#leaf-blocks),\n"
- ",\nwhich cannot.\n\n"
- "# Leaf blocks\n\n"
- "This section describes the "
- " describes the different kinds "
- "different kinds of leaf block "
- " of leaf block that make up a\n"
- "Markdown document.\n\n"
- "## Thematic breaks\n\n"
- "A line consisting of optionally "
- " of optionally up to three "
- " up to three spaces of "
- "three spaces of indentation, "
- "of indentation, followed by a\n"
- "sequence of three or more "
- " three or more matching `-`, `_`"
- "`-`, `_`, or `*`"
- "`*` characters, each followed\n"
- "optionally by any number of "
- " any number of spaces or tabs, "
- "spaces or tabs, forms a\n"
- "[thematic break](@).\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "***\n---\n___\n.\n<hr />\n<hr />\n"
- ".\n<hr />\n<hr />\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Wrong characters:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "+++\n.\n<p>+++</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "===\n.\n<p>===</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Not enough characters:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "--\n**\n__\n.\n<p>--\n**\n__</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Up to three spaces of "
- "three spaces of indentation are "
- "indentation are allowed:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " ***\n  ***\n   ***\n.\n<hr />\n"
- "   ***\n.\n<hr />\n<hr />\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    ***\n.\n<pre><code>***\n"
- "<pre><code>***\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n    ***\n.\n<p>Foo\n***</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "More than three characters may "
- " characters may be used:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ________________________________
- "_____________________\n.\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Spaces and tabs are allowed "
- " are allowed between the "
- " between the characters:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " - - -\n.\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " **  * ** * ** * **\n.\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-     -      -      -\n.\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Spaces and tabs are allowed at "
- " are allowed at the end:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- - - -    \n.\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, no other characters may"
- " characters may occur in the "
- " occur in the line:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_ _ _ _ a\n\na------\n\n---a---\n.\n"
- "\n---a---\n.\n<p>_ _ _ _ a</p>\n"
- "<p>a------</p>\n<p>---a---</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "It is required that all of the "
- that all of the characters other
- "characters other than spaces or "
- " than spaces or tabs be the same"
- "tabs be the same.\n"
- "So, this is not a thematic break"
- "a thematic break:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " *-*\n.\n<p><em>-</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Thematic breaks do not need "
- " do not need blank lines before "
- " lines before or after:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n***\n- bar\n.\n<ul>\n"
- "- bar\n.\n<ul>\n<li>foo</li>\n</ul>\n"
- "</ul>\n<hr />\n<ul>\n<li>bar</li>\n"
- "<li>bar</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Thematic breaks can interrupt a "
- "can interrupt a paragraph:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n***\nbar\n.\n<p>Foo</p>\n<hr />\n"
- "<hr />\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If a line of dashes that meets "
- " that meets the above conditions"
- "above conditions for being a\n"
- "thematic break could also be "
- " could also be interpreted as "
- " interpreted as the underline of"
- "the underline of a [setext\n"
- "[setext\nheading]"
- "], the interpretation as a\n["
- "\n[setext heading]"
- " takes precedence. "
- "Thus, for example,\n"
- "this is a setext heading, not a "
- " heading, not a paragraph "
- "not a paragraph followed by a "
- " followed by a thematic break:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n---\nbar\n.\n<h2>Foo</h2>\n"
- ".\n<h2>Foo</h2>\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- When both a thematic break and a
- " break and a list item are "
- "a list item are possible\n"
- "interpretations of a line, the "
- " of a line, the thematic break "
- " thematic break takes precedence"
- "takes precedence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "* Foo\n* * *\n* Bar\n.\n<ul>\n"
- "* Bar\n.\n<ul>\n<li>Foo</li>\n</ul>\n"
- "</ul>\n<hr />\n<ul>\n<li>Bar</li>\n"
- "<li>Bar</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If you want a thematic break in "
- " break in a list item, use a "
- " item, use a different bullet:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- Foo\n- * * *\n.\n<ul>\n"
- "- * * *\n.\n<ul>\n<li>Foo</li>\n"
- "<li>Foo</li>\n<li>\n<hr />\n</li>\n"
- "<hr />\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## ATX headings\n\n"
- "An [ATX heading](@)\n"
- "consists of a string of "
- " of a string of characters, "
- " of characters, parsed as inline"
- "parsed as inline content, "
- "inline content, between an\n"
- opening sequence of 1--
- "--6 unescaped `#`"
- "`#` characters and an optional\n"
- "closing sequence of any number "
- " of any number of unescaped `#`"
- "`#` characters.\n"
- "\nThe opening sequence of `#`"
- " characters must be followed by "
- " be followed by spaces or tabs, "
- "spaces or tabs, or\n"
- "by the end of line. "
- The optional closing sequence of
- " sequence of `#`"
- "`#`s must be preceded by\n"
- "spaces or tabs and may be "
- "tabs and may be followed by "
- " be followed by spaces or tabs "
- " spaces or tabs only.  "
- "The opening\n`#`"
- " character may be preceded by up"
- " preceded by up to three spaces "
- to three spaces of indentation.
- " of indentation.  The raw\n"
- "contents of the heading are "
- "the heading are stripped of "
- "are stripped of leading and "
- " of leading and trailing space "
- " trailing space or tabs\n"
- "before being parsed as inline "
- " as inline content.  "
- "The heading level is equal to "
- " is equal to the number\nof `#`"
- " characters in the opening "
- " in the opening sequence.\n\n"
- "Simple headings:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "# foo\n## foo\n### foo\n#### foo\n"
- "#### foo\n##### foo\n###### foo\n.\n"
- "###### foo\n.\n<h1>foo</h1>\n"
- ".\n<h1>foo</h1>\n<h2>foo</h2>\n"
- "<h2>foo</h2>\n<h3>foo</h3>\n"
- "<h3>foo</h3>\n<h4>foo</h4>\n"
- "<h4>foo</h4>\n<h5>foo</h5>\n"
- "<h5>foo</h5>\n<h6>foo</h6>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "More than six `#`"
- "`#` characters is not a heading:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "####### foo\n.\n"
- ".\n<p>####### foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "At least one space or tab is "
- space or tab is required between
- "required between the `#`"
- "`#` characters and the\nheading'"
- "s contents, unless the heading "
- " the heading is empty.  "
- "Note that many\n"
- implementations currently do not
- "currently do not require the "
- "not require the space.  "
- "However, the\n"
- "space was required by the\n"
- "[original ATX implementation]("
- "implementation](http://"
- "](http://www.aaronsw.com/2002/"
- "/2002/atx/atx.py),\n"
- and it helps prevent things like
- " things like the following from "
- " following from being parsed as\n"
- "headings:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "#5 bolt\n\n#hashtag\n.\n"
- "\n#hashtag\n.\n<p>#5 bolt</p>\n"
- "<p>#5 bolt</p>\n<p>#hashtag</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not a heading, because "
- ", because the first `#`"
- "`#` is escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\## foo\n.\n<p>## foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Contents are parsed as inlines:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "# foo *bar* \\*baz\\*\n.\n"
- "<h1>foo <em>bar</em> *baz*</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Leading and trailing spaces or "
- " spaces or tabs are ignored in "
- " are ignored in parsing inline "
- " parsing inline content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "#                  foo"
- "foo                     \n.\n"
- ".\n<h1>foo</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Up to three spaces of "
- "three spaces of indentation are "
- "indentation are allowed:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " ### foo\n  ## foo\n   # foo\n.\n"
- "   # foo\n.\n<h3>foo</h3>\n"
- ".\n<h3>foo</h3>\n<h2>foo</h2>\n"
- "<h2>foo</h2>\n<h1>foo</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    # foo\n.\n<pre><code># foo\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\n    # bar\n.\n<p>foo\n"
- ".\n<p>foo\n# bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A closing sequence of `#`"
- "`#` characters is optional:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "## foo ##\n  ###   bar    ###\n.\n"
- ".\n<h2>foo</h2>\n<h3>bar</h3>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "It need not be the same length "
- "the same length as the opening "
- " as the opening sequence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "# foo ##########################"
- "########################\n"
- "##### foo ##\n.\n<h1>foo</h1>\n"
- ".\n<h1>foo</h1>\n<h5>foo</h5>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Spaces or tabs are allowed after
- " allowed after the closing "
- " the closing sequence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "### foo ###     \n.\n<h3>foo</h3>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A sequence of `#`"
- " characters with anything but "
- " anything but spaces or tabs "
- " spaces or tabs following it\n"
- "is not a closing sequence, but "
- " sequence, but counts as part of"
- " as part of the contents of the\n"
- "heading:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "### foo ### b\n.\n"
- ".\n<h3>foo ### b</h3>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The closing sequence must be "
- " must be preceded by a space or "
- " by a space or tab:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "# foo#\n.\n<h1>foo#</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Backslash-escaped `#`"
- " characters do not count as part"
- "\nof the closing sequence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "### foo \\###\n## foo #\\##\n"
- "## foo #\\##\n# foo \\#\n.\n"
- "# foo \\#\n.\n<h3>foo ###</h3>\n"
- "<h2>foo ###</h2>\n<h1>foo #</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "ATX headings need not be "
- " need not be separated from "
- " separated from surrounding "
- " surrounding content by blank\n"
- "lines, and they can interrupt "
- " can interrupt paragraphs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "****\n## foo\n****\n.\n<hr />\n"
- "****\n.\n<hr />\n<h2>foo</h2>\n"
- "<h2>foo</h2>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo bar\n# baz\nBar foo\n.\n"
- "# baz\nBar foo\n.\n<p>Foo bar</p>\n"
- "<p>Foo bar</p>\n<h1>baz</h1>\n"
- "<h1>baz</h1>\n<p>Bar foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "ATX headings can be empty:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "## \n#\n### ###\n.\n<h2></h2>\n"
- ".\n<h2></h2>\n<h1></h1>\n<h3></h3>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Setext headings\n\n"
- "A [setext heading](@)"
- " consists of one or more\n"
- "lines of text, not interrupted "
- "not interrupted by a blank line,"
- "by a blank line, of which the "
- ", of which the first line does "
- "first line does not\n"
- "have more than 3 spaces of "
- " 3 spaces of indentation, "
- "of indentation, followed by\na ["
- "a [setext heading underline]"
- ".  "
- "The lines of text must be such\n"
- "that, were they not followed by "
- "not followed by the setext "
- " by the setext heading underline"
- " underline,\n"
- "they would be interpreted as a "
- " as a paragraph:  they cannot be"
- "\ninterpretable as a [code fence]"
- "[code fence], [ATX heading]["
- ", [ATX heading][ATX headings],\n["
- "ATX headings],\n[block quote]["
- ",\n[block quote][block quotes], ["
- "block quotes], [thematic break]["
- "thematic break][thematic breaks]"
- "thematic breaks],\n[list item]["
- "],\n[list item][list items], or ["
- "], or [HTML block][HTML blocks]."
- "][HTML blocks].\n\n"
- "A [setext heading underline](@)"
- " is a sequence of\n`=`"
- "`=` characters or a sequence of "
- "`-`"
- " characters, with no more than 3"
- "\n"
- "spaces of indentation and any "
- " and any number of trailing "
- " of trailing spaces or tabs.\n\n"
- The heading is a level 1 heading
- " level 1 heading if `=`"
- "`=` characters are used in\nthe ["
- "\nthe [setext heading underline]"
- "], and a level 2 heading if `-`\n"
- "characters are used.  "
- "The contents of the heading are "
- "the heading are the result\n"
- "of parsing the preceding lines "
- "preceding lines of text as "
- " of text as CommonMark inline\n"
- "content.\n\n"
- "In general, a setext heading "
- " setext heading need not be "
- " need not be preceded or "
- " be preceded or followed by a\n"
- "blank line.  "
- "However, it cannot interrupt a "
- " interrupt a paragraph, so when "
- ", so when a\n"
- "setext heading comes after a "
- " comes after a paragraph, a "
- " a paragraph, a blank line is "
- "a blank line is needed between\n"
- "them.\n\nSimple examples:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo *bar*\n=========\n\nFoo *bar*\n"
- "\nFoo *bar*\n---------\n.\n"
- ".\n<h1>Foo <em>bar</em></h1>\n"
- "<h2>Foo <em>bar</em></h2>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The content of the header may "
- " the header may span more than "
- " span more than one line:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo *bar\nbaz*\n====\n.\n"
- "baz*\n====\n.\n<h1>Foo <em>bar\n"
- "<h1>Foo <em>bar\nbaz</em></h1>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "The contents are the result of "
- " the result of parsing the "
- " of parsing the headings's raw\n"
- content as inlines.  The heading
- "'s raw content is formed by\n"
- "concatenating the lines and "
- " the lines and removing initial "
- " initial and final\n"
- "spaces or tabs.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  Foo *bar\nbaz*→\n====\n.\n"
- "baz*→\n====\n.\n<h1>Foo <em>bar\n"
- "<h1>Foo <em>bar\nbaz</em></h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The underlining can be any "
- " can be any length:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n-------------------------\n\n"
- "\nFoo\n=\n.\n<h2>Foo</h2>\n"
- ".\n<h2>Foo</h2>\n<h1>Foo</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The heading content can be "
- " content can be preceded by up "
- " preceded by up to three spaces "
- "to three spaces of indentation, "
- "of indentation, and\n"
- "need not line up with the "
- " up with the underlining:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   Foo\n---\n\n  Foo\n-----\n\n  Foo\n"
- "-----\n\n  Foo\n  ===\n.\n"
- "\n  Foo\n  ===\n.\n<h2>Foo</h2>\n"
- ".\n<h2>Foo</h2>\n<h2>Foo</h2>\n"
- "<h2>Foo</h2>\n<h1>Foo</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    Foo\n    ---\n\n    Foo\n---\n.\n"
- "\n    Foo\n---\n.\n<pre><code>Foo\n"
- "<pre><code>Foo\n---\n\nFoo\n"
- "---\n\nFoo\n</code></pre>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The setext heading underline can
- " underline can be preceded by up"
- " preceded by up to three spaces "
- "to three spaces of\n"
- "indentation, and may have "
- ", and may have trailing spaces "
- "trailing spaces or tabs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n   ----      \n.\n"
- "   ----      \n.\n<h2>Foo</h2>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n    ---\n.\n<p>Foo\n---</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The setext heading underline "
- " underline cannot contain "
- " cannot contain internal spaces "
- "internal spaces or tabs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n= =\n\nFoo\n--- -\n.\n<p>Foo\n"
- "--- -\n.\n<p>Foo\n= =</p>\n"
- "<p>Foo\n= =</p>\n<p>Foo</p>\n"
- "<p>Foo</p>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Trailing spaces or tabs in the "
- " or tabs in the content line do "
- content line do not cause a hard
- "not cause a hard line break:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo  \n-----\n.\n<h2>Foo</h2>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Nor does a backslash at the end:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\\\n----\n.\n<h2>Foo\\</h2>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Since indicators of block "
- " of block structure take "
- " structure take precedence over\n"
- "indicators of inline structure, "
- " structure, the following are "
- " following are setext headings:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`Foo\n----\n`\n\n<a title=\"a lot\n"
- "<a title=\"a lot\n---\n"
- "---\nof dashes\"/>\n.\n"
- "of dashes\"/>\n.\n<h2>`Foo</h2>\n"
- ".\n<h2>`Foo</h2>\n<p>`</p>\n"
- "<h2>&lt;a title=&quot;a lot</h2>"
- "&quot;a lot</h2>\n"
- "<p>of dashes&quot;/&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The setext heading underline "
- " underline cannot be a ["
- "[lazy continuation\nline]"
- "] in a list item or block quote:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> Foo\n---\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>Foo</p>\n"
- "<p>Foo</p>\n</blockquote>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\nbar\n===\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo\nbar\n"
- "<p>foo\nbar\n===</p>\n"
- "bar\n===</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- Foo\n---\n.\n<ul>\n<li>Foo</li>\n"
- "<li>Foo</li>\n</ul>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- A blank line is needed between a
- needed between a paragraph and a
- " paragraph and a following\n"
- "setext heading, since otherwise "
- "since otherwise the paragraph "
- " the paragraph becomes part\n"
- "of the heading's content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\nBar\n---\n.\n<h2>Foo\nBar</h2>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "But in general a blank line is "
- "a blank line is not required "
- "is not required before or after\n"
- "setext headings:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "---\nFoo\n---\nBar\n---\nBaz\n.\n"
- "Bar\n---\nBaz\n.\n<hr />\n"
- "Baz\n.\n<hr />\n<h2>Foo</h2>\n"
- "<h2>Foo</h2>\n<h2>Bar</h2>\n"
- "<h2>Bar</h2>\n<p>Baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Setext headings cannot be empty:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\n====\n.\n<p>====</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Setext heading text lines must "
- "text lines must not be "
- " must not be interpretable as "
- " as block\n"
- constructs other than paragraphs
- " than paragraphs.  "
- "So, the line of dashes\n"
- "in these examples gets "
- " examples gets interpreted as a "
- " as a thematic break:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "---\n---\n.\n<hr />\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n-----\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n</ul>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    foo\n---\n.\n<pre><code>foo\n"
- "<pre><code>foo\n</code></pre>\n"
- "</code></pre>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\n-----\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo</p>\n"
- "<p>foo</p>\n</blockquote>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If you want a heading with "
- "`> foo`"
- " as its literal text, you can\n"
- "\nuse backslash escapes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\> foo\n------\n.\n"
- "------\n.\n<h2>&gt; foo</h2>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "**Compatibility note:**"
- "  Most existing Markdown "
- " Markdown implementations\n"
- "do not allow the text of setext "
- " text of setext headings to span"
- headings to span multiple lines.
- "\n"
- "But there is no consensus about "
- consensus about how to interpret
- "how to interpret\n\n"
- "``` markdown\nFoo\nbar\n---\nbaz\n```"
- "\n\n"
- "One can find four different "
- " four different interpretations:"
- "interpretations:\n\n"
- "1. paragraph \"Foo\", heading \"bar"
- "\", heading \"bar\", paragraph \"baz"
- ", paragraph \"baz\"\n"
- "2. paragraph \"Foo bar\""
- "\", thematic break, paragraph \""
- "\"baz\"\n"
- "3. paragraph \"Foo bar --- baz\"\n"
- "4. heading \"Foo bar\", paragraph "
- "\", paragraph \"baz\"\n\n"
- "We find interpretation 4 most "
- " 4 most natural, and "
- " natural, and interpretation 4\n"
- "increases the expressive power "
- " power of CommonMark, by "
- " CommonMark, by allowing\n"
- "multiline headings.  "
- "Authors who want interpretation "
- " interpretation 1 can\n"
- put a blank line after the first
- " after the first paragraph:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n\nbar\n---\nbaz\n.\n<p>Foo</p>\n"
- ".\n<p>Foo</p>\n<h2>bar</h2>\n"
- "<h2>bar</h2>\n<p>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Authors who want interpretation "
- " interpretation 2 can put blank "
- "2 can put blank lines around\n"
- "the thematic break,\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\nbar\n\n---\n\nbaz\n.\n<p>Foo\n"
- "\nbaz\n.\n<p>Foo\nbar</p>\n<hr />\n"
- "bar</p>\n<hr />\n<p>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "or use a thematic break that "
- " break that cannot count as a ["
- "[setext heading\nunderline]"
- "\nunderline], such as\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\nbar\n* * *\nbaz\n.\n<p>Foo\n"
- "baz\n.\n<p>Foo\nbar</p>\n<hr />\n"
- "bar</p>\n<hr />\n<p>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Authors who want interpretation "
- " interpretation 3 can use "
- " 3 can use backslash escapes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\nbar\n\\---\nbaz\n.\n<p>Foo\nbar\n"
- ".\n<p>Foo\nbar\n---\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Indented code blocks\n\n"
- "An [indented code block](@)"
- " is composed of one or more\n["
- "\n[indented chunks]"
- "] separated by blank lines.\nAn "
- "\nAn [indented chunk](@)"
- " is a sequence of non-blank "
- " of non-blank lines,\n"
- "each preceded by four or more "
- "by four or more spaces of "
- " more spaces of indentation. "
- "The contents of the code\n"
- "block are the literal contents "
- " contents of the lines, "
- " of the lines, including "
- ", including trailing\n["
- "[line endings]"
- ", minus four spaces of "
- " four spaces of indentation.\n"
- "An indented code block has no ["
- "[info string].\n\n"
- "An indented code block cannot "
- " block cannot interrupt a "
- " interrupt a paragraph, so there"
- ", so there must be\n"
- a blank line between a paragraph
- " a paragraph and a following "
- "and a following indented code "
- " indented code block.\n"
- "(A blank line is not needed, "
- " is not needed, however, between"
- "however, between a code block "
- " a code block and a following\n"
- "paragraph.)\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    a simple\n"
- "      indented code block\n.\n"
- ".\n<pre><code>a simple\n"
- "  indented code block\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If there is any ambiguity "
- " any ambiguity between an "
- " between an interpretation of "
- " of indentation\n"
- "as a code block and as "
- " block and as indicating that "
- indicating that material belongs
- "material belongs to a [list\nitem"
- "[list\nitem][list items]"
- ", the list item interpretation "
- " interpretation takes precedence"
- "takes precedence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  - foo\n\n    bar\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<p>bar</p>\n"
- "<p>bar</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1.  foo\n\n    - bar\n.\n<ol>\n<li>\n"
- ".\n<ol>\n<li>\n<p>foo</p>\n<ul>\n"
- "<p>foo</p>\n<ul>\n<li>bar</li>\n"
- "<li>bar</li>\n</ul>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- The contents of a code block are
- "a code block are literal text, "
- " literal text, and do not get "
- " and do not get parsed\n"
- "as Markdown:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    <a/>\n    *hi*\n\n    - one\n.\n"
- ".\n<pre><code>&lt;a/&gt;\n*hi*\n\n"
- "*hi*\n\n- one\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here we have three chunks "
- " three chunks separated by blank"
- " by blank lines:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    chunk1\n\n    chunk2\n  \n \n \n"
- "  \n \n \n    chunk3\n.\n"
- "    chunk3\n.\n<pre><code>chunk1\n\n"
- "\nchunk2\n\n\n\nchunk3\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Any initial spaces or tabs "
- " spaces or tabs beyond four "
- " beyond four spaces of "
- " four spaces of indentation will"
- "indentation will be included in\n"
- "the content, even in interior "
- " in interior blank lines:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    chunk1\n      \n      chunk2\n"
- "      chunk2\n.\n"
- ".\n<pre><code>chunk1\n  \n  chunk2\n"
- "  \n  chunk2\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "An indented code block cannot "
- " block cannot interrupt a "
- " interrupt a paragraph.  (This\n"
- "allows hanging indents and the "
- "indents and the like.)\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n    bar\n\n.\n<p>Foo\nbar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, any non-blank line with"
- "-blank line with fewer than four"
- " fewer than four spaces of "
- " four spaces of indentation ends"
- "\n"
- "the code block immediately.  "
- "So a paragraph may occur "
- " may occur immediately\n"
- "after indented code:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    foo\nbar\n.\n<pre><code>foo\n"
- "<pre><code>foo\n</code></pre>\n"
- "</code></pre>\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "And indented code can occur "
- " code can occur immediately "
- " immediately before and after "
- " and after other kinds of\n"
- "blocks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "# Heading\n    foo\nHeading\n"
- "    foo\nHeading\n------\n    foo\n"
- "------\n    foo\n----\n.\n"
- "    foo\n----\n.\n<h1>Heading</h1>\n"
- "<pre><code>foo\n</code></pre>\n"
- "</code></pre>\n<h2>Heading</h2>\n"
- "<pre><code>foo\n</code></pre>\n"
- "</code></pre>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The first line can be preceded "
- "can be preceded by more than "
- " by more than four spaces of "
- " four spaces of indentation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "        foo\n    bar\n.\n"
- "    bar\n.\n<pre><code>    foo\n"
- "bar\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Blank lines preceding or "
- " preceding or following an "
- "or following an indented code "
- " indented code block\n"
- "are not included in it:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\n    \n    foo\n    \n\n.\n"
- "    foo\n    \n\n.\n<pre><code>foo\n"
- "<pre><code>foo\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Trailing spaces or tabs are "
- " or tabs are included in the "
- "included in the code block'"
- "'s content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    foo  \n.\n<pre><code>foo  \n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "## Fenced code blocks\n\n"
- "A [code fence](@) is a sequence\n"
- "of at least three consecutive "
- " consecutive backtick characters"
- " characters (`` ` ``) or\n"
- "`` ` ``) or\ntildes (`~`"
- ").  "
- "(Tildes and backticks cannot be "
- " cannot be mixed.)\nA "
- "A [fenced code block](@)\n"
- "begins with a code fence, "
- " a code fence, preceded by up to"
- " by up to three spaces of "
- "three spaces of indentation.\n\n"
- "The line with the opening code "
- " opening code fence may "
- " code fence may optionally "
- " may optionally contain some "
- " contain some text\n"
- "following the code fence; this "
- " fence; this is trimmed of "
- " is trimmed of leading and "
- " of leading and trailing\n"
- "spaces or tabs and called the "
- "[info string](@). If the ["
- ". If the [info string] comes\n"
- "after a backtick fence, it may "
- " fence, it may not contain any "
- "not contain any backtick\n"
- "characters.  "
- (The reason for this restriction
- "this restriction is that "
- " is that otherwise\n"
- "some inline code would be "
- " code would be incorrectly "
- " be incorrectly interpreted as "
- " interpreted as the\n"
- beginning of a fenced code block
- " code block.)\n\n"
- "The content of the code block "
- " the code block consists of all "
- consists of all subsequent lines
- "subsequent lines, until\n"
- "a closing [code fence]"
- " of the same type as the code "
- " as the code block\n"
- began with (backticks or tildes)
- " or tildes), and with at least "
- " with at least as many backticks"
- "\n"
- "or tildes as the opening code "
- " opening code fence.  "
- "If the leading code fence is\n"
- "preceded by N spaces of "
- " by N spaces of indentation, "
- "of indentation, then up to N "
- ", then up to N spaces of "
- " to N spaces of indentation are\n"
- "removed from each line of the "
- " line of the content (if present"
- " (if present).  "
- "(If a content line is not\n"
- "indented, it is preserved "
- "it is preserved unchanged.  "
- "If it is indented N spaces or "
- " N spaces or less, all\n"
- of the indentation is removed.)
- "\n\n"
- "The closing code fence may be "
- " fence may be preceded by up to "
- " by up to three spaces of "
- "three spaces of indentation, and"
- "\n"
- "may be followed only by spaces "
- " only by spaces or tabs, which "
- " or tabs, which are ignored.  "
- "If the end of the\n"
- "containing block (or document) "
- " (or document) is reached and no"
- " reached and no closing code "
- "no closing code fence\n"
- "has been found, the code block "
- " the code block contains all of "
- "contains all of the lines after "
- "the lines after the\n"
- opening code fence until the end
- " until the end of the containing"
- " the containing block (or\n"
- "document).  "
- "(An alternative spec would "
- " spec would require backtracking"
- " backtracking in the\n"
- "event that a closing code fence "
- " code fence is not found.  "
- "But this makes parsing\n"
- "much less efficient, and there "
- ", and there seems to be no real "
- " to be no real downside to the\n"
- "behavior described here.)\n\n"
- "A fenced code block may "
- " code block may interrupt a "
- "may interrupt a paragraph, and "
- " paragraph, and does not require"
- "\n"
- "a blank line either before or "
- " before or after.\n\n"
- "The content of a code fence is "
- "a code fence is treated as "
- " is treated as literal text, not"
- " text, not parsed\n"
- "as inlines.  "
- "The first word of the ["
- "[info string]"
- "] is typically used to\n"
- specify the language of the code
- " of the code sample, and "
- " sample, and rendered in the "
- "`class`\nattribute of the `code`"
- " tag.  "
- "However, this spec does not "
- " spec does not mandate any\n"
- "particular treatment of the ["
- "[info string].\n\n"
- "Here is a simple example with "
- " example with backticks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\n<\n >\n```\n.\n<pre><code>&lt;\n"
- "<pre><code>&lt;\n &gt;\n"
- " &gt;\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\nWith tildes:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~\n<\n >\n~~~\n.\n<pre><code>&lt;\n"
- "<pre><code>&lt;\n &gt;\n"
- " &gt;\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Fewer than three backticks is "
- " backticks is not enough:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``\nfoo\n``\n.\n"
- "``\n.\n<p><code>foo</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "The closing code fence must use "
- " fence must use the same "
- " use the same character as the "
- " as the opening\nfence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\naaa\n~~~\n```\n.\n"
- "aaa\n~~~\n```\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n~~~\n"
- "~~~\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~\naaa\n```\n~~~\n.\n"
- "aaa\n```\n~~~\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n```\n"
- "```\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The closing code fence must be "
- " fence must be at least as long "
- " least as long as the opening "
- " as the opening fence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "````\naaa\n```\n``````\n.\n"
- "```\n``````\n.\n<pre><code>aaa\n```\n"
- "```\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~~\naaa\n~~~\n~~~~\n.\n"
- "aaa\n~~~\n~~~~\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n~~~\n"
- "~~~\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Unclosed code blocks are closed "
- " are closed by the end of the "
- " the end of the document\n"
- "(or the enclosing [block quote]["
- "[block quote][block quotes] or ["
- "] or [list item][list items]):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\n.\n<pre><code></code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`````\n\n```\naaa\n.\n<pre><code>\n"
- ".\n<pre><code>\n```\naaa\n"
- "```\naaa\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> ```\n> aaa\n\nbbb\n.\n<blockquote>\n"
- ".\n<blockquote>\n<pre><code>aaa\n"
- "<pre><code>aaa\n</code></pre>\n"
- "</code></pre>\n</blockquote>\n"
- "</blockquote>\n<p>bbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A code block can have all empty "
- " have all empty lines as its "
- " lines as its content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\n\n  \n```\n.\n<pre><code>\n  \n"
- "<pre><code>\n  \n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A code block can be empty:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\n```\n.\n"
- "```\n.\n<pre><code></code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Fences can be indented.  "
- If the opening fence is indented
- " is indented,\n"
- "content lines will have "
- "lines will have equivalent "
- "have equivalent opening "
- " opening indentation removed,\n"
- "if present:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " ```\n aaa\naaa\n```\n.\n"
- " aaa\naaa\n```\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\naaa\n"
- "aaa\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  ```\naaa\n  aaa\naaa\n  ```\n.\n"
- "aaa\n  ```\n.\n<pre><code>aaa\naaa\n"
- "aaa\naaa\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   ```\n   aaa\n    aaa\n  aaa\n"
- "    aaa\n  aaa\n   ```\n.\n"
- "  aaa\n   ```\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n aaa\naaa\n"
- " aaa\naaa\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    ```\n    aaa\n    ```\n.\n"
- "    ```\n.\n<pre><code>```\naaa\n"
- "aaa\n```\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Closing fences may be preceded "
- "may be preceded by up to three "
- " by up to three spaces of "
- "three spaces of indentation, and"
- "indentation, and their\n"
- "indentation need not match that "
- " not match that of the opening "
- " of the opening fence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\naaa\n  ```\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   ```\naaa\n  ```\n.\n"
- "aaa\n  ```\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not a closing fence, "
- " closing fence, because it is "
- ", because it is indented 4 "
- " is indented 4 spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\naaa\n    ```\n.\n"
- "aaa\n    ```\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n    ```\n"
- "    ```\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- Code fences (opening and closing
- " and closing) cannot contain "
- " cannot contain internal spaces "
- "internal spaces or tabs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``` ```\naaa\n.\n<p><code> </code>\n"
- "aaa</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~~~~\naaa\n~~~ ~~\n.\n"
- "aaa\n~~~ ~~\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n~~~ ~~\n"
- "~~~ ~~\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Fenced code blocks can interrupt
- " can interrupt paragraphs, and "
- "paragraphs, and can be followed\n"
- "directly by paragraphs, without "
- ", without a blank line between:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\n```\nbar\n```\nbaz\n.\n"
- "bar\n```\nbaz\n.\n<p>foo</p>\n"
- ".\n<p>foo</p>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "</code></pre>\n<p>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Other blocks can also occur "
- " can also occur before and after"
- "before and after fenced code "
- " fenced code blocks\n"
- "without an intervening blank "
- " blank line:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\n---\n~~~\nbar\n~~~\n# baz\n.\n"
- "bar\n~~~\n# baz\n.\n<h2>foo</h2>\n"
- ".\n<h2>foo</h2>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "</code></pre>\n<h1>baz</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "An [info string]"
- " can be provided after the "
- " after the opening code fence.\n"
- "Although this spec doesn'"
- "t mandate any particular "
- " any particular treatment of\n"
- "the info string, the first word "
- " the first word is typically "
- " is typically used to specify\n"
- "the language of the code block. "
- "In HTML output, the language is\n"
- "normally indicated by adding a "
- " by adding a class to the `code`"
- "`code` element consisting\nof "
- "\nof `language-`"
- " followed by the language name."
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```ruby\ndef foo(x)\n  return 3\n"
- "  return 3\nend\n```\n.\n"
- "<pre><code class=\"language-ruby\""
- "=\"language-ruby\">def foo(x)\n"
- "  return 3\nend\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~~    ruby startline=3 $%@#$\n"
- "def foo(x)\n  return 3\nend\n"
- "  return 3\nend\n~~~~~~~\n.\n"
- "<pre><code class=\"language-ruby\""
- "=\"language-ruby\">def foo(x)\n"
- "  return 3\nend\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "````;\n````\n.\n"
- "<pre><code class=\"language-;\"></"
- "=\"language-;\"></code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Info strings]"
- " for backtick code blocks cannot"
- " blocks cannot contain backticks"
- " backticks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``` aa ```\nfoo\n.\n"
- "foo\n.\n<p><code>aa</code>\n"
- "foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Info strings]"
- " for tilde code blocks can "
- "code blocks can contain "
- " can contain backticks and "
- " backticks and tildes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "~~~ aa ``` ~~~\nfoo\n~~~\n.\n"
- "<pre><code class=\"language-aa\">"
- "=\"language-aa\">foo\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Closing code fences cannot have "
- "[info strings]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\n``` aaa\n```\n.\n"
- "```\n.\n<pre><code>``` aaa\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "## HTML blocks\n\n"
- "An [HTML block](@)"
- " is a group of lines that is "
- " lines that is treated\n"
- "as raw HTML (and will not be "
- "and will not be escaped in HTML "
- "escaped in HTML output).\n\n"
- "There are seven kinds of ["
- "[HTML block]"
- "], which can be defined by their"
- "\n"
- "start and end conditions.  "
- "The block begins with a line "
- " with a line that meets a\n"
- "[start condition](@)"
- " (after up to three optional "
- " three optional spaces of "
- " spaces of indentation).\n"
- "It ends with the first "
- " with the first subsequent line "
- "subsequent line that meets a "
- " that meets a matching\n"
- "[end condition](@)"
- ", or the last line of the "
- " line of the document, or the "
- ", or the last line of\nthe "
- "[container block](#container-"
- "](#container-blocks)"
- " containing the current HTML\n"
- "block, if no line is encountered"
- " is encountered that meets the ["
- "[end condition].  If\n"
- "\nthe first line meets both the ["
- "[start condition] and the [end\n"
- "] and the [end\ncondition]"
- ", the block will contain just "
- " contain just that line.\n\n"
- "1.  **Start condition:**"
- "  line begins with the string "
- "`<pre`,\n`<script`, `<style`, or "
- ", `<style`, or `<textarea`"
- " (case-insensitive), followed by"
- "), followed by a space,\n"
- "a tab, the string `>`"
- "`>`, or the end of the line.\\\n"
- "\\\n**End condition:**"
- "  line contains an end tag\n"
- "\n`</pre>`, `</script>`, "
- ", `</script>`, `</style>`, or "
- "`</style>`, or `</textarea>`"
- " (case-insensitive; it\n"
- "\nneed not match the start tag)."
- "\n\n2.  **Start condition:**"
- " line begins with the string "
- "`<!--`.\\\n**End condition:**"
- "  line contains the string `-->`"
- "`-->`.\n\n"
- "3.  **Start condition:**"
- " line begins with the string "
- "`<?`.\\\n**End condition:**"
- " line contains the string `?>`."
- "`?>`.\n\n"
- "4.  **Start condition:**"
- " line begins with the string "
- "`<!`\n"
- "\nfollowed by an ASCII letter.\\\n"
- "\\\n**End condition:**"
- " line contains the character `>`"
- "`>`.\n\n"
- "5.  **Start condition:**"
- "  line begins with the string\n"
- "\n`<![CDATA[`.\\\n"
- "`<![CDATA[`.\\\n**End condition:**"
- " line contains the string `]]>`."
- "`]]>`.\n\n"
- "6.  **Start condition:**"
- " line begins with the string `<`"
- "`<` or `</`\n"
- followed by one of the strings (
- of the strings (case-insensitive
- "case-insensitive) `address`,\n"
- "`address`,\n`article`, `aside`, "
- ", `aside`, `base`, `basefont`, "
- ", `basefont`, `blockquote`, "
- ", `blockquote`, `body`,\n"
- ", `body`,\n`caption`, `center`, "
- ", `center`, `col`, `colgroup`, "
- ", `colgroup`, `dd`, `details`, "
- ", `details`, `dialog`,\n`dir`, "
- ",\n`dir`, `div`, `dl`, `dt`, "
- ", `dl`, `dt`, `fieldset`, "
- ", `fieldset`, `figcaption`, "
- ", `figcaption`, `figure`,\n"
- ", `figure`,\n`footer`, `form`, "
- ", `form`, `frame`, `frameset`,\n"
- ", `frameset`,\n`h1`, `h2`, `h3`, "
- ", `h2`, `h3`, `h4`, `h5`, `h6`, "
- ", `h5`, `h6`, `head`, `header`, "
- ", `header`, `hr`,\n`html`, "
- ", `hr`,\n`html`, `iframe`, "
- ", `iframe`, `legend`, `li`, "
- "`legend`, `li`, `link`, `main`, "
- "`link`, `main`, `menu`, "
- "`main`, `menu`, `menuitem`,\n"
- ", `menuitem`,\n`nav`, `noframes`"
- ", `noframes`, `ol`, `optgroup`, "
- ", `optgroup`, `option`, `p`, "
- "`option`, `p`, `param`,\n`search`"
- ",\n`search`, `section`, `summary`"
- ", `summary`, `table`, `tbody`, "
- ", `tbody`, `td`,\n`tfoot`, `th`, "
- "\n`tfoot`, `th`, `thead`, `title`"
- "`thead`, `title`, `tr`, `track`"
- ", `tr`, `track`, `ul`, followed\n"
- "by a space, a tab, the end of "
- "tab, the end of the line, the "
- " the line, the string `>`, or\n"
- "`>`, or\nthe string `/>`.\\\n"
- "`/>`.\\\n**End condition:**"
- " line is followed by a ["
- "[blank line].\n\n"
- "7.  **Start condition:**"
- "  line begins with a complete ["
- "[open tag]\n(with any [tag name]"
- "[tag name] other than `pre`, "
- "`pre`, `script`,\n`style`, or "
- ",\n`style`, or `textarea`"
- ", or `textarea`) or a complete ["
- "[closing tag],\n"
- "followed by zero or more spaces "
- " or more spaces and tabs, "
- " and tabs, followed by the end "
- " by the end of the line.\\\n"
- "\\\n**End condition:**"
- " line is followed by a ["
- "[blank line].\n\n"
- "HTML blocks continue until they "
- " until they are closed by their "
- "closed by their appropriate\n["
- "[end condition]"
- ", or the last line of the "
- " line of the document or other "
- "[container\nblock"
- "\nblock](#container-blocks)"
- ".  This means any HTML "
- "**within an HTML\nblock**"
- " that might otherwise be "
- " otherwise be recognised as a "
- "recognised as a start condition "
- "start condition will\n"
- "be ignored by the parser and "
- " the parser and passed through "
- " passed through as-is, without "
- " as-is, without changing\n"
- "the parser's state.\n\n"
- "For instance, `<pre>`"
- " within an HTML block started by"
- "block started by `<table>`"
- "`<table>` will not affect\n"
- "the parser state; as the HTML "
- "; as the HTML block was started "
- " was started in by start "
- " in by start condition 6, it\n"
- "will end at any blank line. "
- "This can be surprising:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<table><tr><td>\n<pre>\n"
- "<pre>\n**Hello**,\n\n_world_.\n"
- "\n_world_.\n</pre>\n"
- "</pre>\n</td></tr></table>\n.\n"
- ".\n<table><tr><td>\n<pre>\n"
- "<pre>\n**Hello**,\n"
- "**Hello**,\n<p><em>world</em>.\n"
- "</pre></p>\n</td></tr></table>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "In this case, the HTML block is "
- " HTML block is terminated by the"
- " by the blank line — the "
- "`**Hello**`\n"
- "text remains verbatim — and "
- " verbatim — and regular parsing "
- "regular parsing resumes, with a "
- "resumes, with a paragraph,\n"
- "emphasised `world`"
- " and inline and block HTML "
- " and block HTML following.\n\n"
- "All types of [HTML blocks]"
- "] except type 7 may interrupt\n"
- "a paragraph.  "
- "Blocks of type 7 may not "
- " type 7 may not interrupt a "
- "not interrupt a paragraph.\n"
- (This restriction is intended to
- " is intended to prevent unwanted"
- "prevent unwanted interpretation\n"
- "of long tags inside a wrapped "
- " a wrapped paragraph as starting"
- " as starting HTML blocks.)\n\n"
- "Some simple examples follow.  "
- "Here are some basic HTML blocks\n"
- "of type 6:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<table>\n  <tr>\n    <td>\n"
- "  <tr>\n    <td>\n           hi\n"
- "           hi\n    </td>\n  </tr>\n"
- "  </tr>\n</table>\n\nokay.\n.\n"
- "\nokay.\n.\n<table>\n  <tr>\n"
- "<table>\n  <tr>\n    <td>\n"
- "  <tr>\n    <td>\n           hi\n"
- "           hi\n    </td>\n  </tr>\n"
- "  </tr>\n</table>\n<p>okay.</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " <div>\n  *hello*\n"
- "  *hello*\n         <foo><a>\n.\n"
- ".\n <div>\n  *hello*\n"
- "  *hello*\n         <foo><a>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A block can also start with a "
- " start with a closing tag:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "</div>\n*foo*\n.\n</div>\n*foo*\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here we have two HTML blocks "
- "two HTML blocks with a Markdown "
- "with a Markdown paragraph "
- " paragraph between them:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<DIV CLASS=\"foo\">\n\n*Markdown*\n\n"
- "\n*Markdown*\n\n</DIV>\n.\n"
- "\n</DIV>\n.\n<DIV CLASS=\"foo\">\n"
- "<p><em>Markdown</em></p>\n</DIV>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The tag on the first line can be
- " line can be partial, as long\n"
- as it is split where there would
- " there would be whitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div id=\"foo\"\n  class=\"bar\">\n"
- "  class=\"bar\">\n</div>\n.\n"
- "</div>\n.\n<div id=\"foo\"\n"
- ".\n<div id=\"foo\"\n  class=\"bar\">\n"
- "  class=\"bar\">\n</div>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div id=\"foo\" class=\"bar\n"
- "  baz\">\n</div>\n.\n"
- ".\n<div id=\"foo\" class=\"bar\n"
- "  baz\">\n</div>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "An open tag need not be closed:\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div>\n*foo*\n\n*bar*\n.\n<div>\n"
- "\n*bar*\n.\n<div>\n*foo*\n"
- "<div>\n*foo*\n<p><em>bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "A partial tag need not even be "
- " not even be completed (garbage\n"
- "in, garbage out):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div id=\"foo\"\n*hi*\n.\n"
- "*hi*\n.\n<div id=\"foo\"\n*hi*\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div class\nfoo\n.\n<div class\nfoo\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The initial tag doesn'"
- "'t even need to be a valid\n"
- "tag, as long as it starts like "
- " it starts like one:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div *???-&&&-<---\n*foo*\n.\n"
- "*foo*\n.\n<div *???-&&&-<---\n"
- "*foo*\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In type 6 blocks, the initial "
- ", the initial tag need not be on"
- " need not be on a line by\n"
- "itself:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div><a href=\"bar\">*foo*</a></"
- "bar\">*foo*</a></div>\n.\n"
- "<div><a href=\"bar\">*foo*</a></"
- "bar\">*foo*</a></div>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<table><tr><td>\nfoo\n"
- "foo\n</td></tr></table>\n.\n"
- ".\n<table><tr><td>\nfoo\n"
- "foo\n</td></tr></table>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Everything until the next blank "
- " the next blank line or end of "
- " line or end of document\n"
- gets included in the HTML block.
- " the HTML block.  "
- "So, in the following\n"
- "example, what looks like a "
- " looks like a Markdown code "
- "a Markdown code block\n"
- "is actually part of the HTML "
- " of the HTML block, which "
- " block, which continues until a "
- " until a blank\n"
- "line or the end of the document "
- "of the document is reached:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div></div>\n``` c\nint x = 33;\n"
- "int x = 33;\n```\n.\n<div></div>\n"
- ".\n<div></div>\n``` c\nint x = 33;\n"
- "int x = 33;\n```\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "To start an [HTML block]"
- "[HTML block] with a tag that is "
- "*not* in the\n"
- "list of block-level tags in (6),"
- " tags in (6), you must put the "
- " must put the tag by\n"
- itself on the first line (and it
- " line (and it must be complete):"
- " be complete):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"foo\">\n*bar*\n</a>\n.\n"
- "*bar*\n</a>\n.\n<a href=\"foo\">\n"
- "<a href=\"foo\">\n*bar*\n</a>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In type 7 blocks, the [tag name]"
- "[tag name] can be anything:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<Warning>\n*bar*\n</Warning>\n.\n"
- "</Warning>\n.\n<Warning>\n*bar*\n"
- "<Warning>\n*bar*\n</Warning>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<i class=\"foo\">\n*bar*\n</i>\n.\n"
- "*bar*\n</i>\n.\n<i class=\"foo\">\n"
- "<i class=\"foo\">\n*bar*\n</i>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "</ins>\n*bar*\n.\n</ins>\n*bar*\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "These rules are designed to "
- are designed to allow us to work
- "allow us to work with tags that\n"
- can function as either block-
- as either block-level or inline-
- "level or inline-level tags.\nThe "
- "The `<del>`"
- " tag is a nice example.  "
- "We can surround content with\n"
- "`<del>`"
- " tags in three different ways.  "
- "In this case, we get a raw\n"
- "HTML block, because the `<del>`"
- " tag is on a line by itself:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<del>\n*foo*\n</del>\n.\n<del>\n"
- "</del>\n.\n<del>\n*foo*\n</del>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In this case, we get a raw HTML "
- " get a raw HTML block that just "
- "block that just includes\nthe "
- "the `<del>`"
- " tag (because it ends with the "
- " ends with the following blank\n"
- "line).  "
- "So the contents get interpreted "
- "get interpreted as CommonMark:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<del>\n\n*foo*\n\n</del>\n.\n<del>\n"
- ".\n<del>\n<p><em>foo</em></p>\n"
- "</del>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Finally, in this case, the "
- "`<del>` tags are interpreted\nas "
- "\nas [raw HTML] *inside*"
- " the CommonMark paragraph.  "
- "(Because\n"
- "the tag is not on a line by "
- " on a line by itself, we get "
- " itself, we get inline HTML\n"
- "rather than an [HTML block].)\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<del>*foo*</del>\n.\n"
- "<p><del><em>foo</em></del></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "HTML tags designed to contain "
- " to contain literal content\n("
- "(`pre`, `script`, `style`, "
- ", `style`, `textarea`"
- "), comments, processing "
- ", processing instructions,\n"
- "and declarations are treated "
- " are treated somewhat "
- " somewhat differently.\n"
- "Instead of ending at the first "
- " at the first blank line, these "
- " line, these blocks\n"
- end at the first line containing
- " line containing a corresponding"
- " a corresponding end tag.\n"
- "As a result, these blocks can "
- " blocks can contain blank lines:"
- " blank lines:\n\n"
- "A pre tag (type 1):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<pre language=\"haskell\"><code>\n"
- "import Text.HTML.TagSoup\n\n"
- "\nmain :: IO ()\n"
- "main = print $ parseTags tags\n"
- "</code></pre>\nokay\n.\n"
- "<pre language=\"haskell\"><code>\n"
- "import Text.HTML.TagSoup\n\n"
- "\nmain :: IO ()\n"
- "main = print $ parseTags tags\n"
- "</code></pre>\n<p>okay</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A script tag (type 1):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<script type=\"text/javascript\">\n"
- "// JavaScript example\n\n"
- "document.getElementById(\"demo\")."
- "(\"demo\").innerHTML = \"Hello "
- " = \"Hello JavaScript!\";\n"
- "</script>\nokay\n.\n"
- "<script type=\"text/javascript\">\n"
- "// JavaScript example\n\n"
- "document.getElementById(\"demo\")."
- "(\"demo\").innerHTML = \"Hello "
- " = \"Hello JavaScript!\";\n"
- "</script>\n<p>okay</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A textarea tag (type 1):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<textarea>\n\n*foo*\n\n_bar_\n\n"
- "\n*foo*\n\n_bar_\n\n</textarea>\n.\n"
- "\n</textarea>\n.\n<textarea>\n\n"
- ".\n<textarea>\n\n*foo*\n\n_bar_\n\n"
- "\n*foo*\n\n_bar_\n\n</textarea>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "A style tag (type 1):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<style\n  type=\"text/css\">\n"
- "h1 {color:red;}\n\n"
- "\np {color:blue;}\n</style>\nokay\n"
- "</style>\nokay\n.\n<style\n"
- ".\n<style\n  type=\"text/css\">\n"
- "h1 {color:red;}\n\n"
- "\np {color:blue;}\n</style>\n"
- "</style>\n<p>okay</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If there is no matching end tag,"
- " end tag, the block will end at "
- " will end at the\n"
- "end of the document (or the "
- " (or the enclosing [block quote]"
- "[block quote][block quotes]\nor ["
- "]\nor [list item][list items]):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<style\n  type=\"text/css\">\n\nfoo\n"
- "\nfoo\n.\n<style\n"
- "foo\n.\n<style\n  type=\"text/css\">\n"
- "\nfoo\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> <div>\n> foo\n\nbar\n.\n"
- "> foo\n\nbar\n.\n<blockquote>\n<div>\n"
- "<div>\nfoo\n</blockquote>\n"
- "</blockquote>\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- <div>\n- foo\n.\n<ul>\n<li>\n<div>\n"
- "<ul>\n<li>\n<div>\n</li>\n"
- "<div>\n</li>\n<li>foo</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The end tag can occur on the "
- " occur on the same line as the "
- " line as the start tag:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<style>p{color:red;}</style>\n"
- "*foo*\n.\n"
- ".\n<style>p{color:red;}</style>\n"
- "<p><em>foo</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<!-- foo -->*bar*\n*baz*\n.\n"
- "*baz*\n.\n<!-- foo -->*bar*\n"
- "<p><em>baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that anything on the last "
- " on the last line after the\n"
- "end tag will be included in the "
- "[HTML block]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<script>\nfoo\n</script>1. *bar*\n"
- ".\n<script>\nfoo\n"
- "<script>\nfoo\n</script>1. *bar*\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A comment (type 2):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<!-- Foo\n\nbar\n   baz -->\nokay\n.\n"
- "okay\n.\n<!-- Foo\n\nbar\n   baz -->\n"
- "\nbar\n   baz -->\n<p>okay</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- A processing instruction (type 3
- " (type 3):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<?php\n\n  echo '>';\n\n?>\nokay\n.\n<?"
- "\n?>\nokay\n.\n<?php\n\n  echo '>';\n\n?"
- "\n  echo '>';\n\n?>\n<p>okay</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A declaration (type 4):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<!DOCTYPE html>\n.\n<!"
- ".\n<!DOCTYPE html>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "CDATA (type 5):\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<![CDATA[\nfunction matchwo(a,b)\n"
- "{\n  if (a < b && a < 0) then {\n"
- "    return 1;\n\n  } else {\n\n"
- "\n  } else {\n\n    return 0;\n  }\n"
- "  }\n}\n]]>\nokay\n.\n<![CDATA[\n"
- "<![CDATA[\nfunction matchwo(a,b)\n"
- "{\n  if (a < b && a < 0) then {\n"
- "    return 1;\n\n  } else {\n\n"
- "\n  } else {\n\n    return 0;\n  }\n"
- "  }\n}\n]]>\n<p>okay</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The opening tag can be preceded "
- "can be preceded by up to three "
- " by up to three spaces of "
- "three spaces of indentation, but"
- "indentation, but not\nfour:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  <!-- foo -->\n\n"
- "\n    <!-- foo -->\n.\n"
- ".\n  <!-- foo -->\n"
- "<pre><code>&lt;!-- foo --&gt;\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  <div>\n\n    <div>\n.\n  <div>\n"
- "  <div>\n<pre><code>&lt;div&gt;\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- An HTML block of types 1--
- "6 can interrupt a paragraph, and"
- "a paragraph, and need not be\n"
- "preceded by a blank line.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n<div>\nbar\n</div>\n.\n"
- "bar\n</div>\n.\n<p>Foo</p>\n<div>\n"
- "<div>\nbar\n</div>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, a following blank line "
- " blank line is needed, except at"
- ", except at the end of\n"
- "a document, and except for "
- " and except for blocks of types "
- "blocks of types 1--5, [above]["
- "--5, [above][HTML\nblock]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div>\nbar\n</div>\n*foo*\n.\n<div>\n"
- "*foo*\n.\n<div>\nbar\n</div>\n*foo*\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "HTML blocks of type 7 cannot "
- " type 7 cannot interrupt a "
- " interrupt a paragraph:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n<a href=\"bar\">\nbaz\n.\n<p>Foo\n"
- "baz\n.\n<p>Foo\n<a href=\"bar\">\n"
- "<a href=\"bar\">\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This rule differs from John "
- " from John Gruber'"
- "'s original Markdown syntax\n"
- "\nspecification, which says:\n\n"
- "> "
- "The only restrictions are that "
- " are that block-level HTML "
- "-level HTML elements —\n> e.g. "
- "e.g. `<div>`, `<table>`, `<pre>`"
- ", `<pre>`, `<p>`"
- ", etc. — must be separated from"
- "\n> "
- "surrounding content by blank "
- " by blank lines, and the start "
- ", and the start and end tags of "
- "and end tags of the\n> "
- "block should not be indented "
- "not be indented with spaces or "
- " with spaces or tabs.\n\n"
- "In some ways Gruber'"
- "s rule is more restrictive than "
- " than the one given\nhere:\n\n"
- "- "
- "It requires that an HTML block "
- " an HTML block be preceded by a "
- " preceded by a blank line.\n"
- "- "
- "It does not allow the start tag "
- " the start tag to be indented.\n"
- "- "
- "It requires a matching end tag, "
- " end tag, which it also does not"
- "it also does not allow to\n  "
- "be indented.\n\n"
- Most Markdown implementations (
- " (including some of Gruber'"
- "'s own) do not\n"
- "respect all of these "
- " all of these restrictions.\n\n"
- "There is one respect, however, "
- ", however, in which Gruber'"
- "'s rule is more liberal\n"
- "than the one given here, since "
- " here, since it allows blank "
- "it allows blank lines to occur "
- " lines to occur inside\n"
- "an HTML block.  "
- "There are two reasons for "
- two reasons for disallowing them
- "disallowing them here.\n"
- "First, it removes the need to "
- " the need to parse balanced tags"
- " balanced tags, which is\n"
- "expensive and can require "
- "and can require backtracking "
- " backtracking from the end of "
- "from the end of the document\n"
- if no matching end tag is found.
- " tag is found. "
- "Second, it provides a very "
- "provides a very simple\n"
- "and flexible way of including "
- " of including Markdown content "
- " content inside HTML tags:\n"
- "simply separate the Markdown "
- " the Markdown from the HTML "
- " from the HTML using blank lines"
- " blank lines:\n\nCompare:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div>\n\n*Emphasized* text.\n\n"
- "\n</div>\n.\n<div>\n"
- "<p><em>Emphasized</em> text.</p>"
- "</em> text.</p>\n</div>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<div>\n*Emphasized* text.\n</div>\n"
- "</div>\n.\n<div>\n"
- ".\n<div>\n*Emphasized* text.\n"
- "</div>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Some Markdown implementations "
- "implementations have adopted a "
- " have adopted a convention of\n"
- interpreting content inside tags
- " inside tags as text if the open"
- "text if the open tag has\n"
- "the attribute `markdown=1`"
- ".  "
- "The rule given above seems a "
- " above seems a simpler and\n"
- "more elegant way of achieving "
- " of achieving the same "
- " the same expressive power, "
- " power, which is also\n"
- "much simpler to parse.\n\n"
- "The main potential drawback is "
- " drawback is that one can no "
- "that one can no longer paste "
- "no longer paste HTML\n"
- "blocks into Markdown documents "
- " documents with 100% reliability"
- "100% reliability.  However,\n"
- "*in most cases*"
- " this will work fine, because "
- " fine, because the blank lines "
- "the blank lines in\n"
- "HTML are usually followed by "
- " followed by HTML block tags.  "
- "For example:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n"
- "\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n"
- "</tr>\n\n</table>\n.\n<table>\n<tr>\n"
- ".\n<table>\n<tr>\n<td>\nHi\n</td>\n"
- "<td>\nHi\n</td>\n</tr>\n</table>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "There are problems, however, if "
- ", however, if the inner tags are"
- " inner tags are indented\n*and*"
- " separated by spaces, as then "
- "spaces, as then they will be "
- " they will be interpreted as\n"
- "an indented code block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<table>\n\n  <tr>\n\n    <td>\n"
- "\n    <td>\n      Hi\n    </td>\n\n"
- "    </td>\n\n  </tr>\n\n</table>\n.\n"
- "\n</table>\n.\n<table>\n  <tr>\n"
- "  <tr>\n<pre><code>&lt;td&gt;\n"
- "  Hi\n&lt;/td&gt;\n</code></pre>\n"
- "</code></pre>\n  </tr>\n</table>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Fortunately, blank lines are "
- "blank lines are usually not "
- "are usually not necessary and "
- " necessary and can be\n"
- "deleted.  "
- "The exception is inside `<pre>`"
- "`<pre>` tags, but as described\n["
- "\n[above][HTML blocks]"
- ", raw HTML blocks starting with "
- "`<pre>`\n*can*"
- "\n*can* contain blank lines.\n\n"
- "## Link reference definitions\n\n"
- "A [link reference definition](@)"
- "\nconsists of a [link label]"
- ", optionally preceded by up to "
- " by up to three spaces of\n"
- "indentation, followed\n"
- "\nby a colon (`:`"
- "), optional spaces or tabs ("
- "spaces or tabs (including up to "
- "including up to one\n[line ending"
- "[line ending]), a ["
- "]), a [link destination],\n"
- optional spaces or tabs (
- "spaces or tabs (including up to "
- "including up to one\n[line ending"
- "[line ending]), and an optional "
- "[link\ntitle]"
- ", which if it is present must be"
- " present must be separated\n"
- "from the [link destination]"
- "] by spaces or tabs.\n"
- "\nNo further character may occur."
- "\n\nA [link reference definition]\n"
- "does not correspond to a "
- "correspond to a structural "
- "to a structural element of a "
- " element of a document.  "
- "Instead, it\n"
- "defines a label which can be "
- " which can be used in ["
- "[reference links]\n"
- "]\nand reference-style [images]"
- "] elsewhere in the document.  ["
- "[Link\nreference definitions]"
- " can come either before or after"
- " before or after the links that "
- " the links that use\nthem.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url \"title\"\n\n[foo]\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   [foo]: \n      /url  \n"
- "           'the title'  \n\n[foo]\n"
- "\n[foo]\n.\n"
- "<p><a href=\"/url\" title=\"the "
- "url\" title=\"the title\">foo</a></"
- "title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[Foo*bar\\]]:my_(url) 'title ("
- "(url) 'title (with parens)'\n\n"
- "\n[Foo*bar\\]]\n.\n"
- "<p><a href=\"my_(url)\" title=\""
- "(url)\" title=\"title (with parens"
- " (with parens)\">Foo*bar]</a></p>"
- "Foo*bar]</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[Foo bar]:\n<my url>\n'title'\n\n"
- "'title'\n\n[Foo bar]\n.\n"
- "<p><a href=\"my%20url\" title=\""
- "%20url\" title=\"title\">Foo bar</a"
- "\">Foo bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The title may extend over "
- "may extend over multiple lines:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url '\ntitle\nline1\nline2\n"
- "line1\nline2\n'\n\n[foo]\n.\n"
- ".\n<p><a href=\"/url\" title=\"\n"
- "title\nline1\nline2\n\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, it may not contain a ["
- "[blank line]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url 'title\n\n"
- "\nwith blank line'\n\n[foo]\n.\n"
- ".\n<p>[foo]: /url 'title</p>\n"
- "<p>with blank line'</p>\n"
- "<p>[foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The title may be omitted:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]:\n/url\n\n[foo]\n.\n"
- ".\n<p><a href=\"/url\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The link destination may not be "
- " may not be omitted:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]:\n\n[foo]\n.\n<p>[foo]:</p>\n"
- ".\n<p>[foo]:</p>\n<p>[foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n "
- "However, an empty link "
- ", an empty link destination may "
- "destination may be specified "
- " be specified using\n "
- "angle brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: <>\n\n[foo]\n.\n"
- ".\n<p><a href=\"\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- The title must be separated from
- " separated from the link "
- " from the link destination by\n"
- "spaces or tabs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: <bar>(baz)\n\n[foo]\n.\n"
- ".\n<p>[foo]: <bar>(baz)</p>\n"
- "<p>[foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Both title and destination can "
- "destination can contain "
- " can contain backslash escapes\n"
- "and literal backslashes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url\\bar\\*baz \"foo\\\"bar\\"
- "\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n.\n"
- "<p><a href=\"/url%5Cbar*baz\" "
- "/url%5Cbar*baz\" title=\"foo&quot;"
- "title=\"foo&quot;bar\\baz\">foo</a>"
- "bar\\baz\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A link can come before its "
- "come before its corresponding "
- " corresponding definition:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n\n[foo]: url\n.\n"
- ".\n<p><a href=\"url\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If there are several matching "
- " matching definitions, the first"
- ", the first one takes\n"
- "precedence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n\n[foo]: first\n"
- "\n[foo]: first\n[foo]: second\n.\n"
- "<p><a href=\"first\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "As noted in the section on ["
- "[Links], matching of labels is\n"
- "\ncase-insensitive (see [matches]"
- "[matches]).\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[FOO]: /url\n\n[Foo]\n.\n"
- ".\n<p><a href=\"/url\">Foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[ΑΓΩ]: /φου\n\n[αγω]\n.\n"
- "<p><a href=\"/%CF%86%CE%BF%CF%85\""
- "%86%CE%BF%CF%85\">αγω</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Whether something is a ["
- "[link reference definition] is\n"
- "independent of whether the link "
- " the link reference it defines "
- " it defines is\n"
- "used in the document.  "
- "Thus, for example, the following"
- "\n"
- "document contains just a link "
- " just a link reference "
- " link reference definition, and\n"
- "no visible content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url\n.\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here is another one:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[\nfoo\n]: /url\nbar\n.\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not a link reference "
- " link reference definition, "
- " definition, because there are\n"
- "characters other than spaces or "
- " than spaces or tabs after the "
- " tabs after the title:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url \"title\" ok\n.\n"
- "<p>[foo]: /url &quot;title&quot;"
- "quot;title&quot; ok</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is a link reference "
- " link reference definition, but "
- "definition, but it has no title:"
- "it has no title:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url\n\"title\" ok\n.\n"
- ".\n<p>&quot;title&quot; ok</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not a link reference "
- " link reference definition, "
- " definition, because it is "
- ", because it is indented\n"
- "four spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    [foo]: /url \"title\"\n\n[foo]\n"
- "\n[foo]\n.\n"
- "<pre><code>[foo]: /url &quot;"
- "]: /url &quot;title&quot;\n"
- "</code></pre>\n<p>[foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not a link reference "
- " link reference definition, "
- " definition, because it occurs "
- " it occurs inside\na code block:"
- "a code block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```\n[foo]: /url\n```\n\n[foo]\n.\n"
- "\n[foo]\n.\n<pre><code>[foo]: /url\n"
- "</code></pre>\n<p>[foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A [link reference definition]"
- "] cannot interrupt a paragraph."
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n[bar]: /baz\n\n[bar]\n.\n<p>Foo\n"
- "\n[bar]\n.\n<p>Foo\n[bar]: /baz</p>\n"
- "[bar]: /baz</p>\n<p>[bar]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, it can directly follow "
- "directly follow other block "
- " other block elements, such as "
- ", such as headings\n"
- "and thematic breaks, and it need"
- ", and it need not be followed by"
- " be followed by a blank line.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "# [Foo]\n[foo]: /url\n> bar\n.\n"
- "<h1><a href=\"/url\">Foo</a></h1>\n"
- "<blockquote>\n<p>bar</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url\nbar\n===\n[foo]\n.\n"
- "bar\n===\n[foo]\n.\n<h1>bar</h1>\n"
- "<p><a href=\"/url\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url\n===\n[foo]\n.\n<p>===\n"
- "<a href=\"/url\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Several ["
- "[link reference definitions]\n"
- "can occur one after another, "
- " after another, without "
- ", without intervening blank "
- " blank lines.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /foo-url \"foo\"\n"
- "[bar]: /bar-url\n  \"bar\"\n"
- "  \"bar\"\n[baz]: /baz-url\n\n[foo],\n"
- "\n[foo],\n[bar],\n[baz]\n.\n"
- "<p><a href=\"/foo-url\" title=\"foo"
- "-url\" title=\"foo\">foo</a>,\n"
- "<a href=\"/bar-url\" title=\"bar\">"
- "\" title=\"bar\">bar</a>,\n"
- "<a href=\"/baz-url\">baz</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Link reference definitions]"
- "] can occur\n"
- "inside block containers, like "
- ", like lists and block "
- "lists and block quotations.  "
- "They\n"
- "affect the entire document, not "
- " document, not just the "
- ", not just the container in "
- " container in which they\n"
- "are defined:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n\n> [foo]: /url\n.\n"
- ".\n<p><a href=\"/url\">foo</a></p>\n"
- "<blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Paragraphs\n\n"
- "A sequence of non-blank lines "
- "non-blank lines that cannot be "
- " that cannot be interpreted as "
- " interpreted as other\n"
- "kinds of blocks forms a "
- "[paragraph](@).\n"
- "The contents of the paragraph "
- " the paragraph are the result of"
- " the result of parsing the\n"
- "paragraph'"
- "s raw content as inlines.  "
- "The paragraph's raw content\n"
- "is formed by concatenating the "
- " the lines and removing initial "
- " initial and final\n"
- "spaces or tabs.\n\n"
- "A simple example with two "
- " with two paragraphs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "aaa\n\nbbb\n.\n<p>aaa</p>\n"
- ".\n<p>aaa</p>\n<p>bbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Paragraphs can contain multiple "
- " multiple lines, but no blank "
- ", but no blank lines:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "aaa\nbbb\n\nccc\nddd\n.\n<p>aaa\n"
- "ddd\n.\n<p>aaa\nbbb</p>\n<p>ccc\n"
- "bbb</p>\n<p>ccc\nddd</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Multiple blank lines between "
- " lines between paragraphs have "
- "paragraphs have no effect:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "aaa\n\n\nbbb\n.\n<p>aaa</p>\n"
- ".\n<p>aaa</p>\n<p>bbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Leading spaces or tabs are "
- " or tabs are skipped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  aaa\n bbb\n.\n<p>aaa\nbbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Lines after the first may be "
- " first may be indented any "
- "be indented any amount, since "
- " amount, since indented\n"
- "code blocks cannot interrupt "
- " interrupt paragraphs.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "aaa\n             bbb\n"
- "                                "
- "                       ccc\n.\n"
- ".\n<p>aaa\nbbb\nccc</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, the first line may be "
- " line may be preceded by up to "
- " by up to three spaces of "
- "three spaces of indentation.\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   aaa\nbbb\n.\n<p>aaa\nbbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    aaa\nbbb\n.\n<pre><code>aaa\n"
- "<pre><code>aaa\n</code></pre>\n"
- "</code></pre>\n<p>bbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Final spaces or tabs are "
- " or tabs are stripped before "
- "stripped before inline parsing, "
- "inline parsing, so a paragraph\n"
- "that ends with two or more "
- " two or more spaces will not end"
- " will not end with a [hard line\n"
- "[hard line\nbreak]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "aaa     \nbbb     \n.\n"
- "bbb     \n.\n<p>aaa<br />\nbbb</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Blank lines\n\n"
- "[Blank lines]"
- " between block-level elements "
- "-level elements are ignored,\n"
- except for the role they play in
- " they play in determining "
- " in determining whether a [list]"
- "[list]\nis [tight] or [loose].\n\n"
- Blank lines at the beginning and
- " beginning and end of the "
- " and end of the document are "
- " document are also ignored.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  \n\naaa\n  \n\n# aaa\n\n  \n.\n"
- "  \n\n# aaa\n\n  \n.\n<p>aaa</p>\n"
- "  \n.\n<p>aaa</p>\n<h1>aaa</h1>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "# Container blocks\n\n"
- "A "
- "[container block](#container-"
- "](#container-blocks)"
- " is a block that has other\n"
- "blocks as its contents.  "
- "There are two basic kinds of "
- " basic kinds of container blocks"
- "container blocks:\n[block quotes]"
- "[block quotes] and [list items]."
- "[list items].\n[Lists]"
- "[Lists] are meta-containers for "
- "[list items].\n\n"
- "We define the syntax for "
- " the syntax for container blocks"
- "container blocks recursively.  "
- "The general\n"
- "form of the definition is:\n\n"
- "> "
- "If X is a sequence of blocks, "
- " of blocks, then the result of\n"
- "\n> "
- "transforming X in such-and-such "
- " such-and-such a way is a "
- "such a way is a container of "
- " a container of type Y\n> "
- with these blocks as its content
- " as its content.\n\n"
- "So, we explain what counts as a "
- " counts as a block quote or list"
- " quote or list item by "
- "or list item by explaining\n"
- how these can be *generated*
- " from their contents. "
- "This should suffice\n"
- "to define the syntax, although "
- ", although it does not give a "
- "does not give a recipe for "
- "*parsing*\n"
- "these constructions.  "
- "(A recipe is provided below in "
- " below in the section entitled\n"
- "[A parsing strategy](#appendix-a"
- "](#appendix-a-parsing-strategy)"
- ".)\n\n"
- "## Block quotes\n\n"
- "A [block quote marker](@),\n"
- "optionally preceded by up to "
- " by up to three spaces of "
- "three spaces of indentation,\n"
- "consists of (a) the character "
- "`>`"
- " together with a following space"
- " following space of\n"
- "indentation, or (b) a single "
- "or (b) a single character `>`"
- "`>` not followed by a space of\n"
- "\nindentation.\n\n"
- "The following rules define ["
- "[block quotes]:\n\n"
- 1.  **Basic case.**
- "  If a string of lines *Ls*"
- "*Ls* constitute a sequence\n    "
- "\n    of blocks *Bs*"
- ", then the result of prepending "
- " of prepending a [block quote"
- "[block quote\n    marker]"
- " to the beginning of each line "
- " of each line in *Ls*\n    is a "
- "[block quote](#block-quotes)"
- " containing *Bs*.\n\n"
- 2.  **Laziness.**
- "  If a string of lines *Ls*"
- "*Ls* constitute a "
- "[block\n    quote](#block-quotes)"
- " with contents *Bs*"
- ", then the result of deleting"
- "\n    the initial ["
- "the initial [block quote marker]"
- "] from one or\n    "
- "more lines in which the next "
- " which the next character other "
- "character other than a space or "
- "than a space or tab after the\n"
- "\n    [block quote marker] is ["
- "] is [paragraph continuation"
- "\n    text]"
- "text] is a block quote with *Bs*"
- "*Bs* as its content.\n    "
- "[Paragraph continuation text](@)"
- " is text\n    "
- "that will be parsed as part of "
- " as part of the content of a "
- " content of a paragraph, but "
- " paragraph, but does\n    "
- "not occur at the beginning of "
- " beginning of the paragraph.\n\n"
- 3.  **Consecutiveness.**
- "  A document cannot contain two "
- "[block\n    quotes]"
- "] in a row unless there is a ["
- "[blank line] between them.\n\n"
- "Nothing else counts as a "
- "[block quote](#block-quotes).\n\n"
- "Here is a simple example:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> # Foo\n> bar\n> baz\n.\n"
- "> bar\n> baz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<h1>Foo</h1>\n"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>\n"
- "<p>bar\nbaz</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The space or tab after the `>`"
- "`>` characters can be omitted:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "># Foo\n>bar\n> baz\n.\n"
- ">bar\n> baz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<h1>Foo</h1>\n"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>\n"
- "<p>bar\nbaz</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The `>`"
- " characters can be preceded by "
- " be preceded by up to three "
- " by up to three spaces of "
- "three spaces of indentation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   > # Foo\n   > bar\n > baz\n.\n"
- " > baz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<h1>Foo</h1>\n"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>\n"
- "<p>bar\nbaz</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is "
- " indentation is too many:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    > # Foo\n    > bar\n    > baz\n"
- "    > baz\n.\n"
- ".\n<pre><code>&gt; # Foo\n"
- "&gt; bar\n&gt; baz\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The Laziness clause allows us to
- " allows us to omit the `>`"
- "`>` before\n["
- "\n[paragraph continuation text]:"
- "]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> # Foo\n> bar\nbaz\n.\n"
- "> bar\nbaz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<h1>Foo</h1>\n"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>\n"
- "<p>bar\nbaz</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A block quote can contain some "
- " contain some lazy and some non-"
- " and some non-lazy\n"
- "continuation lines:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> bar\nbaz\n> foo\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>bar\nbaz\n"
- "<p>bar\nbaz\nfoo</p>\n"
- "baz\nfoo</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Laziness only applies to lines "
- " to lines that would have been "
- would have been continuations of
- "\n"
- "paragraphs had they been "
- " had they been prepended with ["
- "[block quote markers].\n"
- "].\nFor example, the `> `"
- " cannot be omitted in the second"
- " in the second line of\n\n"
- "``` markdown\n> foo\n> ---\n```"
- "\n\nwithout changing the meaning:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\n---\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo</p>\n"
- "<p>foo</p>\n</blockquote>\n<hr />\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Similarly, if we omit the `> `"
- "`> ` in the second line of\n\n"
- "``` markdown\n> - foo\n> - bar\n```"
- "\n\n"
- "then the block quote ends after "
- " ends after the first line:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> - foo\n- bar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<ul>\n"
- "<ul>\n<li>foo</li>\n</ul>\n"
- "</ul>\n</blockquote>\n<ul>\n"
- "<ul>\n<li>bar</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "For the same reason, we can'"
- "'t omit the `> ` in front of\n"
- "subsequent lines of an indented "
- " of an indented or fenced code "
- " or fenced code block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">     foo\n    bar\n.\n"
- "    bar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<pre><code>foo\n"
- "<pre><code>foo\n</code></pre>\n"
- "</code></pre>\n</blockquote>\n"
- "</blockquote>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> ```\nfoo\n```\n.\n<blockquote>\n"
- "<pre><code></code></pre>\n"
- "</blockquote>\n<p>foo</p>\n"
- "<pre><code></code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that in the following case,"
- " following case, we have a [lazy"
- "[lazy\ncontinuation line]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\n    - bar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo\n- bar</p>\n"
- "- bar</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "To see why, note that in\n"
- "\n```markdown\n> foo\n>     - bar\n"
- "```\n\n"
- "the `- bar`"
- " is indented too far to start a "
- " far to start a list, and can't\n"
- "be an indented code block "
- " code block because indented "
- " indented code blocks cannot\n"
- "interrupt paragraphs, so it is ["
- "[paragraph continuation text].\n\n"
- "A block quote can be empty:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">\n.\n<blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">\n>  \n> \n.\n<blockquote>\n"
- ".\n<blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A block quote can have initial "
- " have initial or final blank "
- " or final blank lines:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">\n> foo\n>  \n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo</p>\n"
- "<p>foo</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A blank line always separates "
- " separates block quotes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\n\n> bar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo</p>\n"
- "<p>foo</p>\n</blockquote>\n"
- "</blockquote>\n<blockquote>\n"
- "<blockquote>\n<p>bar</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "(Most current Markdown "
- " Markdown implementations, "
- ", including John Gruber's\n"
- "'s\noriginal `Markdown.pl`"
- ", will parse this example as a "
- " example as a single block quote"
- "\n"
- "with two paragraphs.  "
- But it seems better to allow the
- " to allow the author to decide\n"
- "whether two block quotes or one "
- " quotes or one are wanted.)\n\n"
- Consecutiveness means that if we
- means that if we put these block
- " put these block quotes together"
- " quotes together,\n"
- "we get a single block quote:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\n> bar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo\nbar</p>\n"
- "<p>foo\nbar</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "To get a block quote with two "
- " quote with two paragraphs, use:"
- "paragraphs, use:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> foo\n>\n> bar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>foo</p>\n"
- "<p>foo</p>\n<p>bar</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Block quotes can interrupt "
- " can interrupt paragraphs:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\n> bar\n.\n<p>foo</p>\n"
- ".\n<p>foo</p>\n<blockquote>\n"
- "<blockquote>\n<p>bar</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In general, blank lines are not "
- " lines are not needed before or "
- " before or after block\nquotes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> aaa\n***\n> bbb\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>aaa</p>\n"
- "<p>aaa</p>\n</blockquote>\n<hr />\n"
- "<hr />\n<blockquote>\n<p>bbb</p>\n"
- "<p>bbb</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, because of laziness, a "
- " of laziness, a blank line is "
- "a blank line is needed between\n"
- "a block quote and a following "
- "and a following paragraph:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> bar\nbaz\n.\n<blockquote>\n<p>bar\n"
- "<p>bar\nbaz</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> bar\n\nbaz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>bar</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "</blockquote>\n<p>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> bar\n>\nbaz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<p>bar</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "</blockquote>\n<p>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "It is a consequence of the "
- " of the Laziness rule that any "
- " rule that any number\n"
- "of initial `>`"
- "s may be omitted on a "
- "be omitted on a continuation "
- " a continuation line of a\n"
- "nested block quote:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> > > foo\nbar\n.\n<blockquote>\n"
- ".\n<blockquote>\n<blockquote>\n"
- "<blockquote>\n<blockquote>\n"
- "<blockquote>\n<p>foo\nbar</p>\n"
- "<p>foo\nbar</p>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">>> foo\n> bar\n>>baz\n.\n"
- "> bar\n>>baz\n.\n<blockquote>\n"
- ".\n<blockquote>\n<blockquote>\n"
- "<blockquote>\n<blockquote>\n"
- "<blockquote>\n<p>foo\nbar\nbaz</p>\n"
- "bar\nbaz</p>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "When including an indented code "
- " indented code block in a block "
- " in a block quote,\n"
- "remember that the ["
- "[block quote marker] includes\n"
- "] includes\nboth the `>`"
- " and a following space of "
- " space of indentation.  So "
- "*five spaces* are needed\n"
- " are needed\nafter the `>`:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">     code\n\n>    not code\n.\n"
- ">    not code\n.\n<blockquote>\n"
- ".\n<blockquote>\n<pre><code>code\n"
- "<pre><code>code\n</code></pre>\n"
- "</code></pre>\n</blockquote>\n"
- "</blockquote>\n<blockquote>\n"
- "<blockquote>\n<p>not code</p>\n"
- "<p>not code</p>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "## List items\n\n"
- "A [list marker](@) is a\n["
- " is a\n[bullet list marker]"
- "] or an [ordered list marker].\n\n"
- "A [bullet list marker](@)\nis a "
- "\nis a `-`, `+`, or `*`"
- "`-`, `+`, or `*` character.\n\n"
- "An [ordered list marker](@)\n"
- "\nis a sequence of 1--"
- "--9 arabic digits (`0-9`"
- "`0-9`), followed by either a\n`.`"
- "\n`.` character or a `)`"
- " character.  "
- "(The reason for the length\n"
- "limit is that with 10 digits we "
- " 10 digits we start seeing "
- "we start seeing integer "
- " seeing integer overflows\n"
- "in some browsers.)\n\n"
- "The following rules define ["
- "[list items]:\n\n"
- 1.  **Basic case.**
- "  If a sequence of lines *Ls*"
- "*Ls* constitute a sequence of"
- "\n    blocks *Bs*"
- " starting with a character other"
- " character other than a space or"
- " than a space or tab, and *M* is"
- "*M* is\n    "
- " is\n    a list marker of width "
- "*W* followed by 1 ≤ *N*"
- "*N* ≤ 4 spaces of indentation,"
- "\n    "
- "then the result of prepending "
- "*M*"
- " and the following spaces to the"
- " spaces to the first line\n    "
- of *Ls*
- ", and indenting subsequent lines"
- "subsequent lines of *Ls* by "
- "*Ls* by *W + N* spaces, is a"
- " spaces, is a\n    "
- "\n    list item with *Bs*"
- " as its contents.  "
- "The type of the list item\n    "
- "(bullet or ordered) is "
- " or ordered) is determined by "
- " determined by the type of its "
- "the type of its list marker.\n"
- "\n    "
- "If the list item is ordered, "
- " is ordered, then it is also "
- then it is also assigned a start
- "\n    "
- "number, based on the ordered "
- " on the ordered list marker.\n\n"
- "\n    Exceptions:\n"
- "\n    1. "
- "When the first list item in a ["
- "[list] interrupts\n       "
- "\n       a paragraph---"
- "that is, when it starts on a "
- " it starts on a line that would\n"
- "\n       otherwise count as ["
- "[paragraph continuation text]---"
- "]---then (a)\n       the lines "
- the lines *Ls*
- " must not begin with a blank "
- " with a blank line, and (b) if\n"
- "\n       "
- "the list item is ordered, the "
- "is ordered, the start number "
- " start number must be 1.\n    "
- "2. If any line is a ["
- "[thematic break][thematic breaks"
- "[thematic breaks] then\n       "
- "that line is not a list item.\n\n"
- "For example, let *Ls*"
- "*Ls* be the lines\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "A paragraph\nwith two lines.\n\n"
- "\n    indented code\n\n"
- "\n> A block quote.\n.\n"
- ".\n<p>A paragraph\n"
- "with two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "And let *M* be the marker `1.`"
- "`1.`, and *N*"
- "*N* = 2.  Then rule #1 says\n"
- that the following is an ordered
- " is an ordered list item with "
- " list item with start number 1,\n"
- "and the same contents as *Ls*:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1.  A paragraph\n"
- "A paragraph\n    with two lines.\n"
- "\n        indented code\n\n"
- "\n    > A block quote.\n.\n<ol>\n"
- ".\n<ol>\n<li>\n<p>A paragraph\n"
- "with two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The most important thing to "
- " thing to notice is that the "
- " is that the position of\n"
- "the text after the list marker "
- "the list marker determines how "
- " determines how much indentation"
- "\n"
- "is needed in subsequent blocks "
- " blocks in the list item.  "
- "If the list\n"
- "marker takes up two spaces of "
- " two spaces of indentation, and "
- ", and there are three spaces "
- " three spaces between\n"
- "the list marker and the next "
- " and the next character other "
- "character other than a space or "
- "than a space or tab, then blocks"
- "\n"
- "must be indented five spaces in "
- " five spaces in order to fall "
- " order to fall under the list\n"
- "item.\n\n"
- "Here are some examples showing "
- " showing how far content must be"
- " content must be indented to be\n"
- "put under the list item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- one\n\n two\n.\n<ul>\n<li>one</li>\n"
- "<li>one</li>\n</ul>\n<p>two</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- one\n\n  two\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>one</p>\n"
- "<li>\n<p>one</p>\n<p>two</p>\n"
- "<p>two</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " -    one\n\n     two\n.\n<ul>\n"
- "     two\n.\n<ul>\n<li>one</li>\n"
- "<li>one</li>\n</ul>\n"
- "</ul>\n<pre><code> two\n"
- "<pre><code> two\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " -    one\n\n      two\n.\n<ul>\n"
- ".\n<ul>\n<li>\n<p>one</p>\n"
- "<li>\n<p>one</p>\n<p>two</p>\n"
- "<p>two</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "It is tempting to think of this "
- " think of this in terms of "
- " in terms of columns:  the "
- " columns:  the continuation\n"
- blocks must be indented at least
- " at least to the column of the "
- " column of the first character "
- "first character other than\n"
- "a space or tab after the list "
- " after the list marker.  "
- "However, that is not quite right"
- " not quite right.\n"
- "The spaces of indentation after "
- " after the list marker determine"
- "marker determine how much "
- " how much relative\n"
- "indentation is needed.  "
- "Which column this indentation "
- " indentation reaches will depend"
- " will depend on\n"
- how the list item is embedded in
- " is embedded in other "
- " in other constructions, as "
- ", as shown by\nthis example:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   > > 1.  one\n>>\n>>     two\n.\n"
- ">>\n>>     two\n.\n<blockquote>\n"
- ".\n<blockquote>\n<blockquote>\n"
- "<blockquote>\n<ol>\n<li>\n"
- "<ol>\n<li>\n<p>one</p>\n<p>two</p>\n"
- "<p>two</p>\n</li>\n</ol>\n"
- "</li>\n</ol>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here `two`"
- " occurs in the same column as "
- " same column as the list marker "
- "`1.`,\n"
- but is actually contained in the
- "contained in the list item, "
- " the list item, because there is"
- "\n"
- sufficient indentation after the
- " after the last containing "
- "last containing blockquote "
- " blockquote marker.\n\n"
- "The converse is also possible.  "
- "In the following example, the "
- " example, the word `two`\n"
- "occurs far to the right of the "
- " right of the initial text of "
- "initial text of the list item, "
- "`one`, but\n"
- it is not considered part of the
- " part of the list item, because "
- " item, because it is not "
- " it is not indented\n"
- "far enough past the blockquote "
- " the blockquote marker:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- ">>- one\n>>\n  >  > two\n.\n"
- ">>\n  >  > two\n.\n<blockquote>\n"
- ".\n<blockquote>\n<blockquote>\n"
- "<blockquote>\n<ul>\n<li>one</li>\n"
- "<li>one</li>\n</ul>\n<p>two</p>\n"
- "<p>two</p>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that at least one space or "
- " one space or tab is needed "
- " tab is needed between the list "
- " the list marker and\n"
- "any following content, so these "
- ", so these are not list items:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-one\n\n2.two\n.\n<p>-one</p>\n"
- ".\n<p>-one</p>\n<p>2.two</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A list item may contain blocks "
- " contain blocks that are "
- "blocks that are separated by "
- " separated by more than\n"
- "one blank line.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n\n\n  bar\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<p>bar</p>\n"
- "<p>bar</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- A list item may contain any kind
- "contain any kind of block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1.  foo\n\n    ```\n    bar\n"
- "    ```\n    bar\n    ```\n\n"
- "    ```\n\n    baz\n\n    > bam\n.\n"
- "\n    > bam\n.\n<ol>\n<li>\n"
- ".\n<ol>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "</code></pre>\n<p>baz</p>\n"
- "<p>baz</p>\n<blockquote>\n"
- "<blockquote>\n<p>bam</p>\n"
- "<p>bam</p>\n</blockquote>\n</li>\n"
- "</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A list item that contains an "
- " contains an indented code block"
- " code block will preserve\n"
- "empty lines within the code "
- "within the code block verbatim.\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- Foo\n\n      bar\n\n\n      baz\n.\n"
- "\n\n      baz\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>Foo</p>\n"
- "<li>\n<p>Foo</p>\n<pre><code>bar\n\n"
- "<pre><code>bar\n\n\nbaz\n"
- "\n\nbaz\n</code></pre>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Note that ordered list start "
- " list start numbers must be nine"
- " must be nine digits or less:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "123456789. ok\n.\n"
- ".\n<ol start=\"123456789\">\n"
- "<li>ok</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1234567890. not ok\n.\n"
- ".\n<p>1234567890. not ok</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- A start number may begin with 0s
- " begin with 0s:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "0. ok\n.\n<ol start=\"0\">\n"
- "<ol start=\"0\">\n<li>ok</li>\n"
- "<li>ok</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "003. ok\n.\n<ol start=\"3\">\n"
- "<ol start=\"3\">\n<li>ok</li>\n"
- "<li>ok</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A start number may not be "
- " may not be negative:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-1. not ok\n.\n<p>-1. not ok</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "2.  "
- "**Item starting with indented "
- " with indented code.**"
- "  If a sequence of lines *Ls*"
- "*Ls*\n    "
- "constitute a sequence of blocks "
- "*Bs*"
- " starting with an indented code"
- "\n    block, and *M*"
- "*M* is a list marker of width "
- "*W* followed by\n    "
- "one space of indentation, then "
- ", then the result of prepending "
- "*M* and the\n    "
- "following space to the first "
- " to the first line of *Ls*"
- ", and indenting subsequent lines"
- "\n    of *Ls* by *W + 1*"
- " spaces, is a list item with "
- "*Bs* as its contents.\n    "
- "If a line is empty, then it need"
- ", then it need not be indented."
- "not be indented.  "
- "The type of the\n    "
- list item (bullet or ordered) is
- " or ordered) is determined by "
- " determined by the type of its "
- "the type of its list\n    "
- "marker.  "
- "If the list item is ordered, "
- " is ordered, then it is also "
- "then it is also assigned a\n    "
- "start number, based on the "
- ", based on the ordered list "
- " ordered list marker.\n\n"
- An indented code block will have
- " block will have to be preceded "
- " to be preceded by four spaces "
- " by four spaces of indentation\n"
- "beyond the edge of the region "
- " of the region where text will "
- "where text will be included in "
- " be included in the list item.\n"
- "In the following case that is 6 "
- " case that is 6 spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n\n      bar\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "</code></pre>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- And in this case it is 11 spaces
- " it is 11 spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  10.  foo\n\n           bar\n.\n"
- ".\n<ol start=\"10\">\n<li>\n"
- "<li>\n<p>foo</p>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "</code></pre>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- If the *first*
- " block in the list item is an "
- "list item is an indented code "
- " indented code block,\n"
- "then by rule #2, the contents "
- "2, the contents must be preceded"
- must be preceded by *one*
- "*one* space of indentation\n"
- "\nafter the list marker:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    indented code\n\nparagraph\n\n"
- "\nparagraph\n\n    more code\n.\n"
- ".\n<pre><code>indented code\n"
- "</code></pre>\n<p>paragraph</p>\n"
- "<pre><code>more code\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1.     indented code\n\n"
- "\n   paragraph\n\n       more code\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<pre><code>indented code\n"
- "</code></pre>\n<p>paragraph</p>\n"
- "<pre><code>more code\n"
- "</code></pre>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Note that an additional space of
- " space of indentation is "
- " indentation is interpreted as "
- " interpreted as space\n"
- "inside the code block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1.      indented code\n\n"
- "\n   paragraph\n\n       more code\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<pre><code> indented code\n"
- "</code></pre>\n<p>paragraph</p>\n"
- "<pre><code>more code\n"
- "</code></pre>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that rules #1 and #2 only "
- " #1 and #2 only apply to two "
- " apply to two cases:  (a) cases\n"
- "in which the lines to be "
- "the lines to be included in a "
- " included in a list item begin "
- "list item begin with a\n"
- "character other than a space or "
- "than a space or tab, and (b) "
- "or tab, and (b) cases in which\n"
- they begin with an indented code
- "\n"
- "block.  "
- "In a case like the following, "
- " the following, where the first "
- "where the first block begins "
- " block begins with\n"
- "three spaces of indentation, the"
- "indentation, the rules do not "
- " rules do not allow us to form a"
- " us to form a list item by\n"
- "indenting the whole thing and "
- "whole thing and prepending a "
- " prepending a list marker:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   foo\n\nbar\n.\n<p>foo</p>\n"
- ".\n<p>foo</p>\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-    foo\n\n  bar\n.\n<ul>\n"
- "\n  bar\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n</ul>\n<p>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not a significant "
- " a significant restriction, "
- " restriction, because when a "
- " because when a block is "
- "when a block is preceded by up "
- " preceded by up to\n"
- "three spaces of indentation, the"
- "indentation, the indentation can"
- " indentation can always be "
- " can always be removed without\n"
- "a change in interpretation, "
- "interpretation, allowing rule #1"
- "allowing rule #1 to be applied."
- "1 to be applied.  So, in\n"
- "the above case:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-  foo\n\n   bar\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<p>bar</p>\n"
- "<p>bar</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "3.  "
- "**Item starting with a blank "
- " with a blank line.**"
- "  If a sequence of lines *Ls*"
- "*Ls*\n    starting with a single "
- "[blank line]"
- "] constitute a (possibly empty)"
- "\n    sequence of blocks *Bs*"
- "*Bs*, and *M*"
- "*M* is a list marker of width "
- "*W*,\n    "
- "then the result of prepending "
- "*M* to the first line of *Ls*"
- "*Ls*, and\n    "
- "preceding subsequent lines of "
- "*Ls* by *W + 1*"
- " spaces of indentation, is a"
- "\n    list item with *Bs*"
- "*Bs* as its contents.\n    "
- "If a line is empty, then it need"
- ", then it need not be indented."
- "not be indented.  "
- "The type of the\n    "
- list item (bullet or ordered) is
- " or ordered) is determined by "
- " determined by the type of its "
- "the type of its list\n    "
- "marker.  "
- "If the list item is ordered, "
- " is ordered, then it is also "
- "then it is also assigned a\n    "
- "start number, based on the "
- ", based on the ordered list "
- " ordered list marker.\n\n"
- "Here are some list items that "
- "list items that start with a "
- " start with a blank line but are"
- " line but are not empty:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-\n  foo\n-\n  ```\n  bar\n  ```\n-\n"
- "  bar\n  ```\n-\n      baz\n.\n<ul>\n"
- ".\n<ul>\n<li>foo</li>\n<li>\n"
- "<li>\n<pre><code>bar\n"
- "<pre><code>bar\n</code></pre>\n"
- "</code></pre>\n</li>\n<li>\n"
- "</li>\n<li>\n<pre><code>baz\n"
- "<pre><code>baz\n</code></pre>\n"
- "</code></pre>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- When the list item starts with a
- " starts with a blank line, the "
- "blank line, the number of spaces"
- "\nfollowing the list marker doesn"
- "'"
- "t change the required "
- " the required indentation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-   \n  foo\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A list item can begin with at "
- " begin with at most one blank "
- " most one blank line.\n"
- "In the following example, `foo`"
- "`foo` is not part of the list\n"
- "\nitem:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-\n\n  foo\n.\n<ul>\n<li></li>\n</ul>\n"
- "<li></li>\n</ul>\n<p>foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here is an empty bullet list "
- " bullet list item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n-\n- bar\n.\n<ul>\n"
- "-\n- bar\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n<li></li>\n"
- "<li></li>\n<li>bar</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- It does not matter whether there
- " whether there are spaces or "
- " are spaces or tabs following "
- " tabs following the [list marker"
- "[list marker]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n-   \n- bar\n.\n<ul>\n"
- "- bar\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n<li></li>\n"
- "<li></li>\n<li>bar</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here is an empty ordered list "
- " ordered list item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1. foo\n2.\n3. bar\n.\n<ol>\n"
- "3. bar\n.\n<ol>\n<li>foo</li>\n"
- "<li>foo</li>\n<li></li>\n"
- "<li></li>\n<li>bar</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A list may start or end with an "
- " or end with an empty list item:"
- "empty list item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*\n.\n<ul>\n<li></li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "However, an empty list item "
- empty list item cannot interrupt
- "cannot interrupt a paragraph:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\n*\n\nfoo\n1.\n.\n<p>foo\n*</p>\n"
- ".\n<p>foo\n*</p>\n<p>foo\n1.</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- 4.  **Indentation.**
- "  If a sequence of lines *Ls*"
- "*Ls* constitutes a list item"
- "\n    "
- "according to rule #1, #2, or #3,"
- " #1, #2, or #3, then the result "
- "then the result of preceding "
- " of preceding each line\n    of "
- of *Ls*
- " by up to three spaces of "
- three spaces of indentation (the
- "indentation (the same for each "
- " same for each line) also\n    "
- constitutes a list item with the
- " item with the same contents and"
- " contents and attributes.  "
- "If a line is\n    "
- "empty, then it need not be "
- " it need not be indented.\n\n"
- "Indented one space:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- " 1.  A paragraph\n"
- "     with two lines.\n\n"
- "\n         indented code\n\n"
- "\n     > A block quote.\n.\n<ol>\n"
- ".\n<ol>\n<li>\n<p>A paragraph\n"
- "with two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Indented two spaces:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  1.  A paragraph\n"
- "      with two lines.\n\n"
- "\n          indented code\n\n"
- "\n      > A block quote.\n.\n<ol>\n"
- ".\n<ol>\n<li>\n<p>A paragraph\n"
- "with two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Indented three spaces:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "   1.  A paragraph\n"
- "       with two lines.\n\n"
- "\n           indented code\n\n"
- "\n       > A block quote.\n.\n<ol>\n"
- ".\n<ol>\n<li>\n<p>A paragraph\n"
- "with two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Four spaces indent gives a code "
- " gives a code block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "    1.  A paragraph\n"
- "        with two lines.\n\n"
- "\n            indented code\n\n"
- "\n        > A block quote.\n.\n"
- ".\n<pre><code>1.  A paragraph\n"
- "A paragraph\n    with two lines.\n"
- "\n        indented code\n\n"
- "\n    &gt; A block quote.\n"
- "</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- 5.  **Laziness.**
- "  If a string of lines *Ls*"
- "*Ls* constitute a "
- "[list\n    item](#list-items)"
- " with contents *Bs*"
- ", then the result of deleting"
- "\n    "
- "some or all of the indentation "
- the indentation from one or more
- "from one or more lines in which "
- " lines in which the\n    "
- "next character other than a "
- " other than a space or tab after"
- " or tab after the indentation is"
- "\n    ["
- "[paragraph continuation text]"
- "] is a\n    "
- list item with the same contents
- " same contents and attributes.  "
- "The unindented\n    "
- "lines are called\n    "
- "\n    [lazy continuation line](@)"
- "s.\n\n"
- "Here is an example with ["
- "[lazy continuation lines]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  1.  A paragraph\n"
- "A paragraph\nwith two lines.\n\n"
- "\n          indented code\n\n"
- "\n      > A block quote.\n.\n<ol>\n"
- ".\n<ol>\n<li>\n<p>A paragraph\n"
- "with two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Indentation can be partially "
- " be partially deleted:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "  1.  A paragraph\n"
- "A paragraph\n    with two lines.\n"
- ".\n<ol>\n<li>A paragraph\n"
- "with two lines.</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- These examples show how laziness
- " how laziness can work in nested"
- " work in nested structures:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> 1. > Blockquote\n"
- "> Blockquote\ncontinued here.\n.\n"
- ".\n<blockquote>\n<ol>\n<li>\n"
- "<ol>\n<li>\n<blockquote>\n"
- "<blockquote>\n<p>Blockquote\n"
- "continued here.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "</li>\n</ol>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "> 1. > Blockquote\n"
- "> Blockquote\n> continued here.\n"
- ".\n<blockquote>\n<ol>\n<li>\n"
- "<ol>\n<li>\n<blockquote>\n"
- "<blockquote>\n<p>Blockquote\n"
- "continued here.</p>\n"
- "</blockquote>\n</li>\n</ol>\n"
- "</li>\n</ol>\n</blockquote>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "6.  **That's all.**"
- " Nothing that is not counted as "
- " not counted as a list item by "
- " a list item by rules\n    #1--"
- "#1--5 counts as a "
- "[list item](#list-items).\n\n"
- "The rules for sublists follow "
- sublists follow from the general
- "from the general rules\n[above]["
- "[above][List items]"
- ".  "
- "A sublist must be indented the "
- "be indented the same number\n"
- "of spaces of indentation a "
- " indentation a paragraph would "
- "paragraph would need to be in "
- " need to be in order to be "
- " in order to be included\n"
- "in the list item.\n\n"
- "So, in this case we need two "
- " we need two spaces indent:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n  - bar\n    - baz\n"
- "    - baz\n      - boo\n.\n<ul>\n"
- ".\n<ul>\n<li>foo\n<ul>\n<li>bar\n"
- "<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n"
- "<li>baz\n<ul>\n<li>boo</li>\n</ul>\n"
- "</ul>\n</li>\n</ul>\n</li>\n</ul>\n"
- "</li>\n</ul>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "One is not enough:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n - bar\n  - baz\n   - boo\n.\n"
- "   - boo\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n<li>bar</li>\n"
- "<li>bar</li>\n<li>baz</li>\n"
- "<li>baz</li>\n<li>boo</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here we need four, because the "
- ", because the list marker is "
- " list marker is wider:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "10) foo\n    - bar\n.\n"
- "    - bar\n.\n<ol start=\"10\">\n"
- "<ol start=\"10\">\n<li>foo\n<ul>\n"
- "<li>foo\n<ul>\n<li>bar</li>\n</ul>\n"
- "</ul>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Three is not enough:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "10) foo\n   - bar\n.\n"
- "   - bar\n.\n<ol start=\"10\">\n"
- "<ol start=\"10\">\n<li>foo</li>\n"
- "<li>foo</li>\n</ol>\n<ul>\n"
- "</ol>\n<ul>\n<li>bar</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- A list may be the first block in
- " first block in a list item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- - foo\n.\n<ul>\n<li>\n<ul>\n"
- "<ul>\n<li>\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n</ul>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1. - 2. foo\n.\n<ol>\n<li>\n<ul>\n"
- "<ol>\n<li>\n<ul>\n<li>\n"
- "<li>\n<ul>\n<li>\n<ol start=\"2\">\n"
- "<ol start=\"2\">\n<li>foo</li>\n"
- "<li>foo</li>\n</ol>\n</li>\n</ul>\n"
- "</li>\n</ul>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A list item can contain a "
- " can contain a heading:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- # Foo\n- Bar\n  ---\n  baz\n.\n"
- "  ---\n  baz\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<h1>Foo</h1>\n</li>\n"
- "</li>\n<li>\n<h2>Bar</h2>\n"
- "<h2>Bar</h2>\nbaz</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "### Motivation\n\n"
- "John Gruber'"
- "s Markdown spec says the "
- " spec says the following about "
- "following about list items:\n\n"
- "1. \""
- "List markers typically start at "
- " start at the left margin, but "
- " margin, but may be indented\n   "
- "by up to three spaces. "
- List markers must be followed by
- " be followed by one or more\n   "
- "spaces or a tab.\"\n\n"
- "2. \""
- "To make lists look nice, you can"
- " nice, you can wrap items with "
- wrap items with hanging indents
- "....\n   But if you don'"
- "'t want to, you don't have to.\""
- "'t have to.\"\n\n"
- "3. \""
- "List items may consist of "
- " may consist of multiple "
- " of multiple paragraphs. "
- "Each subsequent\n   "
- paragraph in a list item must be
- " item must be indented by either"
- " by either 4 spaces or one\n   "
- "tab.\"\n\n"
- "4. \""
- "It looks nice if you indent "
- " if you indent every line of the"
- " line of the subsequent "
- " the subsequent paragraphs,\n   "
- "but here again, Markdown will "
- ", Markdown will allow you to be "
- "allow you to be lazy.\"\n\n"
- "5. \""
- "To put a blockquote within a "
- " within a list item, the "
- " list item, the blockquote's `>`"
- "'s `>`\n   "
- "delimiters need to be indented.\""
- "\"\n\n"
- "6. \""
- "To put a code block within a "
- " block within a list item, the "
- " list item, the code block needs"
- "code block needs to be\n   "
- indented twice — 8 spaces or two
- " 8 spaces or two tabs.\"\n\n"
- "These rules specify that a "
- " specify that a paragraph under "
- paragraph under a list item must
- "a list item must be indented\n"
- "four spaces (presumably, from "
- ", from the left margin, rather "
- " margin, rather than the start "
- " than the start of\n"
- "the list marker, but this is not"
- " but this is not said), and that"
- " said), and that code under a "
- " code under a list item\n"
- "must be indented eight spaces "
- " eight spaces instead of the "
- " instead of the usual four.  "
- "They also say\n"
- "that a block quote must be "
- " quote must be indented, but not"
- ", but not by how much; however, "
- " much; however, the\n"
- "example given has four spaces "
- "has four spaces indentation.  "
- "Although nothing is said\n"
- about other kinds of block-level
- " of block-level content, it is "
- " content, it is certainly "
- "it is certainly reasonable to\n"
- infer that *all*
- " block elements under a list "
- " under a list item, including "
- "item, including other\n"
- "lists, must be indented four "
- " indented four spaces.  "
- "This principle has been called "
- "has been called the\n"
- "*four-space rule*.\n\n"
- The four-space rule is clear and
- " is clear and principled, and if"
- ", and if the reference\n"
- "implementation `Markdown.pl`"
- " had followed it, it probably "
- "it, it probably would have\n"
- "become the standard.  However, "
- "`Markdown.pl`"
- " allowed paragraphs and\n"
- "sublists to start with only two "
- " with only two spaces "
- "only two spaces indentation, at "
- "indentation, at least on the\n"
- "outer level.  "
- "Worse, its behavior was "
- " behavior was inconsistent: a "
- "inconsistent: a sublist of an\n"
- "outer-level list needed two "
- "list needed two spaces "
- " two spaces indentation, but a "
- ", but a sublist of this\n"
- "sublist needed three spaces.  "
- "It is not surprising, then, that"
- ", then, that different\n"
- implementations of Markdown have
- "of Markdown have developed very "
- " developed very different rules "
- "different rules for\n"
- "determining what comes under a "
- " comes under a list item.  "
- "(Pandoc and python-Markdown,\n"
- "for example, stuck with Gruber'"
- "s syntax description and the "
- " and the four-space\n"
- "rule, while discount, redcarpet,"
- ", redcarpet, marked, PHP "
- ", marked, PHP Markdown, and "
- " Markdown, and others\nfollowed "
- "followed `Markdown.pl`'"
- "'s behavior more closely.)\n\n"
- "Unfortunately, given the "
- ", given the divergences between "
- " between implementations, there\n"
- "is no way to give a spec for "
- "give a spec for list items that "
- "list items that will be "
- " that will be guaranteed not\n"
- to break any existing documents.
- " documents.  "
- "However, the spec given here "
- "spec given here should\n"
- correctly handle lists formatted
- " lists formatted with either the"
- " with either the four-space rule"
- " four-space rule or\n"
- "the more forgiving `Markdown.pl`"
- " behavior, provided they are "
- " they are laid out\n"
- "in a way that is natural for a "
- " natural for a human to read.\n\n"
- "The strategy here is to let the "
- " is to let the width and "
- " the width and indentation of "
- " indentation of the list marker\n"
- "determine the indentation "
- "the indentation necessary for "
- " necessary for blocks to fall "
- " blocks to fall under the list\n"
- "item, rather than having a fixed"
- " having a fixed and arbitrary "
- " and arbitrary number.  "
- "The writer can\n"
- "think of the body of the list "
- " of the list item as a unit "
- " item as a unit which gets "
- "unit which gets indented to the\n"
- "right enough to fit the list "
- "to fit the list marker (and any "
- "marker (and any indentation on "
- " indentation on the list\n"
- "marker).  "
- "(The laziness rule, #5, then "
- " rule, #5, then allows "
- "#5, then allows continuation "
- " continuation lines to be\n"
- "unindented if needed.)\n\n"
- "This rule is superior, we claim,"
- ", we claim, to any rule "
- ", to any rule requiring a fixed "
- " a fixed level of\n"
- "indentation from the margin.  "
- The four-space rule is clear but
- "\n"
- "unnatural. "
- "It is quite unintuitive that\n\n"
- "``` markdown\n"
- "- foo\n\n  bar\n\n  - baz\n```\n\n"
- "should be parsed as two lists "
- " as two lists with an "
- " lists with an intervening "
- " an intervening paragraph,\n\n"
- "``` html\n"
- "<ul>\n<li>foo</li>\n</ul>\n"
- "</ul>\n<p>bar</p>\n<ul>\n"
- "<p>bar</p>\n<ul>\n<li>baz</li>\n"
- "<li>baz</li>\n</ul>\n```\n\n"
- "as the four-space rule demands, "
- " rule demands, rather than a "
- ", rather than a single list,\n\n"
- "``` html\n"
- "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n"
- "<p>bar</p>\n<ul>\n<li>baz</li>\n"
- "<li>baz</li>\n</ul>\n</li>\n</ul>\n"
- "</li>\n</ul>\n```\n\n"
- "The choice of four spaces is "
- " four spaces is arbitrary.  "
- "It can be learned, but it is\n"
- "not likely to be guessed, and it"
- " guessed, and it trips up "
- "and it trips up beginners "
- " up beginners regularly.\n\n"
- Would it help to adopt a two-
- " to adopt a two-space rule?  "
- "The problem is that such\n"
- "a rule, together with the rule "
- " with the rule allowing up to "
- " allowing up to three spaces of "
- "three spaces of indentation for\n"
- "the initial list marker, allows "
- " marker, allows text that is "
- " text that is indented "
- "*less than* the\n"
- "original list marker to be "
- " marker to be included in the "
- "included in the list item. "
- "For example,\n`Markdown.pl`"
- "`Markdown.pl` parses\n\n"
- "``` markdown\n   - one\n\n  two\n```"
- "\n\nas a single list item, with "
- "`two` a continuation paragraph:"
- "\n\n``` html\n"
- "<ul>\n<li>\n<p>one</p>\n<p>two</p>\n"
- "<p>two</p>\n</li>\n</ul>\n```\n\n"
- "and similarly\n"
- "\n``` markdown\n"
- ">   - one\n>\n>  two\n```\n\nas\n"
- "\n``` html\n"
- "<blockquote>\n<ul>\n<li>\n"
- "<ul>\n<li>\n<p>one</p>\n<p>two</p>\n"
- "<p>two</p>\n</li>\n</ul>\n"
- "</li>\n</ul>\n</blockquote>\n```\n\n"
- "This is extremely unintuitive.\n"
- "\n"
- "Rather than requiring a fixed "
- " a fixed indent from the margin,"
- "from the margin, we could "
- ", we could require\n"
- "a fixed indent (say, two spaces,"
- "say, two spaces, or even one "
- ", or even one space) from the "
- space) from the list marker (
- " list marker (which\n"
- "may itself be indented).  "
- "This proposal would remove the "
- " remove the last anomaly\n"
- "discussed.  "
- "Unlike the spec presented above,"
- "presented above, it would count "
- " it would count the following\n"
- "as a list item with a "
- " item with a subparagraph, even "
- ", even though the paragraph "
- "`bar`\n"
- "is not indented as far as the "
- " as far as the first paragraph "
- "`foo`:\n\n"
- "``` markdown\n 10. foo\n\n   bar  \n"
- "```\n\n"
- "Arguably this text does read "
- " text does read like a list item"
- "like a list item with `bar`"
- "`bar` as a subparagraph,\n"
- "which may count in favor of the "
- "in favor of the proposal.  "
- "However, on this proposal "
- " this proposal indented\n"
- "code would have to be indented "
- " to be indented six spaces after"
- six spaces after the list marker
- " the list marker.  And this\n"
- "would break a lot of existing "
- "lot of existing Markdown, which "
- "Markdown, which has the pattern:"
- "has the pattern:\n\n"
- "``` markdown\n"
- "1.  foo\n\n        indented code\n"
- "```\n\n"
- where the code is indented eight
- " indented eight spaces.  "
- "The spec above, by contrast, "
- ", by contrast, will\n"
- "parse this text as expected, "
- " as expected, since the code "
- " since the code block'"
- "'s indentation is measured\n"
- "\nfrom the beginning of `foo`.\n\n"
- "The one case that needs special "
- " needs special treatment is a "
- " treatment is a list item that "
- "*starts*\n"
- "with indented code.  "
- How much indentation is required
- " is required in that case, since"
- "\nwe don't have a \""
- "'t have a \"first paragraph\""
- " to measure from?  "
- "Rule #2 simply stipulates\n"
- "that in such cases, we require "
- ", we require one space "
- " one space indentation from the "
- " from the list marker\n"
- (and then the normal four spaces
- " four spaces for the indented "
- " the indented code).  "
- "This will match the\n"
- "four-space rule in cases where "
- " in cases where the list marker "
- the list marker plus its initial
- "plus its initial indentation\n"
- takes four spaces (a common case
- " (a common case), but diverge in"
- ", but diverge in other cases.\n\n"
- "## Lists\n\n"
- "A [list](@)"
- " is a sequence of one or more\n"
- "\nlist items [of the same type]"
- "].  The list items\n"
- "may be separated by any number "
- " by any number of blank lines.\n\n"
- "Two list items are "
- "[of the same type](@)\n"
- "\nif they begin with a ["
- "[list marker] of the same type.\n"
- "\nTwo list markers are of the\n"
- same type if (a) they are bullet
- " they are bullet list markers "
- " list markers using the same "
- " using the same character\n(`-`, "
- "(`-`, `+`, or `*`"
- ") or (b) they are ordered list "
- " ordered list numbers with the "
- " with the same\n"
- "delimiter (either `.` or `)`).\n\n"
- "A list is an [ordered list](@)\n"
- "if its constituent list items "
- " list items begin with\n["
- "[ordered list markers], and a\n"
- "], and a\n[bullet list](@)"
- " if its constituent list\n"
- "\nitems begin with ["
- "[bullet list markers].\n\n"
- "The [start number](@)\nof an ["
- "\nof an [ordered list]"
- " is determined by the list "
- " by the list number of\n"
- "its initial list item.  "
- "The numbers of subsequent list "
- "subsequent list items are\n"
- "disregarded.\n\n"
- "A list is [loose](@)"
- " if any of its constituent\n"
- "list items are separated by "
- " separated by blank lines, or if"
- " lines, or if any of its "
- " if any of its constituent\n"
- "list items directly contain two "
- " contain two block-level "
- "two block-level elements with a "
- "elements with a blank line\n"
- "between them.  "
- "Otherwise a list is [tight](@).\n"
- "(The difference in HTML output "
- " in HTML output is that "
- " output is that paragraphs in a "
- "paragraphs in a loose list are\n"
- "wrapped in `<p>`"
- " tags, while paragraphs in a "
- "paragraphs in a tight list are "
- " tight list are not.)\n\n"
- "Changing the bullet or ordered "
- " or ordered list delimiter "
- " list delimiter starts a new "
- " starts a new list:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n- bar\n+ baz\n.\n<ul>\n"
- "+ baz\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n<li>bar</li>\n</ul>\n"
- "</ul>\n<ul>\n<li>baz</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1. foo\n2. bar\n3) baz\n.\n<ol>\n"
- "3) baz\n.\n<ol>\n<li>foo</li>\n"
- "<li>foo</li>\n<li>bar</li>\n</ol>\n"
- "</ol>\n<ol start=\"3\">\n"
- "<ol start=\"3\">\n<li>baz</li>\n"
- "<li>baz</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In CommonMark, a list can "
- ", a list can interrupt a "
- "can interrupt a paragraph. "
- "That is,\n"
- "no blank line is needed to "
- " is needed to separate a "
- " to separate a paragraph from a "
- " from a following\nlist:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo\n- bar\n- baz\n.\n<p>Foo</p>\n"
- ".\n<p>Foo</p>\n<ul>\n<li>bar</li>\n"
- "<li>bar</li>\n<li>baz</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "`Markdown.pl`"
- " does not allow this, through "
- " this, through fear of "
- "through fear of triggering a "
- "of triggering a list\n"
- "via a numeral in a hard-wrapped "
- " a hard-wrapped line:\n\n"
- "``` markdown\n"
- "The number of windows in my "
- " windows in my house is\n14.  "
- "14.  The number of doors is 6.\n"
- "```\n\n"
- "Oddly, though, `Markdown.pl` "
- "`Markdown.pl` *does*"
- " *does* allow a blockquote to\n"
- "interrupt a paragraph, even "
- "paragraph, even though the same "
- "though the same considerations "
- " considerations might\napply.\n\n"
- "In CommonMark, we do allow lists"
- " do allow lists to interrupt "
- " to interrupt paragraphs, for\n"
- "two reasons.  "
- "First, it is natural and not "
- "natural and not uncommon for "
- " uncommon for people\n"
- "to start lists without blank "
- " without blank lines:\n\n"
- "``` markdown\n"
- "I need to buy\n- new shoes\n"
- "- new shoes\n- a coat\n"
- "- a coat\n- a plane ticket\n```\n\n"
- "Second, we are attracted to a\n"
- "\n> [principle of uniformity](@):"
- ":\n> "
- if a chunk of text has a certain
- "\n> "
- "meaning, it will continue to "
- " continue to have the same "
- " have the same meaning when put "
- " when put into a\n> "
- "container block (such as a list "
- "(such as a list item or "
- " a list item or blockquote).\n\n"
- "(Indeed, the spec for ["
- "[list items] and [block quotes]"
- "[block quotes] presupposes\n"
- "this principle.) "
- "This principle implies that if\n\n"
- "``` markdown\n"
- "  * I need to buy\n"
- "    - new shoes\n    - a coat\n"
- "    - a plane ticket\n```\n\n"
- "is a list item containing a "
- " containing a paragraph followed"
- " followed by a nested sublist,\n"
- "as all Markdown implementations "
- implementations agree it is (
- " agree it is (though the "
- " is (though the paragraph\n"
- "may be rendered without `<p>`"
- "`<p>` tags, since the list is \""
- "\"tight\"),\nthen\n\n"
- "``` markdown\n"
- "I need to buy\n- new shoes\n"
- "- new shoes\n- a coat\n"
- "- a coat\n- a plane ticket\n```\n\n"
- "by itself should be a paragraph "
- " be a paragraph followed by a "
- " followed by a nested sublist.\n\n"
- "Since it is well established "
- " established Markdown practice "
- " practice to allow lists to\n"
- interrupt paragraphs inside list
- " inside list items, the ["
- "[principle of\nuniformity]"
- " requires us to allow this "
- " to allow this outside list "
- " outside list items as\nwell.  ("
- "[reStructuredText](https://"
- "https://docutils.sourceforge.net"
- "/rst.html)\n"
- "takes a different approach, "
- " approach, requiring blank lines"
- " blank lines before lists\n"
- "even inside other list items.)\n\n"
- In order to solve the problem of
- " the problem of unwanted lists "
- " unwanted lists in paragraphs "
- " in paragraphs with\n"
- "hard-wrapped numerals, we allow "
- ", we allow only lists starting "
- " lists starting with `1` to\n"
- " to\ninterrupt paragraphs.  Thus,"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "The number of windows in my "
- " windows in my house is\n14.  "
- "14.  The number of doors is 6.\n"
- ".\n"
- "<p>The number of windows in my "
- " windows in my house is\n14.  "
- "The number of doors is 6.</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "We may still get an unintended "
- " an unintended result in cases "
- "result in cases like\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "The number of windows in my "
- " windows in my house is\n1.  "
- "1.  The number of doors is 6.\n.\n"
- "<p>The number of windows in my "
- " windows in my house is</p>\n"
- "<ol>\n"
- "<li>The number of doors is 6.</"
- "of doors is 6.</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "but this rule should prevent "
- " should prevent most spurious "
- " most spurious list captures.\n\n"
- There can be any number of blank
- " number of blank lines between "
- " lines between items:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n\n- bar\n\n\n- baz\n.\n<ul>\n"
- "\n\n- baz\n.\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>bar</p>\n</li>\n"
- "</li>\n<li>\n<p>baz</p>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n  - bar\n    - baz\n\n\n"
- "    - baz\n\n\n      bim\n.\n<ul>\n"
- ".\n<ul>\n<li>foo\n<ul>\n<li>bar\n"
- "<ul>\n<li>bar\n<ul>\n<li>\n"
- "<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n"
- "<p>bim</p>\n</li>\n</ul>\n</li>\n"
- "</ul>\n</li>\n</ul>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- To separate consecutive lists of
- " lists of the same type, or to "
- " type, or to separate a\n"
- list from an indented code block
- " code block that would otherwise"
- " would otherwise be parsed\n"
- "as a subparagraph of the final "
- " of the final list item, you can"
- " item, you can insert a blank "
- " insert a blank HTML\ncomment:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- foo\n- bar\n\n<!-- -->\n\n- baz\n"
- "<!-- -->\n\n- baz\n- bim\n.\n<ul>\n"
- "- bim\n.\n<ul>\n<li>foo</li>\n"
- "<li>foo</li>\n<li>bar</li>\n</ul>\n"
- "</ul>\n<!-- -->\n<ul>\n"
- "<!-- -->\n<ul>\n<li>baz</li>\n"
- "<li>baz</li>\n<li>bim</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "-   foo\n\n    notcode\n\n-   foo\n\n"
- "\n-   foo\n\n<!-- -->\n\n    code\n.\n"
- "\n    code\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<p>notcode</p>\n"
- "<p>notcode</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>foo</p>\n</li>\n"
- "</li>\n</ul>\n<!-- -->\n"
- "</ul>\n<!-- -->\n<pre><code>code\n"
- "<pre><code>code\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "List items need not be indented "
- "not be indented to the same "
- " to the same level.  "
- "The following\n"
- "list items will be treated as "
- " be treated as items at the same"
- " at the same list level,\n"
- since none is indented enough to
- " enough to belong to the "
- " belong to the previous list\n"
- "item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n - b\n  - c\n   - d\n  - e\n"
- "   - d\n  - e\n - f\n- g\n.\n<ul>\n"
- " - f\n- g\n.\n<ul>\n<li>a</li>\n"
- "<ul>\n<li>a</li>\n<li>b</li>\n"
- "<li>b</li>\n<li>c</li>\n"
- "<li>c</li>\n<li>d</li>\n"
- "<li>d</li>\n<li>e</li>\n"
- "<li>e</li>\n<li>f</li>\n"
- "<li>f</li>\n<li>g</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1. a\n\n  2. b\n\n   3. c\n.\n<ol>\n"
- "\n   3. c\n.\n<ol>\n<li>\n<p>a</p>\n"
- "<li>\n<p>a</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>b</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Note, however, that list items "
- "that list items may not be "
- " may not be preceded by more "
- " by more than\n"
- "three spaces of indentation.  "
- "Here `- e`"
- " is treated as a paragraph "
- " as a paragraph continuation\n"
- "line, because it is indented "
- " it is indented more than three "
- "more than three spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n - b\n  - c\n   - d\n    - e\n.\n"
- "    - e\n.\n<ul>\n<li>a</li>\n"
- "<ul>\n<li>a</li>\n<li>b</li>\n"
- "<li>b</li>\n<li>c</li>\n<li>d\n"
- "<li>d\n- e</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "And here, `3. c`"
- " is treated as in indented code "
- " indented code block,\n"
- "because it is indented four "
- " indented four spaces and "
- "four spaces and preceded by a\n"
- "blank line.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1. a\n\n  2. b\n\n    3. c\n.\n<ol>\n"
- "    3. c\n.\n<ol>\n<li>\n<p>a</p>\n"
- "<li>\n<p>a</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n"
- "</li>\n</ol>\n<pre><code>3. c\n"
- "<pre><code>3. c\n</code></pre>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is a loose list, because "
- " list, because there is a blank "
- " is a blank line between\n"
- "two of the list items:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n- b\n\n- c\n.\n<ul>\n<li>\n"
- "- c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n"
- "<p>a</p>\n</li>\n<li>\n<p>b</p>\n"
- "<li>\n<p>b</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "So is this, with a empty second "
- " a empty second item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "* a\n*\n\n* c\n.\n<ul>\n<li>\n<p>a</p>\n"
- "<li>\n<p>a</p>\n</li>\n<li></li>\n"
- "</li>\n<li></li>\n<li>\n<p>c</p>\n"
- "<li>\n<p>c</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "These are loose lists, even "
- " lists, even though there are no"
- " there are no blank lines "
- " no blank lines between the "
- " between the items,\n"
- "because one of the items "
- " of the items directly contains "
- " contains two block-level "
- "two block-level elements\n"
- "with a blank line between them:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n- b\n\n  c\n- d\n.\n<ul>\n<li>\n"
- "- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n"
- "<p>a</p>\n</li>\n<li>\n<p>b</p>\n"
- "<li>\n<p>b</p>\n<p>c</p>\n</li>\n"
- "<p>c</p>\n</li>\n<li>\n<p>d</p>\n"
- "<li>\n<p>d</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n- b\n\n  [ref]: /url\n- d\n.\n"
- "- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n"
- "<p>a</p>\n</li>\n<li>\n<p>b</p>\n"
- "<li>\n<p>b</p>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is a tight list, because "
- " list, because the blank lines "
- "the blank lines are in a code "
- " are in a code block:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n- ```\n  b\n\n\n  ```\n- c\n.\n"
- "\n\n  ```\n- c\n.\n<ul>\n<li>a</li>\n"
- "<ul>\n<li>a</li>\n<li>\n"
- "<li>a</li>\n<li>\n<pre><code>b\n\n\n"
- "<pre><code>b\n\n\n</code></pre>\n"
- "\n\n</code></pre>\n</li>\n"
- "</li>\n<li>c</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is a tight list, because "
- " list, because the blank line is"
- " blank line is between two\n"
- "paragraphs of a sublist.  "
- "So the sublist is loose while\n"
- "the outer list is tight:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n  - b\n\n    c\n- d\n.\n<ul>\n"
- "- d\n.\n<ul>\n<li>a\n<ul>\n<li>\n"
- "<li>a\n<ul>\n<li>\n<p>b</p>\n"
- "<li>\n<p>b</p>\n<p>c</p>\n</li>\n"
- "<p>c</p>\n</li>\n</ul>\n</li>\n"
- "</ul>\n</li>\n<li>d</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is a tight list, because "
- " list, because the blank line is"
- " blank line is inside the\n"
- "block quote:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "* a\n  > b\n  >\n* c\n.\n<ul>\n<li>a\n"
- ".\n<ul>\n<li>a\n<blockquote>\n"
- "<blockquote>\n<p>b</p>\n"
- "<p>b</p>\n</blockquote>\n</li>\n"
- "</li>\n<li>c</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This list is tight, because the "
- ", because the consecutive block "
- " block elements\n"
- are not separated by blank lines
- " by blank lines:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n  > b\n  ```\n  c\n  ```\n- d\n.\n"
- "  c\n  ```\n- d\n.\n<ul>\n<li>a\n"
- ".\n<ul>\n<li>a\n<blockquote>\n"
- "<blockquote>\n<p>b</p>\n"
- "<p>b</p>\n</blockquote>\n"
- "</blockquote>\n<pre><code>c\n"
- "<pre><code>c\n</code></pre>\n"
- "</code></pre>\n</li>\n<li>d</li>\n"
- "<li>d</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- A single-paragraph list is tight
- " list is tight:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n.\n<ul>\n<li>a</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n  - b\n.\n<ul>\n<li>a\n<ul>\n"
- "<ul>\n<li>a\n<ul>\n<li>b</li>\n"
- "<ul>\n<li>b</li>\n</ul>\n</li>\n"
- "</ul>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This list is loose, because of "
- ", because of the blank line "
- " the blank line between the\n"
- "two block elements in the list "
- " in the list item:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "1. ```\n   foo\n   ```\n\n   bar\n.\n"
- "\n   bar\n.\n<ol>\n<li>\n"
- ".\n<ol>\n<li>\n<pre><code>foo\n"
- "<pre><code>foo\n</code></pre>\n"
- "</code></pre>\n<p>bar</p>\n</li>\n"
- "</li>\n</ol>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here the outer list is loose, "
- " list is loose, the inner list "
- " the inner list tight:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "* foo\n  * bar\n\n  baz\n.\n<ul>\n"
- "\n  baz\n.\n<ul>\n<li>\n<p>foo</p>\n"
- "<li>\n<p>foo</p>\n<ul>\n"
- "<p>foo</p>\n<ul>\n<li>bar</li>\n"
- "<li>bar</li>\n</ul>\n<p>baz</p>\n"
- "<p>baz</p>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "- a\n  - b\n  - c\n\n- d\n  - e\n"
- "\n- d\n  - e\n  - f\n.\n<ul>\n<li>\n"
- ".\n<ul>\n<li>\n<p>a</p>\n<ul>\n"
- "<p>a</p>\n<ul>\n<li>b</li>\n"
- "<ul>\n<li>b</li>\n<li>c</li>\n"
- "<li>c</li>\n</ul>\n</li>\n<li>\n"
- "</li>\n<li>\n<p>d</p>\n<ul>\n"
- "<p>d</p>\n<ul>\n<li>e</li>\n"
- "<ul>\n<li>e</li>\n<li>f</li>\n"
- "<li>f</li>\n</ul>\n</li>\n</ul>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "# Inlines\n\n"
- "Inlines are parsed sequentially "
- " sequentially from the beginning"
- " the beginning of the character\n"
- stream to the end (left to right
- " (left to right, in left-to-"
- ", in left-to-right languages).\n"
- "Thus, for example, in\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`hi`lo`\n.\n"
- ".\n<p><code>hi</code>lo`</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "`hi`"
- " is parsed as code, leaving the "
- ", leaving the backtick at the "
- backtick at the end as a literal
- "\nbacktick.\n\n\n\n"
- "## Code spans\n\n"
- "A [backtick string](@)\n"
- "is a string of one or more "
- " of one or more backtick "
- " more backtick characters ("
- "`` ` ``) that is neither\n"
- "preceded nor followed by a "
- " followed by a backtick.\n\n"
- "A [code span](@)"
- " begins with a backtick string "
- "backtick string and ends with\n"
- "a backtick string of equal "
- "string of equal length.  "
- "The contents of the code span "
- " the code span are\n"
- the characters between these two
- " these two backtick strings, "
- " strings, normalized in the\n"
- "following ways:\n\n"
- "- First, [line endings]"
- "[line endings] are converted to "
- "[spaces].\n"
- "- "
- "If the resulting string both "
- " string both begins *and*"
- "*and* ends with a [space]\n  "
- "character, but does not consist "
- " not consist entirely of [space]"
- "[space]\n  characters, a single ["
- "[space]"
- "] character is removed from the"
- "\n  "
- "front and back.  "
- "This allows you to include code "
- "to include code that begins\n  "
- or ends with backtick characters
- " characters, which must be "
- ", which must be separated by\n  "
- "whitespace from the opening or "
- " the opening or closing backtick"
- "closing backtick strings.\n\n"
- "This is a simple code span:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`foo`\n.\n<p><code>foo</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here two backticks are used, "
- " are used, because the code "
- " the code contains a backtick.\n"
- "This example also illustrates "
- " illustrates stripping of a "
- " stripping of a single leading "
- " single leading and\n"
- "trailing space:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`` foo ` bar ``\n.\n"
- ".\n<p><code>foo ` bar</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This example shows the "
- " shows the motivation for "
- " motivation for stripping "
- " for stripping leading and "
- " leading and trailing\nspaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "` `` `\n.\n<p><code>``</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- Note that only *one*
- "*one* space is stripped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`  ``  `\n.\n"
- ".\n<p><code> `` </code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "The stripping only happens if "
- "only happens if the space is on "
- "the space is on both\n"
- "sides of the string:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "` a`\n.\n<p><code> a</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Only [spaces], and not ["
- "], and not [unicode whitespace]"
- "] in general, are\n"
- "\nstripped in this way:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "` b `\n.\n<p><code> b </code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "No stripping occurs if the code "
- " if the code span contains only "
- " contains only spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "` `\n`  `\n.\n<p><code> </code>\n"
- "<code>  </code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Line endings]"
- "] are treated like spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``\nfoo\nbar  \nbaz\n``\n.\n"
- "<p><code>foo bar   baz</code></p"
- "   baz</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``\nfoo \n``\n.\n"
- "``\n.\n<p><code>foo </code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Interior spaces are not "
- " spaces are not collapsed:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`foo   bar \nbaz`\n.\n"
- "<p><code>foo   bar  baz</code></"
- "  baz</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Note that browsers will "
- " browsers will typically "
- " will typically collapse "
- " collapse consecutive spaces\n"
- "when rendering `<code>`"
- " elements, so it is recommended "
- " is recommended that\n"
- "the following CSS be used:\n\n    "
- "code{white-space: pre-wrap;}\n"
- "\n\n"
- "Note that backslash escapes do "
- " escapes do not work in code "
- " work in code spans. "
- "All backslashes\n"
- "are treated literally:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`foo\\`bar`\n.\n"
- ".\n<p><code>foo\\</code>bar`</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Backslash escapes are never "
- " are never needed, because one "
- ", because one can always choose "
- " always choose a\nstring of *n*"
- " backtick characters as "
- " characters as delimiters, where"
- ", where the code does\n"
- "not contain any strings of "
- " any strings of exactly *n*"
- "*n* backtick characters.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "``foo`bar``\n.\n"
- ".\n<p><code>foo`bar</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "` foo `` bar `\n.\n"
- "<p><code>foo `` bar</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Code span backticks have higher "
- " have higher precedence than any"
- " than any other inline\n"
- "constructs except HTML tags and "
- " HTML tags and autolinks.  "
- "Thus, for example, this is\n"
- "not parsed as emphasized text, "
- " text, since the second `*`"
- "`*` is part of a code\nspan:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo`*`\n.\n"
- ".\n<p>*foo<code>*</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- And this is not parsed as a link
- "parsed as a link:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[not a `link](/foo`)\n.\n"
- "<p>[not a <code>link](/foo</code"
- "link](/foo</code>)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Code spans, HTML tags, and "
- " HTML tags, and autolinks have "
- " autolinks have the same "
- " have the same precedence.\n"
- "Thus, this is code:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`<a href=\"`\">`\n.\n"
- "<p><code>&lt;a href=&quot;</code"
- "=&quot;</code>&quot;&gt;`</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "But this is an HTML tag:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"`\">`\n.\n"
- ".\n<p><a href=\"`\">`</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "And this is code:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`<https://foo.bar.`baz>`\n.\n"
- "<p><code>&lt;https://foo.bar.</"
- "://foo.bar.</code>baz&gt;`</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "But this is an autolink:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<https://foo.bar.`baz>`\n.\n"
- "<p><a href=\"https://foo.bar.%"
- "://foo.bar.%60baz\">https://"
- "%60baz\">https://foo.bar.`baz</a>"
- "foo.bar.`baz</a>`</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "When a backtick string is not "
- " string is not closed by a "
- "not closed by a matching "
- " by a matching backtick string,\n"
- "we just have literal backticks:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "```foo``\n.\n<p>```foo``</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`foo\n.\n<p>`foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "The following case also "
- " case also illustrates the need "
- " the need for opening and\n"
- "closing backtick strings to be "
- " strings to be equal in length:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`foo``bar``\n.\n"
- ".\n<p>`foo<code>bar</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Emphasis and strong emphasis"
- "\n\nJohn Gruber's original "
- "[Markdown syntax\ndescription"
- "](https://daringfireball.net/"
- "/projects/markdown/syntax#em)"
- " says:\n\n"
- "> Markdown treats asterisks (`*`"
- "`*`) and underscores (`_`"
- "`_`) as indicators of\n> "
- "emphasis. Text wrapped with one "
- "`*` or `_`"
- "`_` will be wrapped with an HTML"
- "\n> `<em>` tag; double `*`'s or "
- "`*`'s or `_`'"
- "'s will be wrapped with an HTML "
- "`<strong>`\n> tag.\n\n"
- "This is enough for most users, "
- "for most users, but these rules "
- "but these rules leave much "
- " leave much undecided,\n"
- "especially when it comes to "
- " it comes to nested emphasis.  "
- "The original\n`Markdown.pl`"
- " test suite makes it clear that "
- " it clear that triple `***` and\n"
- "`***` and\n`___`"
- " delimiters can be used for "
- "can be used for strong emphasis,"
- "strong emphasis, and most\n"
- "implementations have also "
- " have also allowed the following"
- " the following patterns:\n\n"
- "``` markdown\n"
- "***strong emph***\n"
- "***strong** in emph*\n"
- "***emph* in strong**\n"
- "**in strong *emph***\n"
- "*in emph **strong***\n```\n\n"
- "The following patterns are less "
- " are less widely supported, but "
- " supported, but the intent\n"
- is clear and they are useful (
- " are useful (especially in "
- " (especially in contexts like "
- " contexts like bibliography\n"
- "entries):\n\n"
- "``` markdown\n"
- "*emph *with emph* in it*\n"
- "**strong **with strong** in it**"
- "strong** in it**\n```\n\n"
- "Many implementations have also "
- " have also restricted intraword "
- " intraword emphasis to\nthe `*`"
- " forms, to avoid unwanted "
- " avoid unwanted emphasis in "
- " emphasis in words containing\n"
- "internal underscores.  "
- "(It is best practice to put "
- "practice to put these in code\n"
- "spans, but users often do not.)"
- "\n\n``` markdown\n"
- "internal emphasis: foo*bar*baz\n"
- "no emphasis: foo_bar_baz\n```\n\n"
- "The rules given below capture "
- " below capture all of these "
- " all of these patterns, while "
- "patterns, while allowing\n"
- for efficient parsing strategies
- " strategies that do not "
- " that do not backtrack.\n\n"
- "First, some definitions.  A "
- "[delimiter run](@) is either\n"
- "\na sequence of one or more `*`"
- " characters that is not preceded"
- " is not preceded or\n"
- followed by a non-backslash-
- "a non-backslash-escaped `*`"
- "`*` character, or a sequence\n"
- "\nof one or more `_`"
- " characters that is not preceded"
- " is not preceded or followed by\n"
- "a non-backslash-escaped `_`"
- "`_` character.\n\n"
- "A "
- "[left-flanking delimiter run](@)"
- " is\na [delimiter run]"
- "] that is (1) not followed by ["
- "[Unicode whitespace],\n"
- "and either (2a) not followed by "
- "not followed by a ["
- "[Unicode punctuation character]"
- "], or\n(2b) followed by a ["
- "[Unicode punctuation character]"
- "] and\npreceded by ["
- "\npreceded by [Unicode whitespace"
- "] or a ["
- "[Unicode punctuation character]."
- "].\n"
- "For purposes of this definition,"
- "this definition, the beginning "
- ", the beginning and the end of\n"
- "the line count as Unicode "
- " as Unicode whitespace.\n\n"
- "A "
- "[right-flanking delimiter run](@"
- "delimiter run](@) is\na ["
- " is\na [delimiter run]"
- "] that is (1) not preceded by ["
- "[Unicode whitespace],\n"
- "and either (2a) not preceded by "
- "not preceded by a ["
- "[Unicode punctuation character]"
- "], or\n(2b) preceded by a ["
- "[Unicode punctuation character]"
- "] and\nfollowed by ["
- "\nfollowed by [Unicode whitespace"
- "] or a ["
- "[Unicode punctuation character]."
- "].\n"
- "For purposes of this definition,"
- "this definition, the beginning "
- ", the beginning and the end of\n"
- "the line count as Unicode "
- " as Unicode whitespace.\n\n"
- "Here are some examples of "
- " examples of delimiter runs.\n\n"
- "  - "
- left-flanking but not right-
- " but not right-flanking:\n\n    "
- "```\n    ***abc\n      _abc\n    "
- "      _abc\n    **\"abc\"\n    "
- "    **\"abc\"\n     _\"abc\"\n"
- "     _\"abc\"\n    ```\n\n"
- "  - "
- right-flanking but not left-
- " but not left-flanking:\n\n    "
- "```\n     abc***\n     abc_\n    "
- "     abc_\n    \"abc\"**\n    "
- "    \"abc\"**\n    \"abc\"_\n    ```\n\n"
- "  - "
- "Both left and right-flanking:\n"
- "\n    ```\n     abc***def\n    "
- " abc***def\n    \"abc\"_\"def\"\n"
- "    \"abc\"_\"def\"\n    ```\n\n"
- "  - "
- "Neither left nor right-flanking:"
- "\n\n    ```\n    abc *** def\n    "
- "abc *** def\n    a _ b\n    ```\n\n"
- (The idea of distinguishing left
- " left-flanking and right-"
- " and right-flanking\n"
- "delimiter runs based on the "
- " based on the character before "
- " before and the character\n"
- after comes from Roopesh Chander
- "'s\n"
- "[vfmd](https://web.archive.org/"
- web.archive.org/web/
- "/web/20220608143320/http://"
- "/http://www.vfmd.org/vfmd-spec/"
- "/vfmd-spec/specification/#"
- "/specification/#procedure-for-"
- "/#procedure-for-identifying-"
- "for-identifying-emphasis-tags).\n"
- ".\nvfmd uses the terminology \""
- "\"emphasis indicator string\""
- "\" instead of \"delimiter\nrun,\""
- " and its rules for "
- " its rules for distinguishing "
- " distinguishing left- and right-"
- "left- and right-flanking runs\n"
- "are a bit more complex than the "
- " than the ones given here.)\n\n"
- "The following rules define "
- " rules define emphasis and "
- " emphasis and strong emphasis:\n\n"
- "1.  A single `*` character "
- "[can open emphasis](@)\n    "
- "iff (if and only if) it is part "
- " if) it is part of a ["
- "[left-flanking delimiter run].\n\n"
- "2.  A single `_` character ["
- "`_` character [can open emphasis"
- "] iff\n    it is part of a ["
- "[left-flanking delimiter run]"
- "]\n    "
- "and either (a) not part of a ["
- "[right-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[right-flanking delimiter run]"
- "]\n    preceded by a ["
- "[Unicode punctuation character]."
- "].\n\n"
- "3.  A single `*` character "
- "[can close emphasis](@)\n    "
- "\n    iff it is part of a ["
- "[right-flanking delimiter run]."
- "].\n\n"
- "4.  A single `_` character ["
- " character [can close emphasis]"
- "] iff\n    it is part of a ["
- "[right-flanking delimiter run]"
- "]\n    "
- "and either (a) not part of a ["
- "[left-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[left-flanking delimiter run]"
- "]\n    followed by a ["
- "[Unicode punctuation character]."
- "].\n\n"
- "5.  A double `**` "
- " [can open strong emphasis](@)"
- "\n    iff it is part of a ["
- "[left-flanking delimiter run].\n\n"
- "6.  A double `__` ["
- "`__` [can open strong emphasis]"
- "] iff\n    it is part of a ["
- "[left-flanking delimiter run]"
- "]\n    "
- "and either (a) not part of a ["
- "[right-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[right-flanking delimiter run]"
- "]\n    preceded by a ["
- "[Unicode punctuation character]."
- "].\n\n"
- "7.  A double `**` "
- " [can close strong emphasis](@)"
- "\n    iff it is part of a ["
- "[right-flanking delimiter run]."
- "].\n\n"
- "8.  A double `__` ["
- "`__` [can close strong emphasis]"
- "] iff\n    it is part of a ["
- "[right-flanking delimiter run]"
- "]\n    "
- "and either (a) not part of a ["
- "[left-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[left-flanking delimiter run]"
- "]\n    followed by a ["
- "[Unicode punctuation character]."
- "].\n\n"
- "9.  "
- Emphasis begins with a delimiter
- "with a delimiter that ["
- "[can open emphasis] and ends"
- "] and ends\n    "
- "\n    with a delimiter that ["
- "[can close emphasis]"
- "], and that uses the same\n    "
- "\n    character (`_` or `*`"
- ) as the opening delimiter.  The
- "\n    "
- "opening and closing delimiters "
- " delimiters must belong to "
- " must belong to separate\n    ["
- "[delimiter runs]"
- ".  "
- "If one of the delimiters can "
- " delimiters can both\n    "
- "open and close emphasis, then "
- " emphasis, then the sum of the "
- " the sum of the lengths of the\n"
- "\n    "
- "delimiter runs containing the "
- " containing the opening and "
- "the opening and closing "
- " and closing delimiters\n    "
- "must not be a multiple of 3 "
- "a multiple of 3 unless both "
- " 3 unless both lengths are\n    "
- "multiples of 3.\n\n"
- "10. "
- "Strong emphasis begins with a "
- " begins with a delimiter that\n"
- "\n    [can open strong emphasis]"
- "] and ends with a delimiter that"
- "\n    [can close strong emphasis]"
- ", and that uses the same "
- " uses the same character\n    ("
- "(`_` or `*`"
- ) as the opening delimiter.  The
- "\n    "
- "opening and closing delimiters "
- " delimiters must belong to "
- " must belong to separate\n    ["
- "[delimiter runs]"
- ".  "
- "If one of the delimiters can "
- " delimiters can both open\n    "
- "and close strong emphasis, then "
- " emphasis, then the sum of the "
- " the sum of the lengths of\n    "
- "the delimiter runs containing "
- "runs containing the opening and "
- "the opening and closing\n    "
- "delimiters must not be a "
- " must not be a multiple of 3 "
- "a multiple of 3 unless both "
- " 3 unless both lengths\n    "
- "are multiples of 3.\n\n"
- "11. A literal `*`"
- " character cannot occur at the "
- " occur at the beginning or end "
- " or end of\n    `*`"
- "`*`-delimited emphasis or `**`"
- "-delimited strong emphasis, "
- " emphasis, unless it\n    "
- "is backslash-escaped.\n\n"
- "12. A literal `_`"
- " character cannot occur at the "
- " occur at the beginning or end "
- " or end of\n    `_`"
- "`_`-delimited emphasis or `__`"
- "-delimited strong emphasis, "
- " emphasis, unless it\n    "
- "is backslash-escaped.\n\n"
- Where rules 1--
- "12 above are compatible with "
- "compatible with multiple "
- " with multiple parsings,\n"
- the following principles resolve
- " resolve ambiguity:\n\n"
- "13. "
- The number of nestings should be
- " should be minimized. "
- "Thus, for example,\n    "
- "an interpretation "
- "`<strong>...</strong>`"
- " is always preferred to\n    "
- "\n    `<em><em>...</em></em>`.\n\n"
- "14. An interpretation "
- "`<em><strong>...</strong></em>`"
- " is always\n    preferred to "
- "`<strong><em>...</em></strong>`."
- ".\n\n"
- "15. "
- "When two potential emphasis or "
- " emphasis or strong emphasis "
- "strong emphasis spans overlap,\n"
- "\n    "
- so that the second begins before
- " begins before the first ends "
- " the first ends and ends after\n"
- "\n    "
- "the first ends, the first takes "
- "the first takes precedence. "
- "Thus, for example,\n    "
- "`*foo _bar* baz_` is parsed as "
- "`<em>foo _bar</em> baz_` rather"
- " rather\n    than "
- "than `*foo <em>bar* baz</em>`.\n\n"
- "16. "
- "When there are two potential "
- " two potential emphasis or "
- " emphasis or strong emphasis "
- "strong emphasis spans\n    "
- "with the same closing delimiter,"
- " delimiter, the shorter one (the"
- "shorter one (the one that\n    "
- "opens later) takes precedence. "
- "Thus, for example,\n    "
- "`**foo **bar baz**`"
- " is parsed as "
- "`**foo <strong>bar baz</strong>`"
- "\n    rather than "
- "`<strong>foo **bar baz</strong>`"
- ".\n\n"
- "17. "
- "Inline code spans, links, images"
- ", links, images, and HTML tags "
- ", and HTML tags group more "
- "tags group more tightly\n    "
- "than emphasis.  "
- "So, when there is a choice "
- " is a choice between an "
- " between an interpretation\n    "
- "that contains one of these "
- " one of these elements and one "
- " and one that does not, the\n    "
- "former always wins.  "
- "Thus, for example, "
- "`*[foo*](bar)` is\n    parsed as "
- "`*<a href=\"bar\">foo*</a>`"
- " rather than as\n    "
- "\n    `<em>[foo</em>](bar)`.\n\n"
- "These rules can be illustrated "
- " be illustrated through a series"
- "through a series of examples.\n\n"
- "Rule 1:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo bar*\n.\n"
- ".\n<p><em>foo bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the opening `*`"
- "`*` is followed by\n"
- "whitespace, and hence not part "
- " hence not part of a ["
- "[left-flanking delimiter run]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "a * foo bar*\n.\n"
- ".\n<p>a * foo bar*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the opening `*`"
- "`*` is preceded\n"
- "by an alphanumeric and followed "
- " and followed by punctuation, "
- "by punctuation, and hence\n"
- "not part of a ["
- "[left-flanking delimiter run]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "a*\"foo\"*\n.\n"
- ".\n<p>a*&quot;foo&quot;*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Unicode nonbreaking spaces count
- " spaces count as whitespace, too"
- " whitespace, too:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "* a *\n.\n<p>* a *</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Unicode symbols count as "
- " count as punctuation, too:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*$*alpha.\n\n*£*bravo.\n\n"
- "\n*£*bravo.\n\n*€*charlie.\n.\n"
- "\n*€*charlie.\n.\n<p>*$*alpha.</p>\n"
- "<p>*£*bravo.</p>\n"
- "<p>*€*charlie.</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis with `*`"
- "`*` is permitted:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo*bar*\n.\n"
- ".\n<p>foo<em>bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "5*6*78\n.\n<p>5<em>6</em>78</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 2:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo bar_\n.\n"
- ".\n<p><em>foo bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the opening `_`"
- "`_` is followed by\nwhitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_ foo bar_\n.\n<p>_ foo bar_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the opening `_`"
- "`_` is preceded\n"
- "by an alphanumeric and followed "
- " and followed by punctuation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "a_\"foo\"_\n.\n"
- ".\n<p>a_&quot;foo&quot;_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Emphasis with `_`"
- "`_` is not allowed inside words:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo_bar_\n.\n<p>foo_bar_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "5_6_78\n.\n<p>5_6_78</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "пристаням_стремятся_\n.\n"
- ".\n<p>пристаням_стремятся_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here `_`"
- " does not generate emphasis, "
- " emphasis, because the first "
- " the first delimiter run\n"
- is right-flanking and the second
- " and the second left-flanking:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "aa_\"bb\"_cc\n.\n"
- ".\n<p>aa_&quot;bb&quot;_cc</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is emphasis, even though "
- ", even though the opening "
- " the opening delimiter is\n"
- "both left- and right-flanking, "
- "right-flanking, because it is "
- ", because it is preceded by\n"
- "punctuation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo-_(bar)_\n.\n"
- ".\n<p>foo-<em>(bar)</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 3:\n"
- "\n"
- "This is not emphasis, because "
- ", because the closing delimiter "
- " delimiter does\n"
- "not match the opening delimiter:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo*\n.\n<p>_foo*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the closing `*`"
- "`*` is preceded by\nwhitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo bar *\n.\n<p>*foo bar *</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A line ending also counts as "
- " also counts as whitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo bar\n*\n.\n<p>*foo bar\n*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the second `*` is\n"
- "preceded by punctuation and "
- "punctuation and followed by an "
- " followed by an alphanumeric\n"
- "(hence it is not part of a ["
- "[right-flanking delimiter run]:"
- "]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*(*foo)\n.\n<p>*(*foo)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The point of this restriction is
- " restriction is more easily "
- " is more easily appreciated\n"
- "with this example:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*(*foo*)*\n.\n"
- "<p><em>(<em>foo</em>)</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis with `*`"
- "`*` is allowed:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo*bar\n.\n"
- ".\n<p><em>foo</em>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\nRule 4:\n"
- "\n"
- "This is not emphasis, because "
- ", because the closing `_`"
- "`_` is preceded by\nwhitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo bar _\n.\n<p>_foo bar _</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because "
- ", because the second `_` is\n"
- "preceded by punctuation and "
- "punctuation and followed by an "
- " followed by an alphanumeric:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_(_foo)\n.\n<p>_(_foo)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- This is emphasis within emphasis
- " within emphasis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_(_foo_)_\n.\n"
- "<p><em>(<em>foo</em>)</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Intraword emphasis is disallowed
- " is disallowed for `_`:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo_bar\n.\n<p>_foo_bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_пристаням_стремятся\n.\n"
- ".\n<p>_пристаням_стремятся</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo_bar_baz_\n.\n"
- ".\n<p><em>foo_bar_baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is emphasis, even though "
- ", even though the closing "
- " the closing delimiter is\n"
- "both left- and right-flanking, "
- "right-flanking, because it is "
- ", because it is followed by\n"
- "punctuation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_(bar)_.\n.\n"
- ".\n<p><em>(bar)</em>.</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 5:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo bar**\n.\n"
- "<p><strong>foo bar</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, "
- " emphasis, because the opening "
- " the opening delimiter is\n"
- "followed by whitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "** foo bar**\n.\n"
- ".\n<p>** foo bar**</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, "
- " emphasis, because the opening "
- "`**` is preceded\n"
- "by an alphanumeric and followed "
- " and followed by punctuation, "
- "by punctuation, and hence\n"
- "not part of a ["
- "[left-flanking delimiter run]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "a**\"foo\"**\n.\n"
- ".\n<p>a**&quot;foo&quot;**</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Intraword strong emphasis with "
- "`**` is permitted:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo**bar**\n.\n"
- "<p>foo<strong>bar</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 6:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo bar__\n.\n"
- "<p><strong>foo bar</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, "
- " emphasis, because the opening "
- " the opening delimiter is\n"
- "followed by whitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__ foo bar__\n.\n"
- ".\n<p>__ foo bar__</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A line ending counts as "
- " counts as whitespace:\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__\nfoo bar__\n.\n<p>__\n"
- ".\n<p>__\nfoo bar__</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, "
- " emphasis, because the opening "
- "`__` is preceded\n"
- "by an alphanumeric and followed "
- " and followed by punctuation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "a__\"foo\"__\n.\n"
- ".\n<p>a__&quot;foo&quot;__</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Intraword strong emphasis is "
- " emphasis is forbidden with `__`"
- "`__`:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo__bar__\n.\n<p>foo__bar__</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "5__6__78\n.\n<p>5__6__78</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "пристаням__стремятся__\n.\n"
- ".\n<p>пристаням__стремятся__</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo, __bar__, baz__\n.\n"
- "<p><strong>foo, <strong>bar</"
- ", <strong>bar</strong>, baz</"
- "</strong>, baz</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is strong emphasis, even "
- " emphasis, even though the "
- "even though the opening "
- " the opening delimiter is\n"
- "both left- and right-flanking, "
- "right-flanking, because it is "
- ", because it is preceded by\n"
- "punctuation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo-__(bar)__\n.\n"
- "<p>foo-<strong>(bar)</strong></p"
- "bar)</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\nRule 7:\n"
- "\n"
- "This is not strong emphasis, "
- " emphasis, because the closing "
- " the closing delimiter is "
- " delimiter is preceded\n"
- "by whitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo bar **\n.\n"
- ".\n<p>**foo bar **</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- (Nor can it be interpreted as an
- " as an emphasized `*foo bar *`"
- "`*foo bar *`, because of\n"
- ", because of\nRule 11.)\n\n"
- "This is not strong emphasis, "
- " emphasis, because the second "
- "`**` is\n"
- "preceded by punctuation and "
- "punctuation and followed by an "
- " followed by an alphanumeric:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**(**foo)\n.\n<p>**(**foo)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The point of this restriction is
- " restriction is more easily "
- " is more easily appreciated\n"
- "with these examples:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*(**foo**)*\n.\n"
- "<p><em>(<strong>foo</strong>)</"
- ">foo</strong>)</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**Gomphocarpus (*Gomphocarpus "
- " (*Gomphocarpus physocarpus*, "
- " physocarpus*, syn.\n"
- "*Asclepias physocarpa*)**\n.\n"
- "<p><strong>Gomphocarpus (<em>"
- " (<em>Gomphocarpus physocarpus</"
- " physocarpus</em>, syn.\n"
- "<em>Asclepias physocarpa</em>)</"
- "</em>)</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo \"*bar*\" foo**\n.\n"
- "<p><strong>foo &quot;<em>bar</em"
- quot;<em>bar</em>&quot; foo</
- "/em>&quot; foo</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo**bar\n.\n"
- "<p><strong>foo</strong>bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 8:\n"
- "\n"
- "This is not strong emphasis, "
- " emphasis, because the closing "
- " the closing delimiter is\n"
- "preceded by whitespace:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo bar __\n.\n"
- ".\n<p>__foo bar __</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, "
- " emphasis, because the second "
- "`__` is\n"
- "preceded by punctuation and "
- "punctuation and followed by an "
- " followed by an alphanumeric:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__(__foo)\n.\n<p>__(__foo)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The point of this restriction is
- " restriction is more easily "
- " is more easily appreciated\n"
- "with this example:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_(__foo__)_\n.\n"
- "<p><em>(<strong>foo</strong>)</"
- ">foo</strong>)</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Intraword strong emphasis is "
- " emphasis is forbidden with `__`"
- "`__`:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo__bar\n.\n<p>__foo__bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__пристаням__стремятся\n.\n"
- ".\n<p>__пристаням__стремятся</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo__bar__baz__\n.\n"
- "<p><strong>foo__bar__baz</strong"
- "</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is strong emphasis, even "
- " emphasis, even though the "
- "even though the closing "
- " the closing delimiter is\n"
- "both left- and right-flanking, "
- "right-flanking, because it is "
- ", because it is followed by\n"
- "punctuation:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__(bar)__.\n.\n"
- "<p><strong>(bar)</strong>.</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 9:\n"
- "\n"
- "Any nonempty sequence of inline "
- " of inline elements can be the "
- " can be the contents of an\n"
- "emphasized span.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo [bar](/url)*\n.\n"
- "<p><em>foo <a href=\"/url\">bar</a"
- "=\"/url\">bar</a></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo\nbar*\n.\n<p><em>foo\n"
- ".\n<p><em>foo\nbar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In particular, emphasis and "
- ", emphasis and strong emphasis "
- "strong emphasis can be nested\n"
- "inside emphasis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo __bar__ baz_\n.\n"
- "<p><em>foo <strong>bar</strong> "
- ">bar</strong> baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo _bar_ baz_\n.\n"
- "<p><em>foo <em>bar</em> baz</em>"
- "</em> baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo_ bar_\n.\n"
- "<p><em><em>foo</em> bar</em></p>"
- "em> bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo *bar**\n.\n"
- "<p><em>foo <em>bar</em></em></p>"
- "</em></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo **bar** baz*\n.\n"
- "<p><em>foo <strong>bar</strong> "
- ">bar</strong> baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo**bar**baz*\n.\n"
- "<p><em>foo<strong>bar</strong>"
- ">bar</strong>baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Note that in the preceding case,"
- " preceding case, the "
- " case, the interpretation\n\n"
- "``` markdown\n"
- "<p><em>foo</em><em>bar<em></em>"
- "<em>bar<em></em>baz</em></p>\n"
- "```\n\n\n"
- "is precluded by the condition "
- " the condition that a delimiter "
- " a delimiter that\n"
- "can both open and close (like "
- "and close (like the `*` after "
- "`*` after `foo`)\n"
- "cannot form emphasis if the sum "
- " if the sum of the lengths of\n"
- "the delimiter runs containing "
- "runs containing the opening and\n"
- closing delimiters is a multiple
- " is a multiple of 3 unless\n"
- both lengths are multiples of 3.
- "\n\n\nFor the same reason, we don'"
- "'t get two consecutive\n"
- "emphasis sections in this "
- " in this example:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo**bar*\n.\n"
- ".\n<p><em>foo**bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The same condition ensures that "
- " ensures that the following\n"
- "cases are all strong emphasis "
- "strong emphasis nested inside\n"
- "emphasis, even when the interior"
- " the interior whitespace is\n"
- "omitted:\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "***foo** bar*\n.\n"
- "<p><em><strong>foo</strong> bar<"
- "</strong> bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo **bar***\n.\n"
- "<p><em>foo <strong>bar</strong><"
- ">bar</strong></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo**bar***\n.\n"
- "<p><em>foo<strong>bar</strong></"
- ">bar</strong></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- When the lengths of the interior
- " of the interior closing and "
- " closing and opening\n"
- delimiter runs are *both*
- "*both* multiples of 3, though,\n"
- "they can match to create "
- "match to create emphasis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo***bar***baz\n.\n"
- "<p>foo<em><strong>bar</strong></"
- ">bar</strong></em>baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo******bar*********baz\n.\n"
- "<p>foo<strong><strong><strong>"
- "<strong><strong>bar</strong></"
- ">bar</strong></strong></strong>*"
- "></strong>***baz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Indefinite levels of nesting are
- " of nesting are possible:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo **bar *baz* bim** bop*\n.\n"
- "<p><em>foo <strong>bar <em>baz</"
- ">bar <em>baz</em> bim</strong> "
- "> bim</strong> bop</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo [*bar*](/url)*\n.\n"
- "<p><em>foo <a href=\"/url\"><em>"
- "href=\"/url\"><em>bar</em></a></em"
- "bar</em></a></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "There can be no empty emphasis "
- " empty emphasis or strong "
- " or strong emphasis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "** is not an empty emphasis\n.\n"
- "<p>** is not an empty emphasis</"
- "empty emphasis</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**** is not an empty strong "
- "an empty strong emphasis\n.\n"
- "<p>**** is not an empty strong "
- "an empty strong emphasis</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\nRule 10:\n"
- "\n"
- "Any nonempty sequence of inline "
- " of inline elements can be the "
- " can be the contents of an\n"
- "strongly emphasized span.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo [bar](/url)**\n.\n"
- "<p><strong>foo <a href=\"/url\">"
- " <a href=\"/url\">bar</a></strong>"
- "bar</a></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo\nbar**\n.\n<p><strong>foo\n"
- "<p><strong>foo\nbar</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "In particular, emphasis and "
- ", emphasis and strong emphasis "
- "strong emphasis can be nested\n"
- "inside strong emphasis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo _bar_ baz__\n.\n"
- "<p><strong>foo <em>bar</em> baz<"
- "em>bar</em> baz</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo __bar__ baz__\n.\n"
- "<p><strong>foo <strong>bar</"
- " <strong>bar</strong> baz</"
- "</strong> baz</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "____foo__ bar__\n.\n"
- "<p><strong><strong>foo</strong> "
- ">foo</strong> bar</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo **bar****\n.\n"
- "<p><strong>foo <strong>bar</"
- " <strong>bar</strong></strong></"
- "></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo *bar* baz**\n.\n"
- "<p><strong>foo <em>bar</em> baz<"
- "em>bar</em> baz</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo*bar*baz**\n.\n"
- "<p><strong>foo<em>bar</em>baz</"
- "em>bar</em>baz</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "***foo* bar**\n.\n"
- "<p><strong><em>foo</em> bar</"
- ">foo</em> bar</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo *bar***\n.\n"
- "<p><strong>foo <em>bar</em></"
- " <em>bar</em></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Indefinite levels of nesting are
- " of nesting are possible:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo *bar **baz**\nbim* bop**\n.\n"
- "<p><strong>foo <em>bar <strong>"
- "<em>bar <strong>baz</strong>\n"
- "bim</em> bop</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo [*bar*](/url)**\n.\n"
- "<p><strong>foo <a href=\"/url\"><"
- "<a href=\"/url\"><em>bar</em></a><"
- "em>bar</em></a></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "There can be no empty emphasis "
- " empty emphasis or strong "
- " or strong emphasis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__ is not an empty emphasis\n.\n"
- "<p>__ is not an empty emphasis</"
- "empty emphasis</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "____ is not an empty strong "
- "an empty strong emphasis\n.\n"
- "<p>____ is not an empty strong "
- "an empty strong emphasis</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\nRule 11:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo ***\n.\n<p>foo ***</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo *\\**\n.\n"
- ".\n<p>foo <em>*</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo *_*\n.\n<p>foo <em>_</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo *****\n.\n<p>foo *****</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo **\\***\n.\n"
- ".\n<p>foo <strong>*</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo **_**\n.\n"
- ".\n<p>foo <strong>_</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Note that when delimiters do not
- " do not match evenly, Rule 11 "
- "evenly, Rule 11 determines\n"
- "that the excess literal `*`"
- " characters will appear outside "
- " appear outside of the\n"
- "emphasis, rather than inside it:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo*\n.\n<p>*<em>foo</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo**\n.\n<p><em>foo</em>*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "***foo**\n.\n"
- ".\n<p>*<strong>foo</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "****foo*\n.\n"
- ".\n<p>***<em>foo</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo***\n.\n"
- ".\n<p><strong>foo</strong>*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo****\n.\n"
- ".\n<p><em>foo</em>***</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\nRule 12:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo ___\n.\n<p>foo ___</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo _\\__\n.\n"
- ".\n<p>foo <em>_</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo _*_\n.\n<p>foo <em>*</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo _____\n.\n<p>foo _____</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo __\\___\n.\n"
- ".\n<p>foo <strong>_</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo __*__\n.\n"
- ".\n<p>foo <strong>*</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo_\n.\n<p>_<em>foo</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Note that when delimiters do not
- " do not match evenly, Rule 12 "
- "evenly, Rule 12 determines\n"
- "that the excess literal `_`"
- " characters will appear outside "
- " appear outside of the\n"
- "emphasis, rather than inside it:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo__\n.\n<p><em>foo</em>_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "___foo__\n.\n"
- ".\n<p>_<strong>foo</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "____foo_\n.\n"
- ".\n<p>___<em>foo</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo___\n.\n"
- ".\n<p><strong>foo</strong>_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo____\n.\n"
- ".\n<p><em>foo</em>___</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Rule 13 implies that if you want
- that if you want emphasis nested
- " emphasis nested directly inside"
- "\n"
- "emphasis, you must use different"
- " use different delimiters:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo**\n.\n"
- ".\n<p><strong>foo</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*_foo_*\n.\n"
- ".\n<p><em><em>foo</em></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__foo__\n.\n"
- ".\n<p><strong>foo</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_*foo*_\n.\n"
- ".\n<p><em><em>foo</em></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, strong emphasis within "
- "emphasis within strong emphasis "
- "strong emphasis is possible "
- " is possible without\n"
- "switching delimiters:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "****foo****\n.\n"
- "<p><strong><strong>foo</strong><"
- ">foo</strong></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "____foo____\n.\n"
- "<p><strong><strong>foo</strong><"
- ">foo</strong></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "Rule 13 can be applied to "
- " be applied to arbitrarily long "
- " long sequences of\ndelimiters:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "******foo******\n.\n"
- "<p><strong><strong><strong>foo</"
- "><strong>foo</strong></strong></"
- "></strong></strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 14:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "***foo***\n.\n"
- "<p><em><strong>foo</strong></em>"
- "</strong></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_____foo_____\n.\n"
- "<p><em><strong><strong>foo</"
- "><strong>foo</strong></strong></"
- "></strong></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 15:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo _bar* baz_\n.\n"
- ".\n<p><em>foo _bar</em> baz_</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo __bar *baz bim__ bam*\n.\n"
- "<p><em>foo <strong>bar *baz bim<"
- ">bar *baz bim</strong> bam</em><"
- "> bam</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 16:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**foo **bar baz**\n.\n"
- "<p>**foo <strong>bar baz</strong"
- ">bar baz</strong></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo *bar baz*\n.\n"
- ".\n<p>*foo <em>bar baz</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nRule 17:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*[bar*](/url)\n.\n"
- "<p>*<a href=\"/url\">bar*</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_foo [bar_](/url)\n.\n"
- "<p>_foo <a href=\"/url\">bar_</a><"
- "\"/url\">bar_</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*<img src=\"foo\" title=\"*\"/>\n.\n"
- "<p>*<img src=\"foo\" title=\"*\"/></"
- "\" title=\"*\"/></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**<a href=\"**\">\n.\n"
- ".\n<p>**<a href=\"**\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__<a href=\"__\">\n.\n"
- ".\n<p>__<a href=\"__\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*a `*`*\n.\n"
- "<p><em>a <code>*</code></em></p>"
- "</code></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "_a `_`_\n.\n"
- "<p><em>a <code>_</code></em></p>"
- "</code></em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "**a<https://foo.bar/?q=**>\n.\n"
- "<p>**a<a href=\"https://foo.bar/?"
- "q=**\">https://foo.bar/?"
- "q=**</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "__a<https://foo.bar/?q=__>\n.\n"
- "<p>__a<a href=\"https://foo.bar/?"
- "q=__\">https://foo.bar/?"
- "q=__</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "## Links\n\n"
- "A link contains [link text]"
- "] (the visible text), a ["
- "[link destination]\n"
- "(the URI that is the link "
- " is the link destination), and "
- "), and optionally a [link title]"
- "[link title].\n"
- "There are two basic kinds of "
- " basic kinds of links in "
- " of links in Markdown.  In ["
- "[inline links] the\n"
- "destination and title are given "
- "title are given immediately "
- " immediately after the link text"
- " the link text.  In\n["
- "[reference links]"
- " the destination and title are "
- " and title are defined elsewhere"
- " elsewhere in\nthe document.\n\n"
- "A [link text](@)"
- " consists of a sequence of zero "
- " of zero or more\n"
- "inline elements enclosed by "
- " enclosed by square brackets ("
- "`[` and `]`).  The\n"
- ").  The\nfollowing rules apply:\n\n"
- "- "
- "Links may not contain other "
- " contain other links, at any "
- " links, at any level of nesting."
- " of nesting. If\n  "
- "multiple otherwise valid link "
- " valid link definitions appear "
- " appear nested inside each\n  "
- "other, the inner-most definition"
- "-most definition is used.\n\n"
- "- Brackets are allowed in the ["
- "[link text] only if (a) they\n  "
- "are backslash-escaped or (b) "
- "-escaped or (b) they appear as a"
- they appear as a matched pair of
- " matched pair of brackets,\n  "
- "with an open bracket `[`"
- ", a sequence of zero or more "
- "of zero or more inlines, and\n  "
- "a close bracket `]`.\n\n"
- "- Backtick [code spans], ["
- "[code spans], [autolinks]"
- "], [autolinks], and raw ["
- "], and raw [HTML tags]"
- "[HTML tags] bind more tightly\n  "
- than the brackets in link text.
- " in link text.  "
- "Thus, for example,\n  "
- "`` [foo`]` ``"
- " could not be a link text, since"
- "link text, since the second `]`"
- "`]`\n  is part of a code span.\n\n"
- "- "
- "The brackets in link text bind "
- " link text bind more tightly "
- " more tightly than markers for\n"
- "\n  [emphasis and strong emphasis"
- "]. Thus, for example, "
- "`*[foo*](url)` is a link.\n\n"
- "A [link destination](@)"
- " consists of either\n\n"
- "- "
- "a sequence of zero or more "
- "of zero or more characters "
- "more characters between an "
- " between an opening `<` and a\n  "
- "`<` and a\n  closing `>`"
- " that contains no line endings "
- "no line endings or unescaped\n  "
- "`<` or `>` characters, or\n\n"
- "- "
- "a nonempty sequence of "
- " sequence of characters that "
- "characters that does not start "
- " does not start with `<`,\n  "
- "`<`,\n  does not include ["
- "[ASCII control characters]["
- "][ASCII control character]\n  or "
- "]\n  or [space]"
- " character, and includes "
- ", and includes parentheses only "
- " only if (a) they are\n  "
- "backslash-escaped or (b) they "
- " or (b) they are part of a "
- " are part of a balanced pair of\n"
- "\n  unescaped parentheses.\n  "
- "(Implementations may impose "
- " may impose limits on "
- " limits on parentheses nesting "
- " nesting to\n  "
- "avoid performance issues, but at"
- " issues, but at least three "
- " at least three levels of "
- "three levels of nesting\n  "
- "should be supported.)\n\n"
- "A [link title](@)"
- "  consists of either\n\n"
- "- "
- "a sequence of zero or more "
- "of zero or more characters "
- more characters between straight
- "between straight double-quote\n  "
- "characters (`\"`), including a "
- "), including a `\"`"
- "`\"` character only if it is\n  "
- "\n  backslash-escaped, or\n\n"
- "- "
- "a sequence of zero or more "
- "of zero or more characters "
- more characters between straight
- "between straight single-quote\n  "
- "characters (`'`), including a "
- "), including a `'`"
- "`'` character only if it is\n  "
- "\n  backslash-escaped, or\n\n"
- "- "
- "a sequence of zero or more "
- "of zero or more characters "
- more characters between matching
- "between matching parentheses\n  ("
- "(`(...)`), including a `(` or "
- "`(` or `)`"
- " or `)` character only if it is"
- "\n  backslash-escaped.\n\n"
- "Although [link titles]"
- " may span multiple lines, they "
- " lines, they may not contain\na ["
- "a [blank line].\n\n"
- "An [inline link](@)"
- "[inline link](@) consists of a ["
- " consists of a [link text]"
- "[link text] followed immediately"
- "\nby a left parenthesis `(`"
- "`(`, an optional ["
- ", an optional [link destination]"
- "], an optional\n[link title]"
- "], and a right parenthesis `)`.\n"
- "These four components may be "
- " may be separated by spaces, "
- " by spaces, tabs, and up to one "
- ", and up to one line\nending.\n"
- "ending.\nIf both ["
- "\nIf both [link destination] and "
- "] and [link title]"
- "[link title] are present, they "
- "*must* be\n"
- "separated by spaces, tabs, and "
- ", tabs, and up to one line "
- " up to one line ending.\n\n"
- "The link'"
- "s text consists of the inlines "
- " of the inlines contained\n"
- "in the [link text]"
- " (excluding the enclosing square"
- "enclosing square brackets).\n"
- "The link'"
- "s URI consists of the link "
- " of the link destination, "
- " destination, excluding "
- ", excluding enclosing\n`<...>`"
- " if present, with backslash-"
- " with backslash-escapes in "
- "-escapes in effect as described\n"
- "above.  The link'"
- "s title consists of the link "
- " of the link title, excluding "
- ", excluding its\n"
- "enclosing delimiters, with "
- ", with backslash-escapes in "
- "-escapes in effect as described\n"
- "above.\n\n"
- "Here is a simple inline link:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/uri \"title\")\n.\n"
- "<p><a href=\"/uri\" title=\"title\">"
- "\" title=\"title\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The title, the link text and "
- " link text and even \n"
- "the destination may be omitted:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/uri)\n.\n"
- "<p><a href=\"/uri\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[](./target.md)\n.\n"
- "<p><a href=\"./target.md\"></a></p"
- "\"></a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link]()\n.\n"
- ".\n<p><a href=\"\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](<>)\n.\n"
- ".\n<p><a href=\"\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[]()\n.\n<p><a href=\"\"></a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- The destination can only contain
- can only contain spaces if it is
- "\nenclosed in pointy brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/my uri)\n.\n"
- ".\n<p>[link](/my uri)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](</my uri>)\n.\n"
- "<p><a href=\"/my%20uri\">link</a><"
- "20uri\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "The destination cannot contain "
- " cannot contain line endings,\n"
- "even if enclosed in pointy "
- " in pointy brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo\nbar)\n.\n<p>[link](foo\n"
- ".\n<p>[link](foo\nbar)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](<foo\nbar>)\n.\n"
- "bar>)\n.\n<p>[link](<foo\n"
- "<p>[link](<foo\nbar>)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "The destination can contain `)`"
- "`)` if it is enclosed\n"
- "\nin pointy brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[a](<b)c>)\n.\n"
- ".\n<p><a href=\"b)c\">a</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Pointy brackets that enclose "
- " that enclose links must be "
- " links must be unescaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](<foo\\>)\n.\n"
- ".\n<p>[link](&lt;foo&gt;)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "These are not links, because the"
- ", because the opening pointy "
- " opening pointy bracket\n"
- "is not matched properly:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[a](<b)c\n[a](<b)c>\n[a](<b>c)\n.\n"
- "[a](<b>c)\n.\n<p>[a](&lt;b)c\n"
- "<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n"
- "[a](&lt;b)c&gt;\n[a](<b>c)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Parentheses inside the link "
- "inside the link destination may "
- "destination may be escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](\\(foo\\))\n.\n"
- "<p><a href=\"(foo)\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Any number of parentheses are "
- "parentheses are allowed without "
- "allowed without escaping, as "
- " escaping, as long as they are\n"
- "balanced:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo(and(bar)))\n.\n"
- "<p><a href=\"foo(and(bar))\">link<"
- "and(bar))\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "However, if you have unbalanced "
- "have unbalanced parentheses, you"
- "parentheses, you need to escape "
- " need to escape or use the\n"
- "`<...>` form:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo(and(bar))\n.\n"
- ".\n<p>[link](foo(and(bar))</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo\\(and\\(bar\\))\n.\n"
- "<p><a href=\"foo(and(bar)\">link</"
- "and(bar)\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](<foo(and(bar)>)\n.\n"
- "<p><a href=\"foo(and(bar)\">link</"
- "and(bar)\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Parentheses and other symbols "
- " other symbols can also be "
- " can also be escaped, as usual\n"
- "in Markdown:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo\\)\\:)\n.\n"
- "<p><a href=\"foo):\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A link can contain fragment "
- " fragment identifiers and "
- "identifiers and queries:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](#fragment)\n\n"
- "[link](https://example.com#"
- "://example.com#fragment)\n\n"
- "\n[link](https://example.com?"
- "foo=3#frag)\n.\n"
- "<p><a href=\"#fragment\">link</a><"
- "\">link</a></p>\n"
- "<p><a href=\"https://example.com#"
- "://example.com#fragment\">link</a"
- "\">link</a></p>\n"
- "<p><a href=\"https://example.com?"
- "foo=3#frag\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that a backslash before a "
- " before a non-escapable "
- "a non-escapable character is\n"
- "just a backslash:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo\\bar)\n.\n"
- "<p><a href=\"foo%5Cbar\">link</a><"
- "5Cbar\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "URL-escaping should be left "
- " should be left alone inside the"
- "alone inside the destination, as"
- " destination, as all\n"
- "URL-escaped characters are also "
- " are also valid URL characters. "
- "Entity and\n"
- "numerical character references "
- " references in the destination "
- "the destination will be parsed\n"
- "into the corresponding Unicode "
- " Unicode code points, as usual."
- ", as usual.  These may\n"
- "be optionally URL-escaped when "
- "-escaped when written as HTML, "
- " as HTML, but this spec\n"
- "does not enforce any particular "
- " any particular policy for "
- " policy for rendering URLs in\n"
- "HTML or other formats.  "
- "Renderers may make different "
- " make different decisions\n"
- about how to escape or normalize
- " or normalize URLs in the output"
- " in the output.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](foo%20b&auml;)\n.\n"
- "<p><a href=\"foo%20b%C3%A4\">link<"
- "20b%C3%A4\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that, because titles can "
- " titles can often be parsed as "
- " be parsed as destinations,\n"
- "if you try to omit the "
- "try to omit the destination and "
- "destination and keep the title, "
- "keep the title, you'll\n"
- "'ll\nget unexpected results:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](\"title\")\n.\n"
- "<p><a href=\"%22title%22\">link</a"
- "%22\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Titles may be in single quotes, "
- " single quotes, double quotes, "
- " double quotes, or parentheses:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/url \"title\")\n"
- "[link](/url 'title')\n"
- "[link](/url (title))\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">link</a>\n"
- "<a href=\"/url\" title=\"title\">"
- "\" title=\"title\">link</a>\n"
- "<a href=\"/url\" title=\"title\">"
- "\" title=\"title\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Backslash escapes and entity and
- " and entity and numeric "
- " and numeric character "
- " character references\n"
- "may be used in titles:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/url \"title \\\"&quot;\")\n.\n"
- "<p><a href=\"/url\" title=\"title &"
- "\" title=\"title &quot;&quot;\">"
- " &quot;&quot;\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Titles must be separated from "
- " separated from the link using "
- " the link using spaces, tabs, "
- " spaces, tabs, and up to one "
- ", and up to one line\nending.\n"
- "ending.\nOther ["
- "\nOther [Unicode whitespace]"
- "] like non-breaking space doesn'"
- "'t work.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/url \"title\")\n.\n"
- "<p><a href=\"/url%C2%A0%22title%"
- "%C2%A0%22title%22\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Nested balanced quotes are not "
- " quotes are not allowed without "
- "allowed without escaping:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/url \"title \"and\" title\")"
- " \"and\" title\")\n.\n"
- "<p>[link](/url &quot;title &quot"
- quot;title &quot;and&quot; title
- ";and&quot; title&quot;)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "But it is easy to work around "
- " to work around this by using a "
- "this by using a different quote "
- "different quote type:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](/url 'title \"and\" title')"
- " \"and\" title')\n.\n"
- "<p><a href=\"/url\" title=\"title &"
- "\" title=\"title &quot;and&quot; "
- "&quot;and&quot; title\">link</a><"
- "title\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "(Note:  `Markdown.pl`"
- " did allow double quotes inside "
- " quotes inside a double-quoted\n"
- "title, and its test suite "
- " its test suite included a test "
- "included a test demonstrating "
- " demonstrating this.\n"
- "But it is hard to see a good "
- " to see a good rationale for the"
- " for the extra complexity this\n"
- "brings, since there are already "
- " are already many ways---"
- "---backslash escaping,\n"
- "entity and numeric character "
- " character references, or using "
- ", or using a different\n"
- "quote type for the enclosing "
- " the enclosing title---"
- "---to write titles containing\n"
- "\ndouble quotes.  `Markdown.pl`'"
- "s handling of titles has a "
- "of titles has a number\n"
- "of other strange features.  "
- "For example, it allows single-"
- " allows single-quoted\n"
- "titles in inline links, but not "
- " links, but not reference links."
- "reference links.  And, in\n"
- "reference links but not inline "
- " but not inline links, it allows"
- "links, it allows a title to "
- " a title to begin\nwith `\"`"
- "with `\"` and end with `)`.  "
- "`)`.  `Markdown.pl`"
- "`Markdown.pl` 1.0.1 even allows\n"
- titles with no closing quotation
- " quotation mark, though 1.0.2b8 "
- " though 1.0.2b8 does not.\n"
- "It seems preferable to adopt a "
- " to adopt a simple, rational "
- ", rational rule that works\n"
- the same way in inline links and
- "inline links and link reference "
- " link reference definitions.)\n\n"
- "Spaces, tabs, and up to one line"
- " up to one line ending is "
- " line ending is allowed around "
- " allowed around the destination "
- "the destination and\ntitle:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link](   /uri\n  \"title\"  )\n.\n"
- "<p><a href=\"/uri\" title=\"title\">"
- "\" title=\"title\">link</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "But it is not allowed between "
- "allowed between the link text "
- " the link text and the\n"
- "following parenthesis:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link] (/uri)\n.\n"
- ".\n<p>[link] (/uri)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The link text may contain "
- " may contain balanced brackets, "
- " brackets, but not unbalanced "
- " not unbalanced ones,\n"
- "unless they are escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link [foo [bar]]](/uri)\n.\n"
- "<p><a href=\"/uri\">link [foo [bar"
- "\">link [foo [bar]]</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link] bar](/uri)\n.\n"
- ".\n<p>[link] bar](/uri)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link [bar](/uri)\n.\n"
- "<p>[link <a href=\"/uri\">bar</a><"
- "=\"/uri\">bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link \\[bar](/uri)\n.\n"
- "<p><a href=\"/uri\">link [bar</a><"
- "\">link [bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The link text may contain inline
- " contain inline content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link *foo **bar** `#`*](/uri)\n"
- ".\n"
- "<p><a href=\"/uri\">link <em>foo <"
- "\">link <em>foo <strong>bar</"
- " <strong>bar</strong> <code>#</"
- "> <code>#</code></em></a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[![moon](moon.jpg)](/uri)\n.\n"
- "<p><a href=\"/uri\"><img src=\""
- "/uri\"><img src=\"moon.jpg\" alt=\""
- "\"moon.jpg\" alt=\"moon\" /></a></p>"
- "moon\" /></a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, links may not contain "
- "may not contain other links, at "
- "other links, at any level of "
- "at any level of nesting.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo [bar](/uri)](/uri)\n.\n"
- "<p>[foo <a href=\"/uri\">bar</a>]("
- "\"/uri\">bar</a>](/uri)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo *[bar [baz](/uri)](/uri)*]("
- "(/uri)](/uri)*](/uri)\n.\n"
- "<p>[foo <em>[bar <a href=\"/uri\">"
- " <a href=\"/uri\">baz</a>](/uri)</"
- "baz</a>](/uri)</em>](/uri)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![[[foo](uri1)](uri2)](uri3)\n.\n"
- "<p><img src=\"uri3\" alt=\"[foo]("
- "\" alt=\"[foo](uri2)\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "These cases illustrate the "
- " illustrate the precedence of "
- " precedence of link text "
- " of link text grouping over\n"
- "emphasis grouping:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*[foo*](/uri)\n.\n"
- "<p>*<a href=\"/uri\">foo*</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo *bar](baz*)\n.\n"
- "<p><a href=\"baz*\">foo *bar</a></"
- "\">foo *bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that brackets that *aren't*"
- " part of links do not take\n"
- "\nprecedence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo [bar* baz]\n.\n"
- ".\n<p><em>foo [bar</em> baz]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "These cases illustrate the "
- " illustrate the precedence of "
- " precedence of HTML tags, code "
- "HTML tags, code spans,\n"
- and autolinks over link grouping
- " link grouping:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo <bar attr=\"](baz)\">\n.\n"
- "<p>[foo <bar attr=\"](baz)\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo`](/uri)`\n.\n"
- "<p>[foo<code>](/uri)</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo<https://example.com/?"
- "search=](uri)>\n.\n"
- "<p>[foo<a href=\"https://"
- "a href=\"https://example.com/?"
- "search=%5D(uri)\">https://"
- "(uri)\">https://example.com/?"
- "search=](uri)</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "There are three kinds of "
- "[reference link](@)s:\n"
- "s:\n[full](#full-reference-link)"
- ", "
- "[collapsed](#collapsed-reference"
- "-reference-link),\nand "
- "[shortcut](#shortcut-reference-"
- "-reference-link).\n\n"
- "A [full reference link](@)\n"
- "\nconsists of a [link text]"
- "] immediately followed by a ["
- "[link label]\nthat [matches] a ["
- "] a [link reference definition]"
- "] elsewhere in the document.\n\n"
- "A [link label](@)"
- "  begins with a left bracket ("
- "`[`) and ends\n"
- "\nwith the first right bracket ("
- "`]`"
- ) that is not backslash-escaped.
- "\n"
- "Between these brackets there "
- " brackets there must be at least"
- "must be at least one character "
- " one character that is not a "
- " that is not a space,\n"
- "tab, or line ending.\n"
- "Unescaped square bracket "
- " square bracket characters are "
- " characters are not allowed "
- "are not allowed inside the\n"
- "opening and closing square "
- " closing square brackets of ["
- "[link labels].  A link\n"
- "label can have at most 999 "
- " at most 999 characters inside "
- " inside the square\nbrackets.\n\n"
- "One label [matches](@)\n"
- "another just in case their "
- " in case their normalized forms "
- " forms are equal.  "
- "To normalize a\n"
- "label, strip off the opening and"
- " the opening and closing "
- " and closing brackets,\n"
- perform the *Unicode case fold*
- ", strip leading and trailing\n"
- "spaces, tabs, and line endings, "
- " line endings, and collapse "
- ", and collapse consecutive "
- " consecutive internal\n"
- "spaces, tabs, and line endings "
- " line endings to a single space."
- " a single space.  "
- "If there are multiple\n"
- "matching reference link "
- " reference link definitions, the"
- "definitions, the one that comes "
- " one that comes first in the\n"
- "document is used.  "
- "(It is desirable in such cases "
- " in such cases to emit a warning"
- " emit a warning.)\n\n"
- "The link'"
- "s URI and title are provided by "
- "are provided by the matching ["
- "[link\nreference definition].\n\n"
- "Here is a simple example:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][bar]\n\n[bar]: /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The rules for the [link text]"
- "[link text] are the same as with"
- "\n[inline links].  Thus:\n\n"
- "The link text may contain "
- " may contain balanced brackets, "
- " brackets, but not unbalanced "
- " not unbalanced ones,\n"
- "unless they are escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link [foo [bar]]][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">link [foo [bar"
- "\">link [foo [bar]]</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link \\[bar][ref]\n\n[ref]: /uri\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">link [bar</a><"
- "\">link [bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The link text may contain inline
- " contain inline content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[link *foo **bar** `#`*][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">link <em>foo <"
- "\">link <em>foo <strong>bar</"
- " <strong>bar</strong> <code>#</"
- "> <code>#</code></em></a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[![moon](moon.jpg)][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri\"><img src=\""
- "/uri\"><img src=\"moon.jpg\" alt=\""
- "\"moon.jpg\" alt=\"moon\" /></a></p>"
- "moon\" /></a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "However, links may not contain "
- "may not contain other links, at "
- "other links, at any level of "
- "at any level of nesting.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo [bar](/uri)][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo <a href=\"/uri\">bar</a>]<"
- "\"/uri\">bar</a>]<a href=\"/uri\">"
- "]<a href=\"/uri\">ref</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo *bar [baz][ref]*][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo <em>bar <a href=\"/uri\">"
- " <a href=\"/uri\">baz</a></em>]<a "
- "baz</a></em>]<a href=\"/uri\">ref<"
- "href=\"/uri\">ref</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "(In the examples above, we have "
- " above, we have two ["
- "[shortcut reference links]\n"
- "]\ninstead of one ["
- "[full reference link].)\n\n"
- "The following cases illustrate "
- " illustrate the precedence of "
- " precedence of link text "
- " of link text grouping over\n"
- "emphasis grouping:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*[foo*][ref]\n\n[ref]: /uri\n.\n"
- "<p>*<a href=\"/uri\">foo*</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo *bar][ref]*\n\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">foo *bar</a>*<"
- "\">foo *bar</a>*</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "These cases illustrate the "
- " illustrate the precedence of "
- " precedence of HTML tags, code "
- "HTML tags, code spans,\n"
- and autolinks over link grouping
- " link grouping:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo <bar attr=\"][ref]\">\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo <bar attr=\"][ref]\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo`][ref]`\n\n[ref]: /uri\n.\n"
- "<p>[foo<code>][ref]</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo<https://example.com/?"
- "search=][ref]>\n\n[ref]: /uri\n.\n"
- "<p>[foo<a href=\"https://"
- "a href=\"https://example.com/?"
- "search=%5D%5Bref%5D\">https://"
- "%5D\">https://example.com/?"
- "search=][ref]</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Matching is case-insensitive:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][BaR]\n\n[bar]: /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Unicode case fold is used:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[ẞ]\n\n[SS]: /url\n.\n"
- ".\n<p><a href=\"/url\">ẞ</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Consecutive internal spaces, "
- " spaces, tabs, and line endings "
- " line endings are treated as one"
- " treated as one space for\n"
- purposes of determining matching
- " matching:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[Foo\n  bar]: /url\n\n"
- "  bar]: /url\n\n[Baz][Foo bar]\n.\n"
- ".\n<p><a href=\"/url\">Baz</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "No spaces, tabs, or line endings"
- " or line endings are allowed "
- " are allowed between the ["
- "[link text] and the\n[link label]"
- "\n[link label]:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo] [bar]\n\n"
- "\n[bar]: /url \"title\"\n.\n"
- "<p>[foo] <a href=\"/url\" title=\""
- "=\"/url\" title=\"title\">bar</a></p"
- "\">bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n[bar]\n\n"
- "[bar]\n\n[bar]: /url \"title\"\n.\n"
- ".\n<p>[foo]\n"
- "<a href=\"/url\" title=\"title\">bar"
- "=\"title\">bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "This is a departure from John "
- " from John Gruber'"
- "'s original Markdown syntax\n"
- "description, which explicitly "
- " explicitly allows whitespace "
- " whitespace between the link\n"
- "text and the link label.  "
- "It brings reference links in "
- " links in line with\n["
- "[inline links]"
- ", which (according to both "
- " to both original Markdown and\n"
- "this spec) cannot have "
- ") cannot have whitespace after "
- " after the link text.  More\n"
- "importantly, it prevents "
- ", it prevents inadvertent "
- " inadvertent capture of "
- " capture of consecutive\n["
- "[shortcut reference links]"
- ". "
- If whitespace is allowed between
- " allowed between the\n"
- "link text and the link label, "
- "the link label, then in the "
- ", then in the following we will "
- " we will have\n"
- "a single reference link, not two"
- " link, not two shortcut "
- " two shortcut reference links, "
- " links, as\nintended:\n\n"
- "``` markdown\n"
- "[foo]\n[bar]\n\n[foo]: /url1\n"
- "\n[foo]: /url1\n[bar]: /url2\n```\n\n"
- "(Note that ["
- "[shortcut reference links]"
- "] were introduced by Gruber\n"
- "\nhimself in a beta version of "
- "`Markdown.pl`"
- ", but never included\n"
- "in the official syntax "
- "official syntax description.  "
- "Without shortcut reference\n"
- "links, it is harmless to allow "
- " to allow space between the link"
- "between the link text and\n"
- "link label; but once shortcut "
- " once shortcut references are "
- " references are introduced, it "
- " introduced, it is\n"
- "too dangerous to allow this, as "
- " allow this, as it frequently "
- " it frequently leads to\n"
- "unintended results.)\n\n"
- When there are multiple matching
- " matching ["
- "[link reference definitions],\n"
- "],\nthe first is used:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]: /url1\n\n[foo]: /url2\n\n"
- "\n[foo]: /url2\n\n[bar][foo]\n.\n"
- "<p><a href=\"/url1\">bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that matching is performed "
- " is performed on normalized "
- " on normalized strings, not "
- " strings, not parsed\n"
- "inline content.  "
- "So the following does not match,"
- " does not match, even though the"
- "\n"
- "labels define equivalent inline "
- " inline content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[bar][foo\\!]\n\n[foo!]: /url\n.\n"
- "\n[foo!]: /url\n.\n<p>[bar][foo!]"
- ".\n<p>[bar][foo!]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "[Link labels]"
- " cannot contain brackets, unless"
- "brackets, unless they are\n"
- "backslash-escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][ref[]\n\n[ref[]: /uri\n.\n"
- ".\n<p>[foo][ref[]</p>\n"
- "<p>[ref[]: /uri</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][ref[bar]]\n\n"
- "\n[ref[bar]]: /uri\n.\n"
- ".\n<p>[foo][ref[bar]]</p>\n"
- "<p>[ref[bar]]: /uri</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[[[foo]]]\n\n[[[foo]]]: /url\n.\n"
- ".\n<p>[[[foo]]]</p>\n"
- "<p>[[[foo]]]: /url</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][ref\\[]\n\n[ref\\[]: /uri\n.\n"
- ".\n<p><a href=\"/uri\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that in this example `]`"
- "`]` is not backslash-escaped:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[bar\\\\]: /uri\n\n[bar\\\\]\n.\n"
- "<p><a href=\"/uri\">bar\\</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A [link label]"
- " must contain at least one "
- " at least one character that is "
- " that is not a space, tab, or\n"
- "line ending:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[]\n\n[]: /uri\n.\n<p>[]</p>\n"
- ".\n<p>[]</p>\n<p>[]: /uri</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[\n ]\n\n[\n ]: /uri\n.\n<p>[\n]</p>\n"
- ".\n<p>[\n]</p>\n<p>[\n]: /uri</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A [collapsed reference link](@)\n"
- "\nconsists of a [link label]"
- "[link label] that [matches] a\n["
- "] a\n[link reference definition]"
- "] elsewhere in the\n"
- "document, followed by the string"
- " by the string `[]`.\n"
- "The contents of the link label "
- " the link label are parsed as "
- " are parsed as inlines,\n"
- "which are used as the link'"
- "'s text.  The link'"
- "'s URI and title are\n"
- "provided by the matching "
- "by the matching reference link "
- " reference link definition.  "
- "Thus,\n`[foo][]`"
- "`[foo][]` is equivalent to "
- "`[foo][foo]`.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][]\n\n[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[*foo* bar][]\n\n"
- "\n[*foo* bar]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\"><em>foo</em> bar"
- "<em>foo</em> bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The link labels are case-
- "labels are case-insensitive:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[Foo][]\n\n[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">Foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "As with full reference links, "
- " links, spaces, tabs, or line "
- ", tabs, or line endings are not\n"
- "allowed between the two sets of "
- "the two sets of brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo] \n[]\n\n[foo]: /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a>\n[]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A [shortcut reference link](@)\n"
- "\nconsists of a [link label]"
- "[link label] that [matches] a\n["
- "] a\n[link reference definition]"
- "] elsewhere in the\n"
- "document and is not followed by "
- "`[]` or a link label.\n"
- "The contents of the link label "
- " the link label are parsed as "
- " are parsed as inlines,\n"
- "which are used as the link'"
- "'s text.  The link'"
- "'s URI and title\n"
- "are provided by the matching "
- "by the matching link reference "
- " link reference definition.\n"
- "Thus, `[foo]` is equivalent to "
- "`[foo][]`.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]\n\n[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[*foo* bar]\n\n"
- "\n[*foo* bar]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\"><em>foo</em> bar"
- "<em>foo</em> bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[[*foo* bar]]\n\n"
- "\n[*foo* bar]: /url \"title\"\n.\n"
- "<p>[<a href=\"/url\" title=\"title\""
- "\" title=\"title\"><em>foo</em> bar"
- "<em>foo</em> bar</a>]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[[bar [foo]\n\n[foo]: /url\n.\n"
- "<p>[[bar <a href=\"/url\">foo</a><"
- "=\"/url\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The link labels are case-
- "labels are case-insensitive:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[Foo]\n\n[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">Foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "A space after the link text "
- " the link text should be "
- " text should be preserved:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo] bar\n\n[foo]: /url\n.\n"
- "<p><a href=\"/url\">foo</a> bar</p"
- "\">foo</a> bar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If you just want bracketed text,"
- " bracketed text, you can "
- " text, you can backslash-escape "
- "-escape the\n"
- "opening bracket to avoid links:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\[foo]\n\n[foo]: /url \"title\"\n.\n"
- ".\n<p>[foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that this is a link, "
- "this is a link, because a link "
- " because a link label ends with "
- "label ends with the first\n"
- "following closing bracket:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo*]: /url\n\n*[foo*]\n.\n"
- "<p>*<a href=\"/url\">foo*</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Full and collapsed references "
- " references take precedence over"
- " precedence over shortcut\n"
- "references:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][bar]\n\n[foo]: /url1\n"
- "\n[foo]: /url1\n[bar]: /url2\n.\n"
- "<p><a href=\"/url2\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][]\n\n[foo]: /url1\n.\n"
- "<p><a href=\"/url1\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "Inline links also take "
- "links also take precedence:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo]()\n\n[foo]: /url1\n.\n"
- ".\n<p><a href=\"\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo](not a link)\n\n[foo]: /url1\n"
- "\n[foo]: /url1\n.\n"
- "<p><a href=\"/url1\">foo</a>(not a"
- "\">foo</a>(not a link)</p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "In the following case "
- "`[bar][baz]`"
- " is parsed as a reference,\n"
- "\n`[foo]` as normal text:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][bar][baz]\n\n[baz]: /url\n.\n"
- "<p>[foo]<a href=\"/url\">bar</a></"
- "\"/url\">bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here, though, `[foo][bar]`"
- " is parsed as a reference, since"
- "\n`[bar]` is defined:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][bar][baz]\n\n[baz]: /url1\n"
- "\n[baz]: /url1\n[bar]: /url2\n.\n"
- "<p><a href=\"/url2\">foo</a><a "
- "url2\">foo</a><a href=\"/url1\">baz"
- "href=\"/url1\">baz</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Here `[foo]`"
- " is not parsed as a shortcut "
- " as a shortcut reference, "
- " reference, because it\n"
- is followed by a link label (
- " a link label (even though "
- "`[bar]` is not defined):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "[foo][bar][baz]\n\n[baz]: /url1\n"
- "\n[baz]: /url1\n[foo]: /url2\n.\n"
- "<p>[foo]<a href=\"/url1\">bar</a><"
- "\"/url1\">bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n\n"
- "## Images\n\n"
- "Syntax for images is like the "
- " is like the syntax for links, "
- " for links, with one\n"
- "difference. Instead of ["
- "[link text], we have an\n"
- "\n[image description](@)"
- ".  The rules for this are the\n"
- "\nsame as for [link text]"
- "[link text], except that (a) an\n"
- "\nimage description starts with "
- "`![` rather than `[`, and\n"
- "(b) an image description may "
- "description may contain links.\n"
- "An image description has inline "
- " has inline elements\n"
- "as its contents.  "
- "When an image is rendered to "
- " is rendered to HTML,\n"
- "this is standardly used as the "
- " used as the image's `alt`"
- "'s `alt` attribute.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo](/url \"title\")\n.\n"
- "<p><img src=\"/url\" alt=\"foo\" "
- "/url\" alt=\"foo\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo *bar*]\n\n"
- "[foo *bar*]: train.jpg \"train & "
- " \"train & tracks\"\n.\n"
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo bar\" title=\"train &"
- "\" title=\"train &amp; tracks\" /><"
- "amp; tracks\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo ![bar](/url)](/url2)\n.\n"
- "<p><img src=\"/url2\" alt=\"foo bar"
- "\" alt=\"foo bar\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo [bar](/url)](/url2)\n.\n"
- "<p><img src=\"/url2\" alt=\"foo bar"
- "\" alt=\"foo bar\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Though this spec is concerned "
- " is concerned with parsing, not "
- " parsing, not rendering, it is\n"
- recommended that in rendering to
- " in rendering to HTML, only the "
- " HTML, only the plain string "
- " plain string content\nof the ["
- "of the [image description]"
- "] be used.  Note that in\n"
- "the above example, the alt "
- ", the alt attribute's value is "
- "'s value is `foo bar`, not "
- "`foo bar`, not `foo\n[bar](/url)`"
- " or `foo <a href=\"/url\">bar</a>`"
- ".  Only the plain string\n"
- "content is rendered, without "
- ", without formatting.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo *bar*][]\n\n"
- "[foo *bar*]: train.jpg \"train & "
- " \"train & tracks\"\n.\n"
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo bar\" title=\"train &"
- "\" title=\"train &amp; tracks\" /><"
- "amp; tracks\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo *bar*][foobar]\n\n"
- "[FOOBAR]: train.jpg \"train & "
- " \"train & tracks\"\n.\n"
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo bar\" title=\"train &"
- "\" title=\"train &amp; tracks\" /><"
- "amp; tracks\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo](train.jpg)\n.\n"
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "My !["
- "foo bar](/path/to/train.jpg  \""
- "/to/train.jpg  \"title\"   )\n.\n"
- "<p>My <img src=\"/path/to/"
- " src=\"/path/to/train.jpg\" alt=\""
- "train.jpg\" alt=\"foo bar\" title=\""
- "foo bar\" title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo](<url>)\n.\n"
- "<p><img src=\"url\" alt=\"foo\" /></"
- "\" alt=\"foo\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![](/url)\n.\n"
- "<p><img src=\"/url\" alt=\"\" /></p>"
- "\" alt=\"\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Reference-style:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo][bar]\n\n[bar]: /url\n.\n"
- "<p><img src=\"/url\" alt=\"foo\" /><"
- "\" alt=\"foo\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo][bar]\n\n[BAR]: /url\n.\n"
- "<p><img src=\"/url\" alt=\"foo\" /><"
- "\" alt=\"foo\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nCollapsed:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo][]\n\n[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt=\"foo\" "
- "/url\" alt=\"foo\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![*foo* bar][]\n\n"
- "\n[*foo* bar]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt=\"foo bar\""
- "\" alt=\"foo bar\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "The labels are case-insensitive:"
- "\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![Foo][]\n\n[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt=\"Foo\" "
- "/url\" alt=\"Foo\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "As with reference links, spaces,"
- " links, spaces, tabs, and line "
- " tabs, and line endings, are not"
- "endings, are not allowed\n"
- between the two sets of brackets
- "sets of brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo] \n[]\n\n[foo]: /url \"title\"\n"
- ".\n"
- "<p><img src=\"/url\" alt=\"foo\" "
- "/url\" alt=\"foo\" title=\"title\" />"
- "title=\"title\" />\n[]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nShortcut:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![foo]\n\n[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt=\"foo\" "
- "/url\" alt=\"foo\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![*foo* bar]\n\n"
- "\n[*foo* bar]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt=\"foo bar\""
- "\" alt=\"foo bar\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that link labels cannot "
- " labels cannot contain unescaped"
- " unescaped brackets:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![[foo]]\n\n[[foo]]: /url \"title\"\n"
- ".\n<p>![[foo]]</p>\n"
- "<p>[[foo]]: /url &quot;title&"
- "url &quot;title&quot;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- The link labels are case-
- "labels are case-insensitive:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "![Foo]\n\n[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt=\"Foo\" "
- "/url\" alt=\"Foo\" title=\"title\" />"
- "title=\"title\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If you just want a literal `!`"
- " followed by bracketed text, you"
- " text, you can\n"
- "backslash-escape the opening `[`"
- "`[`:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "!\\[foo]\n\n[foo]: /url \"title\"\n.\n"
- ".\n<p>![foo]</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "If you want a link after a "
- " a link after a literal `!`"
- "`!`, backslash-escape the\n`!`:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "\\![foo]\n\n[foo]: /url \"title\"\n.\n"
- ".\n<p>!"
- "<a href=\"/url\" title=\"title\">foo"
- "=\"title\">foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Autolinks\n\n"
- "[Autolink](@)"
- "s are absolute URIs and email "
- " URIs and email addresses inside"
- "\n`<` and `>`"
- ". "
- "They are parsed as links, with "
- " as links, with the URL or email"
- "the URL or email address\n"
- "as the link label.\n\n"
- "A [URI autolink](@) consists of "
- " consists of `<`, followed by an"
- ", followed by an\n[absolute URI]"
- "\n[absolute URI] followed by `>`"
- "`>`.  It is parsed as\n"
- "a link to the URI, with the URI "
- ", with the URI as the link'"
- "'s label.\n\n"
- "An [absolute URI](@),\n"
- "for these purposes, consists of "
- ", consists of a [scheme]"
- "[scheme] followed by a colon ("
- "`:`)\n"
- "followed by zero or more "
- by zero or more characters other
- "characters other than ["
- "[ASCII control\ncharacters]["
- "][ASCII control character], ["
- "], [space], `<`, and `>`.\n"
- "If the URI includes these "
- " includes these characters, they"
- "characters, they must be percent"
- " must be percent-encoded\n(e.g. "
- "(e.g. `%20` for a space).\n\n"
- "For purposes of this spec, a "
- "[scheme](@) is any sequence\nof 2"
- "\nof 2--"
- "32 characters beginning with an "
- " with an ASCII letter and "
- " letter and followed\n"
- "by any combination of ASCII "
- " of ASCII letters, digits, or "
- ", digits, or the symbols plus\n(\""
- "(\"+\"), period (\".\"), or hyphen ("
- ".\"), or hyphen (\"-\").\n\n"
- "Here are some valid autolinks:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<http://foo.bar.baz>\n.\n"
- "<p><a href=\"http://foo.bar.baz\">"
- "://foo.bar.baz\">http://"
- "\">http://foo.bar.baz</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<https://foo.bar.baz/test?"
- "q=hello&id=22&boolean>\n.\n"
- "<p><a href=\"https://foo.bar.baz/"
- "://foo.bar.baz/test?"
- "q=hello&amp;id=22&amp;boolean\">"
- "22&amp;boolean\">https://"
- "\">https://foo.bar.baz/test?"
- q=hello&amp;id=22&amp;boolean</a
- "&amp;boolean</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<irc://foo.bar:2233/baz>\n.\n"
- "<p><a href=\"irc://foo.bar:2233/"
- "://foo.bar:2233/baz\">irc://"
- "2233/baz\">irc://foo.bar:2233/baz"
- "foo.bar:2233/baz</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Uppercase is also fine:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<MAILTO:FOO@BAR.BAZ>\n.\n"
- "<p><a href=\"MAILTO:FOO@BAR.BAZ\">"
- "@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a>"
- "@BAR.BAZ</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Note that many strings that "
- " strings that count as ["
- "[absolute URIs] for\n"
- "purposes of this spec are not "
- " spec are not valid URIs, "
- "not valid URIs, because their\n"
- "schemes are not registered or "
- " registered or because of other "
- " of other problems\n"
- "with their syntax:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a+b+c:d>\n.\n"
- "<p><a href=\"a+b+c:d\">a+b+c:d</a>"
- "c:d\">a+b+c:d</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<made-up-scheme://foo,bar>\n.\n"
- "<p><a href=\"made-up-scheme://foo"
- "-up-scheme://foo,bar\">made-up-"
- ",bar\">made-up-scheme://foo,bar</"
- "://foo,bar</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<https://../>\n.\n"
- "<p><a href=\"https://../\">https:/"
- "://../\">https://../</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<localhost:5001/foo>\n.\n"
- "<p><a href=\"localhost:5001/foo\">"
- ":5001/foo\">localhost:5001/foo</a"
- ":5001/foo</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Spaces are not allowed in "
- " not allowed in autolinks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<https://foo.bar/baz bim>\n.\n"
- "<p>&lt;https://foo.bar/baz bim&"
- "foo.bar/baz bim&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Backslash-escapes do not work "
- " do not work inside autolinks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<https://example.com/\\[\\>\n.\n"
- "<p><a href=\"https://example.com/"
- "://example.com/%5C%5B%5C\">https:"
- "5C%5B%5C\">https://example.com/\\["
- "//example.com/\\[\\</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "An [email autolink](@)\n"
- "\nconsists of `<`"
- "consists of `<`, followed by an "
- "[email address],\nfollowed by `>`"
- "\nfollowed by `>`.  The link'"
- "'s label is the email address,\n"
- "\nand the URL is `mailto:`"
- " followed by the email address."
- "\n\nAn [email address](@),\n"
- "for these purposes, is anything "
- ", is anything that matches\nthe "
- "["
- "non-normative regex from the "
- " regex from the HTML5\nspec"
- "](https://html.spec.whatwg.org/"
- "/multipage/forms.html#e-mail-"
- "#e-mail-state-(type=email)):"
- ":\n\n    "
- "/^[a-zA-Z0-9.!#$%&'*+/=?"
- "^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-"
- "-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA"
- "-9-]{0,61}[a-zA-Z0-9])?\n    "
- "(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{"
- "(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9]"
- "0,61}[a-zA-Z0-9])?)*$/\n\n"
- "Examples of email autolinks:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<foo@bar.example.com>\n.\n"
- "<p><a href=\"mailto:foo@"
- "=\"mailto:foo@bar.example.com\">"
- "\">foo@bar.example.com</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<foo+special@Bar.baz-bar0.com>\n"
- ".\n"
- "<p><a href=\"mailto:foo+special@"
- "+special@Bar.baz-bar0.com\">foo+"
- "-bar0.com\">foo+special@Bar.baz-"
- special@Bar.baz-bar0.com</a></p>
- "bar0.com</a></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Backslash-escapes do not work "
- " do not work inside email "
- " inside email autolinks:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<foo\\+@bar.example.com>\n.\n"
- "<p>&lt;foo+@bar.example.com&gt;<"
- "&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "These are not autolinks:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<>\n.\n<p>&lt;&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "< https://foo.bar >\n.\n"
- "<p>&lt; https://foo.bar &gt;</p>"
- "foo.bar &gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<m:abc>\n.\n<p>&lt;m:abc&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<foo.bar.baz>\n.\n"
- ".\n<p>&lt;foo.bar.baz&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "https://example.com\n.\n"
- ".\n<p>https://example.com</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo@bar.example.com\n.\n"
- ".\n<p>foo@bar.example.com</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Raw HTML\n\n"
- "Text between `<` and `>`"
- " that looks like an HTML tag is "
- " an HTML tag is parsed as a\n"
- "raw HTML tag and will be "
- tag and will be rendered in HTML
- "rendered in HTML without "
- "in HTML without escaping.\n"
- "Tag and attribute names are not "
- " names are not limited to "
- " not limited to current HTML "
- "to current HTML tags,\n"
- "so custom tags (and even, say, "
- "(and even, say, DocBook tags) "
- ", DocBook tags) may be used.\n\n"
- "Here is the grammar for tags:\n"
- "\nA [tag name](@)"
- " consists of an ASCII letter\n"
- "followed by zero or more ASCII "
- " or more ASCII letters, digits, "
- ", digits, or\nhyphens (`-`).\n\n"
- "An [attribute](@)"
- " consists of spaces, tabs, and "
- ", tabs, and up to one line "
- " up to one line ending,\nan ["
- "an [attribute name]"
- "attribute name], and an optional"
- "\n[attribute value specification]"
- "].\n\n"
- "An [attribute name](@)\n"
- "\nconsists of an ASCII letter, "
- "`_`, or `:`"
- ", followed by zero or more ASCII"
- "\nletters, digits, `_`, `.`, `:`"
- "`_`, `.`, `:`, or `-`"
- "`-`.  (Note:  This is the XML\n"
- "specification restricted to "
- " restricted to ASCII.  "
- "HTML5 is laxer.)\n\n"
- "An "
- "[attribute value specification]("
- " specification](@)\n"
- "consists of optional spaces, "
- " spaces, tabs, and up to one "
- ", and up to one line ending,\na "
- "a `=`"
- " character, optional spaces, "
- " spaces, tabs, and up to one "
- ", and up to one line ending,\n"
- "and an [attribute value].\n\n"
- "An [attribute value](@)\n"
- "\nconsists of an ["
- "[unquoted attribute value],\na ["
- "a [single-quoted attribute value"
- "], or a ["
- "[double-quoted attribute value]."
- "].\n\n"
- "An [unquoted attribute value](@)"
- "\n"
- "is a nonempty string of "
- " string of characters not\n"
- "including spaces, tabs, line "
- ", tabs, line endings, `\"`, `'`, "
- "`\"`, `'`, `=`, `<`, `>`, or "
- ", `<`, `>`, or `` ` ``.\n\n"
- "A "
- "[single-quoted attribute value]("
- " value](@)\nconsists of `'`"
- "consists of `'`, zero or more\n"
- "\ncharacters not including `'`"
- "`'`, and a final `'`.\n\n"
- "A "
- "[double-quoted attribute value]("
- " value](@)\nconsists of `\"`"
- "consists of `\"`, zero or more\n"
- "\ncharacters not including `\"`"
- "`\"`, and a final `\"`.\n\n"
- "An [open tag](@) consists of a "
- " consists of a `<` character, a "
- " character, a [tag name],\n"
- "[tag name],\nzero or more ["
- ",\nzero or more [attributes]"
- ", optional spaces, tabs, and up "
- ", tabs, and up to one line "
- " up to one line ending,\n"
- "an optional `/`"
- "`/` character, and a `>`"
- "`>` character.\n\n"
- "A [closing tag](@)"
- " consists of the string `</`, a\n"
- "`</`, a\n[tag name]"
- ", optional spaces, tabs, and up "
- ", tabs, and up to one line "
- " up to one line ending, and the "
- "ending, and the character\n`>`.\n\n"
- "An [HTML comment](@)"
- " consists of `<!-->`, `<!--->`"
- ", `<!--->`, or  `<!--`"
- ", or  `<!--`, a string of\n"
- "characters not including the "
- " including the string `-->`"
- "`-->`, and `-->` (see the\n"
- "[HTML spec](https://"
- "](https://html.spec.whatwg.org/"
- "/multipage/parsing.html#markup-"
- "#markup-declaration-open-state)"
- ").\n\n"
- "A [processing instruction](@)\n"
- "\nconsists of the string `<?`"
- "`<?`, a string\n"
- "of characters not including the "
- " including the string `?>`"
- "`?>`, and the string\n`?>`.\n\n"
- "A [declaration](@)"
- " consists of the string `<!`"
- ", an ASCII letter, zero or more\n"
- "characters not including the "
- " including the character `>`"
- "`>`, and the character `>`.\n\n"
- "A [CDATA section](@) consists of"
- " consists of\nthe string "
- "\nthe string `<![CDATA[`"
- ", a string of characters not "
- " characters not including the "
- " including the string\n`]]>`"
- "`]]>`, and the string `]]>`.\n\n"
- "An [HTML tag](@) consists of an "
- " consists of an [open tag], a ["
- "[open tag], a [closing tag],\nan "
- "],\nan [HTML comment], a ["
- "], a [processing instruction]"
- "], a [declaration],\nor a ["
- "],\nor a [CDATA section].\n\n"
- "Here are some simple open tags:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a><bab><c2c>\n.\n"
- ".\n<p><a><bab><c2c></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Empty elements:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a/><b2/>\n.\n<p><a/><b2/></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Whitespace is allowed:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a  /><b2\ndata=\"foo\" >\n.\n"
- "data=\"foo\" >\n.\n<p><a  /><b2\n"
- ".\n<p><a  /><b2\ndata=\"foo\" ></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "With attributes:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a foo=\"bar\" bam = 'baz <em>\"</"
- " = 'baz <em>\"</em>'\n"
- "_boolean zoop:33=zoop:33 />\n.\n"
- "<p><a foo=\"bar\" bam = 'baz <em>\""
- "bam = 'baz <em>\"</em>'\n"
- "_boolean zoop:33=zoop:33 /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Custom tag names can be used:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo <responsive-image src=\""
- "-image src=\"foo.jpg\" />\n.\n"
- "<p>Foo <responsive-image src=\""
- "-image src=\"foo.jpg\" /></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Illegal tag names, not parsed as"
- ", not parsed as HTML:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<33> <__>\n.\n"
- ".\n<p>&lt;33&gt; &lt;__&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Illegal attribute names:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a h*#ref=\"hi\">\n.\n"
- "<p>&lt;a h*#ref=&quot;hi&quot;&"
- "=&quot;hi&quot;&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Illegal attribute values:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"hi'> <a href=hi'>\n.\n"
- "<p>&lt;a href=&quot;hi'&gt; &lt;"
- ";hi'&gt; &lt;a href=hi'&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Illegal whitespace:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "< a><\nfoo><bar/ >\n<foo bar=baz\n"
- "<foo bar=baz\nbim!bop />\n.\n"
- "bim!bop />\n.\n<p>&lt; a&gt;&lt;\n"
- "foo&gt;&lt;bar/ &gt;\n"
- "&lt;foo bar=baz\nbim!"
- "bim!bop /&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Missing whitespace:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href='bar'title=title>\n.\n"
- "<p>&lt;a href='bar'title=title&"
- "bar'title=title&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Closing tags:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "</a></foo >\n.\n"
- ".\n<p></a></foo ></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Illegal attributes in closing "
- " in closing tag:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "</a href=\"foo\">\n.\n"
- "<p>&lt;/a href=&quot;foo&quot;&"
- "&quot;foo&quot;&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\nComments:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <!-- this is a --\n"
- "comment - with hyphens -->\n.\n"
- ".\n<p>foo <!-- this is a --\n"
- "comment - with hyphens --></p>\n"
- "````````````````````````````````"
- "````````````````\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <!--> foo -->\n\n"
- "\nfoo <!---> foo -->\n.\n"
- ".\n<p>foo <!--> foo --&gt;</p>\n"
- "<p>foo <!---> foo --&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Processing instructions:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <?php echo $a; ?>\n.\n"
- ">\n.\n<p>foo <?php echo $a; ?"
- "php echo $a; ?></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Declarations:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <!ELEMENT br EMPTY>\n.\n"
- ".\n<p>foo <!"
- "<p>foo <!ELEMENT br EMPTY></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "CDATA sections:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <![CDATA[>&<]]>\n.\n<p>foo <!["
- ".\n<p>foo <![CDATA[>&<]]></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character "
- " character references are "
- " references are preserved in "
- " preserved in HTML\nattributes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <a href=\"&ouml;\">\n.\n"
- ".\n<p>foo <a href=\"&ouml;\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- Backslash escapes do not work in
- " do not work in HTML attributes:"
- "HTML attributes:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo <a href=\"\\*\">\n.\n"
- ".\n<p>foo <a href=\"\\*\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"\\\"\">\n.\n"
- "<p>&lt;a href=&quot;&quot;&quot;"
- ";&quot;&quot;&gt;</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Hard line breaks\n\n"
- "A line ending (not in a code "
- " (not in a code span or HTML tag"
- "span or HTML tag) that is "
- " tag) that is preceded\n"
- "by two or more spaces and does "
- spaces and does not occur at the
- "not occur at the end of a block\n"
- "is parsed as a "
- "[hard line break](@) (rendered\n"
- " (rendered\nin HTML as a `<br />`"
- "`<br />` tag):\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo  \nbaz\n.\n<p>foo<br />\n"
- ".\n<p>foo<br />\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "For a more visible alternative, "
- " alternative, a backslash before"
- "backslash before the\n["
- "[line ending]"
- " may be used instead of two or "
- " of two or more spaces:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\\\nbaz\n.\n<p>foo<br />\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- More than two spaces can be used
- " can be used:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo       \nbaz\n.\n<p>foo<br />\n"
- ".\n<p>foo<br />\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Leading spaces at the beginning "
- " the beginning of the next line "
- " the next line are ignored:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo  \n     bar\n.\n<p>foo<br />\n"
- ".\n<p>foo<br />\nbar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\\\n     bar\n.\n<p>foo<br />\n"
- ".\n<p>foo<br />\nbar</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Hard line breaks can occur "
- " can occur inside emphasis, "
- " emphasis, links, and other "
- ", and other constructs\n"
- "that allow inline content:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo  \nbar*\n.\n<p><em>foo<br />\n"
- "bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "*foo\\\nbar*\n.\n<p><em>foo<br />\n"
- "bar</em></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Hard line breaks do not occur "
- " do not occur inside code spans\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`code  \nspan`\n.\n"
- "<p><code>code   span</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "`code\\\nspan`\n.\n"
- "<p><code>code\\ span</code></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "or HTML tags:\n"
- "\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"foo  \nbar\">\n.\n"
- "bar\">\n.\n<p><a href=\"foo  \n"
- "bar\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "<a href=\"foo\\\nbar\">\n.\n"
- "bar\">\n.\n<p><a href=\"foo\\\n"
- "bar\"></p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Hard line breaks are for "
- " breaks are for separating "
- " for separating inline content "
- " inline content within a block.\n"
- "Neither syntax for hard line "
- " for hard line breaks works at "
- "breaks works at the end of a "
- "at the end of a paragraph or\n"
- "other block element:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\\\n.\n<p>foo\\</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo  \n.\n<p>foo</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "### foo\\\n.\n<h3>foo\\</h3>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "### foo  \n.\n<h3>foo</h3>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "## Soft line breaks\n\n"
- "A regular line ending (not in a "
- " (not in a code span or HTML tag"
- "span or HTML tag) that is not\n"
- "preceded by two or more spaces "
- " or more spaces or a backslash "
- " or a backslash is parsed as a\n"
- "[softbreak](@)"
- ".  "
- "(A soft line break may be "
- " break may be rendered in HTML "
- " in HTML either as a\n["
- "[line ending]"
- " or as a space. "
- "The result will be the same in\n"
- "browsers. "
- "In the examples here, a ["
- "[line ending] will be used.)\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo\nbaz\n.\n<p>foo\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Spaces at the end of the line "
- end of the line and beginning of
- "and beginning of the next line "
- " the next line are\nremoved:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "foo \n baz\n.\n<p>foo\nbaz</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- A conforming parser may render a
- " may render a soft line break in"
- " line break in HTML either as a\n"
- "line ending or as a space.\n\n"
- "A renderer may also provide an "
- also provide an option to render
- "option to render soft line "
- " soft line breaks\n"
- "as hard line breaks.\n\n"
- "## Textual content\n\n"
- "Any characters not given an "
- " not given an interpretation by "
- " by the above rules will\n"
- "be parsed as plain textual "
- " plain textual content.\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "hello $.;'there\n.\n"
- ".\n<p>hello $.;'there</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Foo χρῆν\n.\n<p>Foo χρῆν</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "Internal spaces are preserved "
- " are preserved verbatim:\n\n"
- "````````````````````````````````"
- "```````````````` example\n"
- "Multiple     spaces\n.\n"
- ".\n<p>Multiple     spaces</p>\n"
- "````````````````````````````````"
- "````````````````\n\n\n"
- "<!-- END TESTS -->\n\n"
- "# Appendix: A parsing strategy\n\n"
- "In this appendix we describe "
- " we describe some features of "
- " features of the parsing "
- " of the parsing strategy\n"
- used in the CommonMark reference
- " reference implementations.\n\n"
- "## Overview\n\n"
- "Parsing has two phases:\n"
- "\n1. "
- "In the first phase, lines of "
- "phase, lines of input are "
- " of input are consumed and the "
- " and the block\n"
- structure of the document---
- "its division into paragraphs, "
- " paragraphs, block quotes,\n"
- "list items, and so on---"
- "is constructed.  "
- "Text is assigned to these\n"
- "blocks but not parsed. "
- "Link reference definitions are "
- "definitions are parsed and a\n"
- "map of links is constructed.\n\n"
- "2. "
- "In the second phase, the raw "
- " phase, the raw text contents of"
- "text contents of paragraphs and "
- " paragraphs and headings\n"
- "are parsed into sequences of "
- " sequences of Markdown inline "
- Markdown inline elements (
- " elements (strings,\n"
- "code spans, links, emphasis, and"
- ", emphasis, and so on), using "
- " so on), using the map of link\n"
- "references constructed in phase "
- " in phase 1.\n\n"
- "At each point in processing, the"
- " processing, the document is "
- the document is represented as a
- "represented as a tree of\n"
- "**blocks**"
- ".  The root of the tree is a "
- "`document` block.  The "
- " block.  The `document`\n"
- "may have any number of other "
- "number of other blocks as "
- "**children**.  These children\n"
- "may, in turn, have other blocks "
- " other blocks as children.  "
- "The last child of a block\n"
- is normally considered **open**
- ", meaning that subsequent lines "
- " lines of input\n"
- "can alter its contents.  "
- "(Blocks that are not open are "
- "**closed**.)\n"
- "Here, for example, is a possible"
- ", is a possible document tree, "
- " document tree, with the open "
- ", with the open blocks\n"
- "marked by arrows:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n"
- "       paragraph\n"
- "         \"Lorem ipsum dolor\\nsit"
- "ipsum dolor\\nsit amet.\"\n"
- "    -> list (type=bullet tight="
- "=bullet tight=true bullet_char=-"
- " bullet_char=-)\n"
- "         list_item\n"
- "           paragraph\n"
- "             \"Qui *quodsi "
- "\"Qui *quodsi iracundia*\"\n"
- "      -> list_item\n"
- "        -> paragraph\n"
- "             \"aliquando id\"\n```\n"
- "```\n\n"
- "## Phase 1: block structure\n\n"
- "Each line that is processed has "
- " processed has an effect on this"
- " effect on this tree.  "
- "The line is\n"
- "analyzed and, depending on its "
- " on its contents, the document "
- ", the document may be altered\n"
- "in one or more of the following "
- " the following ways:\n\n"
- "1. "
- "One or more open blocks may be "
- " blocks may be closed.\n"
- "2. "
- "One or more new blocks may be "
- " blocks may be created as "
- " be created as children of the\n"
- "\n   last open block.\n"
- "3. "
- Text may be added to the last (
- " to the last (deepest) open "
- " (deepest) open block remaining\n"
- "\n   on the tree.\n\n"
- "Once a line has been "
- "a line has been incorporated "
- " incorporated into the tree in "
- " the tree in this way,\n"
- "it can be discarded, so input "
- ", so input can be read in a "
- " be read in a stream.\n\n"
- "For each line, we follow this "
- " we follow this procedure:\n\n"
- "1. "
- "First we iterate through the "
- " through the open blocks, "
- " open blocks, starting with the\n"
- "root document, and descending "
- " and descending through last "
- " through last children down to "
- " down to the last\n"
- "open block.  "
- "Each block imposes a condition "
- " a condition that the line must "
- " the line must satisfy\n"
- if the block is to remain open.
- " to remain open.  "
- "For example, a block quote "
- ", a block quote requires a\n`>`"
- " character.  "
- A paragraph requires a non-blank
- " a non-blank line.\n"
- "In this phase we may match all "
- " may match all or just some of "
- "or just some of the open\n"
- "blocks.  "
- "But we cannot close unmatched "
- "close unmatched blocks yet, "
- " blocks yet, because we may have"
- " we may have a\n["
- "[lazy continuation line].\n\n"
- "2.  "
- "Next, after consuming the "
- " consuming the continuation "
- " continuation markers for "
- " markers for existing\n"
- "blocks, we look for new block "
- " for new block starts (e.g. `>`"
- "`>` for a block quote).\n"
- "If we encounter a new block "
- " a new block start, we close any"
- ", we close any blocks unmatched\n"
- "in step 1 before creating the "
- " creating the new block as a "
- " new block as a child of the "
- " a child of the last\n"
- "matched container block.\n\n"
- "3.  "
- "Finally, we look at the "
- " we look at the remainder of the"
- "remainder of the line (after "
- "the line (after block\n"
- "markers like `>`"
- ", list markers, and indentation "
- "and indentation have been "
- " have been consumed).\n"
- "This is text that can be "
- " that can be incorporated into "
- " into the last open\n"
- "block (a paragraph, code block, "
- ", code block, heading, or raw "
- "heading, or raw HTML).\n\n"
- "Setext headings are formed when "
- are formed when we see a line of
- "we see a line of a paragraph\n"
- "that is a ["
- "[setext heading underline].\n\n"
- "Reference link definitions are "
- "definitions are detected when a "
- "detected when a paragraph is "
- " a paragraph is closed;\n"
- "the accumulated text lines are "
- " text lines are parsed to see if"
- parsed to see if they begin with
- "\n"
- "one or more reference link "
- " reference link definitions.  "
- "Any remainder becomes a\n"
- "normal paragraph.\n\n"
- "We can see how this works by "
- " this works by considering how "
- "considering how the tree above "
- " the tree above is\n"
- "generated by four lines of "
- " four lines of Markdown:\n\n"
- "``` markdown\n"
- "> Lorem ipsum dolor\nsit amet.\n"
- "> - Qui *quodsi iracundia*\n"
- "> - aliquando id\n```\n\n"
- "At the outset, our document "
- ", our document model is just\n\n"
- "``` tree\n-> document\n```"
- "\n\nThe first line of our text,\n"
- "\n``` markdown\n"
- "> Lorem ipsum dolor\n```\n\n"
- "causes a `block_quote`"
- " block to be created as a child "
- " as a child of our\nopen "
- "open `document` block, and a "
- " block, and a `paragraph`"
- "`paragraph` block as a child of\n"
- "\nthe `block_quote`"
- ".  "
- "Then the text is added to the "
- "is added to the last open\n"
- "block, the `paragraph`:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n"
- "    -> paragraph\n"
- "         \"Lorem ipsum dolor\"\n"
- "```\n\nThe next line,\n"
- "\n``` markdown\nsit amet.\n```"
- "\n\nis a \"lazy continuation\""
- "\" of the open `paragraph`"
- "`paragraph`, so it gets added\n"
- "\nto the paragraph's text:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n"
- "    -> paragraph\n"
- "         \"Lorem ipsum dolor\\nsit"
- "ipsum dolor\\nsit amet.\"\n```\n\n"
- "The third line,\n"
- "\n``` markdown\n"
- "> - Qui *quodsi iracundia*\n```\n\n"
- "causes the `paragraph`"
- " block to be closed, and a new "
- "`list` block\n"
- " block\nopened as a child of the "
- "`block_quote`.  A `list_item`"
- ".  A `list_item` is also\n"
- "\nadded as a child of the `list`"
- "`list`, and a `paragraph`"
- "`paragraph` as a child of\nthe "
- "\nthe `list_item`"
- ".  "
- "The text is then added to the "
- " added to the new `paragraph`:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n"
- "       paragraph\n"
- "         \"Lorem ipsum dolor\\nsit"
- "ipsum dolor\\nsit amet.\"\n"
- "    -> list (type=bullet tight="
- "=bullet tight=true bullet_char=-"
- " bullet_char=-)\n"
- "      -> list_item\n"
- "        -> paragraph\n"
- "             \"Qui *quodsi "
- "\"Qui *quodsi iracundia*\"\n```\n\n"
- "The fourth line,\n"
- "\n``` markdown\n> - aliquando id\n"
- "```\n\n"
- "causes the `list_item`"
- "`list_item` (and its child the "
- "`paragraph`) to be closed,\n"
- ") to be closed,\nand a new "
- "\nand a new `list_item`"
- " opened up as child of the "
- "`list`.  A `paragraph`\n"
- "\nis added as a child of the new "
- "`list_item`"
- ", to contain the text.\n"
- "\nWe thus obtain the final tree:"
- "\n\n``` tree\n"
- "-> document\n  -> block_quote\n"
- "       paragraph\n"
- "         \"Lorem ipsum dolor\\nsit"
- "ipsum dolor\\nsit amet.\"\n"
- "    -> list (type=bullet tight="
- "=bullet tight=true bullet_char=-"
- " bullet_char=-)\n"
- "         list_item\n"
- "           paragraph\n"
- "             \"Qui *quodsi "
- "\"Qui *quodsi iracundia*\"\n"
- "      -> list_item\n"
- "        -> paragraph\n"
- "             \"aliquando id\"\n```\n"
- "```\n\n"
- "## Phase 2: inline structure\n\n"
- "Once all of the input has been "
- " input has been parsed, all open"
- "parsed, all open blocks are "
- "open blocks are closed.\n\n"
- "We then \"walk the tree,\""
- " visiting every node, and parse "
- "node, and parse raw\n"
- "string contents of paragraphs "
- " of paragraphs and headings as "
- "and headings as inlines.  "
- "At this\n"
- "point we have seen all the link "
- " all the link reference "
- " link reference definitions, so "
- "definitions, so we can\n"
- resolve reference links as we go
- " links as we go.\n\n"
- "``` tree\n"
- "document\n  block_quote\n"
- "  block_quote\n    paragraph\n"
- "      str \"Lorem ipsum dolor\"\n"
- "      softbreak\n"
- "      str \"sit amet.\"\n"
- "    list (type=bullet tight=true"
- " tight=true bullet_char=-)\n"
- "      list_item\n"
- "        paragraph\n"
- "          str \"Qui \"\n"
- "          emph\n"
- "            str \"quodsi "
- "str \"quodsi iracundia\"\n"
- "      list_item\n"
- "        paragraph\n"
- "          str \"aliquando id\"\n"
- "```\n\n"
- "Notice how the [line ending]"
- "] in the first paragraph has\n"
- "\nbeen parsed as a `softbreak`"
- ", and the asterisks in the first"
- " in the first list item\n"
- "have become an `emph`.\n\n"
- "### "
- "An algorithm for parsing nested "
- " parsing nested emphasis and "
- " emphasis and links\n\n"
- "By far the trickiest part of "
- " part of inline parsing is "
- " parsing is handling emphasis,\n"
- "strong emphasis, links, and "
- ", links, and images.  "
- This is done using the following
- "\nalgorithm.\n\n"
- "When we'"
- "re parsing inlines and we hit "
- " and we hit either\n\n"
- "- a run of `*` or `_`"
- "`*` or `_` characters, or\n"
- "- a `[` or `![`\n\n"
- we insert a text node with these
- " node with these symbols as its "
- " symbols as its literal content,"
- "literal content, and we\n"
- "add a pointer to this text node "
- " this text node to the "
- "[delimiter stack](@).\n\n"
- "The [delimiter stack]"
- "] is a doubly linked list.  Each"
- "\n"
- "element contains a pointer to a "
- " a pointer to a text node, plus "
- "text node, plus information "
- " information about\n\n"
- "- the type of delimiter (`[`, "
- "`[`, `![`, `*`, `_`)\n"
- "- the number of delimiters,\n"
- "- whether the delimiter is \""
- "\"active\""
- "\" (all are active to start), and"
- "\n- "
- "whether the delimiter is a "
- " delimiter is a potential opener"
- "potential opener, a potential "
- ", a potential closer,\n  "
- "or both (which depends on what "
- "depends on what sort of "
- "on what sort of characters "
- " of characters precede\n  "
- "and follow the delimiters).\n\n"
- "When we hit a `]`"
- "`]` character, we call the "
- "*look for link or image*\n"
- "\nprocedure (see below).\n\n"
- When we hit the end of the input
- "end of the input, we call the "
- "*process emphasis*\n"
- "\nprocedure (see below), with "
- "`stack_bottom` = NULL.\n\n"
- "#### *look for link or image*\n\n"
- "Starting at the top of the "
- " the top of the delimiter stack,"
- "delimiter stack, we look "
- " stack, we look backwards\n"
- through the stack for an opening
- " for an opening `[` or `![`"
- "`[` or `![` delimiter.\n\n"
- "- If we don'"
- "t find one, we return a literal "
- " a literal text node `]`.\n\n"
- "- If we do find one, but it'"
- "'s not *active*"
- "*active*, we remove the inactive"
- "\n  "
- "delimiter from the stack, and "
- " the stack, and return a literal"
- "return a literal text node `]`."
- "`]`.\n\n"
- "- If we find one and it'"
- "s active, then we parse ahead to"
- " parse ahead to see if\n  "
- "we have an inline link/image, "
- " link/image, reference link/"
- " reference link/image, collapsed"
- "image, collapsed reference\n  "
- "link/image, or shortcut "
- ", or shortcut reference link/"
- " reference link/image.\n\n  "
- "+ If we don'"
- "t, then we remove the opening "
- " the opening delimiter from the\n"
- "\n    "
- "delimiter stack and return a "
- " and return a literal text node "
- "`]`.\n\n  "
- "+ If we do, then"
- "If we do, then\n"
- "\n    * "
- "We return a link or image node "
- " or image node whose children "
- " whose children are the inlines\n"
- "\n      "
- "after the text node pointed to "
- "node pointed to by the opening "
- " by the opening delimiter.\n\n    "
- "* We run *process emphasis*"
- " on these inlines, with the `[`"
- "`[` opener\n      as "
- "\n      as `stack_bottom`.\n\n    "
- "* "
- We remove the opening delimiter.
- "\n\n    * "
- "If we have a link (and not an "
- " (and not an image), we also set"
- "), we also set all\n      `[`"
- " delimiters before the opening "
- " the opening delimiter to "
- "*inactive*.  (This\n      "
- "will prevent us from getting "
- "us from getting links within "
- " links within links.)\n\n"
- "#### *process emphasis*\n\n"
- "Parameter `stack_bottom`"
- " sets a lower bound to how far "
- " to how far we\ndescend in the ["
- "descend in the [delimiter stack]"
- "].  If it is NULL, we can\n"
- "go all the way to the bottom.  "
- "Otherwise, we stop before\n"
- "visiting `stack_bottom`.\n\n"
- "Let `current_position`"
- " point to the element on the ["
- "[delimiter stack]\njust above "
- "]\njust above `stack_bottom`"
- " (or the first element if "
- "`stack_bottom`\nis NULL).\n\n"
- "We keep track of the "
- "`openers_bottom`"
- " for each delimiter\ntype (`*`, "
- "\ntype (`*`, `_`"
- "), indexed to the length of the "
- " length of the closing delimiter"
- " delimiter run\n"
- "(modulo 3) and to whether the "
- " to whether the closing "
- " the closing delimiter can also "
- " can also be an\n"
- "opener.  Initialize this to "
- "`stack_bottom`.\n\n"
- "Then we repeat the following "
- " the following until we run out "
- " we run out of potential\n"
- "closers:\n\n"
- "- Move `current_position`"
- " forward in the delimiter stack "
- "delimiter stack (if needed)\n  "
- "until we find the first "
- " find the first potential closer"
- "potential closer with delimiter "
- "`*` or `_`.\n  "
- "(This will be the potential "
- " the potential closer closest\n  "
- to the beginning of the input --
- " the first one in parse order.)"
- "\n\n- "
- "Now, look back in the stack ("
- " in the stack (staying above "
- "`stack_bottom` and\n  the "
- " and\n  the `openers_bottom`"
- " for this delimiter type) for "
- " type) for the\n  "
- "first matching potential opener "
- " opener (\"matching\""
- "matching\" means same delimiter)."
- "\n\n- If one is found:"
- "If one is found:\n"
- "\n  + "
- "Figure out whether we have "
- "whether we have emphasis or "
- " emphasis or strong emphasis:\n"
- "\n    "
- "if both closer and opener spans "
- " opener spans have length >= 2, "
- " length >= 2, we have\n    "
- "strong, otherwise regular.\n\n  "
- "+ "
- "Insert an emph or strong emph "
- " or strong emph node accordingly"
- "node accordingly, after\n    "
- "the text node corresponding to "
- " to the opener.\n\n  "
- "+ "
- "Remove any delimiters between "
- " between the opener and closer "
- " and closer from\n    "
- "the delimiter stack.\n\n  "
- "+ "
- Remove 1 (for regular emph) or 2
- " emph) or 2 (for strong emph) "
- " strong emph) delimiters\n    "
- "from the opening and closing "
- " and closing text nodes.  "
- "If they become empty\n    "
- "as a result, remove them and "
- "remove them and remove the "
- " and remove the corresponding "
- " corresponding element\n    "
- "of the delimiter stack.  "
- "If the closing node is removed, "
- " is removed, reset\n    "
- "`current_position`"
- " to the next element in the "
- " element in the stack.\n\n"
- "- If none is found:"
- "\n\n  + Set `openers_bottom`"
- " to the element before "
- "`current_position`.\n    "
- "(We know that there are no "
- " there are no openers for this "
- " for this kind of closer up to "
- "of closer up to and\n    "
- "including this point, so this "
- " point, so this puts a lower "
- " puts a lower bound on future "
- "bound on future searches.)\n\n  "
- "+ If the closer at "
- "`current_position`"
- " is not a potential opener,\n    "
- "remove it from the delimiter "
- " the delimiter stack (since we "
- "stack (since we know it can't"
- "'t\n    be a closer either).\n\n  "
- "+ Advance `current_position`"
- " to the next element in the "
- " element in the stack.\n\n"
- "After we'"
- "re done, we remove all "
- ", we remove all delimiters above"
- "delimiters above `stack_bottom`"
- "`stack_bottom` from the\n"
- " from the\ndelimiter stack.\n"
