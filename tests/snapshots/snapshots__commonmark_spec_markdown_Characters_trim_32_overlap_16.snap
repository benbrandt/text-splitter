---
source: tests/snapshots.rs
expression: chunks
---
- "---"
- "title: CommonMark Spec"
- "author: John MacFarlane"
- "version: '0.31.2'"
- "date: '2024-01-28'"
- "license: '[CC-BY-SA 4.0](https:/"
- "-SA 4.0](https://"
- "4.0](https://creativecommons.org"
- "/licenses/by-sa/4.0/)'\n..."
- "# Introduction"
- "## What is Markdown?"
- Markdown is a plain text format
- text format for writing
- for writing structured documents
- "documents,"
- based on conventions for
- conventions for indicating
- for indicating formatting in
- formatting in email
- and usenet posts.
- It was developed by John Gruber
- by John Gruber (with
- help from Aaron Swartz) and
- Swartz) and released in 2004 in
- in 2004 in the form of a
- "[syntax description](https://"
- "](https://daringfireball.net/"
- /projects/markdown/syntax)
- "and a Perl script (`Markdown.pl`"
- ) for converting Markdown to
- HTML.
- "In the next decade, dozens of"
- ", dozens of implementations were"
- developed in many languages.
- Some extended the original
- Markdown syntax with conventions
- "with conventions for footnotes,"
- "for footnotes, tables, and"
- other document elements.
- Some allowed Markdown documents
- documents to be
- rendered in formats other than
- other than HTML.
- "Websites like Reddit,"
- "StackOverflow, and GitHub had"
- ", and GitHub had millions of"
- had millions of people using
- of people using Markdown.
- And Markdown started to be used
- "to be used beyond the web, to"
- "the web, to author books,"
- "articles, slide shows, letters,"
- "shows, letters, and lecture"
- ", and lecture notes."
- What distinguishes Markdown from
- Markdown from many other
- from many other lightweight
- lightweight markup
- "syntaxes, which are often easier"
- "are often easier to write, is"
- "to write, is its readability."
- "As Gruber writes:"
- ">"
- The overriding design goal for
- "design goal for Markdown'"
- "'s formatting syntax is\n>"
- to make it as readable as
- as readable as possible.
- "The idea is that a\n>"
- Markdown-formatted document
- document should be publishable
- " be publishable as-is, as\n>"
- "plain text, without looking like"
- "looking like it'"
- "'s been marked up with tags\n>"
- "> or formatting instructions.\n>"
- "> ("
- "<https://daringfireball.net/"
- /projects/markdown/>)
- The point can be illustrated by
- illustrated by comparing a
- by comparing a sample of
- "[AsciiDoc](https://asciidoc.org/"
- "://asciidoc.org/) with"
- an equivalent sample of Markdown
- of Markdown.
- Here is a sample of
- AsciiDoc from the AsciiDoc
- "the AsciiDoc manual:"
- "```"
- "1. List item one.\n+"
- List item one continued with a
- continued with a second
- with a second paragraph followed
- " followed by an\nIndented block."
- "Indented block.\n+"
- "+\n.................\n$ ls *.sh"
- "$ ls *.sh\n$ mv *.sh ~/tmp"
- ".................\n+"
- List item continued with a third
- " with a third paragraph.\n\n2."
- List item two continued with an
- " with an open block.\n+\n--"
- This paragraph is part of the
- is part of the preceding list
- " preceding list item.\n\na."
- This list is nested and does not
- and does not require explicit
- require explicit item
- "continuation.\n+"
- This paragraph is part of the
- is part of the preceding list
- " preceding list item.\n\nb."
- b. List item b.
- This paragraph belongs to item
- belongs to item two of the outer
- "two of the outer list.\n--\n```"
- And here is the equivalent in
- "equivalent in Markdown:"
- "```"
- 1.  List item one.
- List item one continued with a
- continued with a second
- with a second paragraph followed
- followed by an
- Indented block.
- $ ls *.sh
- $ mv *.sh ~/tmp
- List item continued with a third
- " with a third paragraph.\n\n2."
- List item two continued with an
- with an open block.
- This paragraph is part of the
- is part of the preceding list
- " preceding list item.\n\n    1."
- This list is nested and does not
- and does not require explicit
- require explicit item
- explicit item continuation.
- This paragraph is part of the
- is part of the preceding list
- " preceding list item.\n\n    2."
- 2. List item b.
- This paragraph belongs to item
- belongs to item two of the outer
- "two of the outer list.\n```"
- "The AsciiDoc version is,"
- "version is, arguably, easier to"
- ", easier to write. You don'"
- "'t need"
- to worry about indentation.
- But the Markdown version is much
- version is much easier
- to read.
- The nesting of list items is
- of list items is apparent to the
- apparent to the eye in the
- "source, not just in the"
- not just in the processed
- in the processed document.
- "## Why is a spec needed?"
- "John Gruber's"
- "["
- canonical description of
- "description of Markdown's"
- "'s\nsyntax"
- "](https://daringfireball.net/"
- /projects/markdown/syntax)
- does not specify the syntax
- the syntax unambiguously.
- Here are some examples of
- "questions it does not answer:"
- "1."
- How much indentation is needed
- is needed for a sublist?
- The spec says that
- continuation paragraphs need to
- "need to be indented four spaces,"
- "four spaces, but is"
- not fully explicit about
- explicit about sublists.
- It is natural to think that
- "they, too, must be indented four"
- "be indented four spaces, but"
- "`Markdown.pl` does"
- not require that.
- "This is hardly a \"corner case,\""
- "\"corner case,\" and divergences"
- between implementations on this
- on this issue often lead to
- often lead to surprises for
- users in real documents. (See
- "[this comment by John\n    Gruber"
- "](https://web.archive.org/web/"
- "/web/20170611172104/http://"
- "/http://article.gmane.org/"
- /gmane.text.markdown.general/
- /1997).)
- "2."
- Is a blank line needed before a
- needed before a block quote or
- a block quote or heading?
- Most implementations do not
- do not require the blank line.
- "However,"
- this can lead to unexpected
- to unexpected results in hard-
- "results in hard-wrapped text,"
- "-wrapped text, and"
- also to ambiguities in parsing (
- in parsing (note that some
- (note that some implementations
- put the heading inside the
- "inside the blockquote, while"
- ", while others do not)."
- (John Gruber has also spoken
- "[in favor of requiring the blank"
- lines
- "](https://web.archive.org/web/"
- "/web/20170611172104/http://"
- "/http://article.gmane.org/"
- /gmane.text.markdown.general/
- /2146).)
- "3."
- Is a blank line needed before an
- needed before an indented code
- "an indented code block?\n    ("
- "(`Markdown.pl`"
- "requires it, but this is not"
- but this is not mentioned in the
- "documentation, and some"
- ", and some implementations do"
- do not require it.)
- "``` markdown\n    paragraph"
- "paragraph\n        code?\n    ```"
- "4."
- What is the exact rule for
- exact rule for determining when
- determining when list items get
- "wrapped in `<p>`"
- "tags?  Can a list be partially \""
- "\"loose\" and partially\n    \"tight"
- "\"tight\""
- "?"
- What should we do with a list
- do with a list like this?
- "``` markdown\n    1. one"
- "1. one\n\n    2. two\n    3. three"
- "    3. three\n    ```"
- Or this?
- "    ``` markdown\n    1.  one"
- "1.  one\n        - a\n\n        - b"
- "        - b\n    2.  two\n    ```"
- (There are some relevant
- some relevant comments by John
- comments by John Gruber
- "[here](https://web.archive.org/"
- web.archive.org/web/
- "/web/20170611172104/http://"
- "/http://article.gmane.org/"
- /gmane.text.markdown.general/
- /2554).)
- "5."
- Can list markers be indented?
- Can ordered list markers be
- list markers be right-aligned?
- "``` markdown\n     8. item 1"
- " 8. item 1\n     9. item 2"
- "     9. item 2\n    10. item 2a"
- "    10. item 2a\n    ```"
- "6."
- Is this one list with a thematic
- with a thematic break in its
- "break in its second item,"
- or two lists separated by a
- separated by a thematic break?
- "``` markdown\n    * a"
- "* a\n    * * * * *\n    * b"
- "    * b\n    ```"
- "7."
- When list markers change from
- "change from numbers to bullets,"
- "to bullets, do we have"
- two lists or one?
- (The Markdown syntax description
- "description suggests two,"
- but the perl scripts and many
- scripts and many other
- and many other implementations
- implementations produce one.)
- "``` markdown\n    1. fee"
- "1. fee\n    2. fie\n    -  foe"
- "    -  foe\n    -  fum\n    ```"
- "8."
- What are the precedence rules
- precedence rules for the markers
- for the markers of inline
- of inline structure?
- "For example, is the following a"
- "the following a valid link, or"
- "a valid link, or does the code"
- or does the code span
- take precedence ?
- "``` markdown"
- "[a backtick (`)](/url) and ["
- "(`)](/url) and [another backtick"
- "another backtick (`)](/url)."
- "```"
- "9."
- What are the precedence rules
- precedence rules for markers of
- for markers of emphasis and
- of emphasis and strong
- emphasis?
- "For example, how should the"
- ", how should the following be"
- the following be parsed?
- "``` markdown\n    *foo *bar* baz*"
- "*foo *bar* baz*\n    ```"
- "10."
- What are the precedence rules
- precedence rules between block-
- between block-level and inline-
- and inline-level
- structure?
- "For example, how should the"
- ", how should the following be"
- the following be parsed?
- "``` markdown"
- "- `a long code span can contain"
- span can contain a hyphen like
- a hyphen like this
- "- and it can screw things up`"
- "```"
- "11."
- Can list items include section
- include section headings?  (
- "`Markdown.pl` does not"
- "allow this, but does allow"
- ", but does allow blockquotes to"
- blockquotes to include headings.
- headings.)
- "``` markdown\n    - # Heading"
- "- # Heading\n    ```"
- 12. Can list items be empty?
- "    ``` markdown\n    * a\n    *"
- "* a\n    *\n    * b\n    ```"
- "13."
- Can link references be defined
- be defined inside block quotes
- block quotes or list items?
- "``` markdown"
- "> Blockquote [foo].\n    >"
- "    >\n    > [foo]: /url\n    ```"
- "14."
- If there are multiple
- are multiple definitions for the
- "for the same reference, which"
- "reference, which takes"
- precedence?
- "``` markdown\n    [foo]: /url1"
- "[foo]: /url1\n    [foo]: /url2"
- "    [foo]: /url2\n\n    [foo][]"
- "    [foo][]\n    ```"
- "In the absence of a spec, early"
- "of a spec, early implementers"
- implementers consulted
- "`Markdown.pl`"
- to resolve these ambiguities.
- "But `Markdown.pl`"
- "was quite buggy, and"
- gave manifestly bad results in
- "bad results in many cases, so it"
- "cases, so it was not a"
- satisfactory replacement for a
- for a spec.
- Because there is no unambiguous
- "no unambiguous spec,"
- "spec, implementations have"
- have diverged
- considerably.
- "As a result, users are often"
- users are often surprised to
- surprised to find that
- a document that renders one way
- renders one way on one system (
- "on one system (say, a GitHub"
- "(say, a GitHub wiki)"
- renders differently on another (
- "on another (say, converting to"
- ", converting to docbook using"
- pandoc).
- "To make matters worse, because"
- "worse, because nothing in"
- " nothing in Markdown counts\nas a"
- "as a \"syntax error,\""
- "\" the divergence often isn'"
- "'t discovered right away."
- "## About this document"
- This document attempts to
- attempts to specify Markdown
- specify Markdown syntax
- Markdown syntax unambiguously.
- It contains many examples with
- examples with side-by-side
- side-by-side Markdown and
- HTML.
- These are intended to double as
- to double as conformance tests.
- "An\naccompanying script"
- "`spec_tests.py`"
- can be used to run the tests
- "against any Markdown program:"
- python test/spec_tests.py --spec
- "--spec spec.txt --program"
- "--program PROGRAM"
- Since this document describes
- describes how Markdown is to be
- is to be parsed into
- "an abstract syntax tree, it"
- "syntax tree, it would have made"
- would have made sense to use an
- sense to use an abstract
- representation of the syntax
- of the syntax tree instead of
- tree instead of HTML.
- But HTML is capable
- of representing the structural
- the structural distinctions we
- "distinctions we need to make,"
- "we need to make, and the"
- choice of HTML for the tests
- for the tests makes it possible
- it possible to run the tests
- to run the tests against
- an implementation without
- without writing an abstract
- an abstract syntax tree renderer
- tree renderer.
- Note that not every feature of
- every feature of the HTML
- of the HTML samples is mandated
- is mandated by
- the spec.
- "For example, the spec says what"
- spec says what counts as a link
- "destination, but it doesn'"
- t mandate that non-ASCII
- that non-ASCII characters in
- the URL be percent-encoded.
- "To use the automatic tests,"
- implementers will need to
- will need to provide a renderer
- a renderer that conforms to
- the expectations of the spec
- of the spec examples (percent-
- (percent-encoding
- non-ASCII characters in URLs).
- But a conforming implementation
- can use a different renderer and
- renderer and may choose not to
- percent-encode non-ASCII
- encode non-ASCII characters in
- characters in URLs.
- This document is generated from
- "generated from a text file,"
- "`spec.txt`, written"
- in Markdown with a small
- with a small extension for the
- for the side-by-side tests.
- "The script `tools/makespec.py`"
- can be used to convert
- "`spec.txt` into"
- HTML or CommonMark (which can
- (which can then be converted
- be converted into other formats)
- other formats).
- "In the examples, the `→`"
- character is used to represent
- to represent tabs.
- "# Preliminaries"
- "## Characters and lines"
- "Any sequence of [characters]"
- "] is a valid CommonMark"
- document.
- "A [character](@)"
- is a Unicode code point.
- Although some
- "code points (for example,"
- "(for example, combining accents)"
- accents) do not correspond to
- characters in an intuitive sense
- "intuitive sense, all code points"
- all code points count as
- points count as characters
- for purposes of this spec.
- This spec does not specify an
- not specify an encoding; it
- an encoding; it thinks of lines
- " thinks of lines as composed\nof"
- "of [characters]"
- rather than bytes.
- A conforming parser may be
- parser may be limited
- to a certain encoding.
- "A [line](@)"
- "is a sequence of zero or more ["
- "[characters]"
- "]\nother than line feed (`U+000A`"
- "`U+000A`) or carriage return ("
- "`U+000D`),\nfollowed by a ["
- "followed by a [line ending]"
- "] or by the end of file."
- "A [line ending](@)"
- "is a line feed (`U+000A`"
- "`U+000A`), a carriage return\n("
- "(`U+000D`"
- ") not followed by a line feed,"
- "by a line feed, or a carriage"
- ", or a carriage return and a"
- following line feed.
- "A line containing no characters,"
- "no characters, or a line"
- ", or a line containing only"
- " containing only spaces\n("
- "(`U+0020`) or tabs (`U+0009`"
- "`U+0009`), is called a"
- "), is called a [blank line](@)."
- The following definitions of
- definitions of character classes
- classes will be used in this
- "be used in this spec:"
- A
- "[Unicode whitespace character](@"
- "character](@)"
- is a character in the Unicode
- "`Zs` general"
- " general\ncategory, or a tab ("
- "`U+0009`), line feed (`U+000A`"
- "`U+000A`), form feed (`U+000C`"
- "`U+000C`), or\ncarriage return ("
- "`U+000D`)."
- "[Unicode whitespace](@)"
- " is a sequence of one or more\n["
- "[Unicode whitespace characters]."
- "A [tab](@) is `U+0009`."
- "A [space](@) is `U+0020`."
- "An [ASCII control character](@)"
- is a character between
- "`U+0000–1F` (both\nincluding) or"
- "including) or `U+007F`."
- An
- "[ASCII punctuation character](@)"
- "is `!`, `\"`, `#`, `$`, `%`, `&`,"
- ", `$`, `%`, `&`, `'`, `(`, `)`,"
- ", `'`, `(`, `)`,\n`*`, `+`, `,`,"
- ",\n`*`, `+`, `,`, `-`, `.`, `/`"
- ", `-`, `.`, `/` (U+0021–2F),"
- "`/` (U+0021–2F), \n`:`, `;`, `<`,"
- "`:`, `;`, `<`, `=`, `>`, `?`,"
- ", `=`, `>`, `?`, `@`"
- ", `>`, `?`, `@` (U+003A–0040),"
- " (U+003A–0040),\n`[`, `\\`, `]`,"
- "`[`, `\\`, `]`, `^`, `_`, `` ` ``"
- ", `_`, `` ` `` (U+005B–0060),"
- " (U+005B–0060), \n`{`, `|`, `}`"
- "`{`, `|`, `}`, or `~`"
- "`|`, `}`, or `~` (U+007B–007E)."
- A
- "[Unicode punctuation character]("
- "character](@)"
- is a character in the Unicode
- "`P`\n(puncuation) or `S`"
- "`S` (symbol) general categories."
- "## Tabs"
- Tabs in lines are not expanded
- "are not expanded to [spaces]"
- "[spaces].  However,"
- in contexts where spaces help to
- spaces help to define block
- "to define block structure,"
- tabs behave as if they were
- as if they were replaced by
- were replaced by spaces with a
- by spaces with a tab stop
- of 4 characters.
- "Thus, for example, a tab can be"
- ", a tab can be used instead of"
- used instead of four spaces
- in an indented code block.
- "(Note, however, that internal"
- tabs are passed through as
- "through as literal tabs, not"
- " tabs, not expanded to\nspaces.)"
- "````````````````````````````````"
- "```````````````` example"
- "→foo→baz→→bim\n."
- ".\n<pre><code>foo→baz→→bim"
- "</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "  →foo→baz→→bim\n."
- ".\n<pre><code>foo→baz→→bim"
- "</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "    a→a\n    ὐ→a\n.\n<pre><code>a→a"
- ".\n<pre><code>a→a\nὐ→a"
- "ὐ→a\n</code></pre>"
- "````````````````````````````````"
- "In the following example, a"
- "example, a continuation"
- ", a continuation paragraph of a"
- paragraph of a list
- item is indented with a tab;
- with a tab; this has exactly the
- has exactly the same effect
- as indentation with four spaces
- "with four spaces would:"
- "````````````````````````````````"
- "```````````````` example"
- "  - foo\n\n→bar\n.\n<ul>\n<li>"
- "→bar\n.\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<p>bar</p>\n</li>"
- "<p>bar</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n\n→→bar\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<pre><code>  bar"
- "<pre><code>  bar\n</code></pre>"
- "</code></pre>\n</li>\n</ul>"
- "````````````````````````````````"
- "Normally the `>`"
- that begins a block quote may be
- quote may be followed
- "optionally by a space, which is"
- "space, which is not considered"
- not considered part of the
- content.  In the following case
- "`>` is followed by a tab,"
- which is treated as if it were
- as if it were expanded into
- expanded into three spaces.
- Since one of these spaces is
- these spaces is considered part
- considered part of the
- "delimiter, `foo`"
- is considered to be indented six
- be indented six spaces
- "inside the block quote context,"
- "quote context, so we get an"
- ", so we get an indented"
- code block starting with two
- with two spaces.
- "````````````````````````````````"
- "```````````````` example"
- ">→→foo\n.\n<blockquote>"
- ".\n<blockquote>\n<pre><code>  foo"
- "<pre><code>  foo\n</code></pre>"
- "</code></pre>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "-→→foo\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<pre><code>  foo"
- "<pre><code>  foo\n</code></pre>"
- "</code></pre>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "    foo\n→bar\n.\n<pre><code>foo"
- ".\n<pre><code>foo\nbar"
- "bar\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- " - foo\n   - bar\n→ - baz\n.\n<ul>"
- "→ - baz\n.\n<ul>\n<li>foo\n<ul>"
- "<li>foo\n<ul>\n<li>bar\n<ul>"
- "<li>bar\n<ul>\n<li>baz</li>\n</ul>"
- "</ul>\n</li>\n</ul>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "#→Foo\n.\n<h1>Foo</h1>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*→*→*→\n.\n<hr />"
- "````````````````````````````````"
- "## Insecure characters"
- "For security reasons, the"
- "reasons, the Unicode character"
- "`U+0000` must be replaced"
- with the REPLACEMENT CHARACTER (
- "`U+FFFD`)."
- "## Backslash escapes"
- Any ASCII punctuation character
- character may be backslash-
- "be backslash-escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\."
- "\\/\\:\\;\\<\\=\\>\\?"
- "\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n.\n<p>!"
- "&quot;#$%&amp;'()*+,-./:;&lt;=&"
- "()*+,-./:;&lt;=&gt;?"
- "@[\\]^_`{|}~</p>"
- "````````````````````````````````"
- Backslashes before other
- before other characters are
- characters are treated as
- are treated as literal
- "backslashes:"
- "````````````````````````````````"
- "```````````````` example"
- "\\→\\A\\a\\ \\3\\φ\\«\n."
- ".\n<p>\\→\\A\\a\\ \\3\\φ\\«</p>"
- "````````````````````````````````"
- Escaped characters are treated
- are treated as regular
- as regular characters and do
- not have their usual Markdown
- "usual Markdown meanings:"
- "````````````````````````````````"
- "```````````````` example"
- "\\*not emphasized*"
- "\\<br/> not a tag"
- "\\[not a link](/foo)\n\\`not code`"
- "\\`not code`\n1\\. not a list"
- "1\\. not a list\n\\* not a list"
- "\\* not a list\n\\# not a heading"
- "\\[foo]: /url \"not a reference\""
- "\\&ouml; not a character entity\n."
- ".\n<p>*not emphasized*"
- "&lt;br/&gt; not a tag"
- "[not a link](/foo)\n`not code`"
- "`not code`\n1. not a list"
- "1. not a list\n* not a list"
- "* not a list\n# not a heading"
- "[foo]: /url &quot;not a"
- /url &quot;not a reference&quot;
- "&amp;ouml; not a character"
- not a character entity</p>
- "````````````````````````````````"
- If a backslash is itself escaped
- "itself escaped, the following"
- ", the following character is not"
- "character is not:"
- "````````````````````````````````"
- "```````````````` example"
- "\\\\*emphasis*\n."
- ".\n<p>\\<em>emphasis</em></p>"
- "````````````````````````````````"
- A backslash at the end of the
- "the end of the line is a ["
- "[hard line break]:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\\\nbar\n.\n<p>foo<br />\nbar</p>"
- "````````````````````````````````"
- Backslash escapes do not work in
- "do not work in code blocks, code"
- "blocks, code spans, autolinks,"
- ", autolinks, or\nraw HTML:"
- "````````````````````````````````"
- "```````````````` example"
- "`` \\[\\` ``\n."
- ".\n<p><code>\\[\\`</code></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "    \\[\\]\n.\n<pre><code>\\[\\]"
- "<pre><code>\\[\\]\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "~~~\n\\[\\]\n~~~\n.\n<pre><code>\\[\\]"
- "<pre><code>\\[\\]\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<https://example.com?find=\\*>\n."
- "<p><a href=\"https://example.com?"
- "find=%5C*\">https://example.com?"
- "find=\\*</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"/bar\\/)\">\n."
- ".\n<a href=\"/bar\\/)\">"
- "````````````````````````````````"
- But they work in all other
- "in all other contexts, including"
- ", including URLs and link titles"
- "and link titles,"
- "link references, and ["
- "[info strings] in ["
- "] in [fenced code blocks]:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo](/bar\\* \"ti\\*tle\")\n."
- "<p><a href=\"/bar*\" title=\"ti*tle"
- "*\" title=\"ti*tle\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n."
- "<p><a href=\"/bar*\" title=\"ti*tle"
- "*\" title=\"ti*tle\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "``` foo\\+bar\nfoo\n```\n."
- "<pre><code class=\"language-foo+"
- "=\"language-foo+bar\">foo"
- "</code></pre>"
- "````````````````````````````````"
- "##"
- Entity and numeric character
- character references
- Valid HTML entity references and
- references and numeric character
- character references
- can be used in place of the
- in place of the corresponding
- "corresponding Unicode character,"
- "with the following exceptions:"
- "-"
- Entity and character references
- references are not recognized in
- recognized in code
- blocks and code spans.
- "-"
- Entity and character references
- references cannot stand in place
- stand in place of
- special characters that define
- that define structural elements
- elements in
- CommonMark.
- "For example, although `&#42;`"
- "`&#42;` can be used"
- "in place of a literal `*`"
- "`*` character, `&#42;`"
- "`&#42;` cannot replace\n  `*`"
- "in emphasis delimiters, bullet"
- ", bullet list markers, or"
- "list markers, or thematic"
- breaks.
- Conforming CommonMark parsers
- parsers need not store
- need not store information about
- whether a particular character
- character was represented in the
- in the source
- using a Unicode character or an
- character or an entity reference
- entity reference.
- "[Entity references](@)"
- "consist of `&`"
- "`&` + any of the valid"
- "HTML5 entity names + `;`. The"
- "`;`. The\ndocument"
- "<https://html.spec.whatwg.org/"
- /entities.json>
- is used as an authoritative
- an authoritative source for the
- source for the valid entity
- references and their
- and their corresponding code
- code points.
- "````````````````````````````````"
- "```````````````` example"
- "&nbsp; &amp; &copy; &AElig; &"
- "&copy; &AElig; &Dcaron;"
- "&frac34; &HilbertSpace; &"
- "&HilbertSpace; &DifferentialD;"
- "&ClockwiseContourIntegral; &ngE;"
- ".\n<p>  &amp; © Æ Ď\n¾ ℋ ⅆ"
- "¾ ℋ ⅆ\n∲ ≧̸</p>"
- "````````````````````````````````"
- "[Decimal numeric character"
- "references](@)\nconsist of `&#`"
- "consist of `&#` + a string of 1"
- + a string of 1--
- "--7 arabic digits + `;`. A"
- numeric character reference is
- reference is parsed as the
- is parsed as the corresponding
- Unicode character.
- Invalid Unicode code points will
- code points will be replaced by
- the REPLACEMENT CHARACTER (
- "`U+FFFD`"
- ").  For security reasons,"
- "the code point `U+0000`"
- will also be replaced by
- "`U+FFFD`."
- "````````````````````````````````"
- "```````````````` example"
- "&#35; &#1234; &#992; &#0;\n."
- ".\n<p># Ӓ Ϡ �</p>"
- "````````````````````````````````"
- "[Hexadecimal numeric character"
- "references](@) consist of `&#` +"
- "`&#` +\neither `X` or `x`"
- + a string of 1-6 hexadecimal
- "1-6 hexadecimal digits + `;`."
- They too are parsed as the
- parsed as the corresponding
- corresponding Unicode character
- character (this
- time specified with a
- specified with a hexadecimal
- a hexadecimal numeral instead of
- instead of decimal).
- "````````````````````````````````"
- "```````````````` example"
- "&#X22; &#XD06; &#xcab;\n."
- ".\n<p>&quot; ആ ಫ</p>"
- "````````````````````````````````"
- "Here are some nonentities:"
- "````````````````````````````````"
- "```````````````` example"
- "&nbsp &x; &#; &#x;\n&#87654321;"
- "&#87654321;\n&#abcdef0;"
- "&ThisIsNotDefined; &hi?;\n."
- "<p>&amp;nbsp &amp;x; &amp;#; &"
- "amp;x; &amp;#; &amp;#x;"
- "&amp;#87654321;\n&amp;#abcdef0;"
- "&amp;ThisIsNotDefined; &amp;hi?;"
- ; &amp;hi?;</p>
- "````````````````````````````````"
- Although HTML5 does accept some
- does accept some entity
- some entity references
- without a trailing semicolon (
- "semicolon (such as `&copy`"
- "`&copy`), these are not"
- "recognized here, because it"
- "here, because it makes the"
- it makes the grammar too
- "the grammar too ambiguous:"
- "````````````````````````````````"
- "```````````````` example"
- "&copy\n.\n<p>&amp;copy</p>"
- "````````````````````````````````"
- Strings that are not on the list
- not on the list of HTML5 named
- of HTML5 named entities are not
- recognized as entity references
- "references either:"
- "````````````````````````````````"
- "```````````````` example"
- "&MadeUpEntity;\n."
- ".\n<p>&amp;MadeUpEntity;</p>"
- "````````````````````````````````"
- Entity and numeric character
- character references are
- references are recognized in any
- context besides code spans or
- "code spans or code blocks,"
- " or code blocks, including\nURLs,"
- "URLs, [link titles], and ["
- "], and [fenced code block][] ["
- "][] [info strings]:"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"&ouml;&ouml;.html\">\n."
- ".\n<a href=\"&ouml;&ouml;.html\">"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo](/f&ouml;&ouml; \"f&ouml;&"
- "&ouml; \"f&ouml;&ouml;\")\n."
- "<p><a href=\"/f%C3%B6%C3%B6\""
- "\"/f%C3%B6%C3%B6\" title=\"föö\">foo"
- "title=\"föö\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]"
- "[foo]: /f&ouml;&ouml; \"f&ouml;&"
- "&ouml; \"f&ouml;&ouml;\"\n."
- "<p><a href=\"/f%C3%B6%C3%B6\""
- "\"/f%C3%B6%C3%B6\" title=\"föö\">foo"
- "title=\"föö\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "``` f&ouml;&ouml;\nfoo\n```\n."
- "<pre><code class=\"language-föö\">"
- "=\"language-föö\">foo"
- "</code></pre>"
- "````````````````````````````````"
- Entity and numeric character
- character references are treated
- are treated as literal
- text in code spans and code
- "spans and code blocks:"
- "````````````````````````````````"
- "```````````````` example"
- "`f&ouml;&ouml;`\n."
- "<p><code>f&amp;ouml;&amp;ouml;</"
- ;&amp;ouml;</code></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "    f&ouml;f&ouml;\n."
- "<pre><code>f&amp;ouml;f&amp;ouml"
- ";ouml;f&amp;ouml;\n</code></pre>"
- "````````````````````````````````"
- Entity and numeric character
- character references cannot be
- cannot be used
- in place of symbols indicating
- indicating structure in
- structure in CommonMark
- documents.
- "````````````````````````````````"
- "```````````````` example"
- "&#42;foo&#42;\n*foo*\n.\n<p>*foo*"
- ".\n<p>*foo*\n<em>foo</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "&#42; foo\n\n* foo\n.\n<p>* foo</p>"
- ".\n<p>* foo</p>\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo&#10;&#10;bar\n.\n<p>foo"
- ".\n<p>foo\n\nbar</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "&#9;foo\n.\n<p>→foo</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[a](url &quot;tit&quot;)\n."
- "<p>[a](url &quot;tit&quot;)</p>"
- "````````````````````````````````"
- "# Blocks and inlines"
- We can think of a document as a
- a document as a sequence of
- "[blocks](@)---"
- structural elements like
- "elements like paragraphs, block"
- "quotations, lists, headings,"
- "lists, headings, rules, and code"
- "rules, and code blocks."
- Some blocks (like
- block quotes and list items)
- and list items) contain other
- ) contain other blocks; others (
- blocks; others (like
- headings and paragraphs) contain
- "[inline](@) content---text,"
- "links, emphasized text, images,"
- "text, images, code spans, and so"
- "spans, and so on."
- "## Precedence"
- Indicators of block structure
- block structure always take
- always take precedence over
- precedence over indicators
- of inline structure.
- "So, for example, the following"
- ", the following is a list with"
- "two items, not a list with one"
- a list with one item containing
- "item containing a code span:"
- "````````````````````````````````"
- "```````````````` example"
- "- `one\n- two`\n.\n<ul>"
- "- two`\n.\n<ul>\n<li>`one</li>"
- "<li>`one</li>\n<li>two`</li>"
- "<li>two`</li>\n</ul>"
- "````````````````````````````````"
- This means that parsing can
- that parsing can proceed in two
- "proceed in two steps:  first,"
- "steps:  first, the block"
- structure of the document can be
- document can be discerned;
- "be discerned; second, text lines"
- ", text lines inside"
- "paragraphs, headings, and other"
- ", and other block constructs can"
- constructs can be parsed for
- be parsed for inline
- structure.
- The second step requires
- step requires information about
- about link reference
- definitions that will be
- that will be available only at
- only at the end of the first
- step.
- Note that the first step
- the first step requires
- step requires processing lines
- "processing lines in sequence,"
- but the second can be
- "second can be parallelized,"
- "be parallelized, since the"
- ", since the inline parsing of"
- one block element does not
- element does not affect the
- not affect the inline parsing of
- parsing of any other.
- "##"
- Container blocks and leaf blocks
- We can divide blocks into two
- "blocks into two types:"
- "[container blocks](#container-"
- "](#container-blocks),"
- "which can contain other blocks,"
- "other blocks, and"
- "[leaf blocks](#leaf-blocks),"
- ",\nwhich cannot."
- "# Leaf blocks"
- This section describes the
- describes the different kinds of
- kinds of leaf block that make up
- that make up a
- Markdown document.
- "## Thematic breaks"
- A line consisting of optionally
- of optionally up to three spaces
- "to three spaces of indentation,"
- "of indentation, followed by a"
- sequence of three or more
- "of three or more matching `-`,"
- "`-`, `_`, or `*`"
- "`*` characters, each followed"
- optionally by any number of
- "by any number of spaces or tabs,"
- "spaces or tabs, forms a"
- "[thematic break](@)."
- "````````````````````````````````"
- "```````````````` example"
- "***\n---\n___\n.\n<hr />\n<hr />"
- ".\n<hr />\n<hr />\n<hr />"
- "````````````````````````````````"
- "Wrong characters:"
- "````````````````````````````````"
- "```````````````` example"
- "+++\n.\n<p>+++</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "===\n.\n<p>===</p>"
- "````````````````````````````````"
- "Not enough characters:"
- "````````````````````````````````"
- "```````````````` example"
- "--\n**\n__\n.\n<p>--\n**\n__</p>"
- "````````````````````````````````"
- Up to three spaces of
- three spaces of indentation are
- "indentation are allowed:"
- "````````````````````````````````"
- "```````````````` example"
- " ***\n  ***\n   ***\n.\n<hr />"
- "   ***\n.\n<hr />\n<hr />\n<hr />"
- "````````````````````````````````"
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "    ***\n.\n<pre><code>***"
- ".\n<pre><code>***\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n    ***\n.\n<p>Foo\n***</p>"
- "````````````````````````````````"
- More than three characters may
- "characters may be used:"
- "````````````````````````````````"
- "```````````````` example"
- ________________________________
- "_____________________\n.\n<hr />"
- "````````````````````````````````"
- Spaces and tabs are allowed
- tabs are allowed between the
- "between the characters:"
- "````````````````````````````````"
- "```````````````` example"
- " - - -\n.\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- " **  * ** * ** * **\n.\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "-     -      -      -\n.\n<hr />"
- "````````````````````````````````"
- Spaces and tabs are allowed at
- "are allowed at the end:"
- "````````````````````````````````"
- "```````````````` example"
- "- - - -    \n.\n<hr />"
- "````````````````````````````````"
- "However, no other characters may"
- characters may occur in the line
- "in the line:"
- "````````````````````````````````"
- "```````````````` example"
- "_ _ _ _ a\n\na------\n\n---a---\n."
- "---a---\n.\n<p>_ _ _ _ a</p>"
- "<p>_ _ _ _ a</p>\n<p>a------</p>"
- "<p>a------</p>\n<p>---a---</p>"
- "````````````````````````````````"
- It is required that all of the
- that all of the characters other
- characters other than spaces or
- than spaces or tabs be the same.
- "So, this is not a thematic break"
- "a thematic break:"
- "````````````````````````````````"
- "```````````````` example"
- " *-*\n.\n<p><em>-</em></p>"
- "````````````````````````````````"
- Thematic breaks do not need
- do not need blank lines before
- "lines before or after:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n***\n- bar\n.\n<ul>"
- "***\n- bar\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n</ul>\n<hr />\n<ul>"
- "<hr />\n<ul>\n<li>bar</li>\n</ul>"
- "````````````````````````````````"
- Thematic breaks can interrupt a
- "can interrupt a paragraph:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n***\nbar\n.\n<p>Foo</p>\n<hr />"
- "<hr />\n<p>bar</p>"
- "````````````````````````````````"
- If a line of dashes that meets
- that meets the above conditions
- above conditions for being a
- thematic break could also be
- could also be interpreted as the
- "as the underline of a [setext"
- "[setext\nheading]"
- "], the interpretation as a\n["
- "[setext heading]"
- takes precedence.
- "Thus, for example,"
- "this is a setext heading, not a"
- "heading, not a paragraph"
- not a paragraph followed by a
- "followed by a thematic break:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n---\nbar\n.\n<h2>Foo</h2>"
- ".\n<h2>Foo</h2>\n<p>bar</p>"
- "````````````````````````````````"
- When both a thematic break and a
- break and a list item are
- a list item are possible
- "interpretations of a line, the"
- "of a line, the thematic break"
- "thematic break takes precedence:"
- "````````````````````````````````"
- "```````````````` example"
- "* Foo\n* * *\n* Bar\n.\n<ul>"
- "* Bar\n.\n<ul>\n<li>Foo</li>\n</ul>"
- "</ul>\n<hr />\n<ul>\n<li>Bar</li>"
- "<li>Bar</li>\n</ul>"
- "````````````````````````````````"
- If you want a thematic break in
- "break in a list item, use a"
- "list item, use a different"
- "use a different bullet:"
- "````````````````````````````````"
- "```````````````` example"
- "- Foo\n- * * *\n.\n<ul>"
- "- * * *\n.\n<ul>\n<li>Foo</li>\n<li>"
- "<li>\n<hr />\n</li>\n</ul>"
- "````````````````````````````````"
- "## ATX headings"
- "An [ATX heading](@)"
- consists of a string of
- "of a string of characters,"
- "of characters, parsed as inline"
- "parsed as inline content,"
- "inline content, between an"
- opening sequence of 1--
- "--6 unescaped `#`"
- "`#` characters and an optional"
- closing sequence of any number
- "of any number of unescaped `#`"
- "`#` characters."
- "The opening sequence of `#`"
- characters must be followed by
- "be followed by spaces or tabs,"
- "spaces or tabs, or"
- by the end of line.
- The optional closing sequence of
- "`#`s must be preceded by"
- spaces or tabs and may be
- tabs and may be followed by
- be followed by spaces or tabs
- spaces or tabs only.
- "The opening\n`#`"
- character may be preceded by up
- preceded by up to three spaces
- to three spaces of indentation.
- The raw
- contents of the heading are
- the heading are stripped of
- are stripped of leading and
- of leading and trailing space or
- space or tabs
- before being parsed as inline
- parsed as inline content.
- The heading level is equal to
- " is equal to the number\nof `#`"
- characters in the opening
- in the opening sequence.
- "Simple headings:"
- "````````````````````````````````"
- "```````````````` example"
- "# foo\n## foo\n### foo\n#### foo"
- "### foo\n#### foo\n##### foo"
- "##### foo\n###### foo\n."
- "###### foo\n.\n<h1>foo</h1>"
- ".\n<h1>foo</h1>\n<h2>foo</h2>"
- "<h2>foo</h2>\n<h3>foo</h3>"
- "<h3>foo</h3>\n<h4>foo</h4>"
- "<h4>foo</h4>\n<h5>foo</h5>"
- "<h5>foo</h5>\n<h6>foo</h6>"
- "````````````````````````````````"
- "More than six `#`"
- "`#` characters is not a heading:"
- "````````````````````````````````"
- "```````````````` example"
- "####### foo\n.\n<p>####### foo</p>"
- "````````````````````````````````"
- At least one space or tab is
- space or tab is required between
- "required between the `#`"
- "`#` characters and the\nheading'"
- "s contents, unless the heading"
- the heading is empty.
- Note that many
- implementations currently do not
- currently do not require the
- not require the space.
- "However, the"
- space was required by the
- "[original ATX implementation]("
- "implementation](http://"
- "](http://www.aaronsw.com/2002/"
- "/2002/atx/atx.py),"
- and it helps prevent things like
- things like the following from
- following from being parsed as
- "headings:"
- "````````````````````````````````"
- "```````````````` example"
- "#5 bolt\n\n#hashtag\n."
- "#hashtag\n.\n<p>#5 bolt</p>"
- ".\n<p>#5 bolt</p>\n<p>#hashtag</p>"
- "````````````````````````````````"
- "This is not a heading, because"
- "heading, because the first `#`"
- "`#` is escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "\\## foo\n.\n<p>## foo</p>"
- "````````````````````````````````"
- "Contents are parsed as inlines:"
- "````````````````````````````````"
- "```````````````` example"
- "# foo *bar* \\*baz\\*\n."
- "<h1>foo <em>bar</em> *baz*</h1>"
- "````````````````````````````````"
- Leading and trailing spaces or
- spaces or tabs are ignored in
- are ignored in parsing inline
- "parsing inline content:"
- "````````````````````````````````"
- "```````````````` example"
- "#                  foo"
- ".\n<h1>foo</h1>"
- "````````````````````````````````"
- Up to three spaces of
- three spaces of indentation are
- "indentation are allowed:"
- "````````````````````````````````"
- "```````````````` example"
- " ### foo\n  ## foo\n   # foo\n."
- "   # foo\n.\n<h3>foo</h3>"
- ".\n<h3>foo</h3>\n<h2>foo</h2>"
- "<h2>foo</h2>\n<h1>foo</h1>"
- "````````````````````````````````"
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "    # foo\n.\n<pre><code># foo"
- "<pre><code># foo\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo\n    # bar\n.\n<p>foo\n# bar</p>"
- "````````````````````````````````"
- "A closing sequence of `#`"
- "`#` characters is optional:"
- "````````````````````````````````"
- "```````````````` example"
- "## foo ##\n  ###   bar    ###\n."
- ".\n<h2>foo</h2>\n<h3>bar</h3>"
- "````````````````````````````````"
- It need not be the same length
- the same length as the opening
- "as the opening sequence:"
- "````````````````````````````````"
- "```````````````` example"
- "# foo ##########################"
- "########################"
- "##### foo ##\n.\n<h1>foo</h1>"
- ".\n<h1>foo</h1>\n<h5>foo</h5>"
- "````````````````````````````````"
- Spaces or tabs are allowed after
- allowed after the closing
- "the closing sequence:"
- "````````````````````````````````"
- "```````````````` example"
- "### foo ###     \n.\n<h3>foo</h3>"
- "````````````````````````````````"
- "A sequence of `#`"
- characters with anything but
- anything but spaces or tabs
- spaces or tabs following it
- "is not a closing sequence, but"
- "sequence, but counts as part of"
- as part of the contents of the
- "heading:"
- "````````````````````````````````"
- "```````````````` example"
- "### foo ### b\n."
- ".\n<h3>foo ### b</h3>"
- "````````````````````````````````"
- The closing sequence must be
- sequence must be preceded by a
- "be preceded by a space or tab:"
- "````````````````````````````````"
- "```````````````` example"
- "# foo#\n.\n<h1>foo#</h1>"
- "````````````````````````````````"
- "Backslash-escaped `#`"
- characters do not count as part
- "of the closing sequence:"
- "````````````````````````````````"
- "```````````````` example"
- "### foo \\###\n## foo #\\##"
- "## foo #\\##\n# foo \\#\n."
- "# foo \\#\n.\n<h3>foo ###</h3>"
- "<h2>foo ###</h2>\n<h1>foo #</h1>"
- "````````````````````````````````"
- ATX headings need not be
- need not be separated from
- separated from surrounding
- from surrounding content by
- content by blank
- "lines, and they can interrupt"
- "can interrupt paragraphs:"
- "````````````````````````````````"
- "```````````````` example"
- "****\n## foo\n****\n.\n<hr />"
- "****\n.\n<hr />\n<h2>foo</h2>"
- "<h2>foo</h2>\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "Foo bar\n# baz\nBar foo\n."
- "# baz\nBar foo\n.\n<p>Foo bar</p>"
- ".\n<p>Foo bar</p>\n<h1>baz</h1>"
- "<h1>baz</h1>\n<p>Bar foo</p>"
- "````````````````````````````````"
- "ATX headings can be empty:"
- "````````````````````````````````"
- "```````````````` example"
- "## \n#\n### ###\n.\n<h2></h2>"
- ".\n<h2></h2>\n<h1></h1>\n<h3></h3>"
- "````````````````````````````````"
- "## Setext headings"
- "A [setext heading](@)"
- consists of one or more
- "lines of text, not interrupted"
- "not interrupted by a blank line,"
- "by a blank line, of which the"
- ", of which the first line does"
- first line does not
- have more than 3 spaces of
- "than 3 spaces of indentation,"
- " of indentation, followed by\na ["
- "a [setext heading underline]"
- "."
- The lines of text must be such
- "that, were they not followed by"
- not followed by the setext
- "by the setext heading underline,"
- they would be interpreted as a
- "interpreted as a paragraph:"
- "as a paragraph:  they cannot be"
- "interpretable as a [code fence],"
- "[code fence], [ATX heading]["
- ", [ATX heading][ATX headings],\n["
- "ATX headings],\n[block quote]["
- ",\n[block quote][block quotes], ["
- "block quotes], [thematic break]["
- "thematic break][thematic breaks]"
- "thematic breaks],\n[list item]["
- "],\n[list item][list items], or ["
- "], or [HTML block][HTML blocks]."
- "A [setext heading underline](@)"
- " is a sequence of\n`=`"
- "`=` characters or a sequence of"
- "`-`"
- "characters, with no more than 3"
- spaces of indentation and any
- and any number of trailing
- of trailing spaces or tabs.
- The heading is a level 1 heading
- "level 1 heading if `=`"
- "`=` characters are used in\nthe ["
- "the [setext heading underline]"
- "], and a level 2 heading if `-`"
- characters are used.
- The contents of the heading are
- the heading are the result
- of parsing the preceding lines
- preceding lines of text as
- lines of text as CommonMark
- " as CommonMark inline\ncontent."
- "In general, a setext heading"
- a setext heading need not be
- need not be preceded or followed
- or followed by a
- blank line.
- "However, it cannot interrupt a"
- "interrupt a paragraph, so when a"
- setext heading comes after a
- "comes after a paragraph, a blank"
- ", a blank line is needed between"
- "them.\n\nSimple examples:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo *bar*\n=========\n\nFoo *bar*"
- "Foo *bar*\n---------\n."
- ".\n<h1>Foo <em>bar</em></h1>"
- "<h2>Foo <em>bar</em></h2>"
- "````````````````````````````````"
- The content of the header may
- the header may span more than
- "span more than one line:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo *bar\nbaz*\n====\n."
- "baz*\n====\n.\n<h1>Foo <em>bar"
- "<h1>Foo <em>bar\nbaz</em></h1>"
- "````````````````````````````````"
- The contents are the result of
- the result of parsing the
- "of parsing the headings's raw"
- content as inlines.  The heading
- "'s raw content is formed by"
- concatenating the lines and
- the lines and removing initial
- removing initial and final
- spaces or tabs.
- "````````````````````````````````"
- "```````````````` example"
- "  Foo *bar\nbaz*→\n====\n."
- "baz*→\n====\n.\n<h1>Foo <em>bar"
- "<h1>Foo <em>bar\nbaz</em></h1>"
- "````````````````````````````````"
- The underlining can be any
- "can be any length:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n-------------------------"
- "Foo\n=\n.\n<h2>Foo</h2>"
- "=\n.\n<h2>Foo</h2>\n<h1>Foo</h1>"
- "````````````````````````````````"
- The heading content can be
- content can be preceded by up to
- by up to three spaces of
- "three spaces of indentation, and"
- need not line up with the
- "line up with the underlining:"
- "````````````````````````````````"
- "```````````````` example"
- "   Foo\n---\n\n  Foo\n-----\n\n  Foo"
- "-----\n\n  Foo\n  ===\n."
- "  Foo\n  ===\n.\n<h2>Foo</h2>"
- ".\n<h2>Foo</h2>\n<h2>Foo</h2>"
- "<h2>Foo</h2>\n<h1>Foo</h1>"
- "````````````````````````````````"
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "    Foo\n    ---\n\n    Foo\n---\n."
- "    Foo\n---\n.\n<pre><code>Foo\n---"
- "---\n\nFoo\n</code></pre>\n<hr />"
- "````````````````````````````````"
- The setext heading underline can
- underline can be preceded by up
- preceded by up to three spaces
- to three spaces of
- "indentation, and may have"
- ", and may have trailing spaces"
- "trailing spaces or tabs:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n   ----      \n.\n<h2>Foo</h2>"
- "````````````````````````````````"
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n    ---\n.\n<p>Foo\n---</p>"
- "````````````````````````````````"
- The setext heading underline
- underline cannot contain
- cannot contain internal spaces
- "internal spaces or tabs:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n= =\n\nFoo\n--- -\n.\n<p>Foo"
- "--- -\n.\n<p>Foo\n= =</p>"
- ".\n<p>Foo\n= =</p>\n<p>Foo</p>"
- "<p>Foo</p>\n<hr />"
- "````````````````````````````````"
- Trailing spaces or tabs in the
- or tabs in the content line do
- content line do not cause a hard
- "not cause a hard line break:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo  \n-----\n.\n<h2>Foo</h2>"
- "````````````````````````````````"
- "Nor does a backslash at the end:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\\\n----\n.\n<h2>Foo\\</h2>"
- "````````````````````````````````"
- Since indicators of block
- of block structure take
- structure take precedence over
- "indicators of inline structure,"
- "structure, the following are"
- "following are setext headings:"
- "````````````````````````````````"
- "```````````````` example"
- "`Foo\n----\n`\n\n<a title=\"a lot\n---"
- "---\nof dashes\"/>\n.\n<h2>`Foo</h2>"
- ".\n<h2>`Foo</h2>\n<p>`</p>"
- "<h2>&lt;a title=&quot;a lot</h2>"
- "<p>of dashes&quot;/&gt;</p>"
- "````````````````````````````````"
- The setext heading underline
- "underline cannot be a ["
- "[lazy continuation\nline]"
- "] in a list item or block quote:"
- "````````````````````````````````"
- "```````````````` example"
- "> Foo\n---\n.\n<blockquote>"
- ".\n<blockquote>\n<p>Foo</p>"
- "<p>Foo</p>\n</blockquote>\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\nbar\n===\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo\nbar"
- "<p>foo\nbar\n===</p>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- Foo\n---\n.\n<ul>\n<li>Foo</li>"
- "<li>Foo</li>\n</ul>\n<hr />"
- "````````````````````````````````"
- A blank line is needed between a
- needed between a paragraph and a
- paragraph and a following
- "setext heading, since otherwise"
- since otherwise the paragraph
- the paragraph becomes part
- "of the heading's content:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\nBar\n---\n.\n<h2>Foo\nBar</h2>"
- "````````````````````````````````"
- But in general a blank line is
- a blank line is not required
- is not required before or after
- "setext headings:"
- "````````````````````````````````"
- "```````````````` example"
- "---\nFoo\n---\nBar\n---\nBaz\n.\n<hr />"
- "---\nBaz\n.\n<hr />\n<h2>Foo</h2>"
- "<h2>Foo</h2>\n<h2>Bar</h2>"
- "<h2>Bar</h2>\n<p>Baz</p>"
- "````````````````````````````````"
- "Setext headings cannot be empty:"
- "````````````````````````````````"
- "```````````````` example"
- "====\n.\n<p>====</p>"
- "````````````````````````````````"
- Setext heading text lines must
- text lines must not be
- must not be interpretable as
- interpretable as block
- constructs other than paragraphs
- than paragraphs.
- "So, the line of dashes"
- in these examples gets
- examples gets interpreted as a
- "interpreted as a thematic break:"
- "````````````````````````````````"
- "```````````````` example"
- "---\n---\n.\n<hr />\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n-----\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n</ul>\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "    foo\n---\n.\n<pre><code>foo"
- ".\n<pre><code>foo\n</code></pre>"
- "</code></pre>\n<hr />"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\n-----\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo</p>"
- "<p>foo</p>\n</blockquote>\n<hr />"
- "````````````````````````````````"
- If you want a heading with
- "`> foo`"
- "as its literal text, you can"
- "use backslash escapes:"
- "````````````````````````````````"
- "```````````````` example"
- "\\> foo\n------\n."
- "------\n.\n<h2>&gt; foo</h2>"
- "````````````````````````````````"
- "**Compatibility note:**"
- Most existing Markdown
- Markdown implementations
- do not allow the text of setext
- text of setext headings to span
- headings to span multiple lines.
- But there is no consensus about
- consensus about how to interpret
- "``` markdown\nFoo\nbar\n---\nbaz\n```"
- One can find four different
- "four different interpretations:"
- "1. paragraph \"Foo\", heading \"bar"
- "\", heading \"bar\", paragraph \"baz"
- ", paragraph \"baz\""
- "2. paragraph \"Foo bar\""
- "\", thematic break, paragraph \""
- "\"baz\""
- "3. paragraph \"Foo bar --- baz\""
- "4. heading \"Foo bar\", paragraph"
- "\", paragraph \"baz\""
- We find interpretation 4 most
- "4 most natural, and"
- "natural, and interpretation 4"
- increases the expressive power
- "expressive power of CommonMark,"
- "of CommonMark, by allowing"
- multiline headings.
- Authors who want interpretation
- interpretation 1 can
- put a blank line after the first
- "after the first paragraph:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n\nbar\n---\nbaz\n.\n<p>Foo</p>"
- "baz\n.\n<p>Foo</p>\n<h2>bar</h2>"
- "<h2>bar</h2>\n<p>baz</p>"
- "````````````````````````````````"
- Authors who want interpretation
- interpretation 2 can put blank
- 2 can put blank lines around
- "the thematic break,"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\nbar\n\n---\n\nbaz\n.\n<p>Foo"
- "baz\n.\n<p>Foo\nbar</p>\n<hr />"
- "bar</p>\n<hr />\n<p>baz</p>"
- "````````````````````````````````"
- or use a thematic break that
- "break that cannot count as a ["
- "[setext heading\nunderline]"
- "underline], such as"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\nbar\n* * *\nbaz\n.\n<p>Foo"
- "baz\n.\n<p>Foo\nbar</p>\n<hr />"
- "bar</p>\n<hr />\n<p>baz</p>"
- "````````````````````````````````"
- Authors who want interpretation
- interpretation 3 can use
- "3 can use backslash escapes:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\nbar\n\\---\nbaz\n.\n<p>Foo\nbar"
- "baz\n.\n<p>Foo\nbar\n---\nbaz</p>"
- "````````````````````````````````"
- "## Indented code blocks"
- "An [indented code block](@)"
- " is composed of one or more\n["
- "[indented chunks]"
- "] separated by blank lines.\nAn"
- "An [indented chunk](@)"
- is a sequence of non-blank lines
- "non-blank lines,"
- each preceded by four or more
- by four or more spaces of
- more spaces of indentation.
- The contents of the code
- block are the literal contents
- "literal contents of the lines,"
- "of the lines, including trailing"
- "[line endings]"
- ", minus four spaces of"
- four spaces of indentation.
- "An indented code block has no ["
- "[info string]."
- An indented code block cannot
- block cannot interrupt a
- "interrupt a paragraph, so there"
- ", so there must be"
- a blank line between a paragraph
- a paragraph and a following
- and a following indented code
- indented code block.
- "(A blank line is not needed,"
- "is not needed, however, between"
- "however, between a code block"
- a code block and a following
- paragraph.)
- "````````````````````````````````"
- "```````````````` example"
- a simple
- "      indented code block\n."
- ".\n<pre><code>a simple"
- indented code block
- "</code></pre>"
- "````````````````````````````````"
- If there is any ambiguity
- is any ambiguity between an
- between an interpretation of
- of indentation
- as a code block and as
- block and as indicating that
- indicating that material belongs
- "material belongs to a [list"
- "[list\nitem][list items]"
- ", the list item interpretation"
- "interpretation takes precedence:"
- "````````````````````````````````"
- "```````````````` example"
- "  - foo\n\n    bar\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<p>bar</p>\n</li>"
- "<p>bar</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "1.  foo\n\n    - bar\n.\n<ol>\n<li>"
- ".\n<ol>\n<li>\n<p>foo</p>\n<ul>"
- "<p>foo</p>\n<ul>\n<li>bar</li>"
- "<li>bar</li>\n</ul>\n</li>\n</ol>"
- "````````````````````````````````"
- The contents of a code block are
- "a code block are literal text,"
- "literal text, and do not get"
- ", and do not get parsed"
- "as Markdown:"
- "````````````````````````````````"
- "```````````````` example"
- "    <a/>\n    *hi*\n\n    - one\n."
- ".\n<pre><code>&lt;a/&gt;\n*hi*"
- "*hi*\n\n- one\n</code></pre>"
- "````````````````````````````````"
- Here we have three chunks
- three chunks separated by blank
- "by blank lines:"
- "````````````````````````````````"
- "```````````````` example"
- "    chunk1\n\n    chunk2"
- "    chunk2\n  \n \n \n    chunk3\n."
- " \n    chunk3\n.\n<pre><code>chunk1"
- "chunk2\n\n\n\nchunk3\n</code></pre>"
- "````````````````````````````````"
- Any initial spaces or tabs
- spaces or tabs beyond four
- tabs beyond four spaces of
- four spaces of indentation will
- indentation will be included in
- "the content, even in interior"
- "even in interior blank lines:"
- "````````````````````````````````"
- "```````````````` example"
- "    chunk1\n      \n      chunk2\n."
- "      chunk2\n.\n<pre><code>chunk1"
- "  \n  chunk2\n</code></pre>"
- "````````````````````````````````"
- An indented code block cannot
- block cannot interrupt a
- interrupt a paragraph.  (This
- allows hanging indents and the
- indents and the like.)
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n    bar\n\n.\n<p>Foo\nbar</p>"
- "````````````````````````````````"
- "However, any non-blank line with"
- "-blank line with fewer than four"
- fewer than four spaces of
- four spaces of indentation ends
- the code block immediately.
- So a paragraph may occur
- may occur immediately
- "after indented code:"
- "````````````````````````````````"
- "```````````````` example"
- "    foo\nbar\n.\n<pre><code>foo"
- ".\n<pre><code>foo\n</code></pre>"
- "</code></pre>\n<p>bar</p>"
- "````````````````````````````````"
- And indented code can occur
- code can occur immediately
- immediately before and after
- before and after other kinds of
- "blocks:"
- "````````````````````````````````"
- "```````````````` example"
- "# Heading\n    foo\nHeading\n------"
- "Heading\n------\n    foo\n----\n."
- "    foo\n----\n.\n<h1>Heading</h1>"
- "<h1>Heading</h1>\n<pre><code>foo"
- "<pre><code>foo\n</code></pre>"
- "</code></pre>\n<h2>Heading</h2>"
- "<h2>Heading</h2>\n<pre><code>foo"
- "<pre><code>foo\n</code></pre>"
- "</code></pre>\n<hr />"
- "````````````````````````````````"
- The first line can be preceded
- can be preceded by more than
- by more than four spaces of
- "four spaces of indentation:"
- "````````````````````````````````"
- "```````````````` example"
- "        foo\n    bar\n."
- "    bar\n.\n<pre><code>    foo\nbar"
- "bar\n</code></pre>"
- "````````````````````````````````"
- Blank lines preceding or
- preceding or following an
- or following an indented code
- an indented code block
- "are not included in it:"
- "````````````````````````````````"
- "```````````````` example"
- "    \n    foo\n    \n\n."
- "    foo\n    \n\n.\n<pre><code>foo"
- ".\n<pre><code>foo\n</code></pre>"
- "````````````````````````````````"
- Trailing spaces or tabs are
- or tabs are included in the code
- "in the code block's content:"
- "````````````````````````````````"
- "```````````````` example"
- "    foo  \n.\n<pre><code>foo"
- ".\n<pre><code>foo  \n</code></pre>"
- "````````````````````````````````"
- "## Fenced code blocks"
- "A [code fence](@) is a sequence"
- of at least three consecutive
- consecutive backtick characters
- "characters (`` ` ``) or"
- "`` ` ``) or\ntildes (`~`"
- ).
- (Tildes and backticks cannot be
- " cannot be mixed.)\nA"
- "A [fenced code block](@)"
- "begins with a code fence,"
- "a code fence, preceded by up to"
- by up to three spaces of
- three spaces of indentation.
- The line with the opening code
- the opening code fence may
- code fence may optionally
- may optionally contain some text
- following the code fence; this
- code fence; this is trimmed of
- is trimmed of leading and
- of leading and trailing
- spaces or tabs and called the
- "[info string](@). If the ["
- ". If the [info string] comes"
- "after a backtick fence, it may"
- "fence, it may not contain any"
- not contain any backtick
- characters.
- (The reason for this restriction
- this restriction is that
- is that otherwise
- some inline code would be
- code would be incorrectly
- be incorrectly interpreted as
- interpreted as the
- beginning of a fenced code block
- code block.)
- The content of the code block
- the code block consists of all
- consists of all subsequent lines
- "subsequent lines, until"
- "a closing [code fence]"
- of the same type as the code
- type as the code block
- began with (backticks or tildes)
- "or tildes), and with at least as"
- with at least as many backticks
- or tildes as the opening code
- the opening code fence.
- If the leading code fence is
- preceded by N spaces of
- "by N spaces of indentation, then"
- ", then up to N spaces of"
- to N spaces of indentation are
- removed from each line of the
- each line of the content (if
- the content (if present).
- (If a content line is not
- "indented, it is preserved"
- it is preserved unchanged.
- If it is indented N spaces or
- "N spaces or less, all"
- of the indentation is removed.)
- The closing code fence may be
- fence may be preceded by up to
- by up to three spaces of
- "three spaces of indentation, and"
- may be followed only by spaces
- "only by spaces or tabs, which"
- "or tabs, which are ignored."
- If the end of the
- containing block (or document)
- (or document) is reached and no
- reached and no closing code
- no closing code fence
- "has been found, the code block"
- ", the code block contains all of"
- contains all of the lines after
- the lines after the
- opening code fence until the end
- until the end of the containing
- the containing block (or
- document).
- (An alternative spec would
- spec would require backtracking
- backtracking in the
- event that a closing code fence
- code fence is not found.
- But this makes parsing
- "much less efficient, and there"
- ", and there seems to be no real"
- to be no real downside to the
- behavior described here.)
- A fenced code block may
- code block may interrupt a
- "may interrupt a paragraph, and"
- "a paragraph, and does not"
- ", and does not require"
- a blank line either before or
- either before or after.
- The content of a code fence is
- a code fence is treated as
- "is treated as literal text, not"
- "text, not parsed"
- as inlines.
- "The first word of the ["
- "[info string]"
- "] is typically used to"
- specify the language of the code
- "of the code sample, and rendered"
- ", and rendered in the `class`"
- "`class`\nattribute of the `code`"
- tag.
- "However, this spec does not"
- spec does not mandate any
- "particular treatment of the ["
- "[info string]."
- Here is a simple example with
- "example with backticks:"
- "````````````````````````````````"
- "```````````````` example"
- "```\n<\n >\n```\n.\n<pre><code>&lt;"
- "<pre><code>&lt;\n &gt;"
- " &gt;\n</code></pre>"
- "````````````````````````````````"
- "With tildes:"
- "````````````````````````````````"
- "```````````````` example"
- "~~~\n<\n >\n~~~\n.\n<pre><code>&lt;"
- "<pre><code>&lt;\n &gt;"
- " &gt;\n</code></pre>"
- "````````````````````````````````"
- Fewer than three backticks is
- "backticks is not enough:"
- "````````````````````````````````"
- "```````````````` example"
- "``\nfoo\n``\n."
- "foo\n``\n.\n<p><code>foo</code></p>"
- "````````````````````````````````"
- The closing code fence must use
- fence must use the same
- use the same character as the
- " character as the opening\nfence:"
- "````````````````````````````````"
- "```````````````` example"
- "```\naaa\n~~~\n```\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n~~~"
- "~~~\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "~~~\naaa\n```\n~~~\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n```"
- "```\n</code></pre>"
- "````````````````````````````````"
- The closing code fence must be
- fence must be at least as long
- at least as long as the opening
- "as the opening fence:"
- "````````````````````````````````"
- "```````````````` example"
- "````\naaa\n```\n``````\n."
- "aaa\n```\n``````\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n```"
- "```\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "~~~~\naaa\n~~~\n~~~~\n."
- "aaa\n~~~\n~~~~\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n~~~"
- "~~~\n</code></pre>"
- "````````````````````````````````"
- Unclosed code blocks are closed
- are closed by the end of the
- the end of the document
- "(or the enclosing [block quote]["
- "[block quote][block quotes] or ["
- "] or [list item][list items]):"
- "````````````````````````````````"
- "```````````````` example"
- "```\n.\n<pre><code></code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "`````\n\n```\naaa\n.\n<pre><code>\n```"
- "<pre><code>\n```\naaa"
- "```\naaa\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> ```\n> aaa\n\nbbb\n.\n<blockquote>"
- ".\n<blockquote>\n<pre><code>aaa"
- "<pre><code>aaa\n</code></pre>"
- "</code></pre>\n</blockquote>"
- "</blockquote>\n<p>bbb</p>"
- "````````````````````````````````"
- A code block can have all empty
- have all empty lines as its
- "lines as its content:"
- "````````````````````````````````"
- "```````````````` example"
- "```\n\n  \n```\n.\n<pre><code>"
- ".\n<pre><code>\n  \n</code></pre>"
- "````````````````````````````````"
- "A code block can be empty:"
- "````````````````````````````````"
- "```````````````` example"
- "```\n```\n."
- "```\n.\n<pre><code></code></pre>"
- "````````````````````````````````"
- Fences can be indented.
- If the opening fence is indented
- "is indented,"
- content lines will have
- lines will have equivalent
- have equivalent opening
- "opening indentation removed,"
- "if present:"
- "````````````````````````````````"
- "```````````````` example"
- " ```\n aaa\naaa\n```\n."
- " aaa\naaa\n```\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\naaa"
- "aaa\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "  ```\naaa\n  aaa\naaa\n  ```\n."
- "aaa\n  ```\n.\n<pre><code>aaa\naaa"
- "aaa\naaa\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "   ```\n   aaa\n    aaa\n  aaa"
- "    aaa\n  aaa\n   ```\n."
- "  aaa\n   ```\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n aaa\naaa"
- " aaa\naaa\n</code></pre>"
- "````````````````````````````````"
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "    ```\n    aaa\n    ```\n."
- "    ```\n.\n<pre><code>```\naaa\n```"
- "aaa\n```\n</code></pre>"
- "````````````````````````````````"
- Closing fences may be preceded
- may be preceded by up to three
- by up to three spaces of
- "three spaces of indentation, and"
- "indentation, and their"
- indentation need not match that
- not match that of the opening
- "of the opening fence:"
- "````````````````````````````````"
- "```````````````` example"
- "```\naaa\n  ```\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "   ```\naaa\n  ```\n."
- "aaa\n  ```\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n</code></pre>"
- "````````````````````````````````"
- "This is not a closing fence,"
- "a closing fence, because it is"
- ", because it is indented 4"
- "it is indented 4 spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "```\naaa\n    ```\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n    ```"
- "    ```\n</code></pre>"
- "````````````````````````````````"
- Code fences (opening and closing
- and closing) cannot contain
- ) cannot contain internal spaces
- "internal spaces or tabs:"
- "````````````````````````````````"
- "```````````````` example"
- "``` ```\naaa\n.\n<p><code> </code>"
- aaa</p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "~~~~~~\naaa\n~~~ ~~\n."
- "aaa\n~~~ ~~\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n~~~ ~~"
- "~~~ ~~\n</code></pre>"
- "````````````````````````````````"
- Fenced code blocks can interrupt
- "can interrupt paragraphs, and"
- "paragraphs, and can be followed"
- "directly by paragraphs, without"
- ", without a blank line between:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\n```\nbar\n```\nbaz\n.\n<p>foo</p>"
- "baz\n.\n<p>foo</p>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "</code></pre>\n<p>baz</p>"
- "````````````````````````````````"
- Other blocks can also occur
- can also occur before and after
- before and after fenced code
- fenced code blocks
- without an intervening blank
- "blank line:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\n---\n~~~\nbar\n~~~\n# baz\n."
- "bar\n~~~\n# baz\n.\n<h2>foo</h2>"
- ".\n<h2>foo</h2>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "</code></pre>\n<h1>baz</h1>"
- "````````````````````````````````"
- "An [info string]"
- can be provided after the
- after the opening code fence.
- "Although this spec doesn'"
- t mandate any particular
- any particular treatment of
- "the info string, the first word"
- ", the first word is typically"
- is typically used to specify
- the language of the code block.
- "In HTML output, the language is"
- normally indicated by adding a
- "by adding a class to the `code`"
- "`code` element consisting\nof"
- "of `language-`"
- followed by the language name.
- "````````````````````````````````"
- "```````````````` example"
- "```ruby\ndef foo(x)\n  return 3"
- "  return 3\nend\n```\n."
- "<pre><code class=\"language-ruby\""
- "=\"language-ruby\">def foo(x)"
- "  return 3\nend\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "~~~~    ruby startline=3 $%@#$"
- "def foo(x)\n  return 3\nend"
- "  return 3\nend\n~~~~~~~\n."
- "<pre><code class=\"language-ruby\""
- "=\"language-ruby\">def foo(x)"
- "  return 3\nend\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "````;\n````\n."
- "<pre><code class=\"language-;\"></"
- "=\"language-;\"></code></pre>"
- "````````````````````````````````"
- "[Info strings]"
- for backtick code blocks cannot
- "blocks cannot contain backticks:"
- "````````````````````````````````"
- "```````````````` example"
- "``` aa ```\nfoo\n."
- "foo\n.\n<p><code>aa</code>\nfoo</p>"
- "````````````````````````````````"
- "[Info strings]"
- for tilde code blocks can
- code blocks can contain
- can contain backticks and tildes
- "and tildes:"
- "````````````````````````````````"
- "```````````````` example"
- "~~~ aa ``` ~~~\nfoo\n~~~\n."
- "<pre><code class=\"language-aa\">"
- "=\"language-aa\">foo\n</code></pre>"
- "````````````````````````````````"
- Closing code fences cannot have
- "[info strings]:"
- "````````````````````````````````"
- "```````````````` example"
- "```\n``` aaa\n```\n."
- "``` aaa\n```\n.\n<pre><code>``` aaa"
- "</code></pre>"
- "````````````````````````````````"
- "## HTML blocks"
- "An [HTML block](@)"
- is a group of lines that is
- of lines that is treated
- as raw HTML (and will not be
- (and will not be escaped in HTML
- escaped in HTML output).
- "There are seven kinds of ["
- "[HTML block]"
- "], which can be defined by their"
- start and end conditions.
- The block begins with a line
- with a line that meets a
- "[start condition](@)"
- (after up to three optional
- three optional spaces of
- spaces of indentation).
- It ends with the first
- with the first subsequent line
- subsequent line that meets a
- that meets a matching
- "[end condition](@)"
- ", or the last line of the"
- "last line of the document, or"
- "the document, or the last line"
- " or the last line of\nthe"
- "[container block](#container-"
- "](#container-blocks)"
- containing the current HTML
- "block, if no line is encountered"
- "is encountered that meets the ["
- "[end condition].  If"
- "the first line meets both the ["
- "[start condition] and the [end"
- "] and the [end\ncondition]"
- ", the block will contain just"
- contain just that line.
- "1.  **Start condition:**"
- line begins with the string
- "`<pre`,\n`<script`, `<style`, or"
- ", `<style`, or `<textarea`"
- "(case-insensitive), followed by"
- "), followed by a space,"
- "a tab, the string `>`"
- "`>`, or the end of the line.\\"
- "\\\n**End condition:**"
- line contains an end tag
- "`</pre>`, `</script>`,"
- ", `</script>`, `</style>`, or"
- ", `</style>`, or `</textarea>`"
- (case-insensitive; it
- need not match the start tag).
- "2.  **Start condition:**"
- line begins with the string
- "`<!--`.\\\n**End condition:**"
- "line contains the string `-->`."
- "3.  **Start condition:**"
- "line begins with the string `<?`"
- "`<?`.\\\n**End condition:**"
- "line contains the string `?>`."
- "4.  **Start condition:**"
- "line begins with the string `<!`"
- "followed by an ASCII letter.\\"
- "\\\n**End condition:**"
- "line contains the character `>`."
- "5.  **Start condition:**"
- line begins with the string
- "`<![CDATA[`.\\\n**End condition:**"
- "line contains the string `]]>`."
- "6.  **Start condition:**"
- "line begins with the string `<`"
- "`<` or `</`"
- followed by one of the strings (
- of the strings (case-insensitive
- "case-insensitive) `address`,"
- "`address`,\n`article`, `aside`,"
- ", `aside`, `base`, `basefont`,"
- ", `basefont`, `blockquote`,"
- ", `blockquote`, `body`,"
- ", `body`,\n`caption`, `center`,"
- ", `center`, `col`, `colgroup`,"
- ", `colgroup`, `dd`, `details`,"
- "`dd`, `details`, `dialog`,\n`dir`"
- "`dialog`,\n`dir`, `div`, `dl`,"
- ", `div`, `dl`, `dt`, `fieldset`,"
- ", `fieldset`, `figcaption`,"
- ", `figcaption`, `figure`,"
- ", `figure`,\n`footer`, `form`,"
- ", `form`, `frame`, `frameset`,"
- ", `frameset`,\n`h1`, `h2`, `h3`,"
- ", `h2`, `h3`, `h4`, `h5`, `h6`,"
- ", `h5`, `h6`, `head`, `header`,"
- ", `header`, `hr`,\n`html`,"
- ", `hr`,\n`html`, `iframe`,"
- ", `iframe`, `legend`, `li`,"
- "`legend`, `li`, `link`, `main`,"
- "`link`, `main`, `menu`,"
- "`main`, `menu`, `menuitem`,"
- ", `menuitem`,\n`nav`, `noframes`,"
- ", `noframes`, `ol`, `optgroup`,"
- ", `optgroup`, `option`, `p`,"
- ", `option`, `p`, `param`,"
- ", `p`, `param`,\n`search`,"
- ",\n`search`, `section`, `summary`"
- ", `summary`, `table`, `tbody`,"
- ", `tbody`, `td`,\n`tfoot`, `th`,"
- ",\n`tfoot`, `th`, `thead`,"
- ", `th`, `thead`, `title`, `tr`,"
- ", `title`, `tr`, `track`, `ul`"
- ", `track`, `ul`, followed"
- "by a space, a tab, the end of"
- "tab, the end of the line, the"
- "of the line, the string `>`, or"
- "`>`, or\nthe string `/>`.\\"
- "`/>`.\\\n**End condition:**"
- "line is followed by a ["
- "[blank line]."
- "7.  **Start condition:**"
- "line begins with a complete ["
- "[open tag]\n(with any [tag name]"
- "[tag name] other than `pre`,"
- "`pre`, `script`,\n`style`, or"
- ",\n`style`, or `textarea`"
- ", or `textarea`) or a complete ["
- "[closing tag],"
- followed by zero or more spaces
- "or more spaces and tabs,"
- "spaces and tabs, followed by the"
- followed by the end of the line.
- "\\\n**End condition:**"
- "line is followed by a ["
- "[blank line]."
- HTML blocks continue until they
- until they are closed by their
- " closed by their appropriate\n["
- "[end condition]"
- ", or the last line of the"
- last line of the document or
- the document or other
- "[container\nblock"
- "block](#container-blocks)"
- ".  This means any HTML"
- "**within an HTML\nblock**"
- that might otherwise be
- otherwise be recognised as a
- recognised as a start condition
- start condition will
- be ignored by the parser and
- the parser and passed through as
- "through as-is, without changing"
- "the parser's state."
- "For instance, `<pre>`"
- within an HTML block started by
- "`<table>` will not affect"
- the parser state; as the HTML
- ; as the HTML block was started
- was started in by start
- "in by start condition 6, it"
- will end at any blank line.
- "This can be surprising:"
- "````````````````````````````````"
- "```````````````` example"
- "<table><tr><td>\n<pre>\n**Hello**,"
- "<pre>\n**Hello**,\n\n_world_."
- "_world_.\n</pre>"
- "</pre>\n</td></tr></table>\n."
- ".\n<table><tr><td>\n<pre>"
- "<pre>\n**Hello**,"
- "**Hello**,\n<p><em>world</em>."
- "</pre></p>\n</td></tr></table>"
- "````````````````````````````````"
- "In this case, the HTML block is"
- HTML block is terminated by the
- by the blank line — the
- "`**Hello**`"
- text remains verbatim — and
- verbatim — and regular parsing
- "regular parsing resumes, with a"
- "resumes, with a paragraph,"
- "emphasised `world`"
- and inline and block HTML
- and block HTML following.
- "All types of [HTML blocks]"
- "] except type 7 may interrupt"
- a paragraph.
- Blocks of type 7 may not
- type 7 may not interrupt a
- not interrupt a paragraph.
- (This restriction is intended to
- is intended to prevent unwanted
- prevent unwanted interpretation
- of long tags inside a wrapped
- inside a wrapped paragraph as
- paragraph as starting HTML
- as starting HTML blocks.)
- Some simple examples follow.
- Here are some basic HTML blocks
- "of type 6:"
- "````````````````````````````````"
- "```````````````` example"
- "<table>\n  <tr>\n    <td>"
- "  <tr>\n    <td>\n           hi"
- "           hi\n    </td>\n  </tr>"
- "  </tr>\n</table>\n\nokay.\n."
- "okay.\n.\n<table>\n  <tr>\n    <td>"
- "  <tr>\n    <td>\n           hi"
- "           hi\n    </td>\n  </tr>"
- "  </tr>\n</table>\n<p>okay.</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- " <div>\n  *hello*"
- "  *hello*\n         <foo><a>\n."
- ".\n <div>\n  *hello*"
- "  *hello*\n         <foo><a>"
- "````````````````````````````````"
- A block can also start with a
- "start with a closing tag:"
- "````````````````````````````````"
- "```````````````` example"
- "</div>\n*foo*\n.\n</div>\n*foo*"
- "````````````````````````````````"
- Here we have two HTML blocks
- two HTML blocks with a Markdown
- with a Markdown paragraph
- "paragraph between them:"
- "````````````````````````````````"
- "```````````````` example"
- "<DIV CLASS=\"foo\">\n\n*Markdown*"
- "*Markdown*\n\n</DIV>\n."
- "</DIV>\n.\n<DIV CLASS=\"foo\">"
- "<p><em>Markdown</em></p>\n</DIV>"
- "````````````````````````````````"
- The tag on the first line can be
- "line can be partial, as long"
- as it is split where there would
- "there would be whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "<div id=\"foo\"\n  class=\"bar\">"
- "  class=\"bar\">\n</div>\n."
- "</div>\n.\n<div id=\"foo\""
- ".\n<div id=\"foo\"\n  class=\"bar\">"
- "  class=\"bar\">\n</div>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<div id=\"foo\" class=\"bar\n  baz\">"
- "  baz\">\n</div>\n."
- ".\n<div id=\"foo\" class=\"bar"
- "  baz\">\n</div>"
- "````````````````````````````````"
- "An open tag need not be closed:"
- "````````````````````````````````"
- "```````````````` example"
- "<div>\n*foo*\n\n*bar*\n.\n<div>\n*foo*"
- "<div>\n*foo*\n<p><em>bar</em></p>"
- "````````````````````````````````"
- A partial tag need not even be
- need not even be completed (
- be completed (garbage
- "in, garbage out):"
- "````````````````````````````````"
- "```````````````` example"
- "<div id=\"foo\"\n*hi*\n."
- "*hi*\n.\n<div id=\"foo\"\n*hi*"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<div class\nfoo\n.\n<div class\nfoo"
- "````````````````````````````````"
- "The initial tag doesn'"
- "'t even need to be a valid"
- "tag, as long as it starts like"
- "it starts like one:"
- "````````````````````````````````"
- "```````````````` example"
- "<div *???-&&&-<---\n*foo*\n."
- "*foo*\n.\n<div *???-&&&-<---\n*foo*"
- "````````````````````````````````"
- "In type 6 blocks, the initial"
- ", the initial tag need not be on"
- need not be on a line by
- "itself:"
- "````````````````````````````````"
- "```````````````` example"
- "<div><a href=\"bar\">*foo*</a></"
- "bar\">*foo*</a></div>\n."
- "<div><a href=\"bar\">*foo*</a></"
- "bar\">*foo*</a></div>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<table><tr><td>\nfoo"
- "foo\n</td></tr></table>\n."
- ".\n<table><tr><td>\nfoo"
- "foo\n</td></tr></table>"
- "````````````````````````````````"
- Everything until the next blank
- the next blank line or end of
- line or end of document
- gets included in the HTML block.
- "So, in the following"
- "example, what looks like a"
- looks like a Markdown code block
- is actually part of the HTML
- "part of the HTML block, which"
- "block, which continues until a"
- until a blank
- line or the end of the document
- "of the document is reached:"
- "````````````````````````````````"
- "```````````````` example"
- "<div></div>\n``` c\nint x = 33;"
- "int x = 33;\n```\n.\n<div></div>"
- ".\n<div></div>\n``` c\nint x = 33;"
- "int x = 33;\n```"
- "````````````````````````````````"
- "To start an [HTML block]"
- "[HTML block] with a tag that is"
- "*not* in the"
- "list of block-level tags in (6),"
- "tags in (6), you must put the"
- you must put the tag by
- itself on the first line (and it
- "line (and it must be complete):"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"foo\">\n*bar*\n</a>\n."
- "*bar*\n</a>\n.\n<a href=\"foo\">"
- ".\n<a href=\"foo\">\n*bar*\n</a>"
- "````````````````````````````````"
- "In type 7 blocks, the [tag name]"
- "[tag name] can be anything:"
- "````````````````````````````````"
- "```````````````` example"
- "<Warning>\n*bar*\n</Warning>\n."
- "</Warning>\n.\n<Warning>\n*bar*"
- "<Warning>\n*bar*\n</Warning>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<i class=\"foo\">\n*bar*\n</i>\n."
- "*bar*\n</i>\n.\n<i class=\"foo\">"
- "<i class=\"foo\">\n*bar*\n</i>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "</ins>\n*bar*\n.\n</ins>\n*bar*"
- "````````````````````````````````"
- These rules are designed to
- are designed to allow us to work
- allow us to work with tags that
- can function as either block-
- as either block-level or inline-
- "level or inline-level tags.\nThe"
- "The `<del>`"
- tag is a nice example.
- We can surround content with
- "`<del>`"
- tags in three different ways.
- "In this case, we get a raw"
- "HTML block, because the `<del>`"
- "tag is on a line by itself:"
- "````````````````````````````````"
- "```````````````` example"
- "<del>\n*foo*\n</del>\n.\n<del>\n*foo*"
- ".\n<del>\n*foo*\n</del>"
- "````````````````````````````````"
- "In this case, we get a raw HTML"
- get a raw HTML block that just
- " block that just includes\nthe"
- "the `<del>`"
- tag (because it ends with the
- it ends with the following blank
- line).
- So the contents get interpreted
- "get interpreted as CommonMark:"
- "````````````````````````````````"
- "```````````````` example"
- "<del>\n\n*foo*\n\n</del>\n.\n<del>"
- ".\n<del>\n<p><em>foo</em></p>"
- "</del>"
- "````````````````````````````````"
- "Finally, in this case, the"
- "`<del>` tags are interpreted\nas"
- "as [raw HTML] *inside*"
- the CommonMark paragraph.
- (Because
- the tag is not on a line by
- "not on a line by itself, we get"
- "itself, we get inline HTML"
- "rather than an [HTML block].)"
- "````````````````````````````````"
- "```````````````` example"
- "<del>*foo*</del>\n."
- ".\n<p><del><em>foo</em></del></p>"
- "````````````````````````````````"
- HTML tags designed to contain
- " to contain literal content\n("
- "(`pre`, `script`, `style`,"
- ", `style`, `textarea`"
- "), comments, processing"
- ", processing instructions,"
- and declarations are treated
- are treated somewhat differently
- differently.
- Instead of ending at the first
- "at the first blank line, these"
- "line, these blocks"
- end at the first line containing
- line containing a corresponding
- a corresponding end tag.
- "As a result, these blocks can"
- these blocks can contain blank
- "contain blank lines:"
- "A pre tag (type 1):"
- "````````````````````````````````"
- "```````````````` example"
- "<pre language=\"haskell\"><code>"
- import Text.HTML.TagSoup
- "main :: IO ()"
- main = print $ parseTags tags
- "</code></pre>\nokay\n."
- ".\n<pre language=\"haskell\"><code>"
- import Text.HTML.TagSoup
- "main :: IO ()"
- main = print $ parseTags tags
- "</code></pre>\n<p>okay</p>"
- "````````````````````````````````"
- "A script tag (type 1):"
- "````````````````````````````````"
- "```````````````` example"
- "<script type=\"text/javascript\">"
- // JavaScript example
- "document.getElementById(\"demo\")."
- "(\"demo\").innerHTML = \"Hello"
- "= \"Hello JavaScript!\";"
- "</script>\nokay\n."
- "<script type=\"text/javascript\">"
- // JavaScript example
- "document.getElementById(\"demo\")."
- "(\"demo\").innerHTML = \"Hello"
- "= \"Hello JavaScript!\";"
- "</script>\n<p>okay</p>"
- "````````````````````````````````"
- "A textarea tag (type 1):"
- "````````````````````````````````"
- "```````````````` example"
- "<textarea>\n\n*foo*\n\n_bar_"
- "*foo*\n\n_bar_\n\n</textarea>\n."
- "</textarea>\n.\n<textarea>\n\n*foo*"
- "*foo*\n\n_bar_\n\n</textarea>"
- "````````````````````````````````"
- "A style tag (type 1):"
- "````````````````````````````````"
- "```````````````` example"
- "<style\n  type=\"text/css\">"
- "h1 {color:red;}\n\np {color:blue;}"
- "p {color:blue;}\n</style>\nokay\n."
- "</style>\nokay\n.\n<style"
- "okay\n.\n<style\n  type=\"text/css\">"
- "h1 {color:red;}\n\np {color:blue;}"
- "p {color:blue;}\n</style>"
- "</style>\n<p>okay</p>"
- "````````````````````````````````"
- "If there is no matching end tag,"
- "end tag, the block will end at"
- will end at the
- end of the document (or the
- "document (or the enclosing ["
- "[block quote][block quotes]\nor ["
- "]\nor [list item][list items]):"
- "````````````````````````````````"
- "```````````````` example"
- "<style\n  type=\"text/css\">\n\nfoo\n."
- "foo\n.\n<style\n  type=\"text/css\">"
- "  type=\"text/css\">\n\nfoo"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> <div>\n> foo\n\nbar\n."
- "> foo\n\nbar\n.\n<blockquote>\n<div>"
- "<div>\nfoo\n</blockquote>"
- "</blockquote>\n<p>bar</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- <div>\n- foo\n.\n<ul>\n<li>\n<div>"
- "<ul>\n<li>\n<div>\n</li>"
- "<li>\n<div>\n</li>\n<li>foo</li>"
- "<li>foo</li>\n</ul>"
- "````````````````````````````````"
- The end tag can occur on the
- can occur on the same line as
- "the same line as the start tag:"
- "````````````````````````````````"
- "```````````````` example"
- "<style>p{color:red;}</style>"
- "*foo*\n."
- ".\n<style>p{color:red;}</style>"
- "<p><em>foo</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<!-- foo -->*bar*\n*baz*\n."
- "*baz*\n.\n<!-- foo -->*bar*"
- "<p><em>baz</em></p>"
- "````````````````````````````````"
- Note that anything on the last
- on the last line after the
- end tag will be included in the
- "[HTML block]:"
- "````````````````````````````````"
- "```````````````` example"
- "<script>\nfoo\n</script>1. *bar*\n."
- ".\n<script>\nfoo\n</script>1. *bar*"
- "````````````````````````````````"
- "A comment (type 2):"
- "````````````````````````````````"
- "```````````````` example"
- "<!-- Foo\n\nbar\n   baz -->\nokay\n."
- "okay\n.\n<!-- Foo\n\nbar\n   baz -->"
- "bar\n   baz -->\n<p>okay</p>"
- "````````````````````````````````"
- A processing instruction (type 3
- "(type 3):"
- "````````````````````````````````"
- "```````````````` example"
- "<?php\n\n  echo '>';\n\n?>\nokay\n.\n<?"
- "?>\nokay\n.\n<?php\n\n  echo '>';\n\n?>"
- "  echo '>';\n\n?>\n<p>okay</p>"
- "````````````````````````````````"
- "A declaration (type 4):"
- "````````````````````````````````"
- "```````````````` example"
- "<!DOCTYPE html>\n.\n<!"
- ".\n<!DOCTYPE html>"
- "````````````````````````````````"
- "CDATA (type 5):"
- "````````````````````````````````"
- "```````````````` example"
- "<![CDATA[\nfunction matchwo(a,b)"
- "{\n  if (a < b && a < 0) then {"
- "    return 1;\n\n  } else {"
- "  } else {\n\n    return 0;\n  }\n}"
- "  }\n}\n]]>\nokay\n.\n<![CDATA["
- "<![CDATA[\nfunction matchwo(a,b)"
- "{\n  if (a < b && a < 0) then {"
- "    return 1;\n\n  } else {"
- "  } else {\n\n    return 0;\n  }\n}"
- "  }\n}\n]]>\n<p>okay</p>"
- "````````````````````````````````"
- The opening tag can be preceded
- can be preceded by up to three
- by up to three spaces of
- "three spaces of indentation, but"
- " indentation, but not\nfour:"
- "````````````````````````````````"
- "```````````````` example"
- "  <!-- foo -->\n\n    <!-- foo -->"
- "    <!-- foo -->\n."
- ".\n  <!-- foo -->"
- "<pre><code>&lt;!-- foo --&gt;"
- "</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "  <div>\n\n    <div>\n.\n  <div>"
- ".\n  <div>\n<pre><code>&lt;div&gt;"
- "</code></pre>"
- "````````````````````````````````"
- An HTML block of types 1--
- "6 can interrupt a paragraph, and"
- "a paragraph, and need not be"
- preceded by a blank line.
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n<div>\nbar\n</div>\n."
- "bar\n</div>\n.\n<p>Foo</p>\n<div>"
- "<p>Foo</p>\n<div>\nbar\n</div>"
- "````````````````````````````````"
- "However, a following blank line"
- "blank line is needed, except at"
- ", except at the end of"
- "a document, and except for"
- ", and except for blocks of types"
- "blocks of types 1--5, [above]["
- "--5, [above][HTML\nblock]:"
- "````````````````````````````````"
- "```````````````` example"
- "<div>\nbar\n</div>\n*foo*\n.\n<div>"
- "*foo*\n.\n<div>\nbar\n</div>\n*foo*"
- "````````````````````````````````"
- HTML blocks of type 7 cannot
- of type 7 cannot interrupt a
- "interrupt a paragraph:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n<a href=\"bar\">\nbaz\n.\n<p>Foo"
- "baz\n.\n<p>Foo\n<a href=\"bar\">"
- "<a href=\"bar\">\nbaz</p>"
- "````````````````````````````````"
- This rule differs from John
- "from John Gruber'"
- "'s original Markdown syntax"
- "specification, which says:"
- ">"
- The only restrictions are that
- are that block-level HTML
- "block-level HTML elements —\n>"
- "e.g. `<div>`, `<table>`, `<pre>`"
- ", `<pre>`, `<p>`"
- ", etc. — must be separated from"
- ">"
- surrounding content by blank
- "content by blank lines, and the"
- "lines, and the start and end"
- " start and end tags of the\n>"
- block should not be indented
- not be indented with spaces or
- with spaces or tabs.
- "In some ways Gruber'"
- s rule is more restrictive than
- restrictive than the one given
- "here:"
- "-"
- It requires that an HTML block
- an HTML block be preceded by a
- be preceded by a blank line.
- "-"
- It does not allow the start tag
- the start tag to be indented.
- "-"
- "It requires a matching end tag,"
- "end tag, which it also does not"
- it also does not allow to
- be indented.
- Most Markdown implementations (
- "(including some of Gruber'"
- "'s own) do not"
- respect all of these
- all of these restrictions.
- "There is one respect, however,"
- ", however, in which Gruber'"
- "'s rule is more liberal"
- "than the one given here, since"
- "here, since it allows blank"
- it allows blank lines to occur
- lines to occur inside
- an HTML block.
- There are two reasons for
- two reasons for disallowing them
- disallowing them here.
- "First, it removes the need to"
- "the need to parse balanced tags,"
- "balanced tags, which is"
- expensive and can require
- and can require backtracking
- backtracking from the end of the
- the end of the document
- if no matching end tag is found.
- "Second, it provides a very"
- provides a very simple
- and flexible way of including
- way of including Markdown
- Markdown content inside HTML
- "inside HTML tags:"
- simply separate the Markdown
- the Markdown from the HTML using
- "the HTML using blank lines:"
- "Compare:"
- "````````````````````````````````"
- "```````````````` example"
- "<div>\n\n*Emphasized* text."
- "</div>\n.\n<div>"
- "<p><em>Emphasized</em> text.</p>"
- "</div>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<div>\n*Emphasized* text.\n</div>"
- "</div>\n.\n<div>"
- ".\n<div>\n*Emphasized* text."
- "</div>"
- "````````````````````````````````"
- Some Markdown implementations
- implementations have adopted a
- have adopted a convention of
- interpreting content inside tags
- inside tags as text if the open
- text if the open tag has
- "the attribute `markdown=1`"
- "."
- The rule given above seems a
- above seems a simpler and
- more elegant way of achieving
- way of achieving the same
- "the same expressive power, which"
- "power, which is also"
- much simpler to parse.
- The main potential drawback is
- drawback is that one can no
- that one can no longer paste
- no longer paste HTML
- blocks into Markdown documents
- documents with 100% reliability.
- "However,\n*in most cases*"
- "this will work fine, because the"
- ", because the blank lines in"
- HTML are usually followed by
- followed by HTML block tags.
- "For example:"
- "````````````````````````````````"
- "```````````````` example"
- "<table>\n\n<tr>\n\n<td>\nHi\n</td>"
- "<td>\nHi\n</td>\n\n</tr>\n\n</table>\n."
- "</table>\n.\n<table>\n<tr>\n<td>\nHi"
- "<tr>\n<td>\nHi\n</td>\n</tr>"
- "Hi\n</td>\n</tr>\n</table>"
- "````````````````````````````````"
- "There are problems, however, if"
- ", however, if the inner tags are"
- " inner tags are indented\n*and*"
- "separated by spaces, as then"
- "spaces, as then they will be"
- they will be interpreted as
- "an indented code block:"
- "````````````````````````````````"
- "```````````````` example"
- "<table>\n\n  <tr>\n\n    <td>"
- "  <tr>\n\n    <td>\n      Hi"
- "      Hi\n    </td>\n\n  </tr>"
- "  </tr>\n\n</table>\n.\n<table>"
- ".\n<table>\n  <tr>"
- "  <tr>\n<pre><code>&lt;td&gt;"
- "  Hi\n&lt;/td&gt;\n</code></pre>"
- "</code></pre>\n  </tr>\n</table>"
- "````````````````````````````````"
- "Fortunately, blank lines are"
- blank lines are usually not
- are usually not necessary and
- necessary and can be
- deleted.
- "The exception is inside `<pre>`"
- "`<pre>` tags, but as described\n["
- "[above][HTML blocks]"
- "], raw HTML blocks starting with"
- "`<pre>`\n*can*"
- "*can* contain blank lines."
- "## Link reference definitions"
- "A [link reference definition](@)"
- "consists of a [link label]"
- ", optionally preceded by up to"
- by up to three spaces of
- "indentation, followed"
- "by a colon (`:`"
- "), optional spaces or tabs ("
- spaces or tabs (including up to
- "(including up to one\n["
- "[line ending]), a ["
- "]), a [link destination],"
- optional spaces or tabs (
- spaces or tabs (including up to
- " (including up to one\n["
- "[line ending]), and an optional"
- "[link\ntitle]"
- ", which if it is present must be"
- present must be separated
- "from the [link destination]"
- "] by spaces or tabs."
- No further character may occur.
- "A [link reference definition]"
- does not correspond to a
- correspond to a structural
- to a structural element of a
- element of a document.
- "Instead, it"
- defines a label which can be
- "which can be used in ["
- "[reference links]"
- "]\nand reference-style [images]"
- "] elsewhere in the document.  ["
- "[Link\nreference definitions]"
- can come either before or after
- before or after the links that
- " the links that use\nthem."
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url \"title\"\n\n[foo]\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "   [foo]: \n      /url"
- "           'the title'  \n\n[foo]"
- "[foo]\n."
- "<p><a href=\"/url\" title=\"the"
- "/url\" title=\"the title\">foo</a><"
- "title\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[Foo*bar\\]]:my_(url) 'title ("
- "(url) 'title (with parens)'"
- "[Foo*bar\\]]\n."
- "<p><a href=\"my_(url)\" title=\""
- "(url)\" title=\"title (with parens"
- "(with parens)\">Foo*bar]</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[Foo bar]:\n<my url>\n'title'"
- "<my url>\n'title'\n\n[Foo bar]\n."
- "<p><a href=\"my%20url\" title=\""
- "%20url\" title=\"title\">Foo bar</a"
- "\">Foo bar</a></p>"
- "````````````````````````````````"
- The title may extend over
- "may extend over multiple lines:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url '\ntitle\nline1\nline2"
- "line1\nline2\n'\n\n[foo]\n."
- ".\n<p><a href=\"/url\" title=\""
- "title\nline1\nline2\n\">foo</a></p>"
- "````````````````````````````````"
- "However, it may not contain a ["
- "[blank line]:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url 'title"
- "with blank line'\n\n[foo]\n."
- ".\n<p>[foo]: /url 'title</p>"
- "<p>with blank line'</p>"
- "<p>[foo]</p>"
- "````````````````````````````````"
- "The title may be omitted:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]:\n/url\n\n[foo]\n."
- ".\n<p><a href=\"/url\">foo</a></p>"
- "````````````````````````````````"
- The link destination may not be
- "may not be omitted:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]:\n\n[foo]\n.\n<p>[foo]:</p>"
- ".\n<p>[foo]:</p>\n<p>[foo]</p>"
- "````````````````````````````````"
- "However, an empty link"
- ", an empty link destination may"
- destination may be specified
- may be specified using
- "angle brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: <>\n\n[foo]\n."
- ".\n<p><a href=\"\">foo</a></p>"
- "````````````````````````````````"
- The title must be separated from
- separated from the link
- from the link destination by
- "spaces or tabs:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: <bar>(baz)\n\n[foo]\n."
- "[foo]\n.\n<p>[foo]: <bar>(baz)</p>"
- "<p>[foo]</p>"
- "````````````````````````````````"
- Both title and destination can
- destination can contain
- can contain backslash escapes
- "and literal backslashes:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url\\bar\\*baz \"foo\\\"bar\\"
- "\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n."
- "<p><a href=\"/url%5Cbar*baz\""
- "\"/url%5Cbar*baz\" title=\"foo&quot"
- "title=\"foo&quot;bar\\baz\">foo</a>"
- "bar\\baz\">foo</a></p>"
- "````````````````````````````````"
- A link can come before its
- come before its corresponding
- "corresponding definition:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]\n\n[foo]: url\n."
- ".\n<p><a href=\"url\">foo</a></p>"
- "````````````````````````````````"
- If there are several matching
- "several matching definitions,"
- "definitions, the first one takes"
- "precedence:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]\n\n[foo]: first"
- "[foo]: first\n[foo]: second\n."
- ".\n<p><a href=\"first\">foo</a></p>"
- "````````````````````````````````"
- "As noted in the section on ["
- "[Links], matching of labels is"
- "case-insensitive (see [matches]"
- "[matches])."
- "````````````````````````````````"
- "```````````````` example"
- "[FOO]: /url\n\n[Foo]\n."
- ".\n<p><a href=\"/url\">Foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[ΑΓΩ]: /φου\n\n[αγω]\n."
- "<p><a href=\"/%CF%86%CE%BF%CF%85\""
- "%86%CE%BF%CF%85\">αγω</a></p>"
- "````````````````````````````````"
- "Whether something is a ["
- "[link reference definition] is"
- independent of whether the link
- whether the link reference it
- reference it defines is
- used in the document.
- "Thus, for example, the following"
- document contains just a link
- just a link reference definition
- "definition, and"
- "no visible content:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url\n."
- "````````````````````````````````"
- "Here is another one:"
- "````````````````````````````````"
- "```````````````` example"
- "[\nfoo\n]: /url\nbar\n.\n<p>bar</p>"
- "````````````````````````````````"
- This is not a link reference
- "a link reference definition,"
- "definition, because there are"
- characters other than spaces or
- than spaces or tabs after the
- "tabs after the title:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url \"title\" ok\n."
- "<p>[foo]: /url &quot;title&quot;"
- quot;title&quot; ok</p>
- "````````````````````````````````"
- This is a link reference
- "a link reference definition, but"
- "definition, but it has no title:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url\n\"title\" ok\n."
- ".\n<p>&quot;title&quot; ok</p>"
- "````````````````````````````````"
- This is not a link reference
- "a link reference definition,"
- "definition, because it is"
- ", because it is indented"
- "four spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "    [foo]: /url \"title\"\n\n[foo]\n."
- "<pre><code>[foo]: /url &quot;"
- "]: /url &quot;title&quot;"
- "</code></pre>\n<p>[foo]</p>"
- "````````````````````````````````"
- This is not a link reference
- "a link reference definition,"
- "definition, because it occurs"
- " it occurs inside\na code block:"
- "````````````````````````````````"
- "```````````````` example"
- "```\n[foo]: /url\n```\n\n[foo]\n."
- "[foo]\n.\n<pre><code>[foo]: /url"
- "</code></pre>\n<p>[foo]</p>"
- "````````````````````````````````"
- "A [link reference definition]"
- "] cannot interrupt a paragraph."
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n[bar]: /baz\n\n[bar]\n.\n<p>Foo"
- "[bar]\n.\n<p>Foo\n[bar]: /baz</p>"
- "[bar]: /baz</p>\n<p>[bar]</p>"
- "````````````````````````````````"
- "However, it can directly follow"
- directly follow other block
- "other block elements, such as"
- ", such as headings"
- "and thematic breaks, and it need"
- ", and it need not be followed by"
- be followed by a blank line.
- "````````````````````````````````"
- "```````````````` example"
- "# [Foo]\n[foo]: /url\n> bar\n."
- "<h1><a href=\"/url\">Foo</a></h1>"
- "<blockquote>\n<p>bar</p>"
- "<p>bar</p>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url\nbar\n===\n[foo]\n."
- "bar\n===\n[foo]\n.\n<h1>bar</h1>"
- "<p><a href=\"/url\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url\n===\n[foo]\n.\n<p>==="
- "<a href=\"/url\">foo</a></p>"
- "````````````````````````````````"
- "Several ["
- "[link reference definitions]"
- "can occur one after another,"
- "after another, without"
- "another, without intervening"
- intervening blank lines.
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /foo-url \"foo\""
- "[bar]: /bar-url\n  \"bar\""
- "  \"bar\"\n[baz]: /baz-url\n\n[foo],"
- "[foo],\n[bar],\n[baz]\n."
- "<p><a href=\"/foo-url\" title=\"foo"
- "-url\" title=\"foo\">foo</a>,"
- "<a href=\"/bar-url\" title=\"bar\">"
- "\" title=\"bar\">bar</a>,"
- "<a href=\"/baz-url\">baz</a></p>"
- "````````````````````````````````"
- "[Link reference definitions]"
- "] can occur"
- "inside block containers, like"
- "containers, like lists and block"
- lists and block quotations.
- They
- "affect the entire document, not"
- "document, not just the container"
- the container in which they
- "are defined:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]\n\n> [foo]: /url\n."
- ".\n<p><a href=\"/url\">foo</a></p>"
- "<blockquote>\n</blockquote>"
- "````````````````````````````````"
- "## Paragraphs"
- A sequence of non-blank lines
- non-blank lines that cannot be
- that cannot be interpreted as
- interpreted as other
- kinds of blocks forms a
- "[paragraph](@)."
- The contents of the paragraph
- of the paragraph are the result
- are the result of parsing the
- "paragraph'"
- s raw content as inlines.
- "The paragraph's raw content"
- is formed by concatenating the
- the lines and removing initial
- removing initial and final
- spaces or tabs.
- A simple example with two
- "example with two paragraphs:"
- "````````````````````````````````"
- "```````````````` example"
- "aaa\n\nbbb\n.\n<p>aaa</p>\n<p>bbb</p>"
- "````````````````````````````````"
- Paragraphs can contain multiple
- "contain multiple lines, but no"
- "lines, but no blank lines:"
- "````````````````````````````````"
- "```````````````` example"
- "aaa\nbbb\n\nccc\nddd\n.\n<p>aaa"
- "ccc\nddd\n.\n<p>aaa\nbbb</p>\n<p>ccc"
- "bbb</p>\n<p>ccc\nddd</p>"
- "````````````````````````````````"
- Multiple blank lines between
- lines between paragraphs have no
- "have no effect:"
- "````````````````````````````````"
- "```````````````` example"
- "aaa\n\n\nbbb\n.\n<p>aaa</p>"
- "bbb\n.\n<p>aaa</p>\n<p>bbb</p>"
- "````````````````````````````````"
- Leading spaces or tabs are
- "or tabs are skipped:"
- "````````````````````````````````"
- "```````````````` example"
- "  aaa\n bbb\n.\n<p>aaa\nbbb</p>"
- "````````````````````````````````"
- Lines after the first may be
- the first may be indented any
- "be indented any amount, since"
- "amount, since indented"
- code blocks cannot interrupt
- cannot interrupt paragraphs.
- "````````````````````````````````"
- "```````````````` example"
- "aaa\n             bbb"
- ccc
- ".\n<p>aaa\nbbb\nccc</p>"
- "````````````````````````````````"
- "However, the first line may be"
- line may be preceded by up to
- by up to three spaces of
- three spaces of indentation.
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "   aaa\nbbb\n.\n<p>aaa\nbbb</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "    aaa\nbbb\n.\n<pre><code>aaa"
- ".\n<pre><code>aaa\n</code></pre>"
- "</code></pre>\n<p>bbb</p>"
- "````````````````````````````````"
- Final spaces or tabs are
- or tabs are stripped before
- "stripped before inline parsing,"
- "inline parsing, so a paragraph"
- that ends with two or more
- with two or more spaces will not
- "spaces will not end with a ["
- "[hard line\nbreak]:"
- "````````````````````````````````"
- "```````````````` example"
- "aaa     \nbbb     \n.\n<p>aaa<br />"
- ".\n<p>aaa<br />\nbbb</p>"
- "````````````````````````````````"
- "## Blank lines"
- "[Blank lines]"
- between block-level elements are
- "elements are ignored,"
- except for the role they play in
- they play in determining whether
- " whether a [list]\nis [tight] or"
- "]\nis [tight] or [loose]."
- Blank lines at the beginning and
- beginning and end of the
- and end of the document are also
- are also ignored.
- "````````````````````````````````"
- "```````````````` example"
- "  \n\naaa\n  \n\n# aaa\n\n  \n."
- "  \n\n# aaa\n\n  \n.\n<p>aaa</p>"
- "  \n.\n<p>aaa</p>\n<h1>aaa</h1>"
- "````````````````````````````````"
- "# Container blocks"
- A
- "[container block](#container-"
- "](#container-blocks)"
- is a block that has other
- blocks as its contents.
- There are two basic kinds of
- "basic kinds of container blocks:"
- "[block quotes] and [list items]."
- "[list items].\n[Lists]"
- "[Lists] are meta-containers for"
- "[list items]."
- We define the syntax for
- the syntax for container blocks
- container blocks recursively.
- The general
- "form of the definition is:"
- ">"
- "If X is a sequence of blocks,"
- " of blocks, then the result of\n>"
- transforming X in such-and-such
- in such-and-such a way is a
- "-such a way is a container of"
- " a container of type Y\n>"
- with these blocks as its content
- as its content.
- "So, we explain what counts as a"
- what counts as a block quote or
- a block quote or list item by
- or list item by explaining
- how these can be *generated*
- from their contents.
- This should suffice
- "to define the syntax, although"
- "syntax, although it does not"
- it does not give a recipe for
- "*parsing*"
- these constructions.
- (A recipe is provided below in
- below in the section entitled
- "[A parsing strategy](#appendix-a"
- "](#appendix-a-parsing-strategy)"
- ".)"
- "## Block quotes"
- "A [block quote marker](@),"
- optionally preceded by up to
- by up to three spaces of
- "three spaces of indentation,"
- consists of (a) the character
- "`>`"
- together with a following space
- following space of
- "indentation, or (b) a single"
- "or (b) a single character `>`"
- "`>` not followed by a space of"
- indentation.
- "The following rules define ["
- "[block quotes]:"
- 1.  **Basic case.**
- If a string of lines *Ls*
- "*Ls* constitute a sequence"
- of blocks *Bs*
- ", then the result of prepending"
- "of prepending a [block quote"
- "[block quote\n    marker]"
- to the beginning of each line in
- "*Ls*\n    is a"
- "[block quote](#block-quotes)"
- containing *Bs*.
- 2.  **Laziness.**
- If a string of lines *Ls*
- "*Ls* constitute a"
- "[block\n    quote](#block-quotes)"
- with contents *Bs*
- ", then the result of deleting"
- "the initial [block quote marker]"
- "] from one or"
- more lines in which the next
- which the next character other
- character other than a space or
- than a space or tab after the
- "[block quote marker] is ["
- "] is [paragraph continuation"
- "text] is a block quote with *Bs*"
- "*Bs* as its content."
- "[Paragraph continuation text](@)"
- is text
- that will be parsed as part of
- as part of the content of a
- "the content of a paragraph, but"
- "a paragraph, but does"
- not occur at the beginning of
- the beginning of the paragraph.
- 3.  **Consecutiveness.**
- "A document cannot contain two ["
- "[block\n    quotes]"
- "] in a row unless there is a ["
- "[blank line] between them."
- Nothing else counts as a
- "[block quote](#block-quotes)."
- "Here is a simple example:"
- "````````````````````````````````"
- "```````````````` example"
- "> # Foo\n> bar\n> baz\n."
- "> bar\n> baz\n.\n<blockquote>"
- ".\n<blockquote>\n<h1>Foo</h1>"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>"
- "<p>bar\nbaz</p>\n</blockquote>"
- "````````````````````````````````"
- "The space or tab after the `>`"
- "`>` characters can be omitted:"
- "````````````````````````````````"
- "```````````````` example"
- "># Foo\n>bar\n> baz\n.\n<blockquote>"
- ".\n<blockquote>\n<h1>Foo</h1>"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>"
- "<p>bar\nbaz</p>\n</blockquote>"
- "````````````````````````````````"
- "The `>`"
- characters can be preceded by up
- preceded by up to three spaces
- "to three spaces of indentation:"
- "````````````````````````````````"
- "```````````````` example"
- "   > # Foo\n   > bar\n > baz\n."
- " > baz\n.\n<blockquote>"
- ".\n<blockquote>\n<h1>Foo</h1>"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>"
- "<p>bar\nbaz</p>\n</blockquote>"
- "````````````````````````````````"
- Four spaces of indentation is
- "indentation is too many:"
- "````````````````````````````````"
- "```````````````` example"
- "    > # Foo\n    > bar\n    > baz"
- "    > baz\n."
- ".\n<pre><code>&gt; # Foo\n&gt; bar"
- "&gt; bar\n&gt; baz\n</code></pre>"
- "````````````````````````````````"
- The Laziness clause allows us to
- "allows us to omit the `>` before"
- "`>` before\n["
- "[paragraph continuation text]:"
- "````````````````````````````````"
- "```````````````` example"
- "> # Foo\n> bar\nbaz\n.\n<blockquote>"
- ".\n<blockquote>\n<h1>Foo</h1>"
- "<h1>Foo</h1>\n<p>bar\nbaz</p>"
- "<p>bar\nbaz</p>\n</blockquote>"
- "````````````````````````````````"
- A block quote can contain some
- can contain some lazy and some
- lazy and some non-lazy
- "continuation lines:"
- "````````````````````````````````"
- "```````````````` example"
- "> bar\nbaz\n> foo\n.\n<blockquote>"
- ".\n<blockquote>\n<p>bar\nbaz"
- "<p>bar\nbaz\nfoo</p>\n</blockquote>"
- "````````````````````````````````"
- Laziness only applies to lines
- applies to lines that would have
- that would have been
- would have been continuations of
- paragraphs had they been
- "had they been prepended with ["
- "[block quote markers]."
- "].\nFor example, the `> `"
- cannot be omitted in the second
- in the second line of
- "``` markdown\n> foo\n> ---\n```"
- "without changing the meaning:"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\n---\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo</p>"
- "<p>foo</p>\n</blockquote>\n<hr />"
- "````````````````````````````````"
- "Similarly, if we omit the `> `"
- "`> ` in the second line of"
- "``` markdown\n> - foo\n> - bar\n```"
- then the block quote ends after
- "quote ends after the first line:"
- "````````````````````````````````"
- "```````````````` example"
- "> - foo\n- bar\n.\n<blockquote>"
- ".\n<blockquote>\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n</ul>\n</blockquote>"
- "</blockquote>\n<ul>\n<li>bar</li>"
- "<li>bar</li>\n</ul>"
- "````````````````````````````````"
- "For the same reason, we can'"
- "'t omit the `> ` in front of"
- subsequent lines of an indented
- of an indented or fenced code
- "or fenced code block:"
- "````````````````````````````````"
- "```````````````` example"
- ">     foo\n    bar\n.\n<blockquote>"
- ".\n<blockquote>\n<pre><code>foo"
- "<pre><code>foo\n</code></pre>"
- "</code></pre>\n</blockquote>"
- "</blockquote>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> ```\nfoo\n```\n.\n<blockquote>"
- "<pre><code></code></pre>"
- "</blockquote>\n<p>foo</p>"
- "<pre><code></code></pre>"
- "````````````````````````````````"
- "Note that in the following case,"
- "following case, we have a [lazy"
- "[lazy\ncontinuation line]:"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\n    - bar\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo\n- bar</p>"
- "<p>foo\n- bar</p>\n</blockquote>"
- "````````````````````````````````"
- "To see why, note that in"
- "```markdown\n> foo\n>     - bar"
- "```"
- "the `- bar`"
- is indented too far to start a
- "far to start a list, and can't"
- be an indented code block
- code block because indented code
- indented code blocks cannot
- "interrupt paragraphs, so it is ["
- "[paragraph continuation text]."
- "A block quote can be empty:"
- "````````````````````````````````"
- "```````````````` example"
- ">\n.\n<blockquote>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- ">\n>  \n> \n.\n<blockquote>"
- ".\n<blockquote>\n</blockquote>"
- "````````````````````````````````"
- A block quote can have initial
- can have initial or final blank
- "or final blank lines:"
- "````````````````````````````````"
- "```````````````` example"
- ">\n> foo\n>  \n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo</p>"
- "<p>foo</p>\n</blockquote>"
- "````````````````````````````````"
- A blank line always separates
- "always separates block quotes:"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\n\n> bar\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo</p>"
- "<p>foo</p>\n</blockquote>"
- "</blockquote>\n<blockquote>"
- "<blockquote>\n<p>bar</p>"
- "<p>bar</p>\n</blockquote>"
- "````````````````````````````````"
- (Most current Markdown
- current Markdown implementations
- "implementations, including John"
- ", including John Gruber's"
- "'s\noriginal `Markdown.pl`"
- ", will parse this example as a"
- example as a single block quote
- with two paragraphs.
- But it seems better to allow the
- to allow the author to decide
- whether two block quotes or one
- quotes or one are wanted.)
- Consecutiveness means that if we
- means that if we put these block
- "put these block quotes together,"
- "we get a single block quote:"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\n> bar\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo\nbar</p>"
- "<p>foo\nbar</p>\n</blockquote>"
- "````````````````````````````````"
- To get a block quote with two
- "quote with two paragraphs, use:"
- "````````````````````````````````"
- "```````````````` example"
- "> foo\n>\n> bar\n.\n<blockquote>"
- ".\n<blockquote>\n<p>foo</p>"
- "<p>foo</p>\n<p>bar</p>"
- "<p>bar</p>\n</blockquote>"
- "````````````````````````````````"
- Block quotes can interrupt
- "can interrupt paragraphs:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\n> bar\n.\n<p>foo</p>"
- ".\n<p>foo</p>\n<blockquote>"
- "<blockquote>\n<p>bar</p>"
- "<p>bar</p>\n</blockquote>"
- "````````````````````````````````"
- "In general, blank lines are not"
- lines are not needed before or
- needed before or after block
- "quotes:"
- "````````````````````````````````"
- "```````````````` example"
- "> aaa\n***\n> bbb\n.\n<blockquote>"
- ".\n<blockquote>\n<p>aaa</p>"
- "<p>aaa</p>\n</blockquote>\n<hr />"
- "<hr />\n<blockquote>\n<p>bbb</p>"
- "<p>bbb</p>\n</blockquote>"
- "````````````````````````````````"
- "However, because of laziness, a"
- "of laziness, a blank line is"
- a blank line is needed between
- a block quote and a following
- "and a following paragraph:"
- "````````````````````````````````"
- "```````````````` example"
- "> bar\nbaz\n.\n<blockquote>\n<p>bar"
- "<p>bar\nbaz</p>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> bar\n\nbaz\n.\n<blockquote>"
- ".\n<blockquote>\n<p>bar</p>"
- "<p>bar</p>\n</blockquote>"
- "</blockquote>\n<p>baz</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> bar\n>\nbaz\n.\n<blockquote>"
- ".\n<blockquote>\n<p>bar</p>"
- "<p>bar</p>\n</blockquote>"
- "</blockquote>\n<p>baz</p>"
- "````````````````````````````````"
- It is a consequence of the
- of the Laziness rule that any
- " rule that any number\nof initial"
- "of initial `>`"
- s may be omitted on a
- be omitted on a continuation
- a continuation line of a
- "nested block quote:"
- "````````````````````````````````"
- "```````````````` example"
- "> > > foo\nbar\n.\n<blockquote>"
- ".\n<blockquote>\n<blockquote>"
- "<blockquote>\n<blockquote>\n<p>foo"
- "<p>foo\nbar</p>\n</blockquote>"
- "</blockquote>\n</blockquote>"
- "</blockquote>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- ">>> foo\n> bar\n>>baz\n."
- "> bar\n>>baz\n.\n<blockquote>"
- ".\n<blockquote>\n<blockquote>"
- "<blockquote>\n<blockquote>\n<p>foo"
- "<p>foo\nbar\nbaz</p>\n</blockquote>"
- "</blockquote>\n</blockquote>"
- "</blockquote>\n</blockquote>"
- "````````````````````````````````"
- When including an indented code
- an indented code block in a
- "code block in a block quote,"
- "remember that the ["
- "[block quote marker] includes"
- "] includes\nboth the `>`"
- and a following space of
- space of indentation.  So
- "*five spaces* are needed"
- " are needed\nafter the `>`:"
- "````````````````````````````````"
- "```````````````` example"
- ">     code\n\n>    not code\n."
- ">    not code\n.\n<blockquote>"
- ".\n<blockquote>\n<pre><code>code"
- "<pre><code>code\n</code></pre>"
- "</code></pre>\n</blockquote>"
- "</blockquote>\n<blockquote>"
- "<blockquote>\n<p>not code</p>"
- "<p>not code</p>\n</blockquote>"
- "````````````````````````````````"
- "## List items"
- "A [list marker](@) is a\n["
- " is a\n[bullet list marker] or an"
- "] or an [ordered list marker]."
- "A [bullet list marker](@)\nis a"
- "is a `-`, `+`, or `*` character."
- "An [ordered list marker](@)"
- is a sequence of 1--
- "--9 arabic digits (`0-9`"
- "`0-9`), followed by either a\n`.`"
- "`.` character or a `)`"
- character.
- (The reason for the length
- limit is that with 10 digits we
- 10 digits we start seeing
- we start seeing integer
- seeing integer overflows
- in some browsers.)
- "The following rules define ["
- "[list items]:"
- 1.  **Basic case.**
- If a sequence of lines *Ls*
- "*Ls* constitute a sequence of"
- blocks *Bs*
- starting with a character other
- character other than a space or
- "than a space or tab, and *M* is"
- " is\n    a list marker of width"
- "*W* followed by 1 ≤ *N*"
- "*N* ≤ 4 spaces of indentation,"
- then the result of prepending
- "*M*"
- and the following spaces to the
- " spaces to the first line\n    of"
- of *Ls*
- ", and indenting subsequent lines"
- subsequent lines of *Ls* by
- "*Ls* by *W + N* spaces, is a"
- " spaces, is a\n    list item with"
- list item with *Bs*
- as its contents.
- The type of the list item
- (bullet or ordered) is
- or ordered) is determined by the
- by the type of its list marker.
- "If the list item is ordered,"
- "item is ordered, then it is also"
- then it is also assigned a start
- "number, based on the ordered"
- on the ordered list marker.
- "Exceptions:"
- 1. When the first list item in a
- "[list] interrupts"
- "] interrupts\n       a paragraph"
- a paragraph---
- "that is, when it starts on a"
- it starts on a line that would
- "otherwise count as ["
- "[paragraph continuation text]---"
- "]---then (a)\n       the lines"
- the lines *Ls*
- must not begin with a blank line
- "a blank line, and (b) if"
- "the list item is ordered, the"
- "is ordered, the start number"
- the start number must be 1.
- "2. If any line is a ["
- "[thematic break][thematic breaks"
- "[thematic breaks] then"
- that line is not a list item.
- "For example, let *Ls*"
- "*Ls* be the lines"
- "````````````````````````````````"
- "```````````````` example"
- "A paragraph\nwith two lines."
- indented code
- "> A block quote.\n."
- ".\n<p>A paragraph"
- with two lines.</p>
- "<pre><code>indented code"
- "</code></pre>\n<blockquote>"
- "<p>A block quote.</p>"
- "</blockquote>"
- "````````````````````````````````"
- "And let *M* be the marker `1.`"
- "`1.`, and *N*"
- "*N* = 2.  Then rule #1 says"
- that the following is an ordered
- is an ordered list item with
- "list item with start number 1,"
- "and the same contents as *Ls*:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- "A paragraph\n    with two lines."
- indented code
- "    > A block quote.\n.\n<ol>\n<li>"
- ".\n<ol>\n<li>\n<p>A paragraph"
- with two lines.</p>
- "<pre><code>indented code"
- "</code></pre>\n<blockquote>"
- "<p>A block quote.</p>"
- "</blockquote>\n</li>\n</ol>"
- "````````````````````````````````"
- The most important thing to
- thing to notice is that the
- is that the position of
- the text after the list marker
- the list marker determines how
- determines how much indentation
- is needed in subsequent blocks
- blocks in the list item.
- If the list
- marker takes up two spaces of
- "up two spaces of indentation,"
- "of indentation, and there are"
- ", and there are three spaces"
- are three spaces between
- the list marker and the next
- and the next character other
- character other than a space or
- "than a space or tab, then blocks"
- must be indented five spaces in
- five spaces in order to fall
- in order to fall under the list
- item.
- Here are some examples showing
- examples showing how far content
- how far content must be indented
- must be indented to be
- "put under the list item:"
- "````````````````````````````````"
- "```````````````` example"
- "- one\n\n two\n.\n<ul>\n<li>one</li>"
- "<li>one</li>\n</ul>\n<p>two</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- one\n\n  two\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>one</p>"
- "<li>\n<p>one</p>\n<p>two</p>\n</li>"
- "<p>two</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- " -    one\n\n     two\n.\n<ul>"
- "     two\n.\n<ul>\n<li>one</li>"
- "<li>one</li>\n</ul>"
- "</ul>\n<pre><code> two"
- "<pre><code> two\n</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- " -    one\n\n      two\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>one</p>"
- "<li>\n<p>one</p>\n<p>two</p>\n</li>"
- "<p>two</p>\n</li>\n</ul>"
- "````````````````````````````````"
- It is tempting to think of this
- to think of this in terms of
- "this in terms of columns:  the"
- "of columns:  the continuation"
- blocks must be indented at least
- at least to the column of the
- column of the first character
- first character other than
- a space or tab after the list
- after the list marker.
- "However, that is not quite right"
- not quite right.
- The spaces of indentation after
- after the list marker determine
- marker determine how much
- how much relative
- indentation is needed.
- Which column this indentation
- this indentation reaches will
- reaches will depend on
- how the list item is embedded in
- is embedded in other
- "in other constructions, as shown"
- ", as shown by\nthis example:"
- "````````````````````````````````"
- "```````````````` example"
- "   > > 1.  one\n>>\n>>     two\n."
- ">>\n>>     two\n.\n<blockquote>"
- ".\n<blockquote>\n<blockquote>\n<ol>"
- "<ol>\n<li>\n<p>one</p>\n<p>two</p>"
- "<p>two</p>\n</li>\n</ol>"
- "</li>\n</ol>\n</blockquote>"
- "</blockquote>\n</blockquote>"
- "````````````````````````````````"
- "Here `two`"
- occurs in the same column as the
- "column as the list marker `1.`,"
- but is actually contained in the
- "contained in the list item,"
- "the list item, because there is"
- sufficient indentation after the
- after the last containing
- last containing blockquote
- blockquote marker.
- The converse is also possible.
- "In the following example, the"
- "example, the word `two`"
- occurs far to the right of the
- the right of the initial text of
- "initial text of the list item,"
- "`one`, but"
- it is not considered part of the
- "part of the list item, because"
- "item, because it is not indented"
- far enough past the blockquote
- "the blockquote marker:"
- "````````````````````````````````"
- "```````````````` example"
- ">>- one\n>>\n  >  > two\n."
- ">>\n  >  > two\n.\n<blockquote>"
- ".\n<blockquote>\n<blockquote>\n<ul>"
- "<ul>\n<li>one</li>\n</ul>"
- "</ul>\n<p>two</p>\n</blockquote>"
- "</blockquote>\n</blockquote>"
- "````````````````````````````````"
- Note that at least one space or
- one space or tab is needed
- or tab is needed between the
- between the list marker and
- "any following content, so these"
- ", so these are not list items:"
- "````````````````````````````````"
- "```````````````` example"
- "-one\n\n2.two\n.\n<p>-one</p>"
- ".\n<p>-one</p>\n<p>2.two</p>"
- "````````````````````````````````"
- A list item may contain blocks
- contain blocks that are
- blocks that are separated by
- are separated by more than
- one blank line.
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n\n\n  bar\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<p>bar</p>\n</li>"
- "<p>bar</p>\n</li>\n</ul>"
- "````````````````````````````````"
- A list item may contain any kind
- "contain any kind of block:"
- "````````````````````````````````"
- "```````````````` example"
- "1.  foo\n\n    ```\n    bar\n    ```"
- "    bar\n    ```\n\n    baz"
- "    ```\n\n    baz\n\n    > bam\n."
- "    > bam\n.\n<ol>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "</code></pre>\n<p>baz</p>"
- "<p>baz</p>\n<blockquote>"
- "<blockquote>\n<p>bam</p>"
- "<p>bam</p>\n</blockquote>\n</li>"
- "</li>\n</ol>"
- "````````````````````````````````"
- A list item that contains an
- that contains an indented code
- an indented code block will
- code block will preserve
- empty lines within the code
- within the code block verbatim.
- "````````````````````````````````"
- "```````````````` example"
- "- Foo\n\n      bar\n\n\n      baz\n."
- "      baz\n.\n<ul>\n<li>\n<p>Foo</p>"
- "<li>\n<p>Foo</p>\n<pre><code>bar"
- "<pre><code>bar\n\n\nbaz"
- "baz\n</code></pre>\n</li>\n</ul>"
- "````````````````````````````````"
- Note that ordered list start
- list start numbers must be nine
- "must be nine digits or less:"
- "````````````````````````````````"
- "```````````````` example"
- "123456789. ok\n."
- ".\n<ol start=\"123456789\">"
- "<li>ok</li>\n</ol>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "1234567890. not ok\n."
- ".\n<p>1234567890. not ok</p>"
- "````````````````````````````````"
- A start number may begin with 0s
- "begin with 0s:"
- "````````````````````````````````"
- "```````````````` example"
- "0. ok\n.\n<ol start=\"0\">"
- ".\n<ol start=\"0\">\n<li>ok</li>"
- "<li>ok</li>\n</ol>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "003. ok\n.\n<ol start=\"3\">"
- ".\n<ol start=\"3\">\n<li>ok</li>"
- "<li>ok</li>\n</ol>"
- "````````````````````````````````"
- A start number may not be
- "may not be negative:"
- "````````````````````````````````"
- "```````````````` example"
- "-1. not ok\n.\n<p>-1. not ok</p>"
- "````````````````````````````````"
- "2."
- "**Item starting with indented"
- with indented code.**
- If a sequence of lines *Ls*
- constitute a sequence of blocks
- "*Bs*"
- starting with an indented code
- "block, and *M*"
- "*M* is a list marker of width"
- "*W* followed by"
- "one space of indentation, then"
- ", then the result of prepending"
- "*M* and the"
- following space to the first
- to the first line of *Ls*
- ", and indenting subsequent lines"
- of *Ls* by *W + 1*
- "spaces, is a list item with *Bs*"
- "*Bs* as its contents."
- "If a line is empty, then it need"
- ", then it need not be indented."
- The type of the
- list item (bullet or ordered) is
- or ordered) is determined by the
- by the type of its list
- marker.
- "If the list item is ordered,"
- "item is ordered, then it is also"
- then it is also assigned a
- "start number, based on the"
- ", based on the ordered list"
- the ordered list marker.
- An indented code block will have
- block will have to be preceded
- to be preceded by four spaces of
- four spaces of indentation
- beyond the edge of the region
- of the region where text will be
- text will be included in the
- included in the list item.
- In the following case that is 6
- "case that is 6 spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n\n      bar\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "</code></pre>\n</li>\n</ul>"
- "````````````````````````````````"
- And in this case it is 11 spaces
- "it is 11 spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "  10.  foo\n\n           bar\n."
- "           bar\n.\n<ol start=\"10\">"
- "<ol start=\"10\">\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "</code></pre>\n</li>\n</ol>"
- "````````````````````````````````"
- If the *first*
- block in the list item is an
- list item is an indented code
- "an indented code block,"
- "then by rule #2, the contents"
- "#2, the contents must be"
- contents must be preceded by
- "*one* space of indentation"
- "after the list marker:"
- "````````````````````````````````"
- "```````````````` example"
- "    indented code\n\nparagraph"
- "paragraph\n\n    more code\n."
- ".\n<pre><code>indented code"
- "</code></pre>\n<p>paragraph</p>"
- "<pre><code>more code"
- "</code></pre>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- 1.     indented code
- "   paragraph\n\n       more code\n."
- ".\n<ol>\n<li>"
- "<li>\n<pre><code>indented code"
- "</code></pre>\n<p>paragraph</p>"
- "<pre><code>more code"
- "</code></pre>\n</li>\n</ol>"
- "````````````````````````````````"
- Note that an additional space of
- space of indentation is
- indentation is interpreted as
- interpreted as space
- "inside the code block:"
- "````````````````````````````````"
- "```````````````` example"
- 1.      indented code
- "   paragraph\n\n       more code\n."
- ".\n<ol>\n<li>"
- "<li>\n<pre><code> indented code"
- "</code></pre>\n<p>paragraph</p>"
- "<pre><code>more code"
- "</code></pre>\n</li>\n</ol>"
- "````````````````````````````````"
- "Note that rules #1 and #2 only"
- "#1 and #2 only apply to two"
- "apply to two cases:  (a) cases"
- in which the lines to be
- the lines to be included in a
- be included in a list item begin
- list item begin with a
- character other than a space or
- "than a space or tab, and (b)"
- "or tab, and (b) cases in which"
- they begin with an indented code
- block.
- "In a case like the following,"
- "the following, where the first"
- where the first block begins
- block begins with
- "three spaces of indentation, the"
- "indentation, the rules do not"
- the rules do not allow us to
- not allow us to form a list item
- form a list item by
- indenting the whole thing and
- whole thing and prepending a
- "and prepending a list marker:"
- "````````````````````````````````"
- "```````````````` example"
- "   foo\n\nbar\n.\n<p>foo</p>"
- "bar\n.\n<p>foo</p>\n<p>bar</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "-    foo\n\n  bar\n.\n<ul>"
- "  bar\n.\n<ul>\n<li>foo</li>\n</ul>"
- "</ul>\n<p>bar</p>"
- "````````````````````````````````"
- This is not a significant
- "a significant restriction,"
- "restriction, because when a"
- ", because when a block is"
- when a block is preceded by up
- preceded by up to
- "three spaces of indentation, the"
- "indentation, the indentation can"
- indentation can always be
- can always be removed without
- "a change in interpretation,"
- "interpretation, allowing rule #1"
- "allowing rule #1 to be applied."
- "So, in\nthe above case:"
- "````````````````````````````````"
- "```````````````` example"
- "-  foo\n\n   bar\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<p>bar</p>\n</li>"
- "<p>bar</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "3."
- "**Item starting with a blank"
- with a blank line.**
- If a sequence of lines *Ls*
- "*Ls*\n    starting with a single"
- "[blank line]"
- "] constitute a (possibly empty)"
- "sequence of blocks *Bs*, and *M*"
- "*M* is a list marker of width"
- "*W*,"
- then the result of prepending
- "*M* to the first line of *Ls*"
- "*Ls*, and"
- preceding subsequent lines of
- "*Ls* by *W + 1*"
- "spaces of indentation, is a"
- list item with *Bs*
- "*Bs* as its contents."
- "If a line is empty, then it need"
- ", then it need not be indented."
- The type of the
- list item (bullet or ordered) is
- or ordered) is determined by the
- by the type of its list
- marker.
- "If the list item is ordered,"
- "item is ordered, then it is also"
- then it is also assigned a
- "start number, based on the"
- ", based on the ordered list"
- the ordered list marker.
- Here are some list items that
- list items that start with a
- start with a blank line but are
- "line but are not empty:"
- "````````````````````````````````"
- "```````````````` example"
- "-\n  foo\n-\n  ```\n  bar\n  ```\n-"
- "  bar\n  ```\n-\n      baz\n.\n<ul>"
- "      baz\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n<li>\n<pre><code>bar"
- "<pre><code>bar\n</code></pre>"
- "</code></pre>\n</li>\n<li>"
- "</li>\n<li>\n<pre><code>baz"
- "<pre><code>baz\n</code></pre>"
- "</code></pre>\n</li>\n</ul>"
- "````````````````````````````````"
- When the list item starts with a
- "starts with a blank line, the"
- "blank line, the number of spaces"
- "following the list marker doesn'"
- t change the required
- "the required indentation:"
- "````````````````````````````````"
- "```````````````` example"
- "-   \n  foo\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n</ul>"
- "````````````````````````````````"
- A list item can begin with at
- begin with at most one blank
- most one blank line.
- "In the following example, `foo`"
- "`foo` is not part of the list"
- "item:"
- "````````````````````````````````"
- "```````````````` example"
- "-\n\n  foo\n.\n<ul>\n<li></li>\n</ul>"
- "<li></li>\n</ul>\n<p>foo</p>"
- "````````````````````````````````"
- Here is an empty bullet list
- "bullet list item:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n-\n- bar\n.\n<ul>"
- "-\n- bar\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n<li></li>"
- "<li></li>\n<li>bar</li>\n</ul>"
- "````````````````````````````````"
- It does not matter whether there
- whether there are spaces or tabs
- "spaces or tabs following the ["
- "[list marker]:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n-   \n- bar\n.\n<ul>"
- "- bar\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n<li></li>"
- "<li></li>\n<li>bar</li>\n</ul>"
- "````````````````````````````````"
- Here is an empty ordered list
- "ordered list item:"
- "````````````````````````````````"
- "```````````````` example"
- "1. foo\n2.\n3. bar\n.\n<ol>"
- "2.\n3. bar\n.\n<ol>\n<li>foo</li>"
- "<li>foo</li>\n<li></li>"
- "<li></li>\n<li>bar</li>\n</ol>"
- "````````````````````````````````"
- A list may start or end with an
- "or end with an empty list item:"
- "````````````````````````````````"
- "```````````````` example"
- "*\n.\n<ul>\n<li></li>\n</ul>"
- "````````````````````````````````"
- "However, an empty list item"
- empty list item cannot interrupt
- "cannot interrupt a paragraph:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\n*\n\nfoo\n1.\n.\n<p>foo\n*</p>"
- ".\n<p>foo\n*</p>\n<p>foo\n1.</p>"
- "````````````````````````````````"
- 4.  **Indentation.**
- If a sequence of lines *Ls*
- "*Ls* constitutes a list item"
- "according to rule #1, #2, or #3,"
- "#1, #2, or #3, then the result"
- then the result of preceding
- " of preceding each line\n    of"
- of *Ls*
- by up to three spaces of
- three spaces of indentation (the
- indentation (the same for each
- same for each line) also
- constitutes a list item with the
- item with the same contents and
- contents and attributes.
- If a line is
- "empty, then it need not be"
- it need not be indented.
- "Indented one space:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- "A paragraph\n     with two lines."
- indented code
- "     > A block quote.\n.\n<ol>"
- ".\n<ol>\n<li>\n<p>A paragraph"
- with two lines.</p>
- "<pre><code>indented code"
- "</code></pre>\n<blockquote>"
- "<p>A block quote.</p>"
- "</blockquote>\n</li>\n</ol>"
- "````````````````````````````````"
- "Indented two spaces:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "      > A block quote.\n.\n<ol>"
- ".\n<ol>\n<li>\n<p>A paragraph"
- with two lines.</p>
- "<pre><code>indented code"
- "</code></pre>\n<blockquote>"
- "<p>A block quote.</p>"
- "</blockquote>\n</li>\n</ol>"
- "````````````````````````````````"
- "Indented three spaces:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "       > A block quote.\n.\n<ol>"
- ".\n<ol>\n<li>\n<p>A paragraph"
- with two lines.</p>
- "<pre><code>indented code"
- "</code></pre>\n<blockquote>"
- "<p>A block quote.</p>"
- "</blockquote>\n</li>\n</ol>"
- "````````````````````````````````"
- Four spaces indent gives a code
- "gives a code block:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- with two lines.
- indented code
- "        > A block quote.\n."
- ".\n<pre><code>1.  A paragraph"
- "A paragraph\n    with two lines."
- indented code
- "&gt; A block quote."
- "</code></pre>"
- "````````````````````````````````"
- 5.  **Laziness.**
- If a string of lines *Ls*
- "*Ls* constitute a"
- "[list\n    item](#list-items)"
- with contents *Bs*
- ", then the result of deleting"
- some or all of the indentation
- the indentation from one or more
- from one or more lines in which
- lines in which the
- next character other than a
- other than a space or tab after
- or tab after the indentation is
- "[paragraph continuation text]"
- "] is a"
- list item with the same contents
- same contents and attributes.
- The unindented
- lines are called
- "[lazy continuation line](@)s."
- "Here is an example with ["
- "[lazy continuation lines]:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- "A paragraph\nwith two lines."
- indented code
- "      > A block quote.\n.\n<ol>"
- ".\n<ol>\n<li>\n<p>A paragraph"
- with two lines.</p>
- "<pre><code>indented code"
- "</code></pre>\n<blockquote>"
- "<p>A block quote.</p>"
- "</blockquote>\n</li>\n</ol>"
- "````````````````````````````````"
- Indentation can be partially
- "can be partially deleted:"
- "````````````````````````````````"
- "```````````````` example"
- 1.  A paragraph
- "A paragraph\n    with two lines."
- "    with two lines.\n.\n<ol>"
- ".\n<ol>\n<li>A paragraph"
- "with two lines.</li>\n</ol>"
- "````````````````````````````````"
- These examples show how laziness
- how laziness can work in nested
- "work in nested structures:"
- "````````````````````````````````"
- "```````````````` example"
- "> 1. > Blockquote"
- "> Blockquote\ncontinued here.\n."
- ".\n<blockquote>\n<ol>\n<li>"
- "<ol>\n<li>\n<blockquote>"
- "<blockquote>\n<p>Blockquote"
- continued here.</p>
- "</blockquote>\n</li>\n</ol>"
- "</li>\n</ol>\n</blockquote>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "> 1. > Blockquote"
- "> Blockquote\n> continued here.\n."
- ".\n<blockquote>\n<ol>\n<li>"
- "<ol>\n<li>\n<blockquote>"
- "<blockquote>\n<p>Blockquote"
- continued here.</p>
- "</blockquote>\n</li>\n</ol>"
- "</li>\n</ol>\n</blockquote>"
- "````````````````````````````````"
- "6.  **That's all.**"
- Nothing that is not counted as a
- not counted as a list item by
- " a list item by rules\n    #1--"
- "#1--5 counts as a"
- "[list item](#list-items)."
- The rules for sublists follow
- sublists follow from the general
- "from the general rules\n[above]["
- "[above][List items]"
- "."
- A sublist must be indented the
- be indented the same number
- of spaces of indentation a
- of indentation a paragraph would
- paragraph would need to be in
- need to be in order to be
- in order to be included
- in the list item.
- "So, in this case we need two"
- "case we need two spaces indent:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n  - bar\n    - baz"
- "    - baz\n      - boo\n.\n<ul>"
- ".\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>"
- "<li>bar\n<ul>\n<li>baz\n<ul>"
- "<li>baz\n<ul>\n<li>boo</li>\n</ul>"
- "</ul>\n</li>\n</ul>\n</li>\n</ul>"
- "</li>\n</ul>\n</li>\n</ul>"
- "````````````````````````````````"
- "One is not enough:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n - bar\n  - baz\n   - boo\n."
- "   - boo\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n<li>bar</li>"
- "<li>bar</li>\n<li>baz</li>"
- "<li>baz</li>\n<li>boo</li>\n</ul>"
- "````````````````````````````````"
- "Here we need four, because the"
- ", because the list marker is"
- "list marker is wider:"
- "````````````````````````````````"
- "```````````````` example"
- "10) foo\n    - bar\n."
- "    - bar\n.\n<ol start=\"10\">"
- "<ol start=\"10\">\n<li>foo\n<ul>"
- "<li>foo\n<ul>\n<li>bar</li>\n</ul>"
- "</ul>\n</li>\n</ol>"
- "````````````````````````````````"
- "Three is not enough:"
- "````````````````````````````````"
- "```````````````` example"
- "10) foo\n   - bar\n."
- "   - bar\n.\n<ol start=\"10\">"
- "<ol start=\"10\">\n<li>foo</li>"
- "<li>foo</li>\n</ol>\n<ul>"
- "</ol>\n<ul>\n<li>bar</li>\n</ul>"
- "````````````````````````````````"
- A list may be the first block in
- "first block in a list item:"
- "````````````````````````````````"
- "```````````````` example"
- "- - foo\n.\n<ul>\n<li>\n<ul>"
- ".\n<ul>\n<li>\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n</ul>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "1. - 2. foo\n.\n<ol>\n<li>\n<ul>"
- ".\n<ol>\n<li>\n<ul>\n<li>"
- "<li>\n<ul>\n<li>\n<ol start=\"2\">"
- "<ol start=\"2\">\n<li>foo</li>"
- "<li>foo</li>\n</ol>\n</li>\n</ul>"
- "</li>\n</ul>\n</li>\n</ol>"
- "````````````````````````````````"
- A list item can contain a
- "can contain a heading:"
- "````````````````````````````````"
- "```````````````` example"
- "- # Foo\n- Bar\n  ---\n  baz\n.\n<ul>"
- "  baz\n.\n<ul>\n<li>\n<h1>Foo</h1>"
- "<h1>Foo</h1>\n</li>\n<li>"
- "</li>\n<li>\n<h2>Bar</h2>\nbaz</li>"
- "baz</li>\n</ul>"
- "````````````````````````````````"
- "### Motivation"
- "John Gruber'"
- s Markdown spec says the
- spec says the following about
- "following about list items:"
- "1. \""
- List markers typically start at
- "start at the left margin, but"
- "left margin, but may be indented"
- by up to three spaces.
- List markers must be followed by
- be followed by one or more
- "spaces or a tab.\""
- "2. \""
- "To make lists look nice, you can"
- "nice, you can wrap items with"
- wrap items with hanging indents
- "....\n   But if you don'"
- "'t want to, you don't have to.\""
- "3. \""
- List items may consist of
- may consist of multiple
- of multiple paragraphs.
- Each subsequent
- paragraph in a list item must be
- item must be indented by either
- by either 4 spaces or one
- "tab.\""
- "4. \""
- It looks nice if you indent
- if you indent every line of the
- line of the subsequent
- "the subsequent paragraphs,"
- "but here again, Markdown will"
- ", Markdown will allow you to be"
- "allow you to be lazy.\""
- "5. \""
- To put a blockquote within a
- "within a list item, the"
- "a list item, the blockquote's"
- "'s `>`"
- "delimiters need to be indented.\""
- "6. \""
- To put a code block within a
- "block within a list item, the"
- "a list item, the code block"
- ", the code block needs to be"
- indented twice — 8 spaces or two
- "8 spaces or two tabs.\""
- These rules specify that a
- specify that a paragraph under a
- under a list item must be
- item must be indented
- "four spaces (presumably, from"
- "presumably, from the left margin"
- "the left margin, rather than the"
- rather than the start of
- "the list marker, but this is not"
- "but this is not said), and that"
- "said), and that code under a"
- code under a list item
- must be indented eight spaces
- eight spaces instead of the
- instead of the usual four.
- They also say
- that a block quote must be
- "quote must be indented, but not"
- ", but not by how much; however,"
- "much; however, the"
- example given has four spaces
- has four spaces indentation.
- Although nothing is said
- about other kinds of block-level
- "of block-level content, it is"
- "content, it is certainly"
- it is certainly reasonable to
- infer that *all*
- block elements under a list item
- "a list item, including other"
- "lists, must be indented four"
- be indented four spaces.
- This principle has been called
- has been called the
- "*four-space rule*."
- The four-space rule is clear and
- "is clear and principled, and if"
- ", and if the reference"
- "implementation `Markdown.pl`"
- "had followed it, it probably"
- "it, it probably would have"
- "become the standard.  However,"
- "`Markdown.pl`"
- allowed paragraphs and
- sublists to start with only two
- with only two spaces indentation
- "indentation, at least on the"
- outer level.
- "Worse, its behavior was"
- "its behavior was inconsistent: a"
- "inconsistent: a sublist of an"
- outer-level list needed two
- list needed two spaces
- "two spaces indentation, but a"
- ", but a sublist of this"
- sublist needed three spaces.
- "It is not surprising, then, that"
- ", then, that different"
- implementations of Markdown have
- of Markdown have developed very
- developed very different rules
- different rules for
- determining what comes under a
- comes under a list item.
- "(Pandoc and python-Markdown,"
- "for example, stuck with Gruber'"
- s syntax description and the
- and the four-space
- "rule, while discount, redcarpet,"
- ", redcarpet, marked, PHP"
- ", marked, PHP Markdown, and"
- " Markdown, and others\nfollowed"
- "followed `Markdown.pl`'"
- "'s behavior more closely.)"
- "Unfortunately, given the"
- ", given the divergences between"
- "between implementations, there"
- is no way to give a spec for
- give a spec for list items that
- list items that will be
- that will be guaranteed not
- to break any existing documents.
- "However, the spec given here"
- spec given here should
- correctly handle lists formatted
- lists formatted with either the
- with either the four-space rule
- four-space rule or
- "the more forgiving `Markdown.pl`"
- "behavior, provided they are laid"
- they are laid out
- in a way that is natural for a
- is natural for a human to read.
- The strategy here is to let the
- is to let the width and
- the width and indentation of the
- of the list marker
- determine the indentation
- the indentation necessary for
- necessary for blocks to fall
- blocks to fall under the list
- "item, rather than having a fixed"
- having a fixed and arbitrary
- and arbitrary number.
- The writer can
- think of the body of the list
- body of the list item as a unit
- item as a unit which gets
- unit which gets indented to the
- right enough to fit the list
- to fit the list marker (and any
- marker (and any indentation on
- indentation on the list
- marker).
- "(The laziness rule, #5, then"
- "rule, #5, then allows"
- "#5, then allows continuation"
- continuation lines to be
- unindented if needed.)
- "This rule is superior, we claim,"
- ", we claim, to any rule"
- ", to any rule requiring a fixed"
- a fixed level of
- indentation from the margin.
- The four-space rule is clear but
- unnatural.
- It is quite unintuitive that
- "``` markdown"
- "- foo\n\n  bar\n\n  - baz\n```"
- should be parsed as two lists
- as two lists with an intervening
- "an intervening paragraph,"
- "``` html"
- "<ul>\n<li>foo</li>\n</ul>"
- "</ul>\n<p>bar</p>\n<ul>"
- "<p>bar</p>\n<ul>\n<li>baz</li>"
- "<li>baz</li>\n</ul>\n```"
- "as the four-space rule demands,"
- "rule demands, rather than a"
- ", rather than a single list,"
- "``` html"
- "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>"
- "<p>bar</p>\n<ul>\n<li>baz</li>"
- "<li>baz</li>\n</ul>\n</li>\n</ul>"
- "</li>\n</ul>\n```"
- The choice of four spaces is
- four spaces is arbitrary.
- "It can be learned, but it is"
- "not likely to be guessed, and it"
- "guessed, and it trips up"
- and it trips up beginners
- up beginners regularly.
- Would it help to adopt a two-
- to adopt a two-space rule?
- The problem is that such
- "a rule, together with the rule"
- with the rule allowing up to
- allowing up to three spaces of
- three spaces of indentation for
- "the initial list marker, allows"
- "marker, allows text that is"
- text that is indented
- "*less than* the"
- original list marker to be
- marker to be included in the
- included in the list item.
- "For example,\n`Markdown.pl`"
- "`Markdown.pl` parses"
- "``` markdown\n   - one\n\n  two\n```"
- "as a single list item, with"
- "`two` a continuation paragraph:"
- "``` html"
- "<ul>\n<li>\n<p>one</p>\n<p>two</p>"
- "<p>two</p>\n</li>\n</ul>\n```"
- and similarly
- "``` markdown\n>   - one\n>\n>  two"
- "```\n\nas"
- "``` html"
- "<blockquote>\n<ul>\n<li>"
- "<ul>\n<li>\n<p>one</p>\n<p>two</p>"
- "<p>two</p>\n</li>\n</ul>"
- "</li>\n</ul>\n</blockquote>\n```"
- This is extremely unintuitive.
- Rather than requiring a fixed
- "a fixed indent from the margin,"
- "from the margin, we could"
- "margin, we could require"
- "a fixed indent (say, two spaces,"
- "say, two spaces, or even one"
- ", or even one space) from the"
- space) from the list marker (
- list marker (which
- may itself be indented).
- This proposal would remove the
- would remove the last anomaly
- discussed.
- "Unlike the spec presented above,"
- "presented above, it would count"
- ", it would count the following"
- as a list item with a
- "list item with a subparagraph,"
- "a subparagraph, even though the"
- "even though the paragraph `bar`"
- is not indented as far as the
- as far as the first paragraph
- "`foo`:"
- "``` markdown\n 10. foo\n\n   bar"
- " 10. foo\n\n   bar  \n```"
- Arguably this text does read
- text does read like a list item
- "like a list item with `bar`"
- "`bar` as a subparagraph,"
- which may count in favor of the
- in favor of the proposal.
- "However, on this proposal"
- on this proposal indented
- code would have to be indented
- to be indented six spaces after
- six spaces after the list marker
- the list marker.  And this
- would break a lot of existing
- "lot of existing Markdown, which"
- "Markdown, which has the pattern:"
- "``` markdown"
- "1.  foo\n\n        indented code"
- "```"
- where the code is indented eight
- indented eight spaces.
- "The spec above, by contrast,"
- ", by contrast, will"
- "parse this text as expected,"
- "as expected, since the code"
- ", since the code block'"
- "'s indentation is measured"
- "from the beginning of `foo`."
- The one case that needs special
- needs special treatment is a
- treatment is a list item that
- "*starts*"
- with indented code.
- How much indentation is required
- "is required in that case, since"
- "we don't have a \"first paragraph"
- "\"first paragraph\""
- to measure from?
- "Rule #2 simply stipulates"
- "that in such cases, we require"
- ", we require one space"
- one space indentation from the
- from the list marker
- (and then the normal four spaces
- four spaces for the indented
- for the indented code).
- This will match the
- four-space rule in cases where
- in cases where the list marker
- the list marker plus its initial
- plus its initial indentation
- takes four spaces (a common case
- "(a common case), but diverge in"
- ", but diverge in other cases."
- "## Lists"
- "A [list](@)"
- is a sequence of one or more
- "list items [of the same type]"
- "].  The list items"
- may be separated by any number
- by any number of blank lines.
- Two list items are
- "[of the same type](@)"
- "if they begin with a ["
- "[list marker] of the same type."
- Two list markers are of the
- same type if (a) they are bullet
- they are bullet list markers
- list markers using the same
- " using the same character\n(`-`,"
- "(`-`, `+`, or `*`"
- ) or (b) they are ordered list
- are ordered list numbers with
- numbers with the same
- "delimiter (either `.` or `)`)."
- "A list is an [ordered list](@)"
- if its constituent list items
- " list items begin with\n["
- "[ordered list markers], and a"
- "], and a\n[bullet list](@)"
- if its constituent list
- "items begin with ["
- "[bullet list markers]."
- "The [start number](@)\nof an ["
- "of an [ordered list]"
- is determined by the list number
- the list number of
- its initial list item.
- The numbers of subsequent list
- subsequent list items are
- disregarded.
- "A list is [loose](@)"
- if any of its constituent
- list items are separated by
- "are separated by blank lines, or"
- "blank lines, or if any of its"
- or if any of its constituent
- list items directly contain two
- contain two block-level elements
- "-level elements with a blank"
- with a blank line
- between them.
- "Otherwise a list is [tight](@)."
- (The difference in HTML output
- in HTML output is that
- output is that paragraphs in a
- paragraphs in a loose list are
- "wrapped in `<p>`"
- "tags, while paragraphs in a"
- paragraphs in a tight list are
- a tight list are not.)
- Changing the bullet or ordered
- or ordered list delimiter starts
- "delimiter starts a new list:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n- bar\n+ baz\n.\n<ul>"
- "+ baz\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n<li>bar</li>\n</ul>"
- "</ul>\n<ul>\n<li>baz</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "1. foo\n2. bar\n3) baz\n.\n<ol>"
- "3) baz\n.\n<ol>\n<li>foo</li>"
- "<li>foo</li>\n<li>bar</li>\n</ol>"
- "</ol>\n<ol start=\"3\">"
- "<ol start=\"3\">\n<li>baz</li>"
- "<li>baz</li>\n</ol>"
- "````````````````````````````````"
- "In CommonMark, a list can"
- ", a list can interrupt a"
- can interrupt a paragraph.
- "That is,"
- no blank line is needed to
- is needed to separate a
- to separate a paragraph from a
- paragraph from a following
- "list:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo\n- bar\n- baz\n.\n<p>Foo</p>"
- ".\n<p>Foo</p>\n<ul>\n<li>bar</li>"
- "<li>bar</li>\n<li>baz</li>\n</ul>"
- "````````````````````````````````"
- "`Markdown.pl`"
- "does not allow this, through"
- "this, through fear of triggering"
- of triggering a list
- via a numeral in a hard-wrapped
- "a hard-wrapped line:"
- "``` markdown"
- The number of windows in my
- " of windows in my house is\n14."
- 14.  The number of doors is 6.
- "```"
- "Oddly, though, `Markdown.pl`"
- "`Markdown.pl` *does*"
- "*does* allow a blockquote to"
- "interrupt a paragraph, even"
- "paragraph, even though the same"
- though the same considerations
- " considerations might\napply."
- "In CommonMark, we do allow lists"
- do allow lists to interrupt
- "to interrupt paragraphs, for"
- two reasons.
- "First, it is natural and not"
- natural and not uncommon for
- not uncommon for people
- to start lists without blank
- "without blank lines:"
- "``` markdown"
- "I need to buy\n- new shoes"
- "- new shoes\n- a coat"
- "- a coat\n- a plane ticket\n```"
- "Second, we are attracted to a"
- "> [principle of uniformity](@):"
- ":\n>"
- if a chunk of text has a certain
- ">"
- "meaning, it will continue to"
- will continue to have the same
- to have the same meaning when
- " meaning when put into a\n>"
- container block (such as a list
- (such as a list item or
- a list item or blockquote).
- "(Indeed, the spec for ["
- "[list items] and [block quotes]"
- "[block quotes] presupposes"
- this principle.)
- This principle implies that if
- "``` markdown"
- "* I need to buy"
- "    - new shoes\n    - a coat"
- "    - a plane ticket\n```"
- is a list item containing a
- containing a paragraph followed
- "followed by a nested sublist,"
- as all Markdown implementations
- implementations agree it is (
- agree it is (though the
- is (though the paragraph
- "may be rendered without `<p>`"
- "`<p>` tags, since the list is \""
- "\"tight\"),\nthen"
- "``` markdown"
- "I need to buy\n- new shoes"
- "- new shoes\n- a coat"
- "- a coat\n- a plane ticket\n```"
- by itself should be a paragraph
- be a paragraph followed by a
- followed by a nested sublist.
- Since it is well established
- well established Markdown
- Markdown practice to allow lists
- to allow lists to
- interrupt paragraphs inside list
- "inside list items, the ["
- "[principle of\nuniformity]"
- requires us to allow this
- us to allow this outside list
- " outside list items as\nwell.  ("
- "[reStructuredText](https://"
- "https://docutils.sourceforge.net"
- /rst.html)
- "takes a different approach,"
- "approach, requiring blank lines"
- blank lines before lists
- even inside other list items.)
- In order to solve the problem of
- the problem of unwanted lists in
- lists in paragraphs with
- "hard-wrapped numerals, we allow"
- ", we allow only lists starting"
- "lists starting with `1` to"
- " to\ninterrupt paragraphs.  Thus,"
- "````````````````````````````````"
- "```````````````` example"
- The number of windows in my
- " of windows in my house is\n14."
- "14.  The number of doors is 6.\n."
- "<p>The number of windows in my"
- "of windows in my house is\n14."
- The number of doors is 6.</p>
- "````````````````````````````````"
- We may still get an unintended
- an unintended result in cases
- result in cases like
- "````````````````````````````````"
- "```````````````` example"
- The number of windows in my
- " of windows in my house is\n1."
- "1.  The number of doors is 6.\n."
- "<p>The number of windows in my"
- of windows in my house is</p>
- "<ol>"
- "<li>The number of doors is 6.</"
- " of doors is 6.</li>\n</ol>"
- "````````````````````````````````"
- but this rule should prevent
- should prevent most spurious
- most spurious list captures.
- There can be any number of blank
- number of blank lines between
- "lines between items:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n\n- bar\n\n\n- baz\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>\n</li>"
- "<p>foo</p>\n</li>\n<li>\n<p>bar</p>"
- "<li>\n<p>bar</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>baz</p>\n</li>"
- "<p>baz</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n  - bar\n    - baz"
- "    - baz\n\n\n      bim\n.\n<ul>"
- "      bim\n.\n<ul>\n<li>foo\n<ul>"
- "<li>foo\n<ul>\n<li>bar\n<ul>\n<li>"
- "<ul>\n<li>\n<p>baz</p>\n<p>bim</p>"
- "<p>bim</p>\n</li>\n</ul>\n</li>"
- "</ul>\n</li>\n</ul>\n</li>\n</ul>"
- "````````````````````````````````"
- To separate consecutive lists of
- "lists of the same type, or to"
- "same type, or to separate a"
- list from an indented code block
- code block that would otherwise
- would otherwise be parsed
- as a subparagraph of the final
- "of the final list item, you can"
- "item, you can insert a blank"
- " insert a blank HTML\ncomment:"
- "````````````````````````````````"
- "```````````````` example"
- "- foo\n- bar\n\n<!-- -->\n\n- baz"
- "<!-- -->\n\n- baz\n- bim\n.\n<ul>"
- "- bim\n.\n<ul>\n<li>foo</li>"
- "<li>foo</li>\n<li>bar</li>\n</ul>"
- "</ul>\n<!-- -->\n<ul>\n<li>baz</li>"
- "<li>baz</li>\n<li>bim</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "-   foo\n\n    notcode\n\n-   foo"
- "-   foo\n\n<!-- -->\n\n    code\n."
- "    code\n.\n<ul>\n<li>\n<p>foo</p>"
- "<li>\n<p>foo</p>\n<p>notcode</p>"
- "<p>notcode</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>foo</p>\n</li>"
- "<p>foo</p>\n</li>\n</ul>\n<!-- -->"
- "</ul>\n<!-- -->\n<pre><code>code"
- "<pre><code>code\n</code></pre>"
- "````````````````````````````````"
- List items need not be indented
- not be indented to the same
- to the same level.
- The following
- list items will be treated as
- be treated as items at the same
- "at the same list level,"
- since none is indented enough to
- enough to belong to the previous
- " to the previous list\nitem:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n - b\n  - c\n   - d\n  - e\n - f"
- "  - e\n - f\n- g\n.\n<ul>\n<li>a</li>"
- "<ul>\n<li>a</li>\n<li>b</li>"
- "<li>b</li>\n<li>c</li>\n<li>d</li>"
- "<li>d</li>\n<li>e</li>\n<li>f</li>"
- "<li>f</li>\n<li>g</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "1. a\n\n  2. b\n\n   3. c\n.\n<ol>"
- "   3. c\n.\n<ol>\n<li>\n<p>a</p>"
- "<li>\n<p>a</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>b</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>c</p>\n</li>\n</ol>"
- "````````````````````````````````"
- "Note, however, that list items"
- that list items may not be
- items may not be preceded by
- be preceded by more than
- three spaces of indentation.
- "Here `- e`"
- is treated as a paragraph
- as a paragraph continuation
- "line, because it is indented"
- it is indented more than three
- "more than three spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n - b\n  - c\n   - d\n    - e\n."
- "   - d\n    - e\n.\n<ul>\n<li>a</li>"
- "<ul>\n<li>a</li>\n<li>b</li>"
- "<li>b</li>\n<li>c</li>\n<li>d"
- "<li>c</li>\n<li>d\n- e</li>\n</ul>"
- "````````````````````````````````"
- "And here, `3. c`"
- is treated as in indented code
- "in indented code block,"
- because it is indented four
- is indented four spaces and
- four spaces and preceded by a
- blank line.
- "````````````````````````````````"
- "```````````````` example"
- "1. a\n\n  2. b\n\n    3. c\n.\n<ol>"
- "    3. c\n.\n<ol>\n<li>\n<p>a</p>"
- "<li>\n<p>a</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>b</p>\n</li>\n</ol>"
- "</li>\n</ol>\n<pre><code>3. c"
- "<pre><code>3. c\n</code></pre>"
- "````````````````````````````````"
- "This is a loose list, because"
- "list, because there is a blank"
- there is a blank line between
- "two of the list items:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n- b\n\n- c\n.\n<ul>\n<li>"
- "- c\n.\n<ul>\n<li>\n<p>a</p>\n</li>"
- "<p>a</p>\n</li>\n<li>\n<p>b</p>"
- "<li>\n<p>b</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>c</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "So is this, with a empty second"
- "a empty second item:"
- "````````````````````````````````"
- "```````````````` example"
- "* a\n*\n\n* c\n.\n<ul>\n<li>\n<p>a</p>"
- "<li>\n<p>a</p>\n</li>\n<li></li>"
- "</li>\n<li></li>\n<li>\n<p>c</p>"
- "<li>\n<p>c</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "These are loose lists, even"
- "lists, even though there are no"
- there are no blank lines between
- "lines between the items,"
- because one of the items
- one of the items directly
- items directly contains two
- contains two block-level
- two block-level elements
- "with a blank line between them:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n- b\n\n  c\n- d\n.\n<ul>\n<li>"
- "- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>"
- "<p>a</p>\n</li>\n<li>\n<p>b</p>"
- "<li>\n<p>b</p>\n<p>c</p>\n</li>"
- "<p>c</p>\n</li>\n<li>\n<p>d</p>"
- "<li>\n<p>d</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n- b\n\n  [ref]: /url\n- d\n."
- "- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>"
- "<p>a</p>\n</li>\n<li>\n<p>b</p>"
- "<li>\n<p>b</p>\n</li>\n<li>"
- "</li>\n<li>\n<p>d</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "This is a tight list, because"
- "list, because the blank lines"
- the blank lines are in a code
- "are in a code block:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n- ```\n  b\n\n\n  ```\n- c\n.\n<ul>"
- "  ```\n- c\n.\n<ul>\n<li>a</li>\n<li>"
- "<li>a</li>\n<li>\n<pre><code>b"
- "<pre><code>b\n\n\n</code></pre>"
- "</code></pre>\n</li>\n<li>c</li>"
- "</li>\n<li>c</li>\n</ul>"
- "````````````````````````````````"
- "This is a tight list, because"
- "list, because the blank line is"
- blank line is between two
- paragraphs of a sublist.
- So the sublist is loose while
- "the outer list is tight:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n  - b\n\n    c\n- d\n.\n<ul>"
- "    c\n- d\n.\n<ul>\n<li>a\n<ul>\n<li>"
- "<li>a\n<ul>\n<li>\n<p>b</p>"
- "<li>\n<p>b</p>\n<p>c</p>\n</li>"
- "<p>c</p>\n</li>\n</ul>\n</li>"
- "</ul>\n</li>\n<li>d</li>\n</ul>"
- "````````````````````````````````"
- "This is a tight list, because"
- "list, because the blank line is"
- blank line is inside the
- "block quote:"
- "````````````````````````````````"
- "```````````````` example"
- "* a\n  > b\n  >\n* c\n.\n<ul>\n<li>a"
- "* c\n.\n<ul>\n<li>a\n<blockquote>"
- "<blockquote>\n<p>b</p>"
- "<p>b</p>\n</blockquote>\n</li>"
- "</li>\n<li>c</li>\n</ul>"
- "````````````````````````````````"
- "This list is tight, because the"
- ", because the consecutive block"
- block elements
- are not separated by blank lines
- "by blank lines:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n  > b\n  ```\n  c\n  ```\n- d\n."
- "  c\n  ```\n- d\n.\n<ul>\n<li>a"
- "- d\n.\n<ul>\n<li>a\n<blockquote>"
- "<blockquote>\n<p>b</p>"
- "<p>b</p>\n</blockquote>"
- "</blockquote>\n<pre><code>c"
- "<pre><code>c\n</code></pre>\n</li>"
- "</li>\n<li>d</li>\n</ul>"
- "````````````````````````````````"
- A single-paragraph list is tight
- "list is tight:"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n.\n<ul>\n<li>a</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n  - b\n.\n<ul>\n<li>a\n<ul>"
- "<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>"
- "<li>b</li>\n</ul>\n</li>\n</ul>"
- "````````````````````````````````"
- "This list is loose, because of"
- ", because of the blank line"
- the blank line between the
- two block elements in the list
- "in the list item:"
- "````````````````````````````````"
- "```````````````` example"
- "1. ```\n   foo\n   ```\n\n   bar\n."
- "   ```\n\n   bar\n.\n<ol>\n<li>"
- ".\n<ol>\n<li>\n<pre><code>foo"
- "<pre><code>foo\n</code></pre>"
- "</code></pre>\n<p>bar</p>\n</li>"
- "<p>bar</p>\n</li>\n</ol>"
- "````````````````````````````````"
- "Here the outer list is loose,"
- "list is loose, the inner list"
- ", the inner list tight:"
- "````````````````````````````````"
- "```````````````` example"
- "* foo\n  * bar\n\n  baz\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>foo</p>\n<ul>"
- "<p>foo</p>\n<ul>\n<li>bar</li>"
- "<li>bar</li>\n</ul>\n<p>baz</p>"
- "</ul>\n<p>baz</p>\n</li>\n</ul>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "- a\n  - b\n  - c\n\n- d\n  - e\n  - f"
- "- d\n  - e\n  - f\n.\n<ul>\n<li>"
- ".\n<ul>\n<li>\n<p>a</p>\n<ul>"
- "<p>a</p>\n<ul>\n<li>b</li>"
- "<ul>\n<li>b</li>\n<li>c</li>\n</ul>"
- "<li>c</li>\n</ul>\n</li>\n<li>"
- "</ul>\n</li>\n<li>\n<p>d</p>\n<ul>"
- "<p>d</p>\n<ul>\n<li>e</li>"
- "<ul>\n<li>e</li>\n<li>f</li>\n</ul>"
- "<li>f</li>\n</ul>\n</li>\n</ul>"
- "````````````````````````````````"
- "# Inlines"
- Inlines are parsed sequentially
- sequentially from the beginning
- the beginning of the character
- stream to the end (left to right
- "(left to right, in left-to-right"
- in left-to-right languages).
- "Thus, for example, in"
- "````````````````````````````````"
- "```````````````` example"
- "`hi`lo`\n."
- ".\n<p><code>hi</code>lo`</p>"
- "````````````````````````````````"
- "`hi`"
- "is parsed as code, leaving the"
- ", leaving the backtick at the"
- backtick at the end as a literal
- backtick.
- "## Code spans"
- "A [backtick string](@)"
- is a string of one or more
- of one or more backtick
- or more backtick characters (
- "`` ` ``) that is neither"
- preceded nor followed by a
- followed by a backtick.
- "A [code span](@)"
- begins with a backtick string
- backtick string and ends with
- a backtick string of equal
- string of equal length.
- The contents of the code span
- of the code span are
- the characters between these two
- "these two backtick strings,"
- "strings, normalized in the"
- "following ways:"
- "- First, [line endings]"
- "[line endings] are converted to"
- "are converted to [spaces]."
- "-"
- If the resulting string both
- string both begins *and*
- "*and* ends with a [space]"
- "character, but does not consist"
- "does not consist entirely of ["
- "[space]\n  characters, a single ["
- "[space]"
- "] character is removed from the"
- front and back.
- This allows you to include code
- to include code that begins
- or ends with backtick characters
- "characters, which must be"
- ", which must be separated by"
- whitespace from the opening or
- the opening or closing backtick
- closing backtick strings.
- "This is a simple code span:"
- "````````````````````````````````"
- "```````````````` example"
- "`foo`\n.\n<p><code>foo</code></p>"
- "````````````````````````````````"
- "Here two backticks are used,"
- "are used, because the code"
- because the code contains a
- code contains a backtick.
- This example also illustrates
- also illustrates stripping of a
- stripping of a single leading
- a single leading and
- "trailing space:"
- "````````````````````````````````"
- "```````````````` example"
- "`` foo ` bar ``\n."
- ".\n<p><code>foo ` bar</code></p>"
- "````````````````````````````````"
- This example shows the
- shows the motivation for
- motivation for stripping leading
- " leading and trailing\nspaces:"
- "````````````````````````````````"
- "```````````````` example"
- "` `` `\n.\n<p><code>``</code></p>"
- "````````````````````````````````"
- Note that only *one*
- "*one* space is stripped:"
- "````````````````````````````````"
- "```````````````` example"
- "`  ``  `\n."
- ".\n<p><code> `` </code></p>"
- "````````````````````````````````"
- The stripping only happens if
- only happens if the space is on
- the space is on both
- "sides of the string:"
- "````````````````````````````````"
- "```````````````` example"
- "` a`\n.\n<p><code> a</code></p>"
- "````````````````````````````````"
- "Only [spaces], and not ["
- "], and not [unicode whitespace]"
- "] in general, are"
- "stripped in this way:"
- "````````````````````````````````"
- "```````````````` example"
- "` b `\n.\n<p><code> b </code></p>"
- "````````````````````````````````"
- No stripping occurs if the code
- if the code span contains only
- "contains only spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "` `\n`  `\n.\n<p><code> </code>"
- "<code>  </code></p>"
- "````````````````````````````````"
- "[Line endings]"
- "] are treated like spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "``\nfoo\nbar  \nbaz\n``\n."
- "<p><code>foo bar   baz</code></p"
- baz</code></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "``\nfoo \n``\n."
- "``\n.\n<p><code>foo </code></p>"
- "````````````````````````````````"
- Interior spaces are not
- "spaces are not collapsed:"
- "````````````````````````````````"
- "```````````````` example"
- "`foo   bar \nbaz`\n."
- "<p><code>foo   bar  baz</code></"
- baz</code></p>
- "````````````````````````````````"
- Note that browsers will
- browsers will typically collapse
- collapse consecutive spaces
- "when rendering `<code>`"
- "elements, so it is recommended"
- is recommended that
- "the following CSS be used:"
- "code{white-space: pre-wrap;}"
- Note that backslash escapes do
- escapes do not work in code
- not work in code spans.
- All backslashes
- "are treated literally:"
- "````````````````````````````````"
- "```````````````` example"
- "`foo\\`bar`\n."
- ".\n<p><code>foo\\</code>bar`</p>"
- "````````````````````````````````"
- Backslash escapes are never
- "are never needed, because one"
- ", because one can always choose"
- " always choose a\nstring of *n*"
- backtick characters as
- "characters as delimiters, where"
- ", where the code does"
- not contain any strings of
- any strings of exactly *n*
- "*n* backtick characters."
- "````````````````````````````````"
- "```````````````` example"
- "``foo`bar``\n."
- ".\n<p><code>foo`bar</code></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "` foo `` bar `\n."
- ".\n<p><code>foo `` bar</code></p>"
- "````````````````````````````````"
- Code span backticks have higher
- have higher precedence than any
- than any other inline
- constructs except HTML tags and
- HTML tags and autolinks.
- "Thus, for example, this is"
- "not parsed as emphasized text,"
- "emphasized text, since the"
- "text, since the second `*`"
- "`*` is part of a code\nspan:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo`*`\n."
- ".\n<p>*foo<code>*</code></p>"
- "````````````````````````````````"
- And this is not parsed as a link
- "parsed as a link:"
- "````````````````````````````````"
- "```````````````` example"
- "[not a `link](/foo`)\n."
- "<p>[not a <code>link](/foo</code"
- "link](/foo</code>)</p>"
- "````````````````````````````````"
- "Code spans, HTML tags, and"
- ", HTML tags, and autolinks have"
- autolinks have the same
- have the same precedence.
- "Thus, this is code:"
- "````````````````````````````````"
- "```````````````` example"
- "`<a href=\"`\">`\n."
- "<p><code>&lt;a href=&quot;</code"
- "=&quot;</code>&quot;&gt;`</p>"
- "````````````````````````````````"
- "But this is an HTML tag:"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"`\">`\n."
- ".\n<p><a href=\"`\">`</p>"
- "````````````````````````````````"
- "And this is code:"
- "````````````````````````````````"
- "```````````````` example"
- "`<https://foo.bar.`baz>`\n."
- "<p><code>&lt;https://foo.bar.</"
- "://foo.bar.</code>baz&gt;`</p>"
- "````````````````````````````````"
- "But this is an autolink:"
- "````````````````````````````````"
- "```````````````` example"
- "<https://foo.bar.`baz>`\n."
- "<p><a href=\"https://foo.bar.%"
- "://foo.bar.%60baz\">https://"
- "%60baz\">https://foo.bar.`baz</a>"
- "foo.bar.`baz</a>`</p>"
- "````````````````````````````````"
- When a backtick string is not
- string is not closed by a
- not closed by a matching
- "by a matching backtick string,"
- "we just have literal backticks:"
- "````````````````````````````````"
- "```````````````` example"
- "```foo``\n.\n<p>```foo``</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "`foo\n.\n<p>`foo</p>"
- "````````````````````````````````"
- The following case also
- case also illustrates the need
- the need for opening and
- closing backtick strings to be
- "strings to be equal in length:"
- "````````````````````````````````"
- "```````````````` example"
- "`foo``bar``\n."
- ".\n<p>`foo<code>bar</code></p>"
- "````````````````````````````````"
- "## Emphasis and strong emphasis"
- "John Gruber's original"
- "[Markdown syntax\ndescription"
- "](https://daringfireball.net/"
- "/projects/markdown/syntax#em)"
- "says:"
- "> Markdown treats asterisks (`*`"
- "`*`) and underscores (`_`"
- "`_`) as indicators of\n>"
- emphasis. Text wrapped with one
- "`*` or `_`"
- "`_` will be wrapped with an HTML"
- "> `<em>` tag; double `*`'s or"
- "`*`'s or `_`'"
- "'s will be wrapped with an HTML"
- "`<strong>`\n> tag."
- "This is enough for most users,"
- "for most users, but these rules"
- but these rules leave much
- "rules leave much undecided,"
- especially when it comes to
- when it comes to nested emphasis
- nested emphasis.  The original
- "`Markdown.pl`"
- test suite makes it clear that
- "it clear that triple `***` and"
- "`***` and\n`___`"
- delimiters can be used for
- "can be used for strong emphasis,"
- "strong emphasis, and most"
- implementations have also
- have also allowed the following
- "the following patterns:"
- "``` markdown"
- "***strong emph***"
- "***strong** in emph*"
- "***emph* in strong**"
- "**in strong *emph***"
- "*in emph **strong***\n```"
- The following patterns are less
- "are less widely supported, but"
- "supported, but the intent"
- is clear and they are useful (
- are useful (especially in
- (especially in contexts like
- in contexts like bibliography
- "entries):"
- "``` markdown"
- "*emph *with emph* in it*"
- "**strong **with strong** in it**"
- "```"
- Many implementations have also
- have also restricted intraword
- " intraword emphasis to\nthe `*`"
- "forms, to avoid unwanted"
- avoid unwanted emphasis in words
- in words containing
- internal underscores.
- (It is best practice to put
- practice to put these in code
- "spans, but users often do not.)"
- "``` markdown"
- "internal emphasis: foo*bar*baz"
- "no emphasis: foo_bar_baz\n```"
- The rules given below capture
- below capture all of these
- "all of these patterns, while"
- "patterns, while allowing"
- for efficient parsing strategies
- strategies that do not backtrack
- do not backtrack.
- "First, some definitions.  A"
- "[delimiter run](@) is either"
- "a sequence of one or more `*`"
- characters that is not preceded
- is not preceded or
- followed by a non-backslash-
- "a non-backslash-escaped `*`"
- "`*` character, or a sequence"
- "of one or more `_`"
- characters that is not preceded
- is not preceded or followed by
- "a non-backslash-escaped `_`"
- "`_` character."
- A
- "[left-flanking delimiter run](@)"
- " is\na [delimiter run]"
- "] that is (1) not followed by ["
- "[Unicode whitespace],"
- and either (2a) not followed by
- "not followed by a ["
- "[Unicode punctuation character]"
- "], or\n(2b) followed by a ["
- "[Unicode punctuation character]"
- "] and\npreceded by ["
- "preceded by [Unicode whitespace]"
- "] or a ["
- "[Unicode punctuation character]."
- "For purposes of this definition,"
- "this definition, the beginning"
- ", the beginning and the end of"
- the line count as Unicode
- count as Unicode whitespace.
- A
- "[right-flanking delimiter run](@"
- "delimiter run](@) is\na ["
- " is\na [delimiter run]"
- "] that is (1) not preceded by ["
- "[Unicode whitespace],"
- and either (2a) not preceded by
- "not preceded by a ["
- "[Unicode punctuation character]"
- "], or\n(2b) preceded by a ["
- "[Unicode punctuation character]"
- "] and\nfollowed by ["
- "followed by [Unicode whitespace]"
- "] or a ["
- "[Unicode punctuation character]."
- "For purposes of this definition,"
- "this definition, the beginning"
- ", the beginning and the end of"
- the line count as Unicode
- count as Unicode whitespace.
- Here are some examples of
- some examples of delimiter runs.
- "-"
- left-flanking but not right-
- "but not right-flanking:"
- "```\n    ***abc\n      _abc"
- "      _abc\n    **\"abc\""
- "    **\"abc\"\n     _\"abc\"\n    ```"
- "-"
- right-flanking but not left-
- "but not left-flanking:"
- "```\n     abc***\n     abc_"
- "     abc_\n    \"abc\"**\n    \"abc\"_"
- "    \"abc\"_\n    ```"
- "- Both left and right-flanking:"
- "    ```\n     abc***def"
- " abc***def\n    \"abc\"_\"def\""
- "    \"abc\"_\"def\"\n    ```"
- "-"
- "Neither left nor right-flanking:"
- "    ```\n    abc *** def"
- "abc *** def\n    a _ b\n    ```"
- (The idea of distinguishing left
- left-flanking and right-flanking
- delimiter runs based on the
- based on the character before
- character before and the
- before and the character
- after comes from Roopesh Chander
- "'s"
- "[vfmd](https://web.archive.org/"
- web.archive.org/web/
- "/web/20220608143320/http://"
- "/http://www.vfmd.org/vfmd-spec/"
- "/vfmd-spec/specification/#"
- "/specification/#procedure-for-"
- "/#procedure-for-identifying-"
- for-identifying-emphasis-tags).
- ".\nvfmd uses the terminology \""
- "\"emphasis indicator string\""
- "\" instead of \"delimiter\nrun,\""
- and its rules for distinguishing
- distinguishing left- and right-
- left- and right-flanking runs
- are a bit more complex than the
- complex than the ones given here
- ones given here.)
- The following rules define
- rules define emphasis and strong
- "and strong emphasis:"
- "1.  A single `*` character"
- "character [can open emphasis](@)"
- iff (if and only if) it is part
- "if) it is part of a ["
- "[left-flanking delimiter run]."
- "2.  A single `_` character ["
- "`_` character [can open emphasis"
- "] iff\n    it is part of a ["
- "[left-flanking delimiter run]"
- "and either (a) not part of a ["
- "[right-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[right-flanking delimiter run]"
- "]\n    preceded by a ["
- "[Unicode punctuation character]."
- "3.  A single `*` character"
- "[can close emphasis](@)"
- "iff it is part of a ["
- "[right-flanking delimiter run]."
- "4.  A single `_` character ["
- "character [can close emphasis]"
- "] iff\n    it is part of a ["
- "[right-flanking delimiter run]"
- "and either (a) not part of a ["
- "[left-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[left-flanking delimiter run]"
- "]\n    followed by a ["
- "[Unicode punctuation character]."
- "5.  A double `**`"
- "[can open strong emphasis](@)"
- "iff it is part of a ["
- "[left-flanking delimiter run]."
- "6.  A double `__` ["
- "`__` [can open strong emphasis]"
- "] iff\n    it is part of a ["
- "[left-flanking delimiter run]"
- "and either (a) not part of a ["
- "[right-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[right-flanking delimiter run]"
- "]\n    preceded by a ["
- "[Unicode punctuation character]."
- "7.  A double `**`"
- "[can close strong emphasis](@)"
- "iff it is part of a ["
- "[right-flanking delimiter run]."
- "8.  A double `__` ["
- "`__` [can close strong emphasis]"
- "] iff\n    it is part of a ["
- "[right-flanking delimiter run]"
- "and either (a) not part of a ["
- "[left-flanking delimiter run]"
- "]\n    or (b) part of a ["
- "[left-flanking delimiter run]"
- "]\n    followed by a ["
- "[Unicode punctuation character]."
- "9."
- Emphasis begins with a delimiter
- "with a delimiter that ["
- "[can open emphasis] and ends"
- "with a delimiter that ["
- "[can close emphasis]"
- "], and that uses the same"
- "character (`_` or `*`"
- ) as the opening delimiter.  The
- opening and closing delimiters
- delimiters must belong to
- " must belong to separate\n    ["
- "[delimiter runs]"
- "."
- If one of the delimiters can
- delimiters can both
- "open and close emphasis, then"
- "emphasis, then the sum of the"
- the sum of the lengths of the
- delimiter runs containing the
- containing the opening and
- the opening and closing
- and closing delimiters
- must not be a multiple of 3
- a multiple of 3 unless both
- of 3 unless both lengths are
- multiples of 3.
- "10."
- Strong emphasis begins with a
- begins with a delimiter that
- "[can open strong emphasis]"
- "] and ends with a delimiter that"
- "[can close strong emphasis]"
- ", and that uses the same"
- " uses the same character\n    ("
- "(`_` or `*`"
- ) as the opening delimiter.  The
- opening and closing delimiters
- delimiters must belong to
- " must belong to separate\n    ["
- "[delimiter runs]"
- "."
- If one of the delimiters can
- delimiters can both open
- "and close strong emphasis, then"
- "emphasis, then the sum of the"
- the sum of the lengths of
- the delimiter runs containing
- runs containing the opening and
- the opening and closing
- delimiters must not be a
- must not be a multiple of 3
- a multiple of 3 unless both
- of 3 unless both lengths
- are multiples of 3.
- "11. A literal `*`"
- character cannot occur at the
- occur at the beginning or end of
- "`*`-delimited emphasis or `**`"
- "-delimited strong emphasis,"
- "strong emphasis, unless it"
- is backslash-escaped.
- "12. A literal `_`"
- character cannot occur at the
- occur at the beginning or end of
- "`_`-delimited emphasis or `__`"
- "-delimited strong emphasis,"
- "strong emphasis, unless it"
- is backslash-escaped.
- Where rules 1--
- 12 above are compatible with
- compatible with multiple
- "with multiple parsings,"
- the following principles resolve
- "resolve ambiguity:"
- "13."
- The number of nestings should be
- should be minimized.
- "Thus, for example,"
- an interpretation
- "`<strong>...</strong>`"
- is always preferred to
- "`<em><em>...</em></em>`."
- 14. An interpretation
- "`<em><strong>...</strong></em>`"
- " is always\n    preferred to"
- "`<strong><em>...</em></strong>`."
- "15."
- When two potential emphasis or
- emphasis or strong emphasis
- "strong emphasis spans overlap,"
- so that the second begins before
- begins before the first ends and
- first ends and ends after
- "the first ends, the first takes"
- the first takes precedence.
- "Thus, for example,"
- "`*foo _bar* baz_` is parsed as"
- "`<em>foo _bar</em> baz_` rather"
- " rather\n    than"
- "than `*foo <em>bar* baz</em>`."
- "16."
- When there are two potential
- two potential emphasis or strong
- or strong emphasis spans
- "with the same closing delimiter,"
- "delimiter, the shorter one (the"
- shorter one (the one that
- opens later) takes precedence.
- "Thus, for example,"
- "`**foo **bar baz**` is parsed as"
- "`**foo <strong>bar baz</strong>`"
- rather than
- "`<strong>foo **bar baz</strong>`"
- "."
- "17."
- "Inline code spans, links, images"
- ", links, images, and HTML tags"
- ", and HTML tags group more"
- tags group more tightly
- than emphasis.
- "So, when there is a choice"
- is a choice between an
- between an interpretation
- that contains one of these
- one of these elements and one
- "elements and one that does not,"
- "that does not, the"
- former always wins.
- "Thus, for example,"
- "`*[foo*](bar)` is\n    parsed as"
- "`*<a href=\"bar\">foo*</a>`"
- rather than as
- "`<em>[foo</em>](bar)`."
- These rules can be illustrated
- be illustrated through a series
- through a series of examples.
- "Rule 1:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo bar*\n."
- ".\n<p><em>foo bar</em></p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the opening `*`"
- "`*` is followed by"
- "whitespace, and hence not part"
- "hence not part of a ["
- "[left-flanking delimiter run]:"
- "````````````````````````````````"
- "```````````````` example"
- "a * foo bar*\n."
- ".\n<p>a * foo bar*</p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the opening `*`"
- "`*` is preceded"
- by an alphanumeric and followed
- "and followed by punctuation, and"
- "punctuation, and hence"
- "not part of a ["
- "[left-flanking delimiter run]:"
- "````````````````````````````````"
- "```````````````` example"
- "a*\"foo\"*\n."
- ".\n<p>a*&quot;foo&quot;*</p>"
- "````````````````````````````````"
- Unicode nonbreaking spaces count
- "spaces count as whitespace, too:"
- "````````````````````````````````"
- "```````````````` example"
- "* a *\n.\n<p>* a *</p>"
- "````````````````````````````````"
- Unicode symbols count as
- "symbols count as punctuation,"
- "as punctuation, too:"
- "````````````````````````````````"
- "```````````````` example"
- "*$*alpha.\n\n*£*bravo."
- "*£*bravo.\n\n*€*charlie.\n."
- "*€*charlie.\n.\n<p>*$*alpha.</p>"
- "<p>*£*bravo.</p>"
- "<p>*€*charlie.</p>"
- "````````````````````````````````"
- "Intraword emphasis with `*`"
- "`*` is permitted:"
- "````````````````````````````````"
- "```````````````` example"
- "foo*bar*\n."
- ".\n<p>foo<em>bar</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "5*6*78\n.\n<p>5<em>6</em>78</p>"
- "````````````````````````````````"
- "Rule 2:"
- "````````````````````````````````"
- "```````````````` example"
- "_foo bar_\n."
- ".\n<p><em>foo bar</em></p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the opening `_`"
- "`_` is followed by\nwhitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "_ foo bar_\n.\n<p>_ foo bar_</p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the opening `_`"
- "`_` is preceded"
- by an alphanumeric and followed
- "and followed by punctuation:"
- "````````````````````````````````"
- "```````````````` example"
- "a_\"foo\"_\n."
- ".\n<p>a_&quot;foo&quot;_</p>"
- "````````````````````````````````"
- "Emphasis with `_`"
- "`_` is not allowed inside words:"
- "````````````````````````````````"
- "```````````````` example"
- "foo_bar_\n.\n<p>foo_bar_</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "5_6_78\n.\n<p>5_6_78</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "пристаням_стремятся_\n."
- ".\n<p>пристаням_стремятся_</p>"
- "````````````````````````````````"
- "Here `_`"
- "does not generate emphasis,"
- "emphasis, because the first"
- the first delimiter run
- is right-flanking and the second
- "and the second left-flanking:"
- "````````````````````````````````"
- "```````````````` example"
- "aa_\"bb\"_cc\n."
- ".\n<p>aa_&quot;bb&quot;_cc</p>"
- "````````````````````````````````"
- "This is emphasis, even though"
- ", even though the opening"
- the opening delimiter is
- "both left- and right-flanking,"
- "right-flanking, because it is"
- ", because it is preceded by"
- "punctuation:"
- "````````````````````````````````"
- "```````````````` example"
- "foo-_(bar)_\n."
- ".\n<p>foo-<em>(bar)</em></p>"
- "````````````````````````````````"
- "Rule 3:"
- "This is not emphasis, because"
- ", because the closing delimiter"
- delimiter does
- "not match the opening delimiter:"
- "````````````````````````````````"
- "```````````````` example"
- "_foo*\n.\n<p>_foo*</p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the closing `*`"
- "`*` is preceded by\nwhitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo bar *\n.\n<p>*foo bar *</p>"
- "````````````````````````````````"
- A line ending also counts as
- "also counts as whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo bar\n*\n.\n<p>*foo bar\n*</p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the second `*` is"
- preceded by punctuation and
- punctuation and followed by an
- followed by an alphanumeric
- "(hence it is not part of a ["
- "[right-flanking delimiter run]:"
- "````````````````````````````````"
- "```````````````` example"
- "*(*foo)\n.\n<p>*(*foo)</p>"
- "````````````````````````````````"
- The point of this restriction is
- restriction is more easily
- is more easily appreciated
- "with this example:"
- "````````````````````````````````"
- "```````````````` example"
- "*(*foo*)*\n."
- ".\n<p><em>(<em>foo</em>)</em></p>"
- "````````````````````````````````"
- "Intraword emphasis with `*`"
- "`*` is allowed:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo*bar\n."
- ".\n<p><em>foo</em>bar</p>"
- "````````````````````````````````"
- "Rule 4:"
- "This is not emphasis, because"
- ", because the closing `_`"
- "`_` is preceded by\nwhitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "_foo bar _\n.\n<p>_foo bar _</p>"
- "````````````````````````````````"
- "This is not emphasis, because"
- ", because the second `_` is"
- preceded by punctuation and
- punctuation and followed by an
- "followed by an alphanumeric:"
- "````````````````````````````````"
- "```````````````` example"
- "_(_foo)\n.\n<p>_(_foo)</p>"
- "````````````````````````````````"
- This is emphasis within emphasis
- "within emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "_(_foo_)_\n."
- ".\n<p><em>(<em>foo</em>)</em></p>"
- "````````````````````````````````"
- Intraword emphasis is disallowed
- "is disallowed for `_`:"
- "````````````````````````````````"
- "```````````````` example"
- "_foo_bar\n.\n<p>_foo_bar</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_пристаням_стремятся\n."
- ".\n<p>_пристаням_стремятся</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_foo_bar_baz_\n."
- ".\n<p><em>foo_bar_baz</em></p>"
- "````````````````````````````````"
- "This is emphasis, even though"
- ", even though the closing"
- the closing delimiter is
- "both left- and right-flanking,"
- "right-flanking, because it is"
- ", because it is followed by"
- "punctuation:"
- "````````````````````````````````"
- "```````````````` example"
- "_(bar)_.\n."
- ".\n<p><em>(bar)</em>.</p>"
- "````````````````````````````````"
- "Rule 5:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo bar**\n."
- "<p><strong>foo bar</strong></p>"
- "````````````````````````````````"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the opening delimiter"
- delimiter is
- "followed by whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "** foo bar**\n."
- ".\n<p>** foo bar**</p>"
- "````````````````````````````````"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the opening `**`"
- "`**` is preceded"
- by an alphanumeric and followed
- "and followed by punctuation, and"
- "punctuation, and hence"
- "not part of a ["
- "[left-flanking delimiter run]:"
- "````````````````````````````````"
- "```````````````` example"
- "a**\"foo\"**\n."
- ".\n<p>a**&quot;foo&quot;**</p>"
- "````````````````````````````````"
- Intraword strong emphasis with
- "`**` is permitted:"
- "````````````````````````````````"
- "```````````````` example"
- "foo**bar**\n."
- ".\n<p>foo<strong>bar</strong></p>"
- "````````````````````````````````"
- "Rule 6:"
- "````````````````````````````````"
- "```````````````` example"
- "__foo bar__\n."
- "<p><strong>foo bar</strong></p>"
- "````````````````````````````````"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the opening delimiter"
- delimiter is
- "followed by whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "__ foo bar__\n."
- ".\n<p>__ foo bar__</p>"
- "````````````````````````````````"
- A line ending counts as
- "ending counts as whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "__\nfoo bar__\n.\n<p>__"
- ".\n<p>__\nfoo bar__</p>"
- "````````````````````````````````"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the opening `__`"
- "`__` is preceded"
- by an alphanumeric and followed
- "and followed by punctuation:"
- "````````````````````````````````"
- "```````````````` example"
- "a__\"foo\"__\n."
- ".\n<p>a__&quot;foo&quot;__</p>"
- "````````````````````````````````"
- Intraword strong emphasis is
- "emphasis is forbidden with `__`:"
- "````````````````````````````````"
- "```````````````` example"
- "foo__bar__\n.\n<p>foo__bar__</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "5__6__78\n.\n<p>5__6__78</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "пристаням__стремятся__\n."
- ".\n<p>пристаням__стремятся__</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo, __bar__, baz__\n."
- "<p><strong>foo, <strong>bar</"
- ", <strong>bar</strong>, baz</"
- "</strong>, baz</strong></p>"
- "````````````````````````````````"
- "This is strong emphasis, even"
- "emphasis, even though the"
- even though the opening
- the opening delimiter is
- "both left- and right-flanking,"
- "right-flanking, because it is"
- ", because it is preceded by"
- "punctuation:"
- "````````````````````````````````"
- "```````````````` example"
- "foo-__(bar)__\n."
- "<p>foo-<strong>(bar)</strong></p"
- bar)</strong></p>
- "````````````````````````````````"
- "Rule 7:"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the closing delimiter"
- delimiter is preceded
- "by whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo bar **\n."
- ".\n<p>**foo bar **</p>"
- "````````````````````````````````"
- (Nor can it be interpreted as an
- "as an emphasized `*foo bar *`"
- "`*foo bar *`, because of"
- ", because of\nRule 11.)"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the second `**` is"
- preceded by punctuation and
- punctuation and followed by an
- "followed by an alphanumeric:"
- "````````````````````````````````"
- "```````````````` example"
- "**(**foo)\n.\n<p>**(**foo)</p>"
- "````````````````````````````````"
- The point of this restriction is
- restriction is more easily
- is more easily appreciated
- "with these examples:"
- "````````````````````````````````"
- "```````````````` example"
- "*(**foo**)*\n."
- "<p><em>(<strong>foo</strong>)</"
- ">foo</strong>)</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**Gomphocarpus (*Gomphocarpus"
- "(*Gomphocarpus physocarpus*, syn"
- "*, syn."
- "*Asclepias physocarpa*)**\n."
- "<p><strong>Gomphocarpus (<em>"
- (<em>Gomphocarpus physocarpus</
- "physocarpus</em>, syn."
- "<em>Asclepias physocarpa</em>)</"
- "</em>)</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo \"*bar*\" foo**\n."
- "<p><strong>foo &quot;<em>bar</em"
- quot;<em>bar</em>&quot; foo</
- /em>&quot; foo</strong></p>
- "````````````````````````````````"
- "Intraword emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo**bar\n."
- ".\n<p><strong>foo</strong>bar</p>"
- "````````````````````````````````"
- "Rule 8:"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the closing delimiter"
- delimiter is
- "preceded by whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "__foo bar __\n."
- ".\n<p>__foo bar __</p>"
- "````````````````````````````````"
- "This is not strong emphasis,"
- "strong emphasis, because the"
- ", because the second `__` is"
- preceded by punctuation and
- punctuation and followed by an
- "followed by an alphanumeric:"
- "````````````````````````````````"
- "```````````````` example"
- "__(__foo)\n.\n<p>__(__foo)</p>"
- "````````````````````````````````"
- The point of this restriction is
- restriction is more easily
- is more easily appreciated
- "with this example:"
- "````````````````````````````````"
- "```````````````` example"
- "_(__foo__)_\n."
- "<p><em>(<strong>foo</strong>)</"
- ">foo</strong>)</em></p>"
- "````````````````````````````````"
- Intraword strong emphasis is
- "emphasis is forbidden with `__`:"
- "````````````````````````````````"
- "```````````````` example"
- "__foo__bar\n.\n<p>__foo__bar</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__пристаням__стремятся\n."
- ".\n<p>__пристаням__стремятся</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo__bar__baz__\n."
- "<p><strong>foo__bar__baz</strong"
- "</strong></p>"
- "````````````````````````````````"
- "This is strong emphasis, even"
- "emphasis, even though the"
- even though the closing
- the closing delimiter is
- "both left- and right-flanking,"
- "right-flanking, because it is"
- ", because it is followed by"
- "punctuation:"
- "````````````````````````````````"
- "```````````````` example"
- "__(bar)__.\n."
- ".\n<p><strong>(bar)</strong>.</p>"
- "````````````````````````````````"
- "Rule 9:"
- Any nonempty sequence of inline
- of inline elements can be the
- can be the contents of an
- emphasized span.
- "````````````````````````````````"
- "```````````````` example"
- "*foo [bar](/url)*\n."
- "<p><em>foo <a href=\"/url\">bar</a"
- "=\"/url\">bar</a></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo\nbar*\n.\n<p><em>foo"
- ".\n<p><em>foo\nbar</em></p>"
- "````````````````````````````````"
- "In particular, emphasis and"
- ", emphasis and strong emphasis"
- strong emphasis can be nested
- "inside emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "_foo __bar__ baz_\n."
- "<p><em>foo <strong>bar</strong>"
- ">bar</strong> baz</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_foo _bar_ baz_\n."
- "<p><em>foo <em>bar</em> baz</em>"
- "</em> baz</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo_ bar_\n."
- "<p><em><em>foo</em> bar</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo *bar**\n."
- "<p><em>foo <em>bar</em></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo **bar** baz*\n."
- "<p><em>foo <strong>bar</strong>"
- ">bar</strong> baz</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo**bar**baz*\n."
- "<p><em>foo<strong>bar</strong>"
- ">bar</strong>baz</em></p>"
- "````````````````````````````````"
- "Note that in the preceding case,"
- "preceding case, the"
- "case, the interpretation"
- "``` markdown"
- "<p><em>foo</em><em>bar<em></em>"
- "<em>bar<em></em>baz</em></p>\n```"
- is precluded by the condition
- by the condition that a
- condition that a delimiter that
- can both open and close (like
- "and close (like the `*` after"
- "`*` after `foo`)"
- cannot form emphasis if the sum
- if the sum of the lengths of
- the delimiter runs containing
- runs containing the opening and
- closing delimiters is a multiple
- is a multiple of 3 unless
- both lengths are multiples of 3.
- "For the same reason, we don'"
- "'t get two consecutive"
- emphasis sections in this
- "sections in this example:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo**bar*\n."
- ".\n<p><em>foo**bar</em></p>"
- "````````````````````````````````"
- The same condition ensures that
- ensures that the following
- cases are all strong emphasis
- strong emphasis nested inside
- "emphasis, even when the interior"
- the interior whitespace is
- "omitted:"
- "````````````````````````````````"
- "```````````````` example"
- "***foo** bar*\n."
- "<p><em><strong>foo</strong> bar<"
- "</strong> bar</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo **bar***\n."
- "<p><em>foo <strong>bar</strong><"
- ">bar</strong></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo**bar***\n."
- "<p><em>foo<strong>bar</strong></"
- ">bar</strong></em></p>"
- "````````````````````````````````"
- When the lengths of the interior
- of the interior closing and
- closing and opening
- delimiter runs are *both*
- "*both* multiples of 3, though,"
- they can match to create
- "match to create emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "foo***bar***baz\n."
- "<p>foo<em><strong>bar</strong></"
- ">bar</strong></em>baz</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo******bar*********baz\n."
- "<p>foo<strong><strong><strong>"
- "<strong><strong>bar</strong></"
- ">bar</strong></strong></strong>*"
- "></strong>***baz</p>"
- "````````````````````````````````"
- Indefinite levels of nesting are
- "of nesting are possible:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo **bar *baz* bim** bop*\n."
- "<p><em>foo <strong>bar <em>baz</"
- ">bar <em>baz</em> bim</strong>"
- em> bim</strong> bop</em></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo [*bar*](/url)*\n."
- "<p><em>foo <a href=\"/url\"><em>"
- "href=\"/url\"><em>bar</em></a></em"
- bar</em></a></em></p>
- "````````````````````````````````"
- There can be no empty emphasis
- empty emphasis or strong
- "or strong emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "** is not an empty emphasis\n."
- "<p>** is not an empty emphasis</"
- empty emphasis</p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**** is not an empty strong"
- " an empty strong emphasis\n."
- "<p>**** is not an empty strong"
- an empty strong emphasis</p>
- "````````````````````````````````"
- "Rule 10:"
- Any nonempty sequence of inline
- of inline elements can be the
- can be the contents of an
- strongly emphasized span.
- "````````````````````````````````"
- "```````````````` example"
- "**foo [bar](/url)**\n."
- "<p><strong>foo <a href=\"/url\">"
- "<a href=\"/url\">bar</a></strong><"
- "</a></strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo\nbar**\n.\n<p><strong>foo"
- "<p><strong>foo\nbar</strong></p>"
- "````````````````````````````````"
- "In particular, emphasis and"
- ", emphasis and strong emphasis"
- strong emphasis can be nested
- "inside strong emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "__foo _bar_ baz__\n."
- "<p><strong>foo <em>bar</em> baz<"
- em>bar</em> baz</strong></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo __bar__ baz__\n."
- "<p><strong>foo <strong>bar</"
- "<strong>bar</strong> baz</strong"
- "> baz</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "____foo__ bar__\n."
- "<p><strong><strong>foo</strong>"
- ">foo</strong> bar</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo **bar****\n."
- "<p><strong>foo <strong>bar</"
- "<strong>bar</strong></strong></p"
- "></strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo *bar* baz**\n."
- "<p><strong>foo <em>bar</em> baz<"
- em>bar</em> baz</strong></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo*bar*baz**\n."
- "<p><strong>foo<em>bar</em>baz</"
- em>bar</em>baz</strong></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "***foo* bar**\n."
- "<p><strong><em>foo</em> bar</"
- ">foo</em> bar</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo *bar***\n."
- "<p><strong>foo <em>bar</em></"
- "<em>bar</em></strong></p>"
- "````````````````````````````````"
- Indefinite levels of nesting are
- "of nesting are possible:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo *bar **baz**\nbim* bop**\n."
- "<p><strong>foo <em>bar <strong>"
- "<em>bar <strong>baz</strong>"
- bim</em> bop</strong></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo [*bar*](/url)**\n."
- "<p><strong>foo <a href=\"/url\"><"
- "<a href=\"/url\"><em>bar</em></a><"
- em>bar</em></a></strong></p>
- "````````````````````````````````"
- There can be no empty emphasis
- empty emphasis or strong
- "or strong emphasis:"
- "````````````````````````````````"
- "```````````````` example"
- "__ is not an empty emphasis\n."
- "<p>__ is not an empty emphasis</"
- empty emphasis</p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- ____ is not an empty strong
- " an empty strong emphasis\n."
- "<p>____ is not an empty strong"
- an empty strong emphasis</p>
- "````````````````````````````````"
- "Rule 11:"
- "````````````````````````````````"
- "```````````````` example"
- "foo ***\n.\n<p>foo ***</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo *\\**\n.\n<p>foo <em>*</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo *_*\n.\n<p>foo <em>_</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo *****\n.\n<p>foo *****</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo **\\***\n."
- ".\n<p>foo <strong>*</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo **_**\n."
- ".\n<p>foo <strong>_</strong></p>"
- "````````````````````````````````"
- Note that when delimiters do not
- "do not match evenly, Rule 11"
- "evenly, Rule 11 determines"
- "that the excess literal `*`"
- characters will appear outside
- appear outside of the
- "emphasis, rather than inside it:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo*\n.\n<p>*<em>foo</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo**\n.\n<p><em>foo</em>*</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "***foo**\n."
- ".\n<p>*<strong>foo</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "****foo*\n."
- ".\n<p>***<em>foo</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**foo***\n."
- ".\n<p><strong>foo</strong>*</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo****\n."
- ".\n<p><em>foo</em>***</p>"
- "````````````````````````````````"
- "Rule 12:"
- "````````````````````````````````"
- "```````````````` example"
- "foo ___\n.\n<p>foo ___</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo _\\__\n.\n<p>foo <em>_</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo _*_\n.\n<p>foo <em>*</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo _____\n.\n<p>foo _____</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo __\\___\n."
- ".\n<p>foo <strong>_</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo __*__\n."
- ".\n<p>foo <strong>*</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo_\n.\n<p>_<em>foo</em></p>"
- "````````````````````````````````"
- Note that when delimiters do not
- "do not match evenly, Rule 12"
- "evenly, Rule 12 determines"
- "that the excess literal `_`"
- characters will appear outside
- appear outside of the
- "emphasis, rather than inside it:"
- "````````````````````````````````"
- "```````````````` example"
- "_foo__\n.\n<p><em>foo</em>_</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "___foo__\n."
- ".\n<p>_<strong>foo</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "____foo_\n."
- ".\n<p>___<em>foo</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo___\n."
- ".\n<p><strong>foo</strong>_</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_foo____\n."
- ".\n<p><em>foo</em>___</p>"
- "````````````````````````````````"
- Rule 13 implies that if you want
- that if you want emphasis nested
- emphasis nested directly inside
- "emphasis, you must use different"
- "use different delimiters:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo**\n."
- ".\n<p><strong>foo</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*_foo_*\n."
- ".\n<p><em><em>foo</em></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__foo__\n."
- ".\n<p><strong>foo</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_*foo*_\n."
- ".\n<p><em><em>foo</em></em></p>"
- "````````````````````````````````"
- "However, strong emphasis within"
- emphasis within strong emphasis
- strong emphasis is possible
- is possible without
- "switching delimiters:"
- "````````````````````````````````"
- "```````````````` example"
- "****foo****\n."
- "<p><strong><strong>foo</strong><"
- ">foo</strong></strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "____foo____\n."
- "<p><strong><strong>foo</strong><"
- ">foo</strong></strong></p>"
- "````````````````````````````````"
- Rule 13 can be applied to
- be applied to arbitrarily long
- arbitrarily long sequences of
- "delimiters:"
- "````````````````````````````````"
- "```````````````` example"
- "******foo******\n."
- "<p><strong><strong><strong>foo</"
- "><strong>foo</strong></strong></"
- "></strong></strong></p>"
- "````````````````````````````````"
- "Rule 14:"
- "````````````````````````````````"
- "```````````````` example"
- "***foo***\n."
- "<p><em><strong>foo</strong></em>"
- "</strong></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_____foo_____\n."
- "<p><em><strong><strong>foo</"
- "><strong>foo</strong></strong></"
- "></strong></em></p>"
- "````````````````````````````````"
- "Rule 15:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo _bar* baz_\n."
- ".\n<p><em>foo _bar</em> baz_</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo __bar *baz bim__ bam*\n."
- "<p><em>foo <strong>bar *baz bim<"
- ">bar *baz bim</strong> bam</em><"
- "> bam</em></p>"
- "````````````````````````````````"
- "Rule 16:"
- "````````````````````````````````"
- "```````````````` example"
- "**foo **bar baz**\n."
- "<p>**foo <strong>bar baz</strong"
- ">bar baz</strong></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo *bar baz*\n."
- ".\n<p>*foo <em>bar baz</em></p>"
- "````````````````````````````````"
- "Rule 17:"
- "````````````````````````````````"
- "```````````````` example"
- "*[bar*](/url)\n."
- "<p>*<a href=\"/url\">bar*</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_foo [bar_](/url)\n."
- "<p>_foo <a href=\"/url\">bar_</a><"
- "\"/url\">bar_</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*<img src=\"foo\" title=\"*\"/>\n."
- "<p>*<img src=\"foo\" title=\"*\"/></"
- "\" title=\"*\"/></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**<a href=\"**\">\n."
- ".\n<p>**<a href=\"**\"></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__<a href=\"__\">\n."
- ".\n<p>__<a href=\"__\"></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*a `*`*\n."
- "<p><em>a <code>*</code></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "_a `_`_\n."
- "<p><em>a <code>_</code></em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "**a<https://foo.bar/?q=**>\n."
- "<p>**a<a href=\"https://foo.bar/?"
- "q=**\">https://foo.bar/?"
- q=**</a></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "__a<https://foo.bar/?q=__>\n."
- "<p>__a<a href=\"https://foo.bar/?"
- "q=__\">https://foo.bar/?"
- q=__</a></p>
- "````````````````````````````````"
- "## Links"
- "A link contains [link text]"
- "link text] (the visible text), a"
- "[link destination]"
- (the URI that is the link
- "that is the link destination),"
- "destination), and optionally a ["
- "[link title]."
- There are two basic kinds of
- basic kinds of links in Markdown
- "in Markdown.  In [inline links]"
- "[inline links] the"
- destination and title are given
- title are given immediately
- immediately after the link text.
- "In\n[reference links]"
- the destination and title are
- and title are defined elsewhere
- " elsewhere in\nthe document."
- "A [link text](@)"
- consists of a sequence of zero
- sequence of zero or more
- inline elements enclosed by
- "enclosed by square brackets (`[`"
- "`[` and `]`).  The"
- ").  The\nfollowing rules apply:"
- "-"
- Links may not contain other
- "contain other links, at any"
- "links, at any level of nesting."
- If
- multiple otherwise valid link
- valid link definitions appear
- appear nested inside each
- "other, the inner-most definition"
- "-most definition is used."
- "- Brackets are allowed in the ["
- "[link text] only if (a) they"
- are backslash-escaped or (b)
- "-escaped or (b) they appear as a"
- they appear as a matched pair of
- "matched pair of brackets,"
- "with an open bracket `[`"
- ", a sequence of zero or more"
- "of zero or more inlines, and"
- "a close bracket `]`."
- "- Backtick [code spans], ["
- "[code spans], [autolinks]"
- "], [autolinks], and raw ["
- "], and raw [HTML tags]"
- "[HTML tags] bind more tightly"
- than the brackets in link text.
- "Thus, for example,"
- "`` [foo`]` ``"
- "could not be a link text, since"
- "link text, since the second `]`"
- "`]`\n  is part of a code span."
- "-"
- The brackets in link text bind
- link text bind more tightly than
- " tightly than markers for\n  ["
- "[emphasis and strong emphasis]"
- "]. Thus, for example,"
- "`*[foo*](url)` is a link."
- "A [link destination](@)"
- consists of either
- "-"
- a sequence of zero or more
- of zero or more characters
- more characters between an
- "between an opening `<` and a"
- "`<` and a\n  closing `>`"
- that contains no line endings or
- " line endings or unescaped\n  `<`"
- "`<` or `>` characters, or"
- "-"
- a nonempty sequence of
- sequence of characters that does
- "that does not start with `<`,"
- "`<`,\n  does not include ["
- "[ASCII control characters]["
- "][ASCII control character]\n  or"
- "]\n  or [space]"
- "character, and includes"
- ", and includes parentheses only"
- parentheses only if (a) they are
- backslash-escaped or (b) they
- or (b) they are part of a
- are part of a balanced pair of
- unescaped parentheses.
- (Implementations may impose
- may impose limits on parentheses
- on parentheses nesting to
- "avoid performance issues, but at"
- "issues, but at least three"
- at least three levels of nesting
- should be supported.)
- "A [link title](@)"
- consists of either
- "-"
- a sequence of zero or more
- of zero or more characters
- more characters between straight
- between straight double-quote
- "characters (`\"`), including a"
- "), including a `\"`"
- "`\"` character only if it is"
- "backslash-escaped, or"
- "-"
- a sequence of zero or more
- of zero or more characters
- more characters between straight
- between straight single-quote
- "characters (`'`), including a"
- "), including a `'`"
- "`'` character only if it is"
- "backslash-escaped, or"
- "-"
- a sequence of zero or more
- of zero or more characters
- more characters between matching
- between matching parentheses
- "(`(...)`), including a `(` or"
- "`(` or `)`"
- "or `)` character only if it is"
- backslash-escaped.
- "Although [link titles]"
- "may span multiple lines, they"
- " lines, they may not contain\na ["
- "a [blank line]."
- "An [inline link](@)"
- "[inline link](@) consists of a ["
- "consists of a [link text]"
- "[link text] followed immediately"
- "by a left parenthesis `(`"
- "`(`, an optional ["
- ", an optional [link destination]"
- "], an optional\n[link title]"
- "], and a right parenthesis `)`."
- These four components may be
- "may be separated by spaces, tabs"
- "by spaces, tabs, and up to one"
- ", and up to one line\nending."
- "ending.\nIf both ["
- "If both [link destination] and ["
- "] and [link title]"
- "[link title] are present, they"
- "*must* be"
- "separated by spaces, tabs, and"
- ", tabs, and up to one line"
- up to one line ending.
- "The link'"
- s text consists of the inlines
- " of the inlines contained\nin the"
- "in the [link text]"
- (excluding the enclosing square
- enclosing square brackets).
- "The link'"
- s URI consists of the link
- "of the link destination,"
- "destination, excluding enclosing"
- "`<...>`"
- "if present, with backslash-"
- with backslash-escapes in effect
- in effect as described
- "above.  The link'"
- s title consists of the link
- "of the link title, excluding its"
- "enclosing delimiters, with"
- "delimiters, with backslash-"
- with backslash-escapes in effect
- " in effect as described\nabove."
- "Here is a simple inline link:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/uri \"title\")\n."
- "<p><a href=\"/uri\" title=\"title\">"
- "\" title=\"title\">link</a></p>"
- "````````````````````````````````"
- "The title, the link text and"
- link text and even
- "the destination may be omitted:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/uri)\n."
- ".\n<p><a href=\"/uri\">link</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[](./target.md)\n."
- "<p><a href=\"./target.md\"></a></p"
- "\"></a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link]()\n."
- ".\n<p><a href=\"\">link</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link](<>)\n."
- ".\n<p><a href=\"\">link</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[]()\n.\n<p><a href=\"\"></a></p>"
- "````````````````````````````````"
- The destination can only contain
- can only contain spaces if it is
- "enclosed in pointy brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/my uri)\n."
- ".\n<p>[link](/my uri)</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link](</my uri>)\n."
- "<p><a href=\"/my%20uri\">link</a><"
- "20uri\">link</a></p>"
- "````````````````````````````````"
- The destination cannot contain
- "cannot contain line endings,"
- even if enclosed in pointy
- "in pointy brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo\nbar)\n.\n<p>[link](foo"
- ".\n<p>[link](foo\nbar)</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link](<foo\nbar>)\n."
- "bar>)\n.\n<p>[link](<foo\nbar>)</p>"
- "````````````````````````````````"
- "The destination can contain `)`"
- "`)` if it is enclosed"
- "in pointy brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "[a](<b)c>)\n."
- ".\n<p><a href=\"b)c\">a</a></p>"
- "````````````````````````````````"
- Pointy brackets that enclose
- that enclose links must be
- "links must be unescaped:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](<foo\\>)\n."
- ".\n<p>[link](&lt;foo&gt;)</p>"
- "````````````````````````````````"
- "These are not links, because the"
- ", because the opening pointy"
- opening pointy bracket
- "is not matched properly:"
- "````````````````````````````````"
- "```````````````` example"
- "[a](<b)c\n[a](<b)c>\n[a](<b>c)\n."
- "[a](<b>c)\n.\n<p>[a](&lt;b)c"
- ".\n<p>[a](&lt;b)c\n[a](&lt;b)c&gt;"
- "[a](&lt;b)c&gt;\n[a](<b>c)</p>"
- "````````````````````````````````"
- Parentheses inside the link
- inside the link destination may
- "destination may be escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](\\(foo\\))\n."
- "<p><a href=\"(foo)\">link</a></p>"
- "````````````````````````````````"
- Any number of parentheses are
- parentheses are allowed without
- "allowed without escaping, as"
- "escaping, as long as they are"
- "balanced:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo(and(bar)))\n."
- "<p><a href=\"foo(and(bar))\">link<"
- "and(bar))\">link</a></p>"
- "````````````````````````````````"
- "However, if you have unbalanced"
- "have unbalanced parentheses, you"
- "parentheses, you need to escape"
- need to escape or use the
- "`<...>` form:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo(and(bar))\n."
- ".\n<p>[link](foo(and(bar))</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo\\(and\\(bar\\))\n."
- "<p><a href=\"foo(and(bar)\">link</"
- "and(bar)\">link</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link](<foo(and(bar)>)\n."
- "<p><a href=\"foo(and(bar)\">link</"
- "and(bar)\">link</a></p>"
- "````````````````````````````````"
- Parentheses and other symbols
- other symbols can also be
- "can also be escaped, as usual"
- "in Markdown:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo\\)\\:)\n."
- "<p><a href=\"foo):\">link</a></p>"
- "````````````````````````````````"
- A link can contain fragment
- contain fragment identifiers and
- "identifiers and queries:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](#fragment)"
- "[link](https://example.com#"
- "://example.com#fragment)"
- "[link](https://example.com?"
- "foo=3#frag)\n."
- "<p><a href=\"#fragment\">link</a><"
- "\">link</a></p>"
- "<p><a href=\"https://example.com#"
- "://example.com#fragment\">link</a"
- "\">link</a></p>"
- "<p><a href=\"https://example.com?"
- "foo=3#frag\">link</a></p>"
- "````````````````````````````````"
- Note that a backslash before a
- before a non-escapable character
- " character is\njust a backslash:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo\\bar)\n."
- "<p><a href=\"foo%5Cbar\">link</a><"
- "5Cbar\">link</a></p>"
- "````````````````````````````````"
- URL-escaping should be left
- should be left alone inside the
- "alone inside the destination, as"
- "destination, as all"
- URL-escaped characters are also
- are also valid URL characters.
- Entity and
- numerical character references
- references in the destination
- the destination will be parsed
- into the corresponding Unicode
- "Unicode code points, as usual."
- These may
- be optionally URL-escaped when
- URL-escaped when written as HTML
- "written as HTML, but this spec"
- does not enforce any particular
- any particular policy for
- policy for rendering URLs in
- HTML or other formats.
- Renderers may make different
- make different decisions
- about how to escape or normalize
- or normalize URLs in the output.
- "````````````````````````````````"
- "```````````````` example"
- "[link](foo%20b&auml;)\n."
- "<p><a href=\"foo%20b%C3%A4\">link<"
- "20b%C3%A4\">link</a></p>"
- "````````````````````````````````"
- "Note that, because titles can"
- titles can often be parsed as
- "be parsed as destinations,"
- if you try to omit the
- try to omit the destination and
- "destination and keep the title,"
- "keep the title, you'll"
- "'ll\nget unexpected results:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](\"title\")\n."
- "<p><a href=\"%22title%22\">link</a"
- "%22\">link</a></p>"
- "````````````````````````````````"
- "Titles may be in single quotes,"
- "single quotes, double quotes, or"
- "quotes, or parentheses:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/url \"title\")"
- "[link](/url 'title')"
- "[link](/url (title))\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">link</a>"
- "<a href=\"/url\" title=\"title\">"
- "\" title=\"title\">link</a>"
- "<a href=\"/url\" title=\"title\">"
- "\" title=\"title\">link</a></p>"
- "````````````````````````````````"
- Backslash escapes and entity and
- and entity and numeric character
- character references
- "may be used in titles:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/url \"title \\\"&quot;\")\n."
- "<p><a href=\"/url\" title=\"title &"
- "\" title=\"title &quot;&quot;\">"
- "&quot;&quot;\">link</a></p>"
- "````````````````````````````````"
- Titles must be separated from
- separated from the link using
- "the link using spaces, tabs, and"
- ", tabs, and up to one line"
- "ending.\nOther ["
- "Other [Unicode whitespace]"
- "] like non-breaking space doesn'"
- "'t work."
- "````````````````````````````````"
- "```````````````` example"
- "[link](/url \"title\")\n."
- "<p><a href=\"/url%C2%A0%22title%"
- "%C2%A0%22title%22\">link</a></p>"
- "````````````````````````````````"
- Nested balanced quotes are not
- quotes are not allowed without
- "allowed without escaping:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/url \"title \"and\" title\")"
- "."
- "<p>[link](/url &quot;title &quot"
- quot;title &quot;and&quot; title
- ;and&quot; title&quot;)</p>
- "````````````````````````````````"
- But it is easy to work around
- to work around this by using a
- this by using a different quote
- "different quote type:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](/url 'title \"and\" title')"
- "."
- "<p><a href=\"/url\" title=\"title &"
- "\" title=\"title &quot;and&quot;"
- "&quot;and&quot; title\">link</a><"
- "title\">link</a></p>"
- "````````````````````````````````"
- "(Note:  `Markdown.pl`"
- did allow double quotes inside a
- quotes inside a double-quoted
- "title, and its test suite"
- its test suite included a test
- included a test demonstrating
- demonstrating this.
- But it is hard to see a good
- to see a good rationale for the
- for the extra complexity this
- "brings, since there are already"
- are already many ways---
- "---backslash escaping,"
- entity and numeric character
- "character references, or using a"
- ", or using a different"
- quote type for the enclosing
- the enclosing title---
- "---to write titles containing"
- "double quotes.  `Markdown.pl`'"
- s handling of titles has a
- of titles has a number
- of other strange features.
- "For example, it allows single-"
- allows single-quoted
- "titles in inline links, but not"
- "links, but not reference links."
- "And, in"
- reference links but not inline
- "but not inline links, it allows"
- "links, it allows a title to"
- " a title to begin\nwith `\"`"
- "with `\"` and end with `)`."
- "`)`.  `Markdown.pl`"
- "`Markdown.pl` 1.0.1 even allows"
- titles with no closing quotation
- "quotation mark, though 1.0.2b8"
- ", though 1.0.2b8 does not."
- It seems preferable to adopt a
- "to adopt a simple, rational rule"
- ", rational rule that works"
- the same way in inline links and
- inline links and link reference
- link reference definitions.)
- "Spaces, tabs, and up to one line"
- up to one line ending is allowed
- is allowed around the
- around the destination and
- "title:"
- "````````````````````````````````"
- "```````````````` example"
- "[link](   /uri\n  \"title\"  )\n."
- "<p><a href=\"/uri\" title=\"title\">"
- "\" title=\"title\">link</a></p>"
- "````````````````````````````````"
- But it is not allowed between
- allowed between the link text
- the link text and the
- "following parenthesis:"
- "````````````````````````````````"
- "```````````````` example"
- "[link] (/uri)\n."
- ".\n<p>[link] (/uri)</p>"
- "````````````````````````````````"
- The link text may contain
- text may contain balanced
- "contain balanced brackets, but"
- "brackets, but not unbalanced"
- "not unbalanced ones,"
- "unless they are escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "[link [foo [bar]]](/uri)\n."
- "<p><a href=\"/uri\">link [foo [bar"
- "\">link [foo [bar]]</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link] bar](/uri)\n."
- ".\n<p>[link] bar](/uri)</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link [bar](/uri)\n."
- "<p>[link <a href=\"/uri\">bar</a><"
- "=\"/uri\">bar</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link \\[bar](/uri)\n."
- "<p><a href=\"/uri\">link [bar</a><"
- "\">link [bar</a></p>"
- "````````````````````````````````"
- The link text may contain inline
- "contain inline content:"
- "````````````````````````````````"
- "```````````````` example"
- "[link *foo **bar** `#`*](/uri)\n."
- "<p><a href=\"/uri\">link <em>foo <"
- "\">link <em>foo <strong>bar</"
- "<strong>bar</strong> <code>#</"
- "> <code>#</code></em></a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[![moon](moon.jpg)](/uri)\n."
- "<p><a href=\"/uri\"><img src=\""
- "/uri\"><img src=\"moon.jpg\" alt=\""
- "\"moon.jpg\" alt=\"moon\" /></a></p>"
- "````````````````````````````````"
- "However, links may not contain"
- "may not contain other links, at"
- "other links, at any level of"
- at any level of nesting.
- "````````````````````````````````"
- "```````````````` example"
- "[foo [bar](/uri)](/uri)\n."
- "<p>[foo <a href=\"/uri\">bar</a>]("
- "\"/uri\">bar</a>](/uri)</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo *[bar [baz](/uri)](/uri)*]("
- "(/uri)](/uri)*](/uri)\n."
- "<p>[foo <em>[bar <a href=\"/uri\">"
- "<a href=\"/uri\">baz</a>](/uri)</"
- "baz</a>](/uri)</em>](/uri)</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![[[foo](uri1)](uri2)](uri3)\n."
- "<p><img src=\"uri3\" alt=\"[foo]("
- "\" alt=\"[foo](uri2)\" /></p>"
- "````````````````````````````````"
- These cases illustrate the
- illustrate the precedence of
- precedence of link text grouping
- text grouping over
- "emphasis grouping:"
- "````````````````````````````````"
- "```````````````` example"
- "*[foo*](/uri)\n."
- "<p>*<a href=\"/uri\">foo*</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo *bar](baz*)\n."
- "<p><a href=\"baz*\">foo *bar</a></"
- "\">foo *bar</a></p>"
- "````````````````````````````````"
- "Note that brackets that *aren't*"
- part of links do not take
- "precedence:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo [bar* baz]\n."
- ".\n<p><em>foo [bar</em> baz]</p>"
- "````````````````````````````````"
- These cases illustrate the
- illustrate the precedence of
- "precedence of HTML tags, code"
- "HTML tags, code spans,"
- and autolinks over link grouping
- "link grouping:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo <bar attr=\"](baz)\">\n."
- "<p>[foo <bar attr=\"](baz)\"></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo`](/uri)`\n."
- "<p>[foo<code>](/uri)</code></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo<https://example.com/?"
- "search=](uri)>\n."
- "<p>[foo<a href=\"https://"
- "a href=\"https://example.com/?"
- "search=%5D(uri)\">https://"
- "(uri)\">https://example.com/?"
- "search=](uri)</a></p>"
- "````````````````````````````````"
- There are three kinds of
- "[reference link](@)s:"
- "s:\n[full](#full-reference-link),"
- "[collapsed](#collapsed-reference"
- "-reference-link),\nand"
- "[shortcut](#shortcut-reference-"
- "-reference-link)."
- "A [full reference link](@)"
- "consists of a [link text]"
- "] immediately followed by a ["
- "[link label]\nthat [matches] a ["
- "] a [link reference definition]"
- "] elsewhere in the document."
- "A [link label](@)"
- "begins with a left bracket (`[`"
- "`[`) and ends"
- with the first right bracket (
- "`]`"
- ) that is not backslash-escaped.
- Between these brackets there
- brackets there must be at least
- must be at least one character
- one character that is not a
- "that is not a space,"
- "tab, or line ending."
- Unescaped square bracket
- square bracket characters are
- characters are not allowed
- are not allowed inside the
- opening and closing square
- "closing square brackets of ["
- "[link labels].  A link"
- label can have at most 999
- have at most 999 characters
- 999 characters inside the square
- brackets.
- "One label [matches](@)"
- another just in case their
- in case their normalized forms
- normalized forms are equal.
- To normalize a
- "label, strip off the opening and"
- the opening and closing brackets
- "closing brackets,\nperform the"
- perform the *Unicode case fold*
- ", strip leading and trailing"
- "spaces, tabs, and line endings,"
- "line endings, and collapse"
- ", and collapse consecutive"
- consecutive internal
- "spaces, tabs, and line endings"
- and line endings to a single
- to a single space.
- If there are multiple
- matching reference link
- "reference link definitions, the"
- "definitions, the one that comes"
- one that comes first in the
- document is used.
- (It is desirable in such cases
- in such cases to emit a warning.
- emit a warning.)
- "The link'"
- s URI and title are provided by
- "are provided by the matching ["
- "[link\nreference definition]."
- "Here is a simple example:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][bar]\n\n[bar]: /url \"title\""
- "."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>"
- "````````````````````````````````"
- "The rules for the [link text]"
- "[link text] are the same as with"
- "[inline links].  Thus:"
- The link text may contain
- text may contain balanced
- "contain balanced brackets, but"
- "brackets, but not unbalanced"
- "not unbalanced ones,"
- "unless they are escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "[link [foo [bar]]][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri\">link [foo [bar"
- "\">link [foo [bar]]</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[link \\[bar][ref]\n\n[ref]: /uri\n."
- "<p><a href=\"/uri\">link [bar</a><"
- "\">link [bar</a></p>"
- "````````````````````````````````"
- The link text may contain inline
- "contain inline content:"
- "````````````````````````````````"
- "```````````````` example"
- "[link *foo **bar** `#`*][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri\">link <em>foo <"
- "\">link <em>foo <strong>bar</"
- "<strong>bar</strong> <code>#</"
- "> <code>#</code></em></a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[![moon](moon.jpg)][ref]"
- "[ref]: /uri\n."
- "<p><a href=\"/uri\"><img src=\""
- "/uri\"><img src=\"moon.jpg\" alt=\""
- "\"moon.jpg\" alt=\"moon\" /></a></p>"
- "````````````````````````````````"
- "However, links may not contain"
- "may not contain other links, at"
- "other links, at any level of"
- at any level of nesting.
- "````````````````````````````````"
- "```````````````` example"
- "[foo [bar](/uri)][ref]"
- "[ref]: /uri\n."
- "<p>[foo <a href=\"/uri\">bar</a>]<"
- "\"/uri\">bar</a>]<a href=\"/uri\">"
- "]<a href=\"/uri\">ref</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo *bar [baz][ref]*][ref]"
- "[ref]: /uri\n."
- "<p>[foo <em>bar <a href=\"/uri\">"
- "<a href=\"/uri\">baz</a></em>]<a"
- ">baz</a></em>]<a href=\"/uri\">ref"
- "href=\"/uri\">ref</a></p>"
- "````````````````````````````````"
- "(In the examples above, we have"
- "above, we have two ["
- "[shortcut reference links]"
- "]\ninstead of one ["
- "[full reference link].)"
- The following cases illustrate
- cases illustrate the precedence
- the precedence of link text
- of link text grouping over
- "emphasis grouping:"
- "````````````````````````````````"
- "```````````````` example"
- "*[foo*][ref]\n\n[ref]: /uri\n."
- "<p>*<a href=\"/uri\">foo*</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo *bar][ref]*\n\n[ref]: /uri\n."
- "<p><a href=\"/uri\">foo *bar</a>*<"
- "\">foo *bar</a>*</p>"
- "````````````````````````````````"
- These cases illustrate the
- illustrate the precedence of
- "precedence of HTML tags, code"
- "HTML tags, code spans,"
- and autolinks over link grouping
- "link grouping:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo <bar attr=\"][ref]\">"
- "[ref]: /uri\n."
- "<p>[foo <bar attr=\"][ref]\"></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo`][ref]`\n\n[ref]: /uri\n."
- ".\n<p>[foo<code>][ref]</code></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo<https://example.com/?"
- "search=][ref]>\n\n[ref]: /uri\n."
- "<p>[foo<a href=\"https://"
- "a href=\"https://example.com/?"
- "search=%5D%5Bref%5D\">https://"
- "%5D\">https://example.com/?"
- "search=][ref]</a></p>"
- "````````````````````````````````"
- "Matching is case-insensitive:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][BaR]\n\n[bar]: /url \"title\""
- "."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>"
- "````````````````````````````````"
- "Unicode case fold is used:"
- "````````````````````````````````"
- "```````````````` example"
- "[ẞ]\n\n[SS]: /url\n."
- ".\n<p><a href=\"/url\">ẞ</a></p>"
- "````````````````````````````````"
- "Consecutive internal spaces,"
- "internal spaces, tabs, and line"
- ", tabs, and line endings are"
- line endings are treated as one
- treated as one space for
- purposes of determining matching
- "matching:"
- "````````````````````````````````"
- "```````````````` example"
- "[Foo\n  bar]: /url"
- "  bar]: /url\n\n[Baz][Foo bar]\n."
- ".\n<p><a href=\"/url\">Baz</a></p>"
- "````````````````````````````````"
- "No spaces, tabs, or line endings"
- or line endings are allowed
- "are allowed between the ["
- "[link text] and the\n[link label]"
- "[link label]:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo] [bar]\n\n[bar]: /url \"title\""
- "."
- "<p>[foo] <a href=\"/url\" title=\""
- "=\"/url\" title=\"title\">bar</a></p"
- "\">bar</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]\n[bar]\n\n[bar]: /url \"title\""
- ".\n<p>[foo]"
- "<a href=\"/url\" title=\"title\">bar"
- "=\"title\">bar</a></p>"
- "````````````````````````````````"
- This is a departure from John
- "from John Gruber'"
- "'s original Markdown syntax"
- "description, which explicitly"
- which explicitly allows
- allows whitespace between the
- between the link
- text and the link label.
- It brings reference links in
- " links in line with\n["
- "[inline links]"
- ", which (according to both"
- to both original Markdown and
- this spec) cannot have
- ) cannot have whitespace after
- whitespace after the link text.
- More
- "importantly, it prevents"
- ", it prevents inadvertent"
- inadvertent capture of
- " capture of consecutive\n["
- "[shortcut reference links]"
- "."
- If whitespace is allowed between
- allowed between the
- "link text and the link label,"
- "the link label, then in the"
- ", then in the following we will"
- we will have
- "a single reference link, not two"
- "link, not two shortcut reference"
- " reference links, as\nintended:"
- "``` markdown"
- "[foo]\n[bar]\n\n[foo]: /url1"
- "[foo]: /url1\n[bar]: /url2\n```"
- "(Note that ["
- "[shortcut reference links]"
- "] were introduced by Gruber"
- himself in a beta version of
- "`Markdown.pl`"
- ", but never included"
- in the official syntax
- official syntax description.
- Without shortcut reference
- "links, it is harmless to allow"
- to allow space between the link
- between the link text and
- link label; but once shortcut
- once shortcut references are
- "references are introduced, it is"
- "too dangerous to allow this, as"
- "allow this, as it frequently"
- as it frequently leads to
- unintended results.)
- When there are multiple matching
- "[link reference definitions],"
- "],\nthe first is used:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]: /url1\n\n[foo]: /url2"
- "[foo]: /url2\n\n[bar][foo]\n."
- ".\n<p><a href=\"/url1\">bar</a></p>"
- "````````````````````````````````"
- Note that matching is performed
- is performed on normalized
- "on normalized strings, not"
- "strings, not parsed"
- inline content.
- "So the following does not match,"
- "does not match, even though the"
- labels define equivalent inline
- "inline content:"
- "````````````````````````````````"
- "```````````````` example"
- "[bar][foo\\!]\n\n[foo!]: /url\n."
- "[foo!]: /url\n.\n<p>[bar][foo!]"
- ".\n<p>[bar][foo!]</p>"
- "````````````````````````````````"
- "[Link labels]"
- "cannot contain brackets, unless"
- "brackets, unless they are"
- "backslash-escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][ref[]\n\n[ref[]: /uri\n."
- ".\n<p>[foo][ref[]</p>"
- "<p>[ref[]: /uri</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][ref[bar]]"
- "[ref[bar]]: /uri\n."
- ".\n<p>[foo][ref[bar]]</p>"
- "<p>[ref[bar]]: /uri</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[[[foo]]]\n\n[[[foo]]]: /url\n."
- ".\n<p>[[[foo]]]</p>"
- "<p>[[[foo]]]: /url</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][ref\\[]\n\n[ref\\[]: /uri\n."
- ".\n<p><a href=\"/uri\">foo</a></p>"
- "````````````````````````````````"
- "Note that in this example `]`"
- "`]` is not backslash-escaped:"
- "````````````````````````````````"
- "```````````````` example"
- "[bar\\\\]: /uri\n\n[bar\\\\]\n."
- ".\n<p><a href=\"/uri\">bar\\</a></p>"
- "````````````````````````````````"
- "A [link label]"
- must contain at least one
- at least one character that is
- "that is not a space, tab, or"
- "line ending:"
- "````````````````````````````````"
- "```````````````` example"
- "[]\n\n[]: /uri\n.\n<p>[]</p>"
- ".\n<p>[]</p>\n<p>[]: /uri</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[\n ]\n\n[\n ]: /uri\n.\n<p>[\n]</p>"
- ".\n<p>[\n]</p>\n<p>[\n]: /uri</p>"
- "````````````````````````````````"
- "A [collapsed reference link](@)"
- "consists of a [link label] that"
- "link label] that [matches] a\n["
- "] a\n[link reference definition]"
- "] elsewhere in the"
- "document, followed by the string"
- "`[]`."
- The contents of the link label
- the link label are parsed as
- "are parsed as inlines,"
- "which are used as the link'"
- "'s text.  The link'"
- "'s URI and title are"
- provided by the matching
- by the matching reference link
- reference link definition.
- "Thus,\n`[foo][]` is equivalent to"
- "is equivalent to `[foo][foo]`."
- "````````````````````````````````"
- "```````````````` example"
- "[foo][]\n\n[foo]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[*foo* bar][]"
- "[*foo* bar]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\"><em>foo</em> bar"
- "<em>foo</em> bar</a></p>"
- "````````````````````````````````"
- The link labels are case-
- "labels are case-insensitive:"
- "````````````````````````````````"
- "```````````````` example"
- "[Foo][]\n\n[foo]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">Foo</a></p>"
- "````````````````````````````````"
- "As with full reference links,"
- "reference links, spaces, tabs,"
- ", spaces, tabs, or line endings"
- or line endings are not
- allowed between the two sets of
- "the two sets of brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo] \n[]\n\n[foo]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a>\n[]</p>"
- "````````````````````````````````"
- "A [shortcut reference link](@)"
- "consists of a [link label] that"
- "link label] that [matches] a\n["
- "] a\n[link reference definition]"
- "] elsewhere in the"
- document and is not followed by
- "`[]` or a link label."
- The contents of the link label
- the link label are parsed as
- "are parsed as inlines,"
- "which are used as the link'"
- "'s text.  The link'"
- "'s URI and title"
- are provided by the matching
- by the matching link reference
- link reference definition.
- "Thus, `[foo]` is equivalent to"
- "is equivalent to `[foo][]`."
- "````````````````````````````````"
- "```````````````` example"
- "[foo]\n\n[foo]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[*foo* bar]"
- "[*foo* bar]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\"><em>foo</em> bar"
- "<em>foo</em> bar</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[[*foo* bar]]"
- "[*foo* bar]: /url \"title\"\n."
- "<p>[<a href=\"/url\" title=\"title\""
- "\" title=\"title\"><em>foo</em> bar"
- "<em>foo</em> bar</a>]</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[[bar [foo]\n\n[foo]: /url\n."
- "<p>[[bar <a href=\"/url\">foo</a><"
- "=\"/url\">foo</a></p>"
- "````````````````````````````````"
- The link labels are case-
- "labels are case-insensitive:"
- "````````````````````````````````"
- "```````````````` example"
- "[Foo]\n\n[foo]: /url \"title\"\n."
- "<p><a href=\"/url\" title=\"title\">"
- "\" title=\"title\">Foo</a></p>"
- "````````````````````````````````"
- A space after the link text
- the link text should be
- "text should be preserved:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo] bar\n\n[foo]: /url\n."
- "<p><a href=\"/url\">foo</a> bar</p"
- "\">foo</a> bar</p>"
- "````````````````````````````````"
- "If you just want bracketed text,"
- "bracketed text, you can"
- "text, you can backslash-escape"
- backslash-escape the
- "opening bracket to avoid links:"
- "````````````````````````````````"
- "```````````````` example"
- "\\[foo]\n\n[foo]: /url \"title\"\n."
- ".\n<p>[foo]</p>"
- "````````````````````````````````"
- "Note that this is a link,"
- "this is a link, because a link"
- ", because a link label ends with"
- label ends with the first
- "following closing bracket:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo*]: /url\n\n*[foo*]\n."
- "<p>*<a href=\"/url\">foo*</a></p>"
- "````````````````````````````````"
- Full and collapsed references
- references take precedence over
- precedence over shortcut
- "references:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][bar]\n\n[foo]: /url1"
- "[foo]: /url1\n[bar]: /url2\n."
- ".\n<p><a href=\"/url2\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][]\n\n[foo]: /url1\n."
- ".\n<p><a href=\"/url1\">foo</a></p>"
- "````````````````````````````````"
- Inline links also take
- "links also take precedence:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo]()\n\n[foo]: /url1\n."
- ".\n<p><a href=\"\">foo</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "[foo](not a link)\n\n[foo]: /url1"
- "[foo]: /url1\n."
- "<p><a href=\"/url1\">foo</a>(not a"
- "\">foo</a>(not a link)</p>"
- "````````````````````````````````"
- In the following case
- "`[bar][baz]`"
- "is parsed as a reference,"
- "`[foo]` as normal text:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][bar][baz]\n\n[baz]: /url\n."
- "<p>[foo]<a href=\"/url\">bar</a></"
- "\"/url\">bar</a></p>"
- "````````````````````````````````"
- "Here, though, `[foo][bar]`"
- "is parsed as a reference, since"
- "`[bar]` is defined:"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][bar][baz]\n\n[baz]: /url1"
- "[baz]: /url1\n[bar]: /url2\n."
- "<p><a href=\"/url2\">foo</a><a"
- "/url2\">foo</a><a href=\"/url1\">"
- "<a href=\"/url1\">baz</a></p>"
- "````````````````````````````````"
- "Here `[foo]`"
- is not parsed as a shortcut
- "as a shortcut reference, because"
- ", because it"
- is followed by a link label (
- a link label (even though
- "`[bar]` is not defined):"
- "````````````````````````````````"
- "```````````````` example"
- "[foo][bar][baz]\n\n[baz]: /url1"
- "[baz]: /url1\n[foo]: /url2\n."
- "<p>[foo]<a href=\"/url1\">bar</a><"
- "\"/url1\">bar</a></p>"
- "````````````````````````````````"
- "## Images"
- Syntax for images is like the
- "is like the syntax for links,"
- "for links, with one"
- "difference. Instead of ["
- "[link text], we have an"
- "[image description](@)"
- ".  The rules for this are the"
- "same as for [link text]"
- "[link text], except that (a) an"
- image description starts with
- "`![` rather than `[`, and"
- (b) an image description may
- description may contain links.
- An image description has inline
- has inline elements
- as its contents.
- When an image is rendered to
- "is rendered to HTML,"
- this is standardly used as the
- "used as the image's `alt`"
- "'s `alt` attribute."
- "````````````````````````````````"
- "```````````````` example"
- "![foo](/url \"title\")\n."
- "<p><img src=\"/url\" alt=\"foo\""
- "\"/url\" alt=\"foo\" title=\"title\" /"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo *bar*]"
- "[foo *bar*]: train.jpg \"train &"
- " \"train & tracks\"\n."
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo bar\" title=\"train &"
- "\" title=\"train &amp; tracks\" /><"
- "amp; tracks\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo ![bar](/url)](/url2)\n."
- "<p><img src=\"/url2\" alt=\"foo bar"
- "\" alt=\"foo bar\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo [bar](/url)](/url2)\n."
- "<p><img src=\"/url2\" alt=\"foo bar"
- "\" alt=\"foo bar\" /></p>"
- "````````````````````````````````"
- Though this spec is concerned
- "is concerned with parsing, not"
- "parsing, not rendering, it is"
- recommended that in rendering to
- "in rendering to HTML, only the"
- "HTML, only the plain string"
- " the plain string content\nof the"
- "of the [image description]"
- "] be used.  Note that in"
- "the above example, the alt"
- "example, the alt attribute'"
- "'s value is `foo bar`, not"
- "`foo bar`, not `foo\n[bar](/url)`"
- "or `foo <a href=\"/url\">bar</a>`"
- ".  Only the plain string"
- "content is rendered, without"
- ", without formatting."
- "````````````````````````````````"
- "```````````````` example"
- "![foo *bar*][]"
- "[foo *bar*]: train.jpg \"train &"
- " \"train & tracks\"\n."
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo bar\" title=\"train &"
- "\" title=\"train &amp; tracks\" /><"
- "amp; tracks\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo *bar*][foobar]"
- "[FOOBAR]: train.jpg \"train &"
- " \"train & tracks\"\n."
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo bar\" title=\"train &"
- "\" title=\"train &amp; tracks\" /><"
- "amp; tracks\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo](train.jpg)\n."
- "<p><img src=\"train.jpg\" alt=\"foo"
- "\" alt=\"foo\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "My !["
- "foo bar](/path/to/train.jpg  \""
- "/to/train.jpg  \"title\"   )\n."
- "<p>My <img src=\"/path/to/"
- "src=\"/path/to/train.jpg\" alt=\""
- "train.jpg\" alt=\"foo bar\" title=\""
- "foo bar\" title=\"title\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo](<url>)\n."
- "<p><img src=\"url\" alt=\"foo\" /></"
- "\" alt=\"foo\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![](/url)\n."
- "<p><img src=\"/url\" alt=\"\" /></p>"
- "````````````````````````````````"
- "Reference-style:"
- "````````````````````````````````"
- "```````````````` example"
- "![foo][bar]\n\n[bar]: /url\n."
- "<p><img src=\"/url\" alt=\"foo\" /><"
- "\" alt=\"foo\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![foo][bar]\n\n[BAR]: /url\n."
- "<p><img src=\"/url\" alt=\"foo\" /><"
- "\" alt=\"foo\" /></p>"
- "````````````````````````````````"
- "Collapsed:"
- "````````````````````````````````"
- "```````````````` example"
- "![foo][]\n\n[foo]: /url \"title\"\n."
- "<p><img src=\"/url\" alt=\"foo\""
- "\"/url\" alt=\"foo\" title=\"title\" /"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![*foo* bar][]"
- "[*foo* bar]: /url \"title\"\n."
- "<p><img src=\"/url\" alt=\"foo bar\""
- "\" alt=\"foo bar\" title=\"title\" />"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- "The labels are case-insensitive:"
- "````````````````````````````````"
- "```````````````` example"
- "![Foo][]\n\n[foo]: /url \"title\"\n."
- "<p><img src=\"/url\" alt=\"Foo\""
- "\"/url\" alt=\"Foo\" title=\"title\" /"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- "As with reference links, spaces,"
- "links, spaces, tabs, and line"
- ", tabs, and line endings, are"
- "endings, are not allowed"
- between the two sets of brackets
- "sets of brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "![foo] \n[]\n\n[foo]: /url \"title\""
- "."
- "<p><img src=\"/url\" alt=\"foo\""
- "\"/url\" alt=\"foo\" title=\"title\" /"
- " title=\"title\" />\n[]</p>"
- "````````````````````````````````"
- "Shortcut:"
- "````````````````````````````````"
- "```````````````` example"
- "![foo]\n\n[foo]: /url \"title\"\n."
- "<p><img src=\"/url\" alt=\"foo\""
- "\"/url\" alt=\"foo\" title=\"title\" /"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "![*foo* bar]"
- "[*foo* bar]: /url \"title\"\n."
- "<p><img src=\"/url\" alt=\"foo bar\""
- "\" alt=\"foo bar\" title=\"title\" />"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- Note that link labels cannot
- labels cannot contain unescaped
- "unescaped brackets:"
- "````````````````````````````````"
- "```````````````` example"
- "![[foo]]\n\n[[foo]]: /url \"title\""
- ".\n<p>![[foo]]</p>"
- "<p>[[foo]]: /url &quot;title&"
- url &quot;title&quot;</p>
- "````````````````````````````````"
- The link labels are case-
- "labels are case-insensitive:"
- "````````````````````````````````"
- "```````````````` example"
- "![Foo]\n\n[foo]: /url \"title\"\n."
- "<p><img src=\"/url\" alt=\"Foo\""
- "\"/url\" alt=\"Foo\" title=\"title\" /"
- "title=\"title\" /></p>"
- "````````````````````````````````"
- "If you just want a literal `!`"
- "followed by bracketed text, you"
- "text, you can"
- "backslash-escape the opening `[`"
- "`[`:"
- "````````````````````````````````"
- "```````````````` example"
- "!\\[foo]\n\n[foo]: /url \"title\"\n."
- ".\n<p>![foo]</p>"
- "````````````````````````````````"
- If you want a link after a
- "a link after a literal `!`"
- "`!`, backslash-escape the\n`!`:"
- "````````````````````````````````"
- "```````````````` example"
- "\\![foo]\n\n[foo]: /url \"title\"\n."
- ".\n<p>!"
- "<a href=\"/url\" title=\"title\">foo"
- "=\"title\">foo</a></p>"
- "````````````````````````````````"
- "## Autolinks"
- "[Autolink](@)"
- s are absolute URIs and email
- URIs and email addresses inside
- "`<` and `>`"
- "."
- "They are parsed as links, with"
- "as links, with the URL or email"
- the URL or email address
- as the link label.
- "A [URI autolink](@) consists of"
- "consists of `<`, followed by an"
- ", followed by an\n[absolute URI]"
- "[absolute URI] followed by `>`"
- "`>`.  It is parsed as"
- "a link to the URI, with the URI"
- ", with the URI as the link'"
- "'s label."
- "An [absolute URI](@),"
- "for these purposes, consists of"
- ", consists of a [scheme]"
- "[scheme] followed by a colon ("
- "`:`)"
- followed by zero or more
- by zero or more characters other
- "characters other than ["
- "[ASCII control\ncharacters]["
- "][ASCII control character], ["
- "], [space], `<`, and `>`."
- If the URI includes these
- "includes these characters, they"
- "characters, they must be percent"
- " must be percent-encoded\n(e.g."
- "(e.g. `%20` for a space)."
- "For purposes of this spec, a"
- "[scheme](@) is any sequence\nof 2"
- of 2--
- 32 characters beginning with an
- with an ASCII letter and
- ASCII letter and followed
- by any combination of ASCII
- "of ASCII letters, digits, or the"
- ", digits, or the symbols plus\n(\""
- "(\"+\"), period (\".\"), or hyphen ("
- ".\"), or hyphen (\"-\")."
- "Here are some valid autolinks:"
- "````````````````````````````````"
- "```````````````` example"
- "<http://foo.bar.baz>\n."
- "<p><a href=\"http://foo.bar.baz\">"
- "://foo.bar.baz\">http://"
- "\">http://foo.bar.baz</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<https://foo.bar.baz/test?"
- "q=hello&id=22&boolean>\n."
- "<p><a href=\"https://foo.bar.baz/"
- "://foo.bar.baz/test?"
- "q=hello&amp;id=22&amp;boolean\">"
- "22&amp;boolean\">https://"
- "\">https://foo.bar.baz/test?"
- q=hello&amp;id=22&amp;boolean</a
- "&amp;boolean</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<irc://foo.bar:2233/baz>\n."
- "<p><a href=\"irc://foo.bar:2233/"
- "://foo.bar:2233/baz\">irc://"
- "2233/baz\">irc://foo.bar:2233/baz"
- "foo.bar:2233/baz</a></p>"
- "````````````````````````````````"
- "Uppercase is also fine:"
- "````````````````````````````````"
- "```````````````` example"
- "<MAILTO:FOO@BAR.BAZ>\n."
- "<p><a href=\"MAILTO:FOO@BAR.BAZ\">"
- "@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a>"
- "@BAR.BAZ</a></p>"
- "````````````````````````````````"
- Note that many strings that
- "strings that count as ["
- "[absolute URIs] for"
- purposes of this spec are not
- "spec are not valid URIs, because"
- "URIs, because their"
- schemes are not registered or
- registered or because of other
- because of other problems
- "with their syntax:"
- "````````````````````````````````"
- "```````````````` example"
- "<a+b+c:d>\n."
- "<p><a href=\"a+b+c:d\">a+b+c:d</a>"
- "c:d\">a+b+c:d</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<made-up-scheme://foo,bar>\n."
- "<p><a href=\"made-up-scheme://foo"
- "-up-scheme://foo,bar\">made-up-"
- ",bar\">made-up-scheme://foo,bar</"
- "://foo,bar</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<https://../>\n."
- "<p><a href=\"https://../\">https:/"
- "://../\">https://../</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<localhost:5001/foo>\n."
- "<p><a href=\"localhost:5001/foo\">"
- ":5001/foo\">localhost:5001/foo</a"
- ":5001/foo</a></p>"
- "````````````````````````````````"
- Spaces are not allowed in
- "not allowed in autolinks:"
- "````````````````````````````````"
- "```````````````` example"
- "<https://foo.bar/baz bim>\n."
- "<p>&lt;https://foo.bar/baz bim&"
- foo.bar/baz bim&gt;</p>
- "````````````````````````````````"
- Backslash-escapes do not work
- "do not work inside autolinks:"
- "````````````````````````````````"
- "```````````````` example"
- "<https://example.com/\\[\\>\n."
- "<p><a href=\"https://example.com/"
- "://example.com/%5C%5B%5C\">https:"
- "5C%5B%5C\">https://example.com/\\["
- "//example.com/\\[\\</a></p>"
- "````````````````````````````````"
- "An [email autolink](@)"
- "consists of `<`, followed by an"
- ", followed by an [email address]"
- "[email address],\nfollowed by `>`"
- "followed by `>`.  The link'"
- "'s label is the email address,"
- "and the URL is `mailto:`"
- followed by the email address.
- "An [email address](@),"
- "for these purposes, is anything"
- ", is anything that matches\nthe"
- "["
- non-normative regex from the
- " regex from the HTML5\nspec"
- "](https://html.spec.whatwg.org/"
- "/multipage/forms.html#e-mail-"
- "#e-mail-state-(type=email)):"
- "/^[a-zA-Z0-9.!#$%&'*+/=?"
- "^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-"
- "-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA"
- "-9-]{0,61}[a-zA-Z0-9])?"
- "(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{"
- "(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9]"
- "0,61}[a-zA-Z0-9])?)*$/"
- "Examples of email autolinks:"
- "````````````````````````````````"
- "```````````````` example"
- "<foo@bar.example.com>\n."
- "<p><a href=\"mailto:foo@"
- "=\"mailto:foo@bar.example.com\">"
- "\">foo@bar.example.com</a></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<foo+special@Bar.baz-bar0.com>\n."
- "<p><a href=\"mailto:foo+special@"
- "+special@Bar.baz-bar0.com\">foo+"
- "-bar0.com\">foo+special@Bar.baz-"
- special@Bar.baz-bar0.com</a></p>
- "````````````````````````````````"
- Backslash-escapes do not work
- do not work inside email
- "inside email autolinks:"
- "````````````````````````````````"
- "```````````````` example"
- "<foo\\+@bar.example.com>\n."
- "<p>&lt;foo+@bar.example.com&gt;<"
- "&gt;</p>"
- "````````````````````````````````"
- "These are not autolinks:"
- "````````````````````````````````"
- "```````````````` example"
- "<>\n.\n<p>&lt;&gt;</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "< https://foo.bar >\n."
- "<p>&lt; https://foo.bar &gt;</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<m:abc>\n.\n<p>&lt;m:abc&gt;</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<foo.bar.baz>\n."
- ".\n<p>&lt;foo.bar.baz&gt;</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "https://example.com\n."
- ".\n<p>https://example.com</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo@bar.example.com\n."
- ".\n<p>foo@bar.example.com</p>"
- "````````````````````````````````"
- "## Raw HTML"
- "Text between `<` and `>`"
- that looks like an HTML tag is
- an HTML tag is parsed as a
- raw HTML tag and will be
- tag and will be rendered in HTML
- rendered in HTML without
- in HTML without escaping.
- Tag and attribute names are not
- names are not limited to current
- "to current HTML tags,"
- "so custom tags (and even, say,"
- "(and even, say, DocBook tags)"
- ", DocBook tags) may be used."
- "Here is the grammar for tags:"
- "A [tag name](@)"
- consists of an ASCII letter
- followed by zero or more ASCII
- "or more ASCII letters, digits,"
- " letters, digits, or\nhyphens ("
- "hyphens (`-`)."
- "An [attribute](@)"
- "consists of spaces, tabs, and up"
- ", tabs, and up to one line"
- " up to one line ending,\nan ["
- "an [attribute name]"
- "attribute name], and an optional"
- "[attribute value specification]."
- "An [attribute name](@)"
- "consists of an ASCII letter, `_`"
- "`_`, or `:`"
- ", followed by zero or more ASCII"
- "letters, digits, `_`, `.`, `:`"
- "`_`, `.`, `:`, or `-`"
- "`-`.  (Note:  This is the XML"
- specification restricted to
- restricted to ASCII.
- HTML5 is laxer.)
- An
- "[attribute value specification]("
- "specification](@)"
- "consists of optional spaces,"
- "optional spaces, tabs, and up to"
- "tabs, and up to one line ending,"
- "a `=`"
- "character, optional spaces, tabs"
- "spaces, tabs, and up to one line"
- " up to one line ending,\nand an ["
- "and an [attribute value]."
- "An [attribute value](@)"
- "consists of an ["
- "[unquoted attribute value],\na ["
- "a [single-quoted attribute value"
- "], or a ["
- "[double-quoted attribute value]."
- "An [unquoted attribute value](@)"
- is a nonempty string of
- string of characters not
- "including spaces, tabs, line"
- ", tabs, line endings, `\"`, `'`,"
- "`\"`, `'`, `=`, `<`, `>`, or"
- ", `<`, `>`, or `` ` ``."
- A
- "[single-quoted attribute value]("
- " value](@)\nconsists of `'`"
- "consists of `'`, zero or more"
- "characters not including `'`"
- "`'`, and a final `'`."
- A
- "[double-quoted attribute value]("
- " value](@)\nconsists of `\"`"
- "consists of `\"`, zero or more"
- "characters not including `\"`"
- "`\"`, and a final `\"`."
- "An [open tag](@) consists of a"
- "consists of a `<` character, a ["
- "character, a [tag name],"
- "[tag name],\nzero or more ["
- ",\nzero or more [attributes]"
- ", optional spaces, tabs, and up"
- ", tabs, and up to one line"
- "up to one line ending,"
- "an optional `/` character, and a"
- "character, and a `>` character."
- "A [closing tag](@)"
- "consists of the string `</`, a"
- "`</`, a\n[tag name]"
- ", optional spaces, tabs, and up"
- ", tabs, and up to one line"
- "up to one line ending, and the"
- " ending, and the character\n`>`."
- "An [HTML comment](@) consists of"
- "consists of `<!-->`, `<!--->`"
- ", `<!--->`, or  `<!--`"
- ", or  `<!--`, a string of"
- characters not including the
- "including the string `-->`, and"
- "`-->`, and `-->` (see the"
- "[HTML spec](https://"
- "](https://html.spec.whatwg.org/"
- "/multipage/parsing.html#markup-"
- "#markup-declaration-open-state)"
- ).
- "A [processing instruction](@)"
- "consists of the string `<?`"
- "`<?`, a string"
- of characters not including the
- "including the string `?>`"
- "`?>`, and the string\n`?>`."
- "A [declaration](@)"
- "consists of the string `<!`"
- ", an ASCII letter, zero or more"
- characters not including the
- "including the character `>`"
- "`>`, and the character `>`."
- "A [CDATA section](@) consists of"
- " consists of\nthe string"
- "the string `<![CDATA[`"
- ", a string of characters not"
- characters not including the
- " including the string\n`]]>`"
- "`]]>`, and the string `]]>`."
- "An [HTML tag](@) consists of an"
- "consists of an [open tag], a ["
- "[open tag], a [closing tag],\nan"
- "closing tag],\nan [HTML comment]"
- "[HTML comment], a ["
- "], a [processing instruction], a"
- "], a [declaration],\nor a ["
- "],\nor a [CDATA section]."
- "Here are some simple open tags:"
- "````````````````````````````````"
- "```````````````` example"
- "<a><bab><c2c>\n."
- ".\n<p><a><bab><c2c></p>"
- "````````````````````````````````"
- "Empty elements:"
- "````````````````````````````````"
- "```````````````` example"
- "<a/><b2/>\n.\n<p><a/><b2/></p>"
- "````````````````````````````````"
- "Whitespace is allowed:"
- "````````````````````````````````"
- "```````````````` example"
- "<a  /><b2\ndata=\"foo\" >\n."
- "data=\"foo\" >\n.\n<p><a  /><b2"
- ".\n<p><a  /><b2\ndata=\"foo\" ></p>"
- "````````````````````````````````"
- "With attributes:"
- "````````````````````````````````"
- "```````````````` example"
- "<a foo=\"bar\" bam = 'baz <em>\"</"
- "= 'baz <em>\"</em>'"
- "_boolean zoop:33=zoop:33 />\n."
- "<p><a foo=\"bar\" bam = 'baz <em>\""
- "bam = 'baz <em>\"</em>'"
- "_boolean zoop:33=zoop:33 /></p>"
- "````````````````````````````````"
- "Custom tag names can be used:"
- "````````````````````````````````"
- "```````````````` example"
- "Foo <responsive-image src=\""
- "-image src=\"foo.jpg\" />\n."
- "<p>Foo <responsive-image src=\""
- "-image src=\"foo.jpg\" /></p>"
- "````````````````````````````````"
- "Illegal tag names, not parsed as"
- ", not parsed as HTML:"
- "````````````````````````````````"
- "```````````````` example"
- "<33> <__>\n."
- ".\n<p>&lt;33&gt; &lt;__&gt;</p>"
- "````````````````````````````````"
- "Illegal attribute names:"
- "````````````````````````````````"
- "```````````````` example"
- "<a h*#ref=\"hi\">\n."
- "<p>&lt;a h*#ref=&quot;hi&quot;&"
- "=&quot;hi&quot;&gt;</p>"
- "````````````````````````````````"
- "Illegal attribute values:"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"hi'> <a href=hi'>\n."
- "<p>&lt;a href=&quot;hi'&gt; &lt;"
- ";hi'&gt; &lt;a href=hi'&gt;</p>"
- "````````````````````````````````"
- "Illegal whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "< a><\nfoo><bar/ >\n<foo bar=baz"
- "<foo bar=baz\nbim!bop />\n."
- "bim!bop />\n.\n<p>&lt; a&gt;&lt;"
- foo&gt;&lt;bar/ &gt;
- "&lt;foo bar=baz\nbim!"
- bim!bop /&gt;</p>
- "````````````````````````````````"
- "Missing whitespace:"
- "````````````````````````````````"
- "```````````````` example"
- "<a href='bar'title=title>\n."
- "<p>&lt;a href='bar'title=title&"
- "bar'title=title&gt;</p>"
- "````````````````````````````````"
- "Closing tags:"
- "````````````````````````````````"
- "```````````````` example"
- "</a></foo >\n.\n<p></a></foo ></p>"
- "````````````````````````````````"
- Illegal attributes in closing
- "in closing tag:"
- "````````````````````````````````"
- "```````````````` example"
- "</a href=\"foo\">\n."
- "<p>&lt;/a href=&quot;foo&quot;&"
- "&quot;foo&quot;&gt;</p>"
- "````````````````````````````````"
- "Comments:"
- "````````````````````````````````"
- "```````````````` example"
- foo <!-- this is a --
- "comment - with hyphens -->\n."
- ".\n<p>foo <!-- this is a --"
- comment - with hyphens --></p>
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- foo <!--> foo -->
- "foo <!---> foo -->\n."
- ".\n<p>foo <!--> foo --&gt;</p>"
- "<p>foo <!---> foo --&gt;</p>"
- "````````````````````````````````"
- "Processing instructions:"
- "````````````````````````````````"
- "```````````````` example"
- "foo <?php echo $a; ?>\n."
- ">\n.\n<p>foo <?php echo $a; ?></p>"
- "````````````````````````````````"
- "Declarations:"
- "````````````````````````````````"
- "```````````````` example"
- "foo <!ELEMENT br EMPTY>\n."
- ".\n<p>foo <!ELEMENT br EMPTY></p>"
- "````````````````````````````````"
- "CDATA sections:"
- "````````````````````````````````"
- "```````````````` example"
- "foo <![CDATA[>&<]]>\n.\n<p>foo <!["
- ".\n<p>foo <![CDATA[>&<]]></p>"
- "````````````````````````````````"
- Entity and numeric character
- character references are
- references are preserved in HTML
- "attributes:"
- "````````````````````````````````"
- "```````````````` example"
- "foo <a href=\"&ouml;\">\n."
- ".\n<p>foo <a href=\"&ouml;\"></p>"
- "````````````````````````````````"
- Backslash escapes do not work in
- "do not work in HTML attributes:"
- "````````````````````````````````"
- "```````````````` example"
- "foo <a href=\"\\*\">\n."
- ".\n<p>foo <a href=\"\\*\"></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"\\\"\">\n."
- "<p>&lt;a href=&quot;&quot;&quot;"
- ;&quot;&quot;&gt;</p>
- "````````````````````````````````"
- "## Hard line breaks"
- A line ending (not in a code
- (not in a code span or HTML tag)
- or HTML tag) that is preceded
- by two or more spaces and does
- spaces and does not occur at the
- not occur at the end of a block
- is parsed as a
- "[hard line break](@) (rendered"
- " (rendered\nin HTML as a `<br />`"
- "`<br />` tag):"
- "````````````````````````````````"
- "```````````````` example"
- "foo  \nbaz\n.\n<p>foo<br />\nbaz</p>"
- "````````````````````````````````"
- "For a more visible alternative,"
- "alternative, a backslash before"
- " backslash before the\n["
- "[line ending]"
- may be used instead of two or
- "of two or more spaces:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\\\nbaz\n.\n<p>foo<br />\nbaz</p>"
- "````````````````````````````````"
- More than two spaces can be used
- "can be used:"
- "````````````````````````````````"
- "```````````````` example"
- "foo       \nbaz\n.\n<p>foo<br />"
- ".\n<p>foo<br />\nbaz</p>"
- "````````````````````````````````"
- Leading spaces at the beginning
- at the beginning of the next
- "of the next line are ignored:"
- "````````````````````````````````"
- "```````````````` example"
- "foo  \n     bar\n.\n<p>foo<br />"
- ".\n<p>foo<br />\nbar</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo\\\n     bar\n.\n<p>foo<br />"
- ".\n<p>foo<br />\nbar</p>"
- "````````````````````````````````"
- Hard line breaks can occur
- breaks can occur inside emphasis
- "inside emphasis, links, and"
- ", links, and other constructs"
- "that allow inline content:"
- "````````````````````````````````"
- "```````````````` example"
- "*foo  \nbar*\n.\n<p><em>foo<br />"
- "<p><em>foo<br />\nbar</em></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "*foo\\\nbar*\n.\n<p><em>foo<br />"
- "<p><em>foo<br />\nbar</em></p>"
- "````````````````````````````````"
- Hard line breaks do not occur
- do not occur inside code spans
- "````````````````````````````````"
- "```````````````` example"
- "`code  \nspan`\n."
- "<p><code>code   span</code></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "`code\\\nspan`\n."
- ".\n<p><code>code\\ span</code></p>"
- "````````````````````````````````"
- "or HTML tags:"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"foo  \nbar\">\n."
- "bar\">\n.\n<p><a href=\"foo"
- "<p><a href=\"foo  \nbar\"></p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "<a href=\"foo\\\nbar\">\n."
- "bar\">\n.\n<p><a href=\"foo\\"
- "<p><a href=\"foo\\\nbar\"></p>"
- "````````````````````````````````"
- Hard line breaks are for
- breaks are for separating inline
- inline content within a block.
- Neither syntax for hard line
- for hard line breaks works at
- breaks works at the end of a
- at the end of a paragraph or
- "other block element:"
- "````````````````````````````````"
- "```````````````` example"
- "foo\\\n.\n<p>foo\\</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "foo  \n.\n<p>foo</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "### foo\\\n.\n<h3>foo\\</h3>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "### foo  \n.\n<h3>foo</h3>"
- "````````````````````````````````"
- "## Soft line breaks"
- A regular line ending (not in a
- ending (not in a code span or
- a code span or HTML tag) that is
- tag) that is not
- preceded by two or more spaces
- or more spaces or a backslash is
- a backslash is parsed as a
- "[softbreak](@)"
- "."
- (A soft line break may be
- break may be rendered in HTML
- " rendered in HTML either as a\n["
- "[line ending]"
- or as a space.
- The result will be the same in
- browsers.
- "In the examples here, a ["
- "[line ending] will be used.)"
- "````````````````````````````````"
- "```````````````` example"
- "foo\nbaz\n.\n<p>foo\nbaz</p>"
- "````````````````````````````````"
- Spaces at the end of the line
- end of the line and beginning of
- and beginning of the next line
- " of the next line are\nremoved:"
- "````````````````````````````````"
- "```````````````` example"
- "foo \n baz\n.\n<p>foo\nbaz</p>"
- "````````````````````````````````"
- A conforming parser may render a
- may render a soft line break in
- line break in HTML either as a
- line ending or as a space.
- A renderer may also provide an
- also provide an option to render
- option to render soft line
- render soft line breaks
- as hard line breaks.
- "## Textual content"
- Any characters not given an
- not given an interpretation by
- by the above rules will
- be parsed as plain textual
- as plain textual content.
- "````````````````````````````````"
- "```````````````` example"
- "hello $.;'there\n."
- ".\n<p>hello $.;'there</p>"
- "````````````````````````````````"
- "````````````````````````````````"
- "```````````````` example"
- "Foo χρῆν\n.\n<p>Foo χρῆν</p>"
- "````````````````````````````````"
- Internal spaces are preserved
- "are preserved verbatim:"
- "````````````````````````````````"
- "```````````````` example"
- "Multiple     spaces\n."
- ".\n<p>Multiple     spaces</p>"
- "````````````````````````````````"
- "<!-- END TESTS -->"
- "# Appendix: A parsing strategy"
- In this appendix we describe
- we describe some features of the
- features of the parsing strategy
- used in the CommonMark reference
- reference implementations.
- "## Overview"
- "Parsing has two phases:"
- "1."
- "In the first phase, lines of"
- "phase, lines of input are"
- of input are consumed and the
- consumed and the block
- structure of the document---
- "its division into paragraphs,"
- "into paragraphs, block quotes,"
- "list items, and so on---"
- is constructed.
- Text is assigned to these
- blocks but not parsed.
- Link reference definitions are
- definitions are parsed and a
- map of links is constructed.
- "2."
- "In the second phase, the raw"
- "phase, the raw text contents of"
- text contents of paragraphs and
- paragraphs and headings
- are parsed into sequences of
- sequences of Markdown inline
- Markdown inline elements (
- "elements (strings,"
- "code spans, links, emphasis, and"
- ", emphasis, and so on), using"
- "so on), using the map of link"
- references constructed in phase
- in phase 1.
- "At each point in processing, the"
- "processing, the document is"
- the document is represented as a
- represented as a tree of
- "**blocks**"
- ".  The root of the tree is a"
- "`document` block.  The"
- "block.  The `document`"
- may have any number of other
- number of other blocks as
- "**children**.  These children"
- "may, in turn, have other blocks"
- other blocks as children.
- The last child of a block
- is normally considered **open**
- ", meaning that subsequent lines"
- subsequent lines of input
- can alter its contents.
- (Blocks that are not open are
- "**closed**.)"
- "Here, for example, is a possible"
- ", is a possible document tree,"
- "document tree, with the open"
- ", with the open blocks"
- "marked by arrows:"
- "``` tree"
- "-> document\n  -> block_quote"
- paragraph
- "\"Lorem ipsum dolor\\nsit amet.\""
- "-> list (type=bullet tight=true"
- tight=true bullet_char=-)
- list_item
- paragraph
- "\"Qui *quodsi iracundia*\""
- "-> list_item"
- "-> paragraph"
- "             \"aliquando id\"\n```"
- "## Phase 1: block structure"
- Each line that is processed has
- is processed has an effect on
- has an effect on this tree.
- The line is
- "analyzed and, depending on its"
- "depending on its contents, the"
- "contents, the document may be"
- document may be altered
- in one or more of the following
- "of the following ways:"
- "1."
- One or more open blocks may be
- blocks may be closed.
- "2."
- One or more new blocks may be
- blocks may be created as
- be created as children of the
- last open block.
- "3."
- Text may be added to the last (
- to the last (deepest) open block
- ) open block remaining
- on the tree.
- Once a line has been
- a line has been incorporated
- incorporated into the tree in
- "into the tree in this way,"
- "it can be discarded, so input"
- ", so input can be read in a"
- can be read in a stream.
- "For each line, we follow this"
- ", we follow this procedure:"
- "1."
- First we iterate through the
- "through the open blocks,"
- "the open blocks, starting with"
- ", starting with the"
- "root document, and descending"
- ", and descending through last"
- through last children down to
- children down to the last
- open block.
- Each block imposes a condition
- a condition that the line must
- the line must satisfy
- if the block is to remain open.
- "For example, a block quote"
- ", a block quote requires a\n`>`"
- character.
- A paragraph requires a non-blank
- a non-blank line.
- In this phase we may match all
- we may match all or just some of
- or just some of the open
- blocks.
- But we cannot close unmatched
- "close unmatched blocks yet,"
- "blocks yet, because we may have"
- " we may have a\n["
- "[lazy continuation line]."
- "2."
- "Next, after consuming the"
- consuming the continuation
- the continuation markers for
- markers for existing
- "blocks, we look for new block"
- "for new block starts (e.g. `>`"
- "`>` for a block quote)."
- If we encounter a new block
- "a new block start, we close any"
- ", we close any blocks unmatched"
- in step 1 before creating the
- creating the new block as a
- new block as a child of the last
- matched container block.
- "3."
- "Finally, we look at the"
- ", we look at the remainder of"
- the remainder of the line (after
- the line (after block
- "markers like `>`"
- ", list markers, and indentation"
- and indentation have been
- have been consumed).
- This is text that can be
- text that can be incorporated
- be incorporated into the last
- into the last open
- "block (a paragraph, code block,"
- ", code block, heading, or raw"
- "heading, or raw HTML)."
- Setext headings are formed when
- are formed when we see a line of
- we see a line of a paragraph
- "that is a ["
- "[setext heading underline]."
- Reference link definitions are
- definitions are detected when a
- detected when a paragraph is
- a paragraph is closed;
- the accumulated text lines are
- text lines are parsed to see if
- parsed to see if they begin with
- one or more reference link
- reference link definitions.
- Any remainder becomes a
- normal paragraph.
- We can see how this works by
- this works by considering how
- considering how the tree above
- the tree above is
- generated by four lines of
- "by four lines of Markdown:"
- "``` markdown"
- "> Lorem ipsum dolor\nsit amet."
- "> - Qui *quodsi iracundia*"
- "> - aliquando id\n```"
- "At the outset, our document"
- ", our document model is just"
- "``` tree\n-> document\n```"
- "The first line of our text,"
- "``` markdown\n> Lorem ipsum dolor"
- "```"
- "causes a `block_quote`"
- block to be created as a child
- " as a child of our\nopen"
- "open `document` block, and a"
- "block, and a `paragraph`"
- "`paragraph` block as a child of"
- "the `block_quote`"
- "."
- Then the text is added to the
- is added to the last open
- "block, the `paragraph`:"
- "``` tree"
- "-> document\n  -> block_quote"
- "-> paragraph"
- "         \"Lorem ipsum dolor\"\n```"
- "The next line,"
- "``` markdown\nsit amet.\n```"
- "is a \"lazy continuation\""
- "\" of the open `paragraph`"
- "`paragraph`, so it gets added"
- "to the paragraph's text:"
- "``` tree"
- "-> document\n  -> block_quote"
- "-> paragraph"
- "\"Lorem ipsum dolor\\nsit amet.\""
- "```\n\nThe third line,"
- "``` markdown"
- "> - Qui *quodsi iracundia*\n```"
- "causes the `paragraph`"
- "block to be closed, and a new"
- "`list` block"
- " block\nopened as a child of the"
- "`block_quote`.  A `list_item`"
- ".  A `list_item` is also"
- " is also\nadded as a child of the"
- "`list`, and a `paragraph`"
- "`paragraph` as a child of\nthe"
- "the `list_item`"
- "."
- The text is then added to the
- "added to the new `paragraph`:"
- "``` tree"
- "-> document\n  -> block_quote"
- paragraph
- "\"Lorem ipsum dolor\\nsit amet.\""
- "-> list (type=bullet tight=true"
- tight=true bullet_char=-)
- "-> list_item"
- "-> paragraph"
- "\"Qui *quodsi iracundia*\""
- "```\n\nThe fourth line,"
- "``` markdown\n> - aliquando id"
- "> - aliquando id\n```"
- "causes the `list_item`"
- "`list_item` (and its child the"
- "`paragraph`) to be closed,"
- ") to be closed,\nand a new"
- "and a new `list_item`"
- "opened up as child of the `list`"
- "`list`.  A `paragraph`"
- is added as a child of the new
- "`list_item`"
- ", to contain the text."
- "We thus obtain the final tree:"
- "``` tree"
- "-> document\n  -> block_quote"
- paragraph
- "\"Lorem ipsum dolor\\nsit amet.\""
- "-> list (type=bullet tight=true"
- tight=true bullet_char=-)
- list_item
- paragraph
- "\"Qui *quodsi iracundia*\""
- "-> list_item"
- "-> paragraph"
- "             \"aliquando id\"\n```"
- "## Phase 2: inline structure"
- Once all of the input has been
- "input has been parsed, all open"
- "parsed, all open blocks are"
- open blocks are closed.
- "We then \"walk the tree,\""
- "visiting every node, and parse"
- "node, and parse raw"
- string contents of paragraphs
- of paragraphs and headings as
- and headings as inlines.
- At this
- point we have seen all the link
- all the link reference
- "link reference definitions, so"
- "definitions, so we can"
- resolve reference links as we go
- links as we go.
- "``` tree"
- "document\n  block_quote"
- "  block_quote\n    paragraph"
- "str \"Lorem ipsum dolor\""
- softbreak
- "str \"sit amet.\""
- list (type=bullet tight=true
- tight=true bullet_char=-)
- list_item
- paragraph
- "str \"Qui \""
- emph
- "str \"quodsi iracundia\""
- list_item
- paragraph
- "          str \"aliquando id\"\n```"
- "Notice how the [line ending]"
- "] in the first paragraph has"
- "been parsed as a `softbreak`"
- ", and the asterisks in the first"
- in the first list item
- "have become an `emph`."
- "###"
- An algorithm for parsing nested
- parsing nested emphasis and
- emphasis and links
- By far the trickiest part of
- part of inline parsing is
- "parsing is handling emphasis,"
- "strong emphasis, links, and"
- ", links, and images."
- This is done using the following
- algorithm.
- "When we'"
- re parsing inlines and we hit
- and we hit either
- "- a run of `*` or `_`"
- "`*` or `_` characters, or"
- "- a `[` or `![`"
- we insert a text node with these
- node with these symbols as its
- "symbols as its literal content,"
- "literal content, and we"
- add a pointer to this text node
- this text node to the
- "[delimiter stack](@)."
- "The [delimiter stack]"
- "] is a doubly linked list.  Each"
- element contains a pointer to a
- "a pointer to a text node, plus"
- "text node, plus information"
- plus information about
- "- the type of delimiter (`[`,"
- "`[`, `![`, `*`, `_`)"
- "- the number of delimiters,"
- "- whether the delimiter is \""
- "\"active\""
- "\" (all are active to start), and"
- "-"
- whether the delimiter is a
- "delimiter is a potential opener,"
- "opener, a potential closer,"
- or both (which depends on what
- depends on what sort of
- on what sort of characters
- of characters precede
- and follow the delimiters).
- "When we hit a `]`"
- "`]` character, we call the"
- "*look for link or image*"
- procedure (see below).
- When we hit the end of the input
- "end of the input, we call the"
- "*process emphasis*"
- "procedure (see below), with"
- "`stack_bottom` = NULL."
- "#### *look for link or image*"
- Starting at the top of the
- "the top of the delimiter stack,"
- "delimiter stack, we look"
- "stack, we look backwards"
- through the stack for an opening
- "`[` or `![` delimiter."
- "- If we don'"
- "t find one, we return a literal"
- "return a literal text node `]`."
- "- If we do find one, but it'"
- "'s not *active*"
- "*active*, we remove the inactive"
- "delimiter from the stack, and"
- "the stack, and return a literal"
- "return a literal text node `]`."
- "- If we find one and it'"
- "s active, then we parse ahead to"
- parse ahead to see if
- "we have an inline link/image,"
- "link/image, reference link/image"
- "link/image, collapsed reference"
- "link/image, or shortcut"
- ", or shortcut reference link/"
- reference link/image.
- "+ If we don'"
- "t, then we remove the opening"
- the opening delimiter from the
- delimiter stack and return a
- and return a literal text node
- "`]`."
- "+ If we do, then"
- "*"
- We return a link or image node
- or image node whose children are
- children are the inlines
- after the text node pointed to
- node pointed to by the opening
- by the opening delimiter.
- "* We run *process emphasis*"
- "on these inlines, with the `[`"
- "`[` opener\n      as"
- " opener\n      as `stack_bottom`."
- "*"
- We remove the opening delimiter.
- "*"
- If we have a link (and not an
- "link (and not an image), we also"
- "image), we also set all"
- "`[`"
- delimiters before the opening
- the opening delimiter to
- "*inactive*.  (This"
- will prevent us from getting
- us from getting links within
- links within links.)
- "#### *process emphasis*"
- "Parameter `stack_bottom`"
- sets a lower bound to how far we
- "descend in the [delimiter stack]"
- "].  If it is NULL, we can"
- go all the way to the bottom.
- "Otherwise, we stop before"
- "visiting `stack_bottom`."
- "Let `current_position`"
- "point to the element on the ["
- "[delimiter stack]\njust above"
- "]\njust above `stack_bottom`"
- (or the first element if
- "`stack_bottom`\nis NULL)."
- We keep track of the
- "`openers_bottom`"
- " for each delimiter\ntype (`*`,"
- "type (`*`, `_`"
- "), indexed to the length of the"
- length of the closing delimiter
- delimiter run
- (modulo 3) and to whether the
- to whether the closing delimiter
- delimiter can also be an
- opener.  Initialize this to
- "`stack_bottom`."
- Then we repeat the following
- the following until we run out
- until we run out of potential
- "closers:"
- "- Move `current_position`"
- forward in the delimiter stack (
- stack (if needed)
- until we find the first
- find the first potential closer
- potential closer with delimiter
- "`*` or `_`."
- (This will be the potential
- be the potential closer closest
- to the beginning of the input --
- the first one in parse order.)
- "-"
- "Now, look back in the stack ("
- in the stack (staying above
- "`stack_bottom` and\n  the"
- " and\n  the `openers_bottom`"
- for this delimiter type) for the
- first matching potential opener
- "potential opener (\"matching\""
- "matching\" means same delimiter)."
- "- If one is found:"
- +
- Figure out whether we have
- whether we have emphasis or
- have emphasis or strong emphasis
- "strong emphasis:"
- if both closer and opener spans
- and opener spans have length >=
- "have length >= 2, we have"
- "strong, otherwise regular."
- +
- Insert an emph or strong emph
- "or strong emph node accordingly,"
- "accordingly, after"
- the text node corresponding to
- corresponding to the opener.
- +
- Remove any delimiters between
- between the opener and closer
- and closer from
- the delimiter stack.
- +
- Remove 1 (for regular emph) or 2
- emph) or 2 (for strong emph)
- for strong emph) delimiters
- from the opening and closing
- and closing text nodes.
- If they become empty
- "as a result, remove them and"
- remove them and remove the
- and remove the corresponding
- corresponding element
- of the delimiter stack.
- "If the closing node is removed,"
- "node is removed, reset"
- "`current_position`"
- to the next element in the stack
- in the stack.
- "- If none is found:"
- "+ Set `openers_bottom`"
- to the element before
- "`current_position`."
- (We know that there are no
- there are no openers for this
- openers for this kind of closer
- kind of closer up to and
- "including this point, so this"
- "point, so this puts a lower"
- puts a lower bound on future
- bound on future searches.)
- + If the closer at
- "`current_position`"
- "is not a potential opener,"
- remove it from the delimiter
- the delimiter stack (since we
- "stack (since we know it can't"
- "'t\n    be a closer either)."
- "+ Advance `current_position`"
- to the next element in the stack
- in the stack.
- "After we'"
- "re done, we remove all"
- ", we remove all delimiters above"
- "`stack_bottom` from the"
- " from the\ndelimiter stack."
