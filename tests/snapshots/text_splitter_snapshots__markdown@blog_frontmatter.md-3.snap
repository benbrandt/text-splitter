---
source: tests/text_splitter_snapshots.rs
expression: chunks
input_file: tests/inputs/markdown/blog_frontmatter.md
---
- "---\nlayout: page\ntitle: Philosophy\npermalink: /philosophy/\n---"
- "\n\nJekyll offers a unique philosophy when approaching the problem of static\nsite generation. This core philosophy drives development and product\ndecisions. When a contributor, maintainer, or user asks herself what Jekyll\nis about, the following principles should come to mind:\n\n### 1. No Magic\n\nJekyll is not magic. A user should be able to understand the underlying\nprocesses that make up the Jekyll build without much reading. It should\ndo only what you ask it to and nothing more. When a user takes a certain\naction, the outcome should be easily understandable and focused.\n\n### 2. It \"Just Works\"\n\nThe out-of-the-box experience should be that it \"just works.\" Run\n`gem install jekyll` and it should build any Jekyll site that it's given.\nFeatures like auto-regeneration and settings like the markdown renderer\nshould represent sane defaults that work perfectly for the vast majority of\ncases. The burden of initial configuration should not be placed on the user.\n\n"
- "### 3. Content is King\n\nWhy is Jekyll so loved by content creators? It focuses on content first and\nforemost, making the process of publishing content on the Web easy. Users\nshould find the management of their content enjoyable and simple.\n\n### 4. Stability\n\nIf a user's site builds today, it should build tomorrow.\nBackwards-compatibility should be strongly preferred over breaking changes.\nBreaking changes should be made to support a strong practical goal, and\nbreaking changes should never be made to drive forward \"purity\" of the\ncodebase, or other changes purely to make the maintainers' lives easier.\nBreaking changes provide a significant amount of friction between upgrades\nand reduce the confidence of users in this software, and should thus be\navoided unless absolutely necessary.\nUpon breaking changes, provide a clear path for users to upgrade.\n\n"
- "### 5. Small & Extensible\n\nThe core of Jekyll should be simple and small, and extensibility should be\na first-class feature to provide added functionality from community\ncontributors. The core should be kept to features used by at least 90% of\nusersâ€“everything else should be provided as a plugin. New features should\nbe shipped as plugins and focus should be put on creating extensible core\nAPI's to support rich plugins.\n"
