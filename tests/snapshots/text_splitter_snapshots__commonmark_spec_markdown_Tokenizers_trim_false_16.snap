---
source: tests/text_splitter_snapshots.rs
expression: chunks
---
- "---\n"
- "title: CommonMark Spec\nauthor: John MacFarlane\n"
- "version: '0.31.2'\n"
- "date: '2024-01-28'\n"
- "license: '[CC-BY-SA 4.0](https"
- "://creativecommons.org/licenses/by-sa/"
- "4.0/)'\n...\n\n"
- "# Introduction\n\n"
- "## What is Markdown?\n\n"
- "Markdown is a plain text format for writing structured documents,\n"
- "based on conventions for indicating formatting in email\n"
- "and usenet posts.  It was developed by John Gruber (with\n"
- "help from Aaron Swartz) and released in 2004 in the form of a\n"
- "[syntax description](https://daringfireball.net/projects"
- "/markdown/syntax)\nand a Perl script ("
- "`Markdown.pl`) for converting Markdown to\n"
- "HTML.  In the next decade, dozens of implementations were\n"
- "developed in many languages.  Some extended the original\n"
- "Markdown syntax with conventions for footnotes, tables, and\n"
- "other document elements.  Some allowed Markdown documents to be\n"
- "rendered in formats other than HTML.  Websites like Reddit,\n"
- "StackOverflow, and GitHub had millions of people using "
- "Markdown.\n"
- "And Markdown started to be used beyond the web, to author books,\n"
- "articles, slide shows, letters, and lecture notes.\n\n"
- "What distinguishes Markdown from many other lightweight markup\n"
- "syntaxes, which are often easier to write, is its readability.\n"
- "As Gruber writes:\n\n"
- "> The overriding design goal for Markdown's formatting syntax is"
- "\n> to make it as readable as possible. The idea is that a\n> "
- "Markdown-formatted document should be publishable as-is, as\n> "
- "plain text, without looking like it's been marked up with tags\n> "
- "or formatting instructions.\n> ("
- "<https://daringfireball.net/projects/markdown/"
- ">)\n\n"
- "The point can be illustrated by comparing a sample of\n"
- "[AsciiDoc](https://"
- "asciidoc.org/) with\n"
- "an equivalent sample of Markdown.  Here is a sample of\n"
- "AsciiDoc from the AsciiDoc manual:\n\n"
- "```\n"
- "1. List item one.\n+\n"
- "List item one continued with a second paragraph followed by an\nIndented block.\n"
- "+\n"
- "................"
- ".\n$ ls *.sh\n"
- "$ mv *.sh ~/tmp\n"
- "................"
- ".\n+\nList item continued with a third paragraph.\n\n2. "
- "List item two continued with an open block.\n+\n--\n"
- "This paragraph is part of the preceding list item.\n\na. "
- "This list is nested and does not require explicit item\ncontinuation.\n+\n"
- "This paragraph is part of the preceding list item.\n\nb. List item b.\n\n"
- "This paragraph belongs to item two of the outer list.\n--\n```\n\n"
- "And here is the equivalent in Markdown:\n"
- "```\n"
- "1.  List item one.\n\n"
- "    List item one continued with a second paragraph followed by an\n    Indented block.\n\n"
- "        $ ls *.sh\n"
- "        $ mv *.sh ~/tmp\n\n"
- "    List item continued with a third paragraph.\n\n2.  "
- "List item two continued with an open block.\n\n"
- "    This paragraph is part of the preceding list item.\n\n    1. "
- "This list is nested and does not require explicit item continuation.\n\n"
- "       This paragraph is part of the preceding list item.\n\n    2. List item b.\n\n"
- "    This paragraph belongs to item two of the outer list.\n```\n\n"
- "The AsciiDoc version is, arguably, easier to write. "
- "You don't need\n"
- "to worry about indentation.  But the Markdown version is much easier\n"
- "to read.  The nesting of list items is apparent to the eye in the\n"
- "source, not just in the processed document.\n\n"
- "## Why is a spec needed?\n\n"
- "John Gruber's "
- "[canonical description of Markdown's\nsyntax"
- "](https://daringfireball.net/projects/markdown"
- "/syntax)\n"
- "does not specify the syntax unambiguously.  Here are some examples of\n"
- "questions it does not answer:\n\n"
- "1.  "
- "How much indentation is needed for a sublist?  "
- "The spec says that\n    "
- "continuation paragraphs need to be indented four spaces, but is\n    "
- "not fully explicit about sublists.  It is natural to think that\n    "
- "they, too, must be indented four spaces, but "
- "`Markdown.pl` does\n    not require that.  This is hardly a "
- "\"corner case,\" and divergences\n    "
- "between implementations on this issue often lead to surprises for\n    "
- "users in real documents. (See "
- "[this comment by John\n    Gruber"
- "](https://web.archive.org/web/"
- "20170611172104/http://"
- article.gmane.org/
- "gmane.text.markdown.general/1997).)\n\n"
- "2.  Is a blank line needed before a block quote or heading?\n    "
- "Most implementations do not require the blank line.  However,\n    "
- "this can lead to unexpected results in hard-wrapped text, and\n    "
- "also to ambiguities in parsing (note that some implementations\n    "
- "put the heading inside the blockquote, while others do not).\n    "
- "(John Gruber has also spoken "
- "[in favor of requiring the blank\n    lines"
- "](https://web.archive.org/web/"
- "20170611172104/http://"
- article.gmane.org/
- "gmane.text.markdown.general/2146).)\n\n"
- "3.  Is a blank line needed before an indented code block?\n    ("
- "`Markdown.pl`"
- " requires it, but this is not mentioned in the\n    "
- "documentation, and some implementations do not require it.)\n\n    "
- "``` markdown\n    paragraph\n        code?\n    ```"
- "\n\n4.  What is the exact rule for determining when list items get\n    wrapped in "
- "`<p>` tags?  Can a list be partially \"loose\""
- " and partially\n    \"tight\"?  What should we do with a list like this?\n\n    "
- "``` markdown\n    1. one\n\n    2. two\n    3. three\n"
- "    ```\n\n    Or this?\n"
- "\n    ``` markdown\n    1.  one\n        - a\n\n        - b\n    2.  two\n"
- "    ```\n\n    "
- "(There are some relevant comments by John Gruber\n    "
- "[here](https://web.archive.org/web/"
- "20170611172104/http://"
- article.gmane.org/
- "gmane.text.markdown.general/2554).)\n\n"
- "5.  "
- "Can list markers be indented?  "
- "Can ordered list markers be right-aligned?\n\n    "
- "``` markdown\n     8. item 1\n     9. item 2\n    "
- "10. item 2a\n    ```\n\n"
- "6.  Is this one list with a thematic break in its second item,\n    "
- "or two lists separated by a thematic break?\n\n    "
- "``` markdown\n    * a\n    * * * * *\n    * b\n"
- "    ```\n\n"
- "7.  When list markers change from numbers to bullets, do we have\n    "
- "two lists or one?  (The Markdown syntax description suggests two,\n    "
- "but the perl scripts and many other implementations produce one.)\n\n    "
- "``` markdown\n    1. fee\n    2. fie\n    -  foe\n    "
- "-  fum\n    ```\n\n"
- "8.  What are the precedence rules for the markers of inline structure?\n    "
- "For example, is the following a valid link, or does the code span\n    "
- "take precedence ?\n\n    "
- "``` markdown\n    "
- "[a backtick (`)](/url) and [another "
- "backtick (`)](/url).\n    ```\n\n"
- "9.  What are the precedence rules for markers of emphasis and strong\n    "
- "emphasis?  For example, how should the following be parsed?\n\n    "
- "``` markdown\n    *foo *bar* baz*\n"
- "    ```\n\n"
- "10. What are the precedence rules between block-level and inline-level\n    "
- "structure?  For example, how should the following be parsed?\n\n    "
- "``` markdown\n    "
- "- `a long code span can contain a hyphen like this\n    "
- "  - and it can screw things up`\n    ```\n\n"
- 11. Can list items include section headings?  (
- "`Markdown.pl` does not\n    "
- "allow this, but does allow blockquotes to include headings.)\n\n    "
- "``` markdown\n    - # Heading\n    ```"
- "\n\n12. Can list items be empty?"
- "\n\n    ``` markdown\n    * a\n    *\n    * b\n    ```"
- "\n\n13. Can link references be defined inside block quotes or list items?"
- "\n\n    ``` markdown\n    > Blockquote [foo].\n    >\n    "
- "> [foo]: /url\n    ```\n\n"
- "14. If there are multiple definitions for the same reference, which takes\n    precedence?"
- "\n\n    ``` markdown\n    [foo]: /url1\n    "
- "[foo]: /url2\n\n    [foo][]\n"
- "    ```\n\n"
- "In the absence of a spec, early implementers consulted "
- "`Markdown.pl`\nto resolve these ambiguities.  But "
- "`Markdown.pl` was quite buggy, and\n"
- "gave manifestly bad results in many cases, so it was not a\n"
- "satisfactory replacement for a spec.\n\n"
- "Because there is no unambiguous spec, implementations have diverged\n"
- "considerably.  As a result, users are often surprised to find that\n"
- "a document that renders one way on one system (say, a "
- "GitHub wiki)\n"
- "renders differently on another (say, converting to docbook using\n"
- "pandoc).  To make matters worse, because nothing in Markdown counts\n"
- "as a \"syntax error,\" the divergence often isn'"
- "t discovered right away.\n\n"
- "## About this document\n\n"
- "This document attempts to specify Markdown syntax unambiguously.\n"
- "It contains many examples with side-by-side Markdown and\n"
- "HTML.  These are intended to double as conformance tests.  An\n"
- "accompanying script `spec_tests.py`"
- " can be used to run the tests\nagainst any Markdown program:\n\n    "
- "python test/spec_tests.py --spec "
- "spec.txt --program PROGRAM\n\n"
- "Since this document describes how Markdown is to be parsed into\n"
- "an abstract syntax tree, it would have made sense to use an abstract\n"
- "representation of the syntax tree instead of HTML.  "
- "But HTML is capable\n"
- "of representing the structural distinctions we need to make, and the\n"
- "choice of HTML for the tests makes it possible to run the tests against\n"
- "an implementation without writing an abstract syntax tree renderer.\n\n"
- "Note that not every feature of the HTML samples is mandated by\n"
- "the spec.  For example, the spec says what counts as a link\n"
- "destination, but it doesn't mandate that non-ASCII characters in\n"
- "the URL be percent-encoded.  To use the automatic tests,\n"
- "implementers will need to provide a renderer that conforms to\n"
- "the expectations of the spec examples (percent-encoding\n"
- "non-ASCII characters in URLs).  "
- "But a conforming implementation\ncan use a different renderer and may choose not to\n"
- "percent-encode non-ASCII characters in URLs.\n\n"
- "This document is generated from a text file, "
- "`spec.txt`, written\n"
- "in Markdown with a small extension for the side-by-side tests.\n"
- "The script `tools/makespec.py` can be used to convert "
- "`spec.txt` into\n"
- HTML or CommonMark (which can then be converted into other formats
- ").\n\n"
- "In the examples, the `→` character is used to represent tabs.\n\n"
- "# Preliminaries\n\n"
- "## Characters and lines\n\n"
- "Any sequence of [characters] is a valid CommonMark\ndocument.\n"
- "\nA [character](@)"
- " is a Unicode code point.  Although some\n"
- "code points (for example, combining accents) do not correspond to\n"
- "characters in an intuitive sense, all code points count as characters\n"
- "for purposes of this spec.\n\n"
- "This spec does not specify an encoding; it thinks of lines as composed\nof "
- "[characters] rather than bytes.  A conforming parser may be limited\n"
- "to a certain encoding.\n\n"
- "A [line](@) is a sequence of zero or more [characters"
- "]\nother than line feed (`U+000A`"
- ") or carriage return (`U+000D`),\nfollowed by a "
- "[line ending] or by the end of file.\n\n"
- "A [line ending](@) is a line feed ("
- "`U+000A`), a carriage return\n("
- "`U+000D`"
- ") not followed by a line feed, or a carriage return and a\n"
- "following line feed.\n\n"
- "A line containing no characters, or a line containing only spaces\n("
- "`U+0020`) or tabs ("
- "`U+0009`), is called a "
- "[blank line](@).\n\n"
- "The following definitions of character classes will be used in this spec:\n"
- "\nA [Unicode whitespace character](@)"
- " is a character in the Unicode `Zs` general\n"
- "category, or a tab (`U+0009`"
- "), line feed (`U+000A`), form feed ("
- "`U+000C`), or\ncarriage return ("
- "`U+000D`).\n\n"
- "[Unicode whitespace](@)"
- " is a sequence of one or more\n[Unicode whitespace characters].\n\n"
- "A [tab](@) is `U+0009`.\n"
- "\nA [space](@) is `U+0020`.\n"
- "\nAn [ASCII control character](@) is a character between "
- "`U+0000–1F` (both\nincluding) or "
- "`U+007F`.\n\n"
- "An [ASCII punctuation character](@)\nis "
- "`!`, `\"`, `#`, `$`, "
- "`%`, `&`, `'`, `(`, "
- "`)`,\n`*`, `+`, `,`, "
- "`-`, `.`, `/`"
- " (U+0021–2F), \n`:`, "
- "`;`, `<`, `=`, `>`, "
- "`?`, `@`"
- " (U+003A–0040),\n`[`, "
- "`\\`, `]`, `^`, `_`, "
- "`` ` `` (U+005B–0060), \n"
- "`{`, `|`, `}`, or `~`"
- " (U+007B–007E).\n\n"
- "A [Unicode punctuation character](@)"
- " is a character in the Unicode `P`\n"
- "(puncuation) or `S` (symbol) general categories.\n\n"
- "## Tabs\n\n"
- "Tabs in lines are not expanded to [spaces].  However,\n"
- "in contexts where spaces help to define block structure,\n"
- "tabs behave as if they were replaced by spaces with a tab stop\n"
- "of 4 characters.\n\n"
- "Thus, for example, a tab can be used instead of four spaces\n"
- "in an indented code block.  (Note, however, that internal\n"
- "tabs are passed through as literal tabs, not expanded to\nspaces.)\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "→foo→baz→→bim\n.\n"
- "<pre><code>foo→baz→→bim\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  →foo→baz→→bim\n.\n"
- "<pre><code>foo→baz→→bim\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    a→a\n    ὐ→a\n.\n<pre><code>a→a\n"
- "ὐ→a\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n"
- "In the following example, a continuation paragraph of a list\n"
- "item is indented with a tab; this has exactly the same effect\n"
- "as indentation with four spaces would:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  - foo\n\n→bar\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n"
- "<p>bar</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n\n→→bar\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n<pre><code>  bar\n"
- "</code></pre>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "Normally the `>` that begins a block quote may be followed\n"
- "optionally by a space, which is not considered part of the\n"
- "content.  In the following case `>` is followed by a tab,\n"
- "which is treated as if it were expanded into three spaces.\n"
- "Since one of these spaces is considered part of the\ndelimiter, "
- "`foo` is considered to be indented six spaces\n"
- "inside the block quote context, so we get an indented\n"
- "code block starting with two spaces.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">→→foo\n.\n<blockquote>\n"
- "<pre><code>  foo\n</code></pre>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-→→foo\n.\n<ul>\n<li>\n"
- "<pre><code>  foo\n</code></pre>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    foo\n→bar\n.\n<pre><code>foo\nbar\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " - foo\n   - bar\n→ - baz\n.\n<ul>\n"
- "<li>foo\n<ul>\n<li>bar\n"
- "<ul>\n<li>baz</li>\n"
- "</ul>\n</li>\n</ul>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "#→Foo\n.\n<h1>Foo</h1>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n*→*→*→\n.\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Insecure characters\n\n"
- "For security reasons, the Unicode character `U+0000`"
- " must be replaced\n"
- with the REPLACEMENT CHARACTER (
- "`U+FFFD`).\n\n\n"
- "## Backslash escapes\n\n"
- "Any ASCII punctuation character may be backslash-escaped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\!"
- "\\\"\\#\\$\\%\\&\\'\\(\\)"
- "\\*\\+\\,\\-\\."
- "\\/\\:\\;\\<\\=\\>\\?"
- "\\@\\[\\\\\\]\\^\\_\\`\\{"
- "\\|\\}\\~\n.\n<p>!"
- "&quot;#$%&amp;'()*"
- "+,-./:;&lt;=&gt;"
- "?@[\\]^_`{|}~</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslashes before other characters are treated as literal\nbackslashes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\→\\A\\a\\ \\3\\φ\\«\n.\n"
- "<p>\\→\\A\\a\\ \\3\\φ\\«"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Escaped characters are treated as regular characters and do\n"
- "not have their usual Markdown meanings:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\*not emphasized*\n\\<br/> not a tag\n"
- "\\[not a link](/foo)\n\\`not code`\n"
- "1\\. not a list\n\\* not a list\n\\# not a heading\n"
- "\\[foo]: /url \"not a reference\"\n"
- "\\&ouml; not a character entity\n.\n"
- "<p>*not emphasized*\n"
- "&lt;br/&gt; not a tag\n"
- "[not a link](/foo)\n`not code`\n"
- "1. not a list\n* not a list\n# not a heading\n"
- "[foo]: /url &quot;not a reference"
- "&quot;\n"
- "&amp;ouml; not a character entity</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If a backslash is itself escaped, the following character is not:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\\\*emphasis*\n.\n"
- "<p>\\<em>emphasis</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A backslash at the end of the line is a [hard line break]"
- ":\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\\\nbar\n.\n<p>foo<br />\n"
- "bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash escapes do not work in code blocks, code spans, "
- "autolinks, or\nraw HTML:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`` \\[\\` ``\n.\n"
- "<p><code>\\[\\`</code></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    \\[\\]\n.\n<pre><code>\\[\\]\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~\n\\[\\]\n~~~\n.\n"
- "<pre><code>\\[\\]\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<https://example.com?find=\\*>\n.\n"
- "<p><a href=\"https://"
- example.com?
- "find=%5C*\">https://example.com?"
- "find=\\*</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"/bar\\/)\">\n.\n"
- "<a href=\"/bar\\/)\">\n"
- "````````````````"
- "````````````````\n\n\n"
- "But they work in all other contexts, including URLs and link titles,\n"
- "link references, and [info strings] in [fenced code blocks]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo](/bar\\* \"ti\\*tle"
- "\")\n.\n"
- "<p><a href=\"/bar*\" title="
- "\"ti*tle\">foo</a></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n\n"
- "[foo]: /bar\\* \"ti\\*tle"
- "\"\n.\n"
- "<p><a href=\"/bar*\" title="
- "\"ti*tle\">foo</a></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``` foo\\+bar\nfoo\n```\n.\n"
- "<pre><code class=\"language-foo+bar\">"
- "foo\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Entity and numeric character references\n\n"
- "Valid HTML entity references and numeric character references\n"
- "can be used in place of the corresponding Unicode character,\n"
- "with the following exceptions:\n\n"
- "- Entity and character references are not recognized in code\n  "
- "blocks and code spans.\n\n"
- "- Entity and character references cannot stand in place of\n  "
- "special characters that define structural elements in\n  CommonMark.  For example, although "
- "`&#42;` can be used\n  in place of a literal "
- "`*` character, `&#42;` cannot replace\n  `*`"
- " in emphasis delimiters, bullet list markers, or thematic\n  breaks.\n\n"
- "Conforming CommonMark parsers need not store information about\n"
- "whether a particular character was represented in the source\n"
- "using a Unicode character or an entity reference.\n\n"
- "[Entity references](@) consist of `&`"
- " + any of the valid\nHTML5 entity names + `;`"
- ". The\ndocument "
- "<https://html.spec.whatwg.org/"
- "entities.json>\nis used as an authoritative source for the valid entity\n"
- "references and their corresponding code points.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&nbsp; &amp; &copy; &"
- "AElig; &Dcaron;\n"
- "&frac34; &HilbertSpace; &DifferentialD;\n"
- "&ClockwiseContourIntegral; &ngE;\n.\n"
- "<p>  &amp; © Æ Ď\n¾ ℋ ⅆ\n"
- "∲ ≧̸</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Decimal numeric character\nreferences](@)\nconsist of "
- "`&#` + a string of 1--"
- "7 arabic digits + `;`. A\n"
- "numeric character reference is parsed as the corresponding\n"
- "Unicode character. "
- "Invalid Unicode code points will be replaced by\n"
- the REPLACEMENT CHARACTER (
- "`U+FFFD`).  For security reasons,\nthe code point "
- "`U+0000` will also be replaced by "
- "`U+FFFD`.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&#35; &#1234; &#992; &#"
- "0;\n.\n<p># Ӓ Ϡ �</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Hexadecimal numeric character\nreferences](@) consist of "
- "`&#` +\neither `X` or `x`"
- " + a string of 1-6 hexadecimal digits + `;`"
- ".\nThey too are parsed as the corresponding Unicode character (this\n"
- time specified with a hexadecimal numeral instead of decimal)
- ".\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&#X22; &#XD06; &#"
- "xcab;\n.\n"
- "<p>&quot; ആ ಫ</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here are some nonentities:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&nbsp &x; &#; &#x;\n"
- "&#87654321;\n&#abcdef0;\n"
- "&ThisIsNotDefined; &hi?;\n.\n"
- "<p>&amp;nbsp &amp;x; "
- "&amp;#; &amp;#x;\n"
- "&amp;#87654321;\n"
- "&amp;#abcdef0;\n"
- "&amp;ThisIsNotDefined; &amp"
- ";hi?;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Although HTML5 does accept some entity references\n"
- "without a trailing semicolon (such as `&copy`"
- "), these are not\nrecognized here, because it makes the grammar too ambiguous:\n\n"
- "````````````````"
- "```````````````` "
- "example\n&copy\n.\n<p>&amp;copy</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Strings that are not on the list of HTML5 named entities are not\n"
- "recognized as entity references either:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&MadeUpEntity;\n.\n"
- "<p>&amp;MadeUpEntity;</"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character references are recognized in any\n"
- "context besides code spans or code blocks, including\nURLs, [link titles"
- "], and [fenced code block][] [info strings]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"&ouml;&ouml"
- ";.html\">\n.\n"
- "<a href=\"&ouml;&ouml"
- ";.html\">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo](/f&ouml;&ouml"
- "; \"f&ouml;&ouml;\")\n.\n"
- "<p><a href=\"/f%C3%"
- "B6%C3%B6\" title=\"föö\""
- ">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n\n"
- "[foo]: /f&ouml;&ouml"
- "; \"f&ouml;&ouml;\"\n.\n"
- "<p><a href=\"/f%C3%"
- "B6%C3%B6\" title=\"föö\""
- ">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``` f&ouml;&ouml;\nfoo\n"
- "```\n.\n"
- "<pre><code class=\"language-föö\">"
- "foo\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character references are treated as literal\n"
- "text in code spans and code blocks:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`f&ouml;&ouml;`\n.\n"
- "<p><code>f&amp;ouml;&"
- "amp;ouml;</code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    f&ouml;f&ouml;\n.\n"
- "<pre><code>f&amp;ouml;f"
- "&amp;ouml;\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character references cannot be used\n"
- "in place of symbols indicating structure in CommonMark\ndocuments.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&#42;foo&#42;\n*foo*\n.\n"
- "<p>*foo*\n"
- "<em>foo</em></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&#42; foo\n\n* foo\n.\n"
- "<p>* foo</p>\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo&#10;&#10;bar\n.\n"
- "<p>foo\n\nbar</p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "&#9;foo\n.\n"
- "<p>→foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[a](url &quot;tit&"
- "quot;)\n.\n"
- "<p>[a](url &quot;tit"
- "&quot;)</p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "# Blocks and inlines\n\n"
- "We can think of a document as a sequence of\n[blocks](@)"
- "---structural elements like paragraphs, block\n"
- "quotations, lists, headings, rules, and code blocks.  "
- "Some blocks (like\n"
- "block quotes and list items) contain other blocks; others (like\n"
- "headings and paragraphs) contain [inline](@) content"
- "---text,\n"
- "links, emphasized text, images, code spans, and so on.\n\n"
- "## Precedence\n\n"
- "Indicators of block structure always take precedence over indicators\n"
- "of inline structure.  So, for example, the following is a list with\n"
- "two items, not a list with one item containing a code span:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- `one\n- two`\n.\n<ul>\n"
- "<li>`one</li>\n"
- "<li>two`</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This means that parsing can proceed in two steps:  first, the block\n"
- "structure of the document can be discerned; second, text lines inside\n"
- "paragraphs, headings, and other block constructs can be parsed for "
- "inline\nstructure.  The second step requires information about link reference\n"
- "definitions that will be available only at the end of the first\n"
- "step.  Note that the first step requires processing lines in sequence,\n"
- "but the second can be parallelized, since the inline parsing of\n"
- "one block element does not affect the inline parsing of any other.\n\n"
- "## Container blocks and leaf blocks\n\n"
- "We can divide blocks into two types:\n"
- "[container blocks](#container-blocks),\n"
- "which can contain other blocks, and "
- "[leaf blocks](#leaf-blocks),\nwhich cannot.\n\n"
- "# Leaf blocks\n\n"
- "This section describes the different kinds of leaf block that make up a\n"
- "Markdown document.\n\n"
- "## Thematic breaks\n\n"
- "A line consisting of optionally up to three spaces of indentation, followed "
- "by a\nsequence of three or more matching `-`, `_`"
- ", or `*` characters, each followed\n"
- "optionally by any number of spaces or tabs, forms a\n"
- "[thematic break](@).\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "***\n---\n___\n.\n<hr />\n"
- "<hr />\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "Wrong characters:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n+++\n.\n<p>+++</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n===\n.\n<p>===</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Not enough characters:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "--\n**\n__\n.\n<p>--\n**\n"
- "__</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Up to three spaces of indentation are allowed:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " ***\n  ***\n   ***\n.\n<hr />\n"
- "<hr />\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is too many:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    ***\n.\n<pre><code>***\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n    ***\n.\n<p>Foo\n"
- "***</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "More than three characters may be used:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ________________
- ________________
- "_____\n.\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "Spaces and tabs are allowed between the characters:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n - - -\n.\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " **  * ** * ** * **\n.\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n-     -      -      -\n.\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "Spaces and tabs are allowed at the end:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n- - - -    \n.\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, no other characters may occur in the line:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_ _ _ _ a\n\na------\n\n"
- "---a---\n.\n"
- "<p>_ _ _ _ a</p>\n"
- "<p>a------</p>\n"
- "<p>---a---</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "It is required that all of the characters other than spaces or tabs be the "
- "same.\nSo, this is not a thematic break:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " *-*\n.\n"
- "<p><em>-</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Thematic breaks do not need blank lines before or after:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n***\n- bar\n.\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "<hr />\n<ul>\n"
- "<li>bar</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Thematic breaks can interrupt a paragraph:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n***\nbar\n.\n<p>Foo</p>\n"
- "<hr />\n<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If a line of dashes that meets the above conditions for being a\n"
- "thematic break could also be interpreted as the underline of a ["
- "setext\nheading], the interpretation as a\n[setext heading]"
- " takes precedence. Thus, for example,\n"
- "this is a setext heading, not a paragraph followed by a thematic "
- "break:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n---\nbar\n.\n"
- "<h2>Foo</h2>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "When both a thematic break and a list item are possible\n"
- "interpretations of a line, the thematic break takes precedence:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "* Foo\n* * *\n* Bar\n.\n<ul>\n"
- "<li>Foo</li>\n</ul>\n"
- "<hr />\n<ul>\n"
- "<li>Bar</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If you want a thematic break in a list item, use a different bullet"
- ":\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- Foo\n- * * *\n.\n<ul>\n"
- "<li>Foo</li>\n<li>\n"
- "<hr />\n</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## ATX headings\n\n"
- "An [ATX heading](@)\n"
- "consists of a string of characters, parsed as inline content, between an\n"
- "opening sequence of 1--6 unescaped `#`"
- " characters and an optional\nclosing sequence of any number of unescaped `#`"
- " characters.\nThe opening sequence of `#`"
- " characters must be followed by spaces or tabs, or\n"
- "by the end of line. The optional closing sequence of `#`"
- "s must be preceded by\n"
- "spaces or tabs and may be followed by spaces or tabs only.  "
- "The opening\n`#`"
- " character may be preceded by up to three spaces of indentation.  The raw\n"
- "contents of the heading are stripped of leading and trailing space or tabs\n"
- "before being parsed as inline content.  "
- "The heading level is equal to the number\nof `#`"
- " characters in the opening sequence.\n\nSimple headings:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "# foo\n## foo\n### foo\n"
- "#### foo\n##### foo\n"
- "###### foo\n.\n"
- "<h1>foo</h1>\n"
- "<h2>foo</h2>\n"
- "<h3>foo</h3>\n"
- "<h4>foo</h4>\n"
- "<h5>foo</h5>\n"
- "<h6>foo</h6>\n"
- "````````````````"
- "````````````````\n\n\n"
- "More than six `#` characters is not a heading:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "####### foo\n.\n"
- "<p>####### foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "At least one space or tab is required between the `#`"
- " characters and the\nheading'"
- "s contents, unless the heading is empty.  Note that many\n"
- "implementations currently do not require the space.  However, the\n"
- "space was required by the\n"
- "[original ATX implementation](http://"
- www.aaronsw.com/2002/atx/
- "atx.py),\n"
- "and it helps prevent things like the following from being parsed as\nheadings:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "#5 bolt\n\n#hashtag\n.\n"
- "<p>#5 bolt</p>\n"
- "<p>#hashtag</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not a heading, because the first `#` is escaped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\## foo\n.\n"
- "<p>## foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Contents are parsed as inlines:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "# foo *bar* \\*baz\\*\n.\n"
- "<h1>foo <em>bar</em> *"
- "baz*</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Leading and trailing spaces or tabs are ignored in parsing inline content:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n#                  foo                     \n.\n<h1>foo</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Up to three spaces of indentation are allowed:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " ### foo\n  ## foo\n   # foo\n.\n"
- "<h3>foo</h3>\n"
- "<h2>foo</h2>\n"
- "<h1>foo</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is too many:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    # foo\n.\n<pre><code># foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\n    # bar\n.\n<p>foo\n# bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A closing sequence of `#` characters is optional:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "## foo ##\n  ###   bar    ###\n.\n"
- "<h2>foo</h2>\n"
- "<h3>bar</h3>\n"
- "````````````````"
- "````````````````\n\n\n"
- "It need not be the same length as the opening sequence:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "# foo #############"
- "################"
- "#####\n##### foo ##\n.\n"
- "<h1>foo</h1>\n"
- "<h5>foo</h5>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Spaces or tabs are allowed after the closing sequence:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "### foo ###     \n.\n"
- "<h3>foo</h3>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A sequence of `#` characters with anything but spaces or tabs following it\n"
- "is not a closing sequence, but counts as part of the contents of the\n"
- "heading:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "### foo ### b\n.\n"
- "<h3>foo ### b</h3>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The closing sequence must be preceded by a space or tab:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "# foo#\n.\n"
- "<h1>foo#</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash-escaped `#` characters do not count as part\n"
- "of the closing sequence:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "### foo \\###\n"
- "## foo #\\##\n# foo \\#\n.\n"
- "<h3>foo ###</h3>\n"
- "<h2>foo ###</h2>\n"
- "<h1>foo #</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "ATX headings need not be separated from surrounding content by blank\n"
- "lines, and they can interrupt paragraphs:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "****\n## foo\n****\n.\n"
- "<hr />\n<h2>foo</h2>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo bar\n# baz\nBar foo\n.\n"
- "<p>Foo bar</p>\n"
- "<h1>baz</h1>\n"
- "<p>Bar foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "ATX headings can be empty:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "## \n#\n### ###\n.\n"
- "<h2></h2>\n"
- "<h1></h1>\n"
- "<h3></h3>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Setext headings\n\n"
- "A [setext heading](@) consists of one or more\n"
- "lines of text, not interrupted by a blank line, of which the first line "
- "does not\nhave more than 3 spaces of indentation, followed by\na ["
- "setext heading underline].  The lines of text must be such\n"
- "that, were they not followed by the setext heading underline,\n"
- "they would be interpreted as a paragraph:  they cannot be\ninterpretable as a ["
- "code fence], [ATX heading][ATX headings],\n"
- "[block quote][block quotes], [thematic break]["
- "thematic breaks],\n[list item][list items], or ["
- "HTML block][HTML blocks].\n\n"
- "A [setext heading underline](@) is a sequence of\n"
- "`=` characters or a sequence of `-`"
- " characters, with no more than 3\n"
- "spaces of indentation and any number of trailing spaces or tabs.\n\n"
- "The heading is a level 1 heading if `=` characters are used in\nthe "
- "[setext heading underline], and a level 2 heading if "
- "`-`\ncharacters are used.  The contents of the heading are the result\n"
- "of parsing the preceding lines of text as CommonMark inline\ncontent.\n\n"
- "In general, a setext heading need not be preceded or followed by a\n"
- "blank line.  However, it cannot interrupt a paragraph, so when a\n"
- "setext heading comes after a paragraph, a blank line is needed between\n"
- "them.\n\nSimple examples:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo *bar*\n=========\n\n"
- "Foo *bar*\n---------\n.\n"
- "<h1>Foo <em>bar</em></"
- "h1>\n"
- "<h2>Foo <em>bar</em></"
- "h2>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The content of the header may span more than one line:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo *bar\nbaz*\n====\n.\n"
- "<h1>Foo <em>bar\n"
- "baz</em></h1>\n"
- "````````````````"
- "````````````````\n\n"
- "The contents are the result of parsing the headings's raw\n"
- "content as inlines.  The heading's raw content is formed by\n"
- "concatenating the lines and removing initial and final\nspaces or tabs.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  Foo *bar\nbaz*→\n====\n.\n"
- "<h1>Foo <em>bar\n"
- "baz</em></h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The underlining can be any length:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n"
- "----------------"
- "---------\n\nFoo\n=\n.\n"
- "<h2>Foo</h2>\n"
- "<h1>Foo</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The heading content can be preceded by up to three spaces of indentation, "
- "and\nneed not line up with the underlining:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   Foo\n---\n\n  Foo\n-----\n\n  Foo\n"
- "  ===\n.\n<h2>Foo</h2>\n"
- "<h2>Foo</h2>\n"
- "<h1>Foo</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is too many:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    Foo\n    ---\n\n    Foo\n---\n.\n"
- "<pre><code>Foo\n---\n\nFoo\n"
- "</code></pre>\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "The setext heading underline can be preceded by up to three spaces of\n"
- "indentation, and may have trailing spaces or tabs:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n   ----      \n.\n"
- "<h2>Foo</h2>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is too many:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n    ---\n.\n<p>Foo\n"
- "---</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The setext heading underline cannot contain internal spaces or tabs:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n= =\n\nFoo\n--- -\n.\n<p>Foo\n"
- "= =</p>\n<p>Foo</p>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "Trailing spaces or tabs in the content line do not cause a hard line "
- "break:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo  \n-----\n.\n"
- "<h2>Foo</h2>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Nor does a backslash at the end:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\\\n----\n.\n"
- "<h2>Foo\\</h2>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Since indicators of block structure take precedence over\n"
- "indicators of inline structure, the following are setext headings:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`Foo\n----\n`\n\n<a title=\"a lot\n"
- "---\nof dashes\"/>\n.\n"
- "<h2>`Foo</h2>\n"
- "<p>`</p>\n"
- "<h2>&lt;a title=&quot;"
- "a lot</h2>\n"
- "<p>of dashes&quot;/&gt;"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The setext heading underline cannot be a [lazy continuation\nline]"
- " in a list item or block quote:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> Foo\n---\n.\n<blockquote>\n"
- "<p>Foo</p>\n</blockquote>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\nbar\n===\n.\n<blockquote>\n"
- "<p>foo\nbar\n===</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- Foo\n---\n.\n<ul>\n"
- "<li>Foo</li>\n</ul>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "A blank line is needed between a paragraph and a following\n"
- "setext heading, since otherwise the paragraph becomes part\nof the heading'"
- "s content:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\nBar\n---\n.\n<h2>Foo\n"
- "Bar</h2>\n"
- "````````````````"
- "````````````````\n\n\n"
- "But in general a blank line is not required before or after\n"
- "setext headings:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "---\nFoo\n---\nBar\n---\nBaz\n.\n"
- "<hr />\n<h2>Foo</h2>\n"
- "<h2>Bar</h2>\n"
- "<p>Baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Setext headings cannot be empty:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\n====\n.\n<p>====</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Setext heading text lines must not be interpretable as block\n"
- "constructs other than paragraphs.  So, the line of dashes\n"
- "in these examples gets interpreted as a thematic break:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "---\n---\n.\n<hr />\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n-----\n.\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    foo\n---\n.\n<pre><code>foo\n"
- "</code></pre>\n<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\n-----\n.\n<blockquote>\n"
- "<p>foo</p>\n</blockquote>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "If you want a heading with `> foo`"
- " as its literal text, you can\nuse backslash escapes:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\> foo\n------\n.\n"
- "<h2>&gt; foo</h2>\n"
- "````````````````"
- "````````````````\n\n\n"
- "**Compatibility note:**  Most existing Markdown implementations\n"
- "do not allow the text of setext headings to span multiple lines.\n"
- "But there is no consensus about how to interpret\n\n"
- "``` markdown\nFoo\nbar\n---\nbaz\n```"
- "\n\nOne can find four different interpretations:\n"
- "\n1. paragraph \"Foo\", heading \"bar\", paragraph \""
- "baz\"\n"
- "2. paragraph \"Foo bar\", thematic break, paragraph \""
- "baz\"\n3. paragraph \"Foo bar --- baz\"\n"
- "4. heading \"Foo bar\", paragraph \"baz\"\n\n"
- "We find interpretation 4 most natural, and interpretation 4\n"
- "increases the expressive power of CommonMark, by allowing\n"
- "multiline headings.  Authors who want interpretation 1 can\n"
- "put a blank line after the first paragraph:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n\nbar\n---\nbaz\n.\n"
- "<p>Foo</p>\n"
- "<h2>bar</h2>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Authors who want interpretation 2 can put blank lines around\nthe thematic break,\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\nbar\n\n---\n\nbaz\n.\n<p>Foo\n"
- "bar</p>\n<hr />\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "or use a thematic break that cannot count as a [setext heading\n"
- "underline], such as\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\nbar\n* * *\nbaz\n.\n<p>Foo\n"
- "bar</p>\n<hr />\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Authors who want interpretation 3 can use backslash escapes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\nbar\n\\---\nbaz\n.\n<p>Foo\nbar\n"
- "---\nbaz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Indented code blocks\n\n"
- "An [indented code block](@)"
- " is composed of one or more\n[indented chunks]"
- " separated by blank lines.\nAn [indented chunk](@)"
- " is a sequence of non-blank lines,\n"
- "each preceded by four or more spaces of indentation. "
- "The contents of the code\nblock are the literal contents of the lines, including trailing\n"
- "[line endings], minus four spaces of indentation.\n"
- "An indented code block has no [info string].\n\n"
- "An indented code block cannot interrupt a paragraph, so there must be\n"
- "a blank line between a paragraph and a following indented code block.\n"
- "(A blank line is not needed, however, between a code block and a "
- "following\nparagraph.)\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    a simple\n      indented code block\n.\n<pre><code>a simple\n"
- "  indented code block\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If there is any ambiguity between an interpretation of indentation\n"
- "as a code block and as indicating that material belongs to a [list\nitem]"
- "[list items], the list item interpretation takes precedence:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  - foo\n\n    bar\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n"
- "<p>bar</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1.  foo\n\n    - bar\n.\n<ol>\n<li>\n"
- "<p>foo</p>\n<ul>\n"
- "<li>bar</li>\n</ul>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "The contents of a code block are literal text, and do not get parsed\n"
- "as Markdown:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    <a/>\n    *hi*\n\n    - one\n.\n"
- "<pre><code>&lt;a/&gt;\n"
- "*hi*\n\n- one\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here we have three chunks separated by blank lines:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n.\n<pre><code>chunk1\n\n"
- "chunk2\n\n\n\nchunk3\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Any initial spaces or tabs beyond four spaces of indentation will be included "
- "in\nthe content, even in interior blank lines:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    chunk1\n      \n      chunk2\n.\n<pre><code>chunk1\n  \n  chunk2\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "An indented code block cannot interrupt a paragraph.  (This\n"
- "allows hanging indents and the like.)\n\n"
- "````````````````"
- "```````````````` "
- "example\nFoo\n    bar\n\n.\n<p>Foo\nbar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, any non-blank line with fewer than four spaces of indentation "
- "ends\nthe code block immediately.  So a paragraph may occur immediately\n"
- "after indented code:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    foo\nbar\n.\n<pre><code>foo\n"
- "</code></pre>\n<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "And indented code can occur immediately before and after other kinds of\nblocks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "# Heading\n    foo\nHeading\n------\n    foo\n"
- "----\n.\n<h1>Heading</h1>\n"
- "<pre><code>foo\n</code></pre>\n"
- "<h2>Heading</h2>\n"
- "<pre><code>foo\n</code></pre>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "The first line can be preceded by more than four spaces of indentation:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "        foo\n    bar\n.\n<pre><code>    foo\nbar\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Blank lines preceding or following an indented code block\n"
- "are not included in it:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\n    \n    foo\n    \n\n.\n<pre><code>foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Trailing spaces or tabs are included in the code block's content:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    foo  \n.\n<pre><code>foo  \n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "## Fenced code blocks\n\n"
- "A [code fence](@) is a sequence\n"
- "of at least three consecutive backtick characters (`` ` ``) or\n"
- "tildes (`~`"
- ").  (Tildes and backticks cannot be mixed.)\nA "
- "[fenced code block](@)\n"
- "begins with a code fence, preceded by up to three spaces of indentation"
- ".\n\n"
- "The line with the opening code fence may optionally contain some text\n"
- "following the code fence; this is trimmed of leading and trailing\n"
- "spaces or tabs and called the [info string](@)"
- ". If the [info string] comes\n"
- "after a backtick fence, it may not contain any backtick\n"
- "characters.  (The reason for this restriction is that otherwise\n"
- "some inline code would be incorrectly interpreted as the\n"
- "beginning of a fenced code block.)\n\n"
- "The content of the code block consists of all subsequent lines, until\na closing ["
- "code fence] of the same type as the code block\n"
- "began with (backticks or tildes), and with at least as "
- "many backticks\n"
- "or tildes as the opening code fence.  If the leading code fence is\n"
- "preceded by N spaces of indentation, then up to N spaces of "
- "indentation are\n"
- "removed from each line of the content (if present).  "
- "(If a content line is not\n"
- "indented, it is preserved unchanged.  "
- "If it is indented N spaces or less, all\n"
- "of the indentation is removed.)\n\n"
- The closing code fence may be preceded by up to three spaces of indentation
- ", and\n"
- "may be followed only by spaces or tabs, which are ignored.  "
- "If the end of the\n"
- "containing block (or document) is reached and no closing code fence\n"
- "has been found, the code block contains all of the lines after the\n"
- "opening code fence until the end of the containing block (or\n"
- "document).  (An alternative spec would require backtracking in the\n"
- "event that a closing code fence is not found.  But this makes parsing\n"
- "much less efficient, and there seems to be no real downside to the\n"
- "behavior described here.)\n\n"
- "A fenced code block may interrupt a paragraph, and does not require\n"
- "a blank line either before or after.\n\n"
- "The content of a code fence is treated as literal text, not parsed\n"
- "as inlines.  The first word of the [info string]"
- " is typically used to\nspecify the language of the code sample, and rendered in the "
- "`class`\nattribute of the `code`"
- " tag.  However, this spec does not mandate any\nparticular treatment of the ["
- "info string].\n\nHere is a simple example with backticks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\n<\n >\n```\n.\n"
- "<pre><code>&lt;\n &gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "With tildes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~\n<\n >\n~~~\n.\n"
- "<pre><code>&lt;\n &gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n"
- "Fewer than three backticks is not enough:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``\nfoo\n``\n.\n"
- "<p><code>foo</code></p>\n"
- "````````````````"
- "````````````````\n\n"
- "The closing code fence must use the same character as the opening\nfence:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\naaa\n~~~\n```\n.\n"
- "<pre><code>aaa\n~~~\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~\naaa\n```\n~~~\n.\n"
- "<pre><code>aaa\n```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The closing code fence must be at least as long as the opening fence:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "````\naaa\n```\n``````\n.\n"
- "<pre><code>aaa\n```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~~\naaa\n~~~\n~~~~\n.\n"
- "<pre><code>aaa\n~~~\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Unclosed code blocks are closed by the end of the document\n"
- "(or the enclosing [block quote][block quotes] or "
- "[list item][list items]):\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\n.\n"
- "<pre><code></code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`````\n\n```\naaa\n.\n"
- "<pre><code>\n```\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> ```\n> aaa\n\nbbb\n.\n<blockquote>\n"
- "<pre><code>aaa\n</code></pre>\n"
- "</blockquote>\n<p>bbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A code block can have all empty lines as its content:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\n\n  \n```\n.\n<pre><code>\n  \n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A code block can be empty:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\n```\n.\n"
- "<pre><code></code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Fences can be indented.  "
- "If the opening fence is indented,\n"
- "content lines will have equivalent opening indentation removed,\nif present:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " ```\n aaa\naaa\n```\n.\n"
- "<pre><code>aaa\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  ```\naaa\n  aaa\naaa\n  ```\n.\n"
- "<pre><code>aaa\naaa\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   ```\n   aaa\n    aaa\n  aaa\n   ```\n.\n"
- "<pre><code>aaa\n aaa\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is too many:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    ```\n    aaa\n    ```\n.\n"
- "<pre><code>```\naaa\n```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Closing fences may be preceded by up to three spaces of indentation, and "
- "their\nindentation need not match that of the opening fence:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\naaa\n  ```\n.\n"
- "<pre><code>aaa\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   ```\naaa\n  ```\n.\n"
- "<pre><code>aaa\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not a closing fence, because it is indented 4 spaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\naaa\n    ```\n.\n"
- "<pre><code>aaa\n    ```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Code fences (opening and closing) cannot contain internal spaces or tabs:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``` ```\naaa\n.\n"
- "<p><code> </code>\naaa</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~~~~\naaa\n~~~ ~~\n.\n"
- "<pre><code>aaa\n~~~ ~~\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Fenced code blocks can interrupt paragraphs, and can be followed\n"
- "directly by paragraphs, without a blank line between:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\n```\nbar\n```\nbaz\n.\n"
- "<p>foo</p>\n<pre><code>bar\n"
- "</code></pre>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Other blocks can also occur before and after fenced code blocks\n"
- "without an intervening blank line:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\n---\n~~~\nbar\n~~~\n# baz\n.\n"
- "<h2>foo</h2>\n"
- "<pre><code>bar\n</code></pre>\n"
- "<h1>baz</h1>\n"
- "````````````````"
- "````````````````\n\n\n"
- "An [info string] can be provided after the opening code fence.\n"
- "Although this spec doesn't mandate any particular treatment of\n"
- "the info string, the first word is typically used to specify\n"
- "the language of the code block. In HTML output, the language is\n"
- "normally indicated by adding a class to the `code` element consisting\nof "
- "`language-` followed by the language name.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```ruby\ndef foo(x)\n  return 3\nend\n"
- "```\n.\n"
- "<pre><code class=\"language-ruby\">def "
- "foo(x)\n  return 3\nend\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~~    ruby startline=3 $%@#$\n"
- "def foo(x)\n  return 3\nend\n~~~~~~~\n"
- ".\n"
- "<pre><code class=\"language-ruby\">def "
- "foo(x)\n  return 3\nend\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "````;\n````\n.\n"
- "<pre><code class=\"language-;\"></code"
- "></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Info strings] for backtick code blocks cannot contain backticks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``` aa ```\nfoo\n.\n"
- "<p><code>aa</code>\n"
- "foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Info strings]"
- " for tilde code blocks can contain backticks and tildes:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "~~~ aa ``` ~~~\nfoo\n~~~\n"
- ".\n"
- "<pre><code class=\"language-aa\">foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Closing code fences cannot have [info strings]:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\n``` aaa\n```\n.\n"
- "<pre><code>``` aaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "## HTML blocks\n\n"
- "An [HTML block](@)"
- " is a group of lines that is treated\n"
- as raw HTML (and will not be escaped in HTML output
- ").\n\n"
- "There are seven kinds of [HTML block]"
- ", which can be defined by their\n"
- "start and end conditions.  The block begins with a line that meets a\n"
- "[start condition](@)"
- " (after up to three optional spaces of indentation).\n"
- "It ends with the first subsequent line that meets a matching\n"
- "[end condition](@)"
- ", or the last line of the document, or the last line of\nthe "
- "[container block](#container-blocks) containing the current HTML\n"
- "block, if no line is encountered that meets the [end condition].  If\n"
- "the first line meets both the [start condition] and the [end\ncondition]"
- ", the block will contain just that line.\n\n"
- "1.  **Start condition:**  line begins with the string "
- "`<pre`,\n`<script`, `<style`, or "
- "`<textarea`"
- " (case-insensitive), followed by a space,\n"
- "a tab, the string `>`"
- ", or the end of the line.\\\n**End condition:**"
- "  line contains an end tag\n`</pre>`, "
- "`</script>`, `</style>`, or "
- "`</textarea>` (case-insensitive; it\n"
- "need not match the start tag).\n\n"
- "2.  **Start condition:** line begins with the string "
- "`<!--`.\\\n**End condition:**"
- "  line contains the string `-->`.\n\n"
- "3.  **Start condition:** line begins with the string "
- "`<?`.\\\n**End condition:**"
- " line contains the string `?>`.\n\n"
- "4.  **Start condition:** line begins with the string "
- "`<!`\nfollowed by an ASCII letter.\\\n"
- "**End condition:** line contains the character `>`.\n\n"
- "5.  **Start condition:**  line begins with the string\n"
- "`<![CDATA[`.\\\n"
- "**End condition:** line contains the string `]]>`"
- ".\n\n"
- "6.  **Start condition:** line begins with the string "
- "`<` or `</`\n"
- "followed by one of the strings (case-insensitive) `address`"
- ",\n`article`, `aside`, `base`, "
- "`basefont`, `blockquote`, `body`"
- ",\n`caption`, `center`, `col`, "
- "`colgroup`, `dd`, `details`, "
- "`dialog`,\n`dir`, `div`, "
- "`dl`, `dt`, `fieldset`, "
- "`figcaption`, `figure`,\n`footer`, "
- "`form`, `frame`, `frameset`,\n"
- "`h1`, `h2`, `h3`, "
- "`h4`, `h5`, `h6`, "
- "`head`, `header`, `hr`,\n`html`"
- ", `iframe`, `legend`, `li`, "
- "`link`, `main`, `menu`, "
- "`menuitem`,\n`nav`, `noframes`"
- ", `ol`, `optgroup`, `option`, "
- "`p`, `param`,\n`search`, `section`"
- ", `summary`, `table`, `tbody`, "
- "`td`,\n`tfoot`, `th`, "
- "`thead`, `title`, `tr`, "
- "`track`, `ul`, followed\n"
- "by a space, a tab, the end of the line, the string "
- "`>`, or\nthe string `/>`.\\\n"
- "**End condition:** line is followed by a [blank line]"
- ".\n\n"
- "7.  **Start condition:**  line begins with a complete ["
- "open tag]\n(with any [tag name] other than `pre`, "
- "`script`,\n`style`, or `textarea`"
- ") or a complete [closing tag],\n"
- "followed by zero or more spaces and tabs, followed by the end of the "
- "line.\\\n**End condition:** line is followed by a ["
- "blank line].\n\n"
- "HTML blocks continue until they are closed by their appropriate\n[end condition]"
- ", or the last line of the document or other "
- "[container\nblock](#container-blocks)"
- ".  This means any HTML "
- "**within an HTML\nblock**"
- " that might otherwise be recognised as a start condition will\n"
- "be ignored by the parser and passed through as-is, without changing\n"
- "the parser's state.\n\n"
- "For instance, `<pre>` within an HTML block started by "
- "`<table>` will not affect\n"
- "the parser state; as the HTML block was started in by start "
- "condition 6, it\nwill end at any blank line. This can be surprising:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<table><tr><td>\n<pre>\n"
- "**Hello**,\n\n_world_.\n</pre>\n"
- "</td></tr></table>\n.\n"
- "<table><tr><td>\n<pre>\n"
- "**Hello**,\n"
- "<p><em>world</em>.\n"
- "</pre></p>\n"
- "</td></tr></table>\n"
- "````````````````"
- "````````````````\n\n"
- "In this case, the HTML block is terminated by the blank line — "
- "the `**Hello**`\n"
- "text remains verbatim — and regular parsing resumes, with a paragraph"
- ",\nemphasised `world` and inline and block HTML following.\n\n"
- "All types of [HTML blocks] except type 7 may interrupt\n"
- "a paragraph.  Blocks of type 7 may not interrupt a paragraph.\n"
- "(This restriction is intended to prevent unwanted interpretation\n"
- "of long tags inside a wrapped paragraph as starting HTML blocks.)\n\n"
- "Some simple examples follow.  Here are some basic HTML blocks\n"
- "of type 6:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<table>\n  <tr>\n    <td>\n           hi\n"
- "    </td>\n  </tr>\n</table>\n\nokay.\n"
- ".\n<table>\n  <tr>\n    <td>\n           hi\n"
- "    </td>\n  </tr>\n</table>\n"
- "<p>okay.</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " <div>\n  *hello*\n         <foo><a>\n.\n"
- " <div>\n  *hello*\n         <foo><a>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A block can also start with a closing tag:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "</div>\n*foo*\n.\n</div>\n"
- "*foo*\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here we have two HTML blocks with a Markdown paragraph between them:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<DIV CLASS=\"foo\">\n\n"
- "*Markdown*\n\n</DIV>\n.\n"
- "<DIV CLASS=\"foo\">\n"
- "<p><em>Markdown</em></p>\n"
- "</DIV>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The tag on the first line can be partial, as long\n"
- "as it is split where there would be whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div id=\"foo\"\n  class=\"bar\">\n"
- "</div>\n.\n<div id=\"foo\"\n"
- "  class=\"bar\">\n</div>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div id=\"foo\" class=\"bar\n"
- "  baz\">\n</div>\n.\n"
- "<div id=\"foo\" class=\"bar\n"
- "  baz\">\n</div>\n"
- "````````````````"
- "````````````````\n\n\n"
- "An open tag need not be closed:\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div>\n*foo*\n\n*bar*\n.\n<div>\n"
- "*foo*\n"
- "<p><em>bar</em></p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "A partial tag need not even be completed (garbage\nin, garbage out):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div id=\"foo\"\n*hi*\n.\n"
- "<div id=\"foo\"\n*hi*\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n<div class\nfoo\n.\n<div class\nfoo\n"
- "````````````````"
- "````````````````\n\n\n"
- "The initial tag doesn't even need to be a valid\n"
- "tag, as long as it starts like one:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div *???-&&&-<---\n"
- "*foo*\n.\n"
- "<div *???-&&&-<---\n"
- "*foo*\n"
- "````````````````"
- "````````````````\n\n\n"
- "In type 6 blocks, the initial tag need not be on a line by\n"
- "itself:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div><a href=\"bar\">*"
- "foo*</a></div>\n.\n"
- "<div><a href=\"bar\">*"
- "foo*</a></div>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<table><tr><td>\nfoo\n"
- "</td></tr></table>\n.\n"
- "<table><tr><td>\nfoo\n"
- "</td></tr></table>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Everything until the next blank line or end of document\n"
- "gets included in the HTML block.  So, in the following\n"
- "example, what looks like a Markdown code block\n"
- "is actually part of the HTML block, which continues until a blank\n"
- "line or the end of the document is reached:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div></div>\n``` c\n"
- "int x = 33;\n```\n.\n"
- "<div></div>\n``` c\n"
- "int x = 33;\n```\n"
- "````````````````"
- "````````````````\n\n\n"
- "To start an [HTML block] with a tag that is "
- "*not* in the\n"
- "list of block-level tags in (6), you must put the tag "
- "by\nitself on the first line (and it must be complete):\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"foo\">\n*bar*\n"
- "</a>\n.\n<a href=\"foo\">\n"
- "*bar*\n</a>\n"
- "````````````````"
- "````````````````\n\n\n"
- "In type 7 blocks, the [tag name] can be anything:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<Warning>\n*bar*\n</Warning>\n.\n<Warning>\n"
- "*bar*\n</Warning>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<i class=\"foo\">\n*bar*\n</i>\n"
- ".\n<i class=\"foo\">\n*bar*\n"
- "</i>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n</ins>\n*bar*\n.\n</ins>\n*bar*\n"
- "````````````````"
- "````````````````\n\n\n"
- "These rules are designed to allow us to work with tags that\n"
- "can function as either block-level or inline-level tags.\nThe "
- "`<del>` tag is a nice example.  We can surround content with\n"
- "`<del>`"
- " tags in three different ways.  In this case, we get a raw\n"
- "HTML block, because the `<del>`"
- " tag is on a line by itself:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<del>\n*foo*\n</del>\n.\n<del>\n"
- "*foo*\n</del>\n"
- "````````````````"
- "````````````````\n\n\n"
- "In this case, we get a raw HTML block that just includes\nthe "
- "`<del>` tag (because it ends with the following blank\n"
- "line).  So the contents get interpreted as CommonMark:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<del>\n\n*foo*\n\n</del>\n.\n<del>\n"
- "<p><em>foo</em></p>\n"
- "</del>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Finally, in this case, the `<del>` tags are interpreted\nas "
- "[raw HTML] *inside*"
- " the CommonMark paragraph.  (Because\n"
- "the tag is not on a line by itself, we get inline "
- "HTML\nrather than an [HTML block].)\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<del>*foo*</del>\n.\n"
- "<p><del><em>foo</em><"
- "/del></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "HTML tags designed to contain literal content\n(`pre`, "
- "`script`, `style`, `textarea`"
- "), comments, processing instructions,\nand declarations are treated somewhat differently.\n"
- "Instead of ending at the first blank line, these blocks\n"
- "end at the first line containing a corresponding end tag.\n"
- "As a result, these blocks can contain blank lines:\n\n"
- "A pre tag (type 1):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<pre language=\"haskell\"><code>\n"
- "import Text.HTML.TagSoup\n\n"
- "main :: IO ()\n"
- "main = print $ parseTags tags\n"
- "</code></pre>\nokay\n.\n"
- "<pre language=\"haskell\"><code>\n"
- "import Text.HTML.TagSoup\n\n"
- "main :: IO ()\n"
- "main = print $ parseTags tags\n"
- "</code></pre>\n<p>okay</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A script tag (type 1):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<script type=\"text/javascript\">\n"
- "// JavaScript example\n\n"
- "document.getElementById(\"demo\")."
- "innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n"
- ".\n<script type=\"text/javascript\">\n"
- "// JavaScript example\n\n"
- "document.getElementById(\"demo\")."
- "innerHTML = \"Hello JavaScript!\";\n</script>\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A textarea tag (type 1):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<textarea>\n\n*foo*\n\n_bar_\n\n"
- "</textarea>\n.\n<textarea>\n\n*foo*\n\n"
- "_bar_\n\n</textarea>\n"
- "````````````````"
- "````````````````\n\n"
- "A style tag (type 1):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<style\n  type=\"text/css\">\n"
- "h1 {color:red;}\n\np {color:blue;}\n"
- "</style>\nokay\n.\n<style\n"
- "  type=\"text/css\">\n"
- "h1 {color:red;}\n\np {color:blue;}\n"
- "</style>\n<p>okay</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If there is no matching end tag, the block will end at the\n"
- "end of the document (or the enclosing [block quote]["
- "block quotes]\nor [list item][list items]):\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<style\n  type=\"text/css\">\n\nfoo\n.\n<style\n"
- "  type=\"text/css\">\n\nfoo\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> <div>\n> foo\n\nbar\n.\n<blockquote>\n"
- "<div>\nfoo\n</blockquote>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- <div>\n- foo\n.\n<ul>\n<li>\n"
- "<div>\n</li>\n"
- "<li>foo</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The end tag can occur on the same line as the start tag:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<style>p{color:red;}</style>\n"
- "*foo*\n.\n"
- "<style>p{color:red;}</style>\n"
- "<p><em>foo</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<!-- foo -->*bar*\n*baz*\n"
- ".\n<!-- foo -->*bar*\n"
- "<p><em>baz</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that anything on the last line after the\nend tag will be included in the "
- "[HTML block]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<script>\nfoo\n</script>1. *bar*\n.\n"
- "<script>\nfoo\n</script>1. *bar*\n"
- "````````````````"
- "````````````````\n\n\n"
- "A comment (type 2):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<!-- Foo\n\nbar\n   baz -->\nokay\n.\n"
- "<!-- Foo\n\nbar\n   baz -->\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "A processing instruction (type 3):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<?php\n\n  echo '>';\n\n?>\nokay\n.\n<?"
- "php\n\n  echo '>';\n\n?>\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A declaration (type 4):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<!DOCTYPE html>\n.\n<!"
- "DOCTYPE html>\n"
- "````````````````"
- "````````````````\n\n\n"
- "CDATA (type 5):\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<![CDATA[\nfunction matchwo(a,b)\n{\n"
- "  if (a < b && a < 0) then {\n    return 1;\n\n"
- "  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n.\n<!["
- "CDATA[\nfunction matchwo(a,b)\n{\n"
- "  if (a < b && a < 0) then {\n    return 1;\n\n"
- "  } else {\n\n    return 0;\n  }\n}\n]]>\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The opening tag can be preceded by up to three spaces of indentation, "
- "but not\nfour:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  <!-- foo -->\n\n"
- "    <!-- foo -->\n.\n"
- "  <!-- foo -->\n"
- "<pre><code>&lt;!-- foo -"
- "-&gt;\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  <div>\n\n    <div>\n.\n  <div>\n"
- "<pre><code>&lt;div&gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- An HTML block of types 1--
- "6 can interrupt a paragraph, and need not be\npreceded by a blank line.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n<div>\nbar\n</div>\n.\n"
- "<p>Foo</p>\n<div>\nbar\n"
- "</div>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, a following blank line is needed, except at the end of\n"
- "a document, and except for blocks of types 1--5, [above"
- "][HTML\nblock]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div>\nbar\n</div>\n*foo*\n.\n"
- "<div>\nbar\n</div>\n*foo*\n"
- "````````````````"
- "````````````````\n\n\n"
- "HTML blocks of type 7 cannot interrupt a paragraph:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n<a href=\"bar\">\nbaz\n.\n"
- "<p>Foo\n<a href=\"bar\">\n"
- "baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This rule differs from John Gruber's original Markdown syntax\n"
- "specification, which says:\n\n"
- "> The only restrictions are that block-level HTML elements —\n> "
- "e.g. `<div>`, `<table>`"
- ", `<pre>`, `<p>`"
- ", etc. — must be separated from\n> "
- "surrounding content by blank lines, and the start and end tags of the\n> "
- "block should not be indented with spaces or tabs.\n\n"
- "In some ways Gruber'"
- "s rule is more restrictive than the one given\nhere:\n\n"
- "- It requires that an HTML block be preceded by a blank line.\n"
- "- It does not allow the start tag to be indented.\n"
- "- It requires a matching end tag, which it also does not allow to\n  "
- "be indented.\n\n"
- "Most Markdown implementations (including some of Gruber'"
- "s own) do not\nrespect all of these restrictions.\n\n"
- "There is one respect, however, in which Gruber'"
- "s rule is more liberal\n"
- "than the one given here, since it allows blank lines to occur inside\n"
- "an HTML block.  "
- "There are two reasons for disallowing them here.\n"
- "First, it removes the need to parse balanced tags, which is\n"
- "expensive and can require backtracking from the end of the document\n"
- "if no matching end tag is found. Second, it provides a very simple\n"
- "and flexible way of including Markdown content inside HTML tags:\n"
- "simply separate the Markdown from the HTML using blank lines:\n\n"
- "Compare:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div>\n\n*Emphasized* text.\n\n"
- "</div>\n.\n<div>\n"
- "<p><em>Emphasized</em> text."
- "</p>\n</div>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<div>\n*Emphasized* text.\n"
- "</div>\n.\n<div>\n"
- "*Emphasized* text.\n</div>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Some Markdown implementations have adopted a convention of\n"
- "interpreting content inside tags as text if the open tag has\nthe attribute "
- "`markdown=1`.  The rule given above seems a simpler and\n"
- "more elegant way of achieving the same expressive power, which is also\n"
- "much simpler to parse.\n\n"
- "The main potential drawback is that one can no longer paste HTML\n"
- "blocks into Markdown documents with 100% reliability.  However,\n"
- "*in most cases* this will work fine, because the blank lines in\n"
- "HTML are usually followed by HTML block tags.  For example:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<table>\n\n<tr>\n\n<td>\nHi\n"
- "</td>\n\n</tr>\n\n</table>\n.\n"
- "<table>\n<tr>\n<td>\nHi\n"
- "</td>\n</tr>\n</table>\n"
- "````````````````"
- "````````````````\n\n\n"
- "There are problems, however, if the inner tags are indented\n"
- "*and* separated by spaces, as then they will be interpreted as\n"
- "an indented code block:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<table>\n\n  <tr>\n\n    <td>\n      Hi\n"
- "    </td>\n\n  </tr>\n\n</table>\n.\n"
- "<table>\n  <tr>\n"
- "<pre><code>&lt;td&gt;\n"
- "  Hi\n&lt;/td&gt;\n"
- "</code></pre>\n  </tr>\n"
- "</table>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Fortunately, blank lines are usually not necessary and can be\n"
- "deleted.  The exception is inside `<pre>` tags, but as described\n"
- "[above][HTML blocks]"
- ", raw HTML blocks starting with `<pre>`\n*can*"
- " contain blank lines.\n\n"
- "## Link reference definitions\n\n"
- "A [link reference definition](@)\nconsists of a [link label]"
- ", optionally preceded by up to three spaces of\nindentation, followed\n"
- "by a colon (`:`"
- "), optional spaces or tabs (including up to one\n[line ending]"
- "), a [link destination],\n"
- "optional spaces or tabs (including up to one\n[line ending]"
- "), and an optional [link\ntitle]"
- ", which if it is present must be separated\nfrom the [link destination]"
- " by spaces or tabs.\nNo further character may occur.\n\n"
- "A [link reference definition]\n"
- "does not correspond to a structural element of a document.  Instead, it\n"
- "defines a label which can be used in [reference links]\nand reference-style "
- "[images] elsewhere in the document.  [Link\nreference definitions]"
- " can come either before or after the links that use\nthem.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url \"title\"\n\n[foo]\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   [foo]: \n      /url  \n           'the title'  \n\n[foo]\n"
- ".\n"
- "<p><a href=\"/url\" title="
- "\"the title\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[Foo*bar\\]]:my_(url) '"
- "title (with parens)'\n\n[Foo*bar\\]]\n.\n"
- "<p><a href=\"my_(url)"
- "\" title=\"title (with parens)\">Foo*bar"
- "]</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[Foo bar]:\n<my url>\n'title'\n\n"
- "[Foo bar]\n.\n"
- "<p><a href=\"my%20url\" "
- "title=\"title\">Foo bar</a></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "The title may extend over multiple lines:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url '\ntitle\nline1\nline2\n'\n\n"
- "[foo]\n.\n"
- "<p><a href=\"/url\" title="
- "\"\ntitle\nline1\nline2\n"
- "\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, it may not contain a [blank line]:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url 'title\n\nwith blank line'\n\n"
- "[foo]\n.\n"
- "<p>[foo]: /url 'title</p"
- ">\n<p>with blank line'</p>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The title may be omitted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]:\n/url\n\n[foo]\n.\n"
- "<p><a href=\"/url\">"
- "foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link destination may not be omitted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]:\n\n[foo]\n.\n"
- "<p>[foo]:</p>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````\n\n "
- "However, an empty link destination may be specified using\n angle brackets:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: <>\n\n[foo]\n.\n"
- "<p><a href=\"\">foo</"
- "a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "The title must be separated from the link destination by\nspaces or tabs:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: <bar>(baz)\n\n[foo]\n"
- ".\n"
- "<p>[foo]: <bar>(baz)<"
- "/p>\n<p>[foo]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Both title and destination can contain backslash escapes\nand literal backslashes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url\\bar\\*baz \""
- "foo\\\"bar\\baz\"\n\n[foo]\n.\n"
- "<p><a href=\"/url%"
- "5Cbar*baz\" title=\"foo&quot"
- ";bar\\baz\">foo</a></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "A link can come before its corresponding definition:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n\n[foo]: url\n.\n"
- "<p><a href=\"url\">foo"
- "</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If there are several matching definitions, the first one takes\nprecedence:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n\n[foo]: first\n[foo]: second\n"
- ".\n"
- "<p><a href=\"first\">foo<"
- "/a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "As noted in the section on [Links], matching of labels is\n"
- "case-insensitive (see [matches]).\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[FOO]: /url\n\n[Foo]\n.\n"
- "<p><a href=\"/url\">"
- "Foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[ΑΓΩ]: /φου\n\n[αγω]\n.\n"
- "<p><a href=\"/%CF%86%"
- "CE%BF%CF%85\">αγω</a"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Whether something is a [link reference definition] is\n"
- "independent of whether the link reference it defines is\n"
- "used in the document.  Thus, for example, the following\n"
- "document contains just a link reference definition, and\nno visible content:\n\n"
- "````````````````"
- "```````````````` "
- "example\n[foo]: /url\n.\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here is another one:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[\nfoo\n]: /url\nbar\n.\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not a link reference definition, because there are\n"
- "characters other than spaces or tabs after the title:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url \"title\" ok\n.\n"
- "<p>[foo]: /url &quot;"
- "title&quot; ok</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is a link reference definition, but it has no title:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url\n\"title\" ok\n.\n"
- "<p>&quot;title&quot; ok<"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not a link reference definition, because it is indented\n"
- "four spaces:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    [foo]: /url \"title\"\n\n[foo]\n.\n"
- "<pre><code>[foo]: /url &"
- "quot;title&quot;\n"
- "</code></pre>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not a link reference definition, because it occurs inside\na code block:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```\n[foo]: /url\n```\n\n"
- "[foo]\n.\n"
- "<pre><code>[foo]: /url\n"
- "</code></pre>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A [link reference definition] cannot interrupt a paragraph.\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n[bar]: /baz\n\n[bar]\n.\n"
- "<p>Foo\n[bar]: /baz</p>\n"
- "<p>[bar]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, it can directly follow other block elements, such as headings\n"
- "and thematic breaks, and it need not be followed by a blank line.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "# [Foo]\n[foo]: /url\n> bar\n.\n"
- "<h1><a href=\"/url\">"
- "Foo</a></h1>\n"
- "<blockquote>\n<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url\nbar\n===\n[foo]\n"
- ".\n<h1>bar</h1>\n"
- "<p><a href=\"/url\">"
- "foo</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url\n===\n[foo]\n.\n"
- "<p>===\n"
- "<a href=\"/url\">foo</"
- "a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Several [link reference definitions]\n"
- "can occur one after another, without intervening blank lines.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /foo-url \"foo\"\n"
- "[bar]: /bar-url\n  \"bar\"\n"
- "[baz]: /baz-url\n\n[foo],\n"
- "[bar],\n[baz]\n.\n"
- "<p><a href=\"/foo-url"
- "\" title=\"foo\">foo</a>,\n"
- "<a href=\"/bar-url\" title=\""
- "bar\">bar</a>,\n"
- "<a href=\"/baz-url\">"
- "baz</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Link reference definitions] can occur\n"
- "inside block containers, like lists and block quotations.  They\n"
- "affect the entire document, not just the container in which they\nare defined:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n\n> [foo]: /url\n.\n"
- "<p><a href=\"/url\">"
- "foo</a></p>\n<blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Paragraphs\n\n"
- "A sequence of non-blank lines that cannot be interpreted as other\n"
- "kinds of blocks forms a [paragraph](@).\n"
- "The contents of the paragraph are the result of parsing the\nparagraph'"
- "s raw content as inlines.  The paragraph's raw content\n"
- "is formed by concatenating the lines and removing initial and final\n"
- "spaces or tabs.\n\nA simple example with two paragraphs:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "aaa\n\nbbb\n.\n<p>aaa</p>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Paragraphs can contain multiple lines, but no blank lines:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "aaa\nbbb\n\nccc\nddd\n.\n<p>aaa\n"
- "bbb</p>\n<p>ccc\n"
- "ddd</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Multiple blank lines between paragraphs have no effect:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "aaa\n\n\nbbb\n.\n<p>aaa</p>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Leading spaces or tabs are skipped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  aaa\n bbb\n.\n<p>aaa\nbbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Lines after the first may be indented any amount, since indented\n"
- "code blocks cannot interrupt paragraphs.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "aaa\n             bbb\n                                       ccc\n.\n<p>aaa\nbbb\n"
- "ccc</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, the first line may be preceded by up to three spaces of "
- "indentation.\nFour spaces of indentation is too many:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   aaa\nbbb\n.\n<p>aaa\nbbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    aaa\nbbb\n.\n<pre><code>aaa\n"
- "</code></pre>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Final spaces or tabs are stripped before inline parsing, so a paragraph\n"
- "that ends with two or more spaces will not end with a [hard line\nbreak"
- "]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "aaa     \nbbb     \n.\n<p>aaa<br />\n"
- "bbb</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Blank lines\n\n"
- "[Blank lines] between block-level elements are ignored,\n"
- "except for the role they play in determining whether a [list]\nis [tight"
- "] or [loose].\n\n"
- "Blank lines at the beginning and end of the document are also ignored.\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  \n\naaa\n  \n\n# aaa\n\n  \n.\n<p>aaa</p>\n"
- "<h1>aaa</h1>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "# Container blocks\n\n"
- "A [container block](#container-blocks)"
- " is a block that has other\n"
- "blocks as its contents.  There are two basic kinds of container blocks:\n["
- "block quotes] and [list items].\n[Lists]"
- " are meta-containers for [list items].\n\n"
- "We define the syntax for container blocks recursively.  The general\n"
- "form of the definition is:\n\n"
- "> If X is a sequence of blocks, then the result of\n> "
- transforming X in such-and-such a way is a container of type Y
- "\n> with these blocks as its content.\n\n"
- "So, we explain what counts as a block quote or list item by explaining\n"
- "how these can be *generated* from their contents. This should suffice\n"
- "to define the syntax, although it does not give a recipe for "
- "*parsing*\n"
- "these constructions.  (A recipe is provided below in the section entitled\n"
- "[A parsing strategy](#appendix-a-parsing"
- "-strategy).)\n\n"
- "## Block quotes\n\n"
- "A [block quote marker](@),\n"
- "optionally preceded by up to three spaces of indentation,\n"
- "consists of (a) the character `>` together with a following space of\n"
- "indentation, or (b) a single character `>`"
- " not followed by a space of\nindentation.\n\n"
- "The following rules define [block quotes]:\n"
- "\n1.  **Basic case.**  If a string of lines "
- "*Ls* constitute a sequence\n    of blocks *Bs*"
- ", then the result of prepending a [block quote\n    marker]"
- " to the beginning of each line in *Ls*\n    is a "
- "[block quote](#block-quotes) containing *Bs*.\n\n"
- "2.  **Laziness.**  If a string of lines "
- "*Ls* constitute a [block\n    quote](#block-quotes)"
- " with contents *Bs*, then the result of deleting\n    the initial ["
- "block quote marker] from one or\n    "
- "more lines in which the next character other than a space or tab after the\n    "
- "[block quote marker] is [paragraph continuation\n    text] is a block quote with "
- "*Bs* as its content.\n    "
- "[Paragraph continuation text](@) is text\n    "
- "that will be parsed as part of the content of a paragraph, but does\n    "
- "not occur at the beginning of the paragraph.\n\n"
- 3.  **Consecutiveness.**
- "  A document cannot contain two [block\n    quotes] in a row unless there is a "
- "[blank line] between them.\n\n"
- "Nothing else counts as a [block quote](#block-quotes).\n"
- "\nHere is a simple example:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> # Foo\n> bar\n> baz\n.\n<blockquote>\n"
- "<h1>Foo</h1>\n<p>bar\n"
- "baz</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The space or tab after the `>` characters can be omitted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "># Foo\n>bar\n> baz\n.\n<blockquote>\n"
- "<h1>Foo</h1>\n<p>bar\n"
- "baz</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The `>`"
- " characters can be preceded by up to three spaces of indentation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   > # Foo\n   > bar\n > baz\n.\n<blockquote>\n"
- "<h1>Foo</h1>\n<p>bar\n"
- "baz</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces of indentation is too many:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    > # Foo\n    > bar\n    > baz\n.\n"
- "<pre><code>&gt; # Foo\n"
- "&gt; bar\n&gt; baz\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The Laziness clause allows us to omit the `>` before\n["
- "paragraph continuation text]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> # Foo\n> bar\nbaz\n.\n<blockquote>\n"
- "<h1>Foo</h1>\n<p>bar\n"
- "baz</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A block quote can contain some lazy and some non-lazy\ncontinuation lines:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> bar\nbaz\n> foo\n.\n<blockquote>\n"
- "<p>bar\nbaz\nfoo</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Laziness only applies to lines that would have been continuations of\n"
- "paragraphs had they been prepended with [block quote markers].\n"
- "For example, the `> ` cannot be omitted in the second line of\n\n"
- "``` markdown\n> foo\n> ---\n```"
- "\n\nwithout changing the meaning:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\n---\n.\n<blockquote>\n"
- "<p>foo</p>\n</blockquote>\n"
- "<hr />\n"
- "````````````````"
- "````````````````\n\n\n"
- "Similarly, if we omit the `> ` in the second line of\n"
- "\n``` markdown\n> - foo\n> - bar\n```"
- "\n\nthen the block quote ends after the first line:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> - foo\n- bar\n.\n<blockquote>\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "</blockquote>\n<ul>\n"
- "<li>bar</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "For the same reason, we can't omit the `> `"
- " in front of\nsubsequent lines of an indented or fenced code block:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">     foo\n    bar\n.\n<blockquote>\n"
- "<pre><code>foo\n</code></pre>\n"
- "</blockquote>\n<pre><code>bar\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> ```\nfoo\n```\n.\n<blockquote>\n"
- "<pre><code></code></pre>\n"
- "</blockquote>\n<p>foo</p>\n"
- "<pre><code></code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that in the following case, we have a [lazy\ncontinuation line]:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\n    - bar\n.\n<blockquote>\n"
- "<p>foo\n- bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "To see why, note that in\n"
- "\n```markdown\n> foo\n>     - bar\n```"
- "\n\nthe `- bar`"
- " is indented too far to start a list, and can't\n"
- "be an indented code block because indented code blocks cannot\n"
- "interrupt paragraphs, so it is [paragraph continuation text].\n\n"
- "A block quote can be empty:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n>\n.\n<blockquote>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">\n>  \n> \n.\n<blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A block quote can have initial or final blank lines:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">\n> foo\n>  \n.\n<blockquote>\n"
- "<p>foo</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A blank line always separates block quotes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\n\n> bar\n.\n<blockquote>\n"
- "<p>foo</p>\n</blockquote>\n"
- "<blockquote>\n<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "(Most current Markdown implementations, including John Gruber's\noriginal "
- "`Markdown.pl`"
- ", will parse this example as a single block quote\n"
- "with two paragraphs.  But it seems better to allow the author to decide\n"
- "whether two block quotes or one are wanted.)\n\n"
- "Consecutiveness means that if we put these block quotes together,\n"
- "we get a single block quote:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\n> bar\n.\n<blockquote>\n"
- "<p>foo\nbar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "To get a block quote with two paragraphs, use:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> foo\n>\n> bar\n.\n<blockquote>\n"
- "<p>foo</p>\n"
- "<p>bar</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Block quotes can interrupt paragraphs:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\n> bar\n.\n<p>foo</p>\n"
- "<blockquote>\n<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "In general, blank lines are not needed before or after block\nquotes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> aaa\n***\n> bbb\n.\n<blockquote>\n"
- "<p>aaa</p>\n</blockquote>\n"
- "<hr />\n<blockquote>\n"
- "<p>bbb</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, because of laziness, a blank line is needed between\n"
- "a block quote and a following paragraph:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> bar\nbaz\n.\n<blockquote>\n<p>bar\n"
- "baz</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> bar\n\nbaz\n.\n<blockquote>\n"
- "<p>bar</p>\n</blockquote>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> bar\n>\nbaz\n.\n<blockquote>\n"
- "<p>bar</p>\n</blockquote>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "It is a consequence of the Laziness rule that any number\nof initial "
- "`>`s may be omitted on a continuation line of a\n"
- "nested block quote:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> > > foo\nbar\n.\n<blockquote>\n"
- "<blockquote>\n<blockquote>\n"
- "<p>foo\nbar</p>\n"
- "</blockquote>\n</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">>> foo\n> bar\n>>baz\n.\n"
- "<blockquote>\n<blockquote>\n"
- "<blockquote>\n<p>foo\nbar\n"
- "baz</p>\n</blockquote>\n"
- "</blockquote>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "When including an indented code block in a block quote,\nremember that the "
- "[block quote marker] includes\nboth the `>`"
- " and a following space of indentation.  So *five spaces* are needed\n"
- "after the `>`:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">     code\n\n>    not code\n.\n<blockquote>\n"
- "<pre><code>code\n</code></pre>\n"
- "</blockquote>\n<blockquote>\n"
- "<p>not code</p>\n</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "## List items\n\n"
- "A [list marker](@) is a\n[bullet list marker]"
- " or an [ordered list marker].\n\n"
- "A [bullet list marker](@)\nis a `-`, "
- "`+`, or `*` character.\n\n"
- "An [ordered list marker](@)\nis a sequence of 1--"
- "9 arabic digits (`0-9`"
- "), followed by either a\n`.` character or a `)`"
- " character.  (The reason for the length\n"
- "limit is that with 10 digits we start seeing integer overflows\n"
- "in some browsers.)\n\nThe following rules define [list items]:\n"
- "\n1.  **Basic case.**  If a sequence of lines "
- "*Ls* constitute a sequence of\n    blocks *Bs*"
- " starting with a character other than a space or tab, and *M*"
- " is\n    a list marker of width *W* followed by 1 ≤ *N*"
- " ≤ 4 spaces of indentation,\n    then the result of prepending "
- "*M* and the following spaces to the first line\n    of *Ls*"
- ", and indenting subsequent lines of *Ls* by "
- "*W + N* spaces, is a\n    list item with *Bs*"
- " as its contents.  The type of the list item\n    "
- "(bullet or ordered) is determined by the type of its list marker.\n    "
- "If the list item is ordered, then it is also assigned a start\n    "
- "number, based on the ordered list marker.\n\n    Exceptions:\n"
- "\n    1. When the first list item in a [list] interrupts\n       a paragraph"
- "---that is, when it starts on a line that would\n       "
- "otherwise count as [paragraph continuation text]---then (a)\n       "
- the lines *Ls*
- " must not begin with a blank line, and (b) if\n       "
- "the list item is ordered, the start number must be 1.\n    "
- "2. If any line is a [thematic break][thematic breaks"
- "] then\n       that line is not a list item.\n\n"
- "For example, let *Ls* be the lines\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n.\n"
- "<p>A paragraph\nwith two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "And let *M* be the marker `1.`, and "
- "*N* = 2.  Then rule #1 says\n"
- "that the following is an ordered list item with start number 1,\n"
- "and the same contents as *Ls*:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1.  A paragraph\n    with two lines.\n\n        indented code\n\n"
- "    > A block quote.\n.\n<ol>\n<li>\n"
- "<p>A paragraph\nwith two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The most important thing to notice is that the position of\n"
- "the text after the list marker determines how much indentation\n"
- "is needed in subsequent blocks in the list item.  If the list\n"
- "marker takes up two spaces of indentation, and there are three spaces between\n"
- "the list marker and the next character other than a space or tab, then "
- "blocks\nmust be indented five spaces in order to fall under the list\n"
- "item.\n\n"
- "Here are some examples showing how far content must be indented to be\n"
- "put under the list item:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- one\n\n two\n.\n<ul>\n"
- "<li>one</li>\n</ul>\n"
- "<p>two</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- one\n\n  two\n.\n<ul>\n<li>\n"
- "<p>one</p>\n<p>two</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " -    one\n\n     two\n.\n<ul>\n"
- "<li>one</li>\n</ul>\n"
- "<pre><code> two\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " -    one\n\n      two\n.\n<ul>\n<li>\n"
- "<p>one</p>\n<p>two</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "It is tempting to think of this in terms of columns:  the continuation\n"
- "blocks must be indented at least to the column of the first character other "
- "than\n"
- "a space or tab after the list marker.  "
- "However, that is not quite right.\n"
- "The spaces of indentation after the list marker determine how much relative\n"
- "indentation is needed.  Which column this indentation reaches will depend on\n"
- "how the list item is embedded in other constructions, as shown by\nthis example:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   > > 1.  one\n>>\n>>     two\n.\n"
- "<blockquote>\n<blockquote>\n<ol>\n"
- "<li>\n<p>one</p>\n"
- "<p>two</p>\n</li>\n"
- "</ol>\n</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here `two` occurs in the same column as the list marker "
- "`1.`,\n"
- "but is actually contained in the list item, because there is\n"
- "sufficient indentation after the last containing blockquote marker.\n\n"
- "The converse is also possible.  In the following example, the word "
- "`two`\n"
- "occurs far to the right of the initial text of the list item, "
- "`one`, but\n"
- "it is not considered part of the list item, because it is not "
- "indented\nfar enough past the blockquote marker:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- ">>- one\n>>\n  >  > two\n.\n<blockquote>\n"
- "<blockquote>\n<ul>\n"
- "<li>one</li>\n</ul>\n"
- "<p>two</p>\n</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that at least one space or tab is needed between the list marker and\n"
- "any following content, so these are not list items:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-one\n\n2.two\n.\n<p>-one</p>\n"
- "<p>2.two</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list item may contain blocks that are separated by more than\none blank line.\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n\n\n  bar\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n"
- "<p>bar</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list item may contain any kind of block:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n"
- ".\n<ol>\n<li>\n"
- "<p>foo</p>\n<pre><code>bar\n"
- "</code></pre>\n"
- "<p>baz</p>\n<blockquote>\n"
- "<p>bam</p>\n</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list item that contains an indented code block will preserve\n"
- "empty lines within the code block verbatim.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- Foo\n\n      bar\n\n\n      baz\n.\n<ul>\n<li>\n"
- "<p>Foo</p>\n<pre><code>bar\n\n"
- "\nbaz\n</code></pre>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "Note that ordered list start numbers must be nine digits or less:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "123456789. ok\n.\n"
- "<ol start=\"123456789\">\n"
- "<li>ok</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1234567890. not ok\n.\n"
- "<p>1234567890. not ok</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A start number may begin with 0s:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "0. ok\n.\n<ol start=\"0\">\n"
- "<li>ok</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "003. ok\n.\n<ol start=\"3\">\n"
- "<li>ok</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A start number may not be negative:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-1. not ok\n.\n"
- "<p>-1. not ok</p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- 2.  **Item starting with indented code.**
- "  If a sequence of lines *Ls*\n    constitute a sequence of blocks "
- "*Bs* starting with an indented code\n    block, and "
- "*M* is a list marker of width *W* followed by\n    "
- "one space of indentation, then the result of prepending "
- "*M* and the\n    following space to the first line of *Ls*"
- ", and indenting subsequent lines\n    of *Ls* by "
- "*W + 1* spaces, is a list item with *Bs*"
- " as its contents.\n    "
- "If a line is empty, then it need not be indented.  "
- "The type of the\n    "
- "list item (bullet or ordered) is determined by the type of its list\n    "
- "marker.  If the list item is ordered, then it is also assigned a\n    "
- "start number, based on the ordered list marker.\n\n"
- "An indented code block will have to be preceded by four spaces of "
- "indentation\n"
- "beyond the edge of the region where text will be included in the list item.\n"
- "In the following case that is 6 spaces:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n\n      bar\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n<pre><code>bar\n"
- "</code></pre>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "And in this case it is 11 spaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  10.  foo\n\n           bar\n.\n<ol start=\"10\">\n"
- "<li>\n<p>foo</p>\n"
- "<pre><code>bar\n</code></pre>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- If the *first*
- " block in the list item is an indented code block,\n"
- "then by rule #2, the contents must be preceded by *one*"
- " space of indentation\nafter the list marker:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    indented code\n\nparagraph\n\n    more code\n.\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<p>paragraph</p>\n"
- "<pre><code>more code\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1.     indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n"
- "<li>\n<pre><code>indented code\n"
- "</code></pre>\n<p>paragraph</p>\n"
- "<pre><code>more code\n</code></pre>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that an additional space of indentation is interpreted as space\n"
- "inside the code block:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1.      indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n"
- "<li>\n<pre><code> indented code\n"
- "</code></pre>\n<p>paragraph</p>\n"
- "<pre><code>more code\n</code></pre>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that rules #1 and #2 only apply to two cases:  (a"
- ") cases\nin which the lines to be included in a list item begin with a\n"
- "character other than a space or tab, and (b) cases in which\n"
- "they begin with an indented code\n"
- "block.  In a case like the following, where the first block begins with\n"
- "three spaces of indentation, the rules do not allow us to form a "
- "list item by\n"
- "indenting the whole thing and prepending a list marker:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   foo\n\nbar\n.\n<p>foo</p>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-    foo\n\n  bar\n.\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not a significant restriction, because when a block is preceded by up to\n"
- "three spaces of indentation, the indentation can always be removed without\n"
- "a change in interpretation, allowing rule #1 to be applied.  So, in\n"
- "the above case:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-  foo\n\n   bar\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n"
- "<p>bar</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- 3.  **Item starting with a blank line.**
- "  If a sequence of lines *Ls*\n    starting with a single [blank line"
- "] constitute a (possibly empty)\n    sequence of blocks *Bs*, and "
- "*M* is a list marker of width *W*,\n    "
- "then the result of prepending *M* to the first line of "
- "*Ls*, and\n    preceding subsequent lines of *Ls* by "
- "*W + 1* spaces of indentation, is a\n    list item with "
- "*Bs* as its contents.\n    "
- "If a line is empty, then it need not be indented.  "
- "The type of the\n    "
- "list item (bullet or ordered) is determined by the type of its list\n    "
- "marker.  If the list item is ordered, then it is also assigned a\n    "
- "start number, based on the ordered list marker.\n\n"
- "Here are some list items that start with a blank line but are not empty:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n.\n"
- "<ul>\n<li>foo</li>\n"
- "<li>\n<pre><code>bar\n"
- "</code></pre>\n</li>\n"
- "<li>\n<pre><code>baz\n"
- "</code></pre>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "When the list item starts with a blank line, the number of spaces\n"
- "following the list marker doesn't change the required indentation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-   \n  foo\n.\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list item can begin with at most one blank line.\n"
- "In the following example, `foo` is not part of the list\n"
- "item:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-\n\n  foo\n.\n<ul>\n<li></li>\n"
- "</ul>\n<p>foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here is an empty bullet list item:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n-\n- bar\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li></li>\n"
- "<li>bar</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "It does not matter whether there are spaces or tabs following the [list marker"
- "]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n-   \n- bar\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li></li>\n"
- "<li>bar</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here is an empty ordered list item:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1. foo\n2.\n3. bar\n.\n<ol>\n"
- "<li>foo</li>\n"
- "<li></li>\n"
- "<li>bar</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list may start or end with an empty list item:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*\n.\n<ul>\n<li></li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "However, an empty list item cannot interrupt a paragraph:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\n*\n\nfoo\n1.\n.\n<p>foo\n"
- "*</p>\n<p>foo\n1.</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "4.  **Indentation.**  If a sequence of lines "
- "*Ls* constitutes a list item\n    "
- "according to rule #1, #2, or #3, then the result "
- "of preceding each line\n    of *Ls*"
- " by up to three spaces of indentation (the same for each line) "
- "also\n    constitutes a list item with the same contents and attributes.  If a line is\n    "
- "empty, then it need not be indented.\n\n"
- "Indented one space:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- " 1.  A paragraph\n     with two lines.\n\n         indented code\n\n"
- "     > A block quote.\n.\n<ol>\n<li>\n"
- "<p>A paragraph\nwith two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Indented two spaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  1.  A paragraph\n      with two lines.\n\n          indented code\n\n"
- "      > A block quote.\n.\n<ol>\n<li>\n"
- "<p>A paragraph\nwith two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Indented three spaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "   1.  A paragraph\n       with two lines.\n\n           indented code\n\n"
- "       > A block quote.\n.\n<ol>\n<li>\n"
- "<p>A paragraph\nwith two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Four spaces indent gives a code block:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "    1.  A paragraph\n        with two lines.\n\n            indented code\n\n"
- "        > A block quote.\n.\n<pre><code>1.  A paragraph\n"
- "    with two lines.\n\n        indented code\n\n    &gt; A block quote.\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "5.  **Laziness.**  If a string of lines "
- "*Ls* constitute a [list\n    item](#list-items)"
- " with contents *Bs*, then the result of deleting\n    "
- "some or all of the indentation from one or more lines in which the\n    "
- "next character other than a space or tab after the indentation is\n    ["
- "paragraph continuation text] is a\n    "
- "list item with the same contents and attributes.  The unindented\n    lines are called\n    "
- "[lazy continuation line](@)s.\n\n"
- "Here is an example with [lazy continuation lines]:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  1.  A paragraph\nwith two lines.\n\n          indented code\n\n"
- "      > A block quote.\n.\n<ol>\n<li>\n"
- "<p>A paragraph\nwith two lines.</p>\n"
- "<pre><code>indented code\n"
- "</code></pre>\n<blockquote>\n"
- "<p>A block quote.</p>\n"
- "</blockquote>\n</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Indentation can be partially deleted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "  1.  A paragraph\n    with two lines.\n.\n<ol>\n"
- "<li>A paragraph\nwith two lines.</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "These examples show how laziness can work in nested structures:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> 1. > Blockquote\ncontinued here.\n.\n"
- "<blockquote>\n<ol>\n<li>\n"
- "<blockquote>\n<p>Blockquote\n"
- "continued here.</p>\n</blockquote>\n"
- "</li>\n</ol>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "> 1. > Blockquote\n> continued here.\n.\n"
- "<blockquote>\n<ol>\n<li>\n"
- "<blockquote>\n<p>Blockquote\n"
- "continued here.</p>\n</blockquote>\n"
- "</li>\n</ol>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "6.  **That's all.**"
- " Nothing that is not counted as a list item by rules\n    #1--"
- "5 counts as a [list item](#list-items).\n\n"
- "The rules for sublists follow from the general rules\n[above][List items"
- "].  A sublist must be indented the same number\n"
- "of spaces of indentation a paragraph would need to be in order to be "
- "included\nin the list item.\n\n"
- "So, in this case we need two spaces indent:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n  - bar\n    - baz\n      - boo\n.\n<ul>\n"
- "<li>foo\n<ul>\n<li>bar\n"
- "<ul>\n<li>baz\n<ul>\n"
- "<li>boo</li>\n</ul>\n"
- "</li>\n</ul>\n</li>\n"
- "</ul>\n</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "One is not enough:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n - bar\n  - baz\n   - boo\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n"
- "<li>baz</li>\n"
- "<li>boo</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here we need four, because the list marker is wider:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "10) foo\n    - bar\n.\n<ol start=\"10\">\n"
- "<li>foo\n<ul>\n"
- "<li>bar</li>\n</ul>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Three is not enough:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "10) foo\n   - bar\n.\n<ol start=\"10\">\n"
- "<li>foo</li>\n</ol>\n"
- "<ul>\n<li>bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list may be the first block in a list item:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- - foo\n.\n<ul>\n<li>\n<ul>\n"
- "<li>foo</li>\n</ul>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1. - 2. foo\n.\n<ol>\n<li>\n"
- "<ul>\n<li>\n<ol start=\"2\">\n"
- "<li>foo</li>\n</ol>\n"
- "</li>\n</ul>\n</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A list item can contain a heading:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- # Foo\n- Bar\n  ---\n  baz\n.\n<ul>\n"
- "<li>\n<h1>Foo</h1>\n"
- "</li>\n<li>\n"
- "<h2>Bar</h2>\n"
- "baz</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "### Motivation\n\n"
- "John Gruber'"
- "s Markdown spec says the following about list items:\n\n"
- "1. \""
- "List markers typically start at the left margin, but may be indented\n   "
- "by up to three spaces. List markers must be followed by one or more\n   "
- "spaces or a tab.\"\n\n"
- "2. \""
- "To make lists look nice, you can wrap items with hanging indents"
- "....\n   But if you don't want to, you don'"
- "t have to.\"\n\n"
- "3. \"List items may consist of multiple paragraphs. Each subsequent\n   "
- "paragraph in a list item must be indented by either 4 spaces or one\n   "
- "tab.\"\n\n"
- "4. \""
- "It looks nice if you indent every line of the subsequent paragraphs,\n   "
- "but here again, Markdown will allow you to be lazy.\"\n\n"
- "5. \""
- "To put a blockquote within a list item, the "
- "blockquote's `>`\n   "
- "delimiters need to be indented.\"\n\n"
- "6. \""
- "To put a code block within a list item, the code block needs to be\n   "
- "indented twice — 8 spaces or two tabs.\"\n\n"
- "These rules specify that a paragraph under a list item must be indented\n"
- "four spaces (presumably, from the left margin, rather than the start of\n"
- "the list marker, but this is not said), and that code under a "
- "list item\n"
- "must be indented eight spaces instead of the usual four.  They also say\n"
- "that a block quote must be indented, but not by how much; "
- "however, the\nexample given has four spaces indentation.  Although nothing is said\n"
- "about other kinds of block-level content, it is certainly reasonable to\n"
- "infer that *all* block elements under a list item, including other\n"
- "lists, must be indented four spaces.  This principle has been called the\n"
- "*four-space rule*.\n\n"
- "The four-space rule is clear and principled, and if the reference\nimplementation "
- "`Markdown.pl` had followed it, it probably would have\n"
- "become the standard.  However, `Markdown.pl`"
- " allowed paragraphs and\n"
- "sublists to start with only two spaces indentation, at least on the\n"
- "outer level.  Worse, its behavior was inconsistent: a sublist of an\n"
- "outer-level list needed two spaces indentation, but a sublist of "
- "this\nsublist needed three spaces.  It is not surprising, then, that different\n"
- "implementations of Markdown have developed very different rules for\n"
- "determining what comes under a list item.  "
- "(Pandoc and python-Markdown,\n"
- "for example, stuck with Gruber'"
- "s syntax description and the four-space\n"
- "rule, while discount, redcarpet, marked, PHP Markdown, "
- "and others\nfollowed `Markdown.pl`'"
- "s behavior more closely.)\n\n"
- "Unfortunately, given the divergences between implementations, there\n"
- "is no way to give a spec for list items that will be guaranteed not\n"
- "to break any existing documents.  However, the spec given here should\n"
- "correctly handle lists formatted with either the four-space rule or\n"
- "the more forgiving `Markdown.pl`"
- " behavior, provided they are laid out\n"
- "in a way that is natural for a human to read.\n\n"
- "The strategy here is to let the width and indentation of the list marker\n"
- "determine the indentation necessary for blocks to fall under the list\n"
- "item, rather than having a fixed and arbitrary number.  The writer can\n"
- "think of the body of the list item as a unit which gets indented "
- "to the\n"
- "right enough to fit the list marker (and any indentation on the list\n"
- "marker).  "
- "(The laziness rule, #5, then allows continuation lines to be\n"
- "unindented if needed.)\n\n"
- "This rule is superior, we claim, to any rule requiring a fixed level of\n"
- "indentation from the margin.  The four-space rule is clear but\n"
- "unnatural. It is quite unintuitive that\n\n"
- "``` markdown\n- foo\n\n  bar\n\n  - baz\n```"
- "\n\nshould be parsed as two lists with an intervening paragraph,\n"
- "\n``` html\n"
- "<ul>\n<li>foo</li>\n"
- "</ul>\n<p>bar</p>\n<ul>\n"
- "<li>baz</li>\n</ul>\n"
- "```\n\n"
- "as the four-space rule demands, rather than a single list,\n"
- "\n``` html\n"
- "<ul>\n<li>\n<p>foo</p>\n"
- "<p>bar</p>\n<ul>\n"
- "<li>baz</li>\n</ul>\n"
- "</li>\n</ul>\n```\n\n"
- "The choice of four spaces is arbitrary.  It can be learned, but it is\n"
- "not likely to be guessed, and it trips up beginners regularly.\n\n"
- "Would it help to adopt a two-space rule?  The problem is that such\n"
- "a rule, together with the rule allowing up to three spaces of indentation "
- "for\nthe initial list marker, allows text that is indented "
- "*less than* the\n"
- "original list marker to be included in the list item. For example,\n"
- "`Markdown.pl` parses\n\n"
- "``` markdown\n   - one\n\n  two\n```"
- "\n\nas a single list item, with `two` a continuation paragraph:\n"
- "\n``` html\n"
- "<ul>\n<li>\n<p>one</p>\n"
- "<p>two</p>\n</li>\n"
- "</ul>\n```\n\nand similarly\n"
- "\n``` markdown\n>   - one\n>\n>  two\n```\n\nas\n"
- "\n``` html\n"
- "<blockquote>\n<ul>\n<li>\n"
- "<p>one</p>\n<p>two</p>\n"
- "</li>\n</ul>\n</blockquote>\n"
- "```\n\nThis is extremely unintuitive.\n"
- "\nRather than requiring a fixed indent from the margin, we could require\n"
- "a fixed indent (say, two spaces, or even one space) from "
- "the list marker (which\n"
- "may itself be indented).  "
- "This proposal would remove the last anomaly\n"
- "discussed.  Unlike the spec presented above, it would count the following\n"
- "as a list item with a subparagraph, even though the paragraph "
- "`bar`\nis not indented as far as the first paragraph "
- "`foo`:\n\n"
- "``` markdown\n 10. foo\n\n   bar  \n```"
- "\n\nArguably this text does read like a list item with `bar`"
- " as a subparagraph,\n"
- "which may count in favor of the proposal.  "
- "However, on this proposal indented\n"
- "code would have to be indented six spaces after the list marker.  "
- "And this\nwould break a lot of existing Markdown, which has the pattern:\n\n"
- "``` markdown\n1.  foo\n\n        indented code\n```"
- "\n\n"
- "where the code is indented eight spaces.  "
- "The spec above, by contrast, will\n"
- "parse this text as expected, since the code block'"
- "s indentation is measured\nfrom the beginning of `foo`.\n\n"
- "The one case that needs special treatment is a list item that *starts*\n"
- "with indented code.  "
- "How much indentation is required in that case, since\nwe don'"
- "t have a \"first paragraph\""
- " to measure from?  Rule #2 simply stipulates\n"
- "that in such cases, we require one space indentation from the list marker\n"
- "(and then the normal four spaces for the indented code).  "
- "This will match the\n"
- "four-space rule in cases where the list marker plus its initial indentation\n"
- "takes four spaces (a common case), but diverge in other cases.\n\n"
- "## Lists\n\n"
- "A [list](@) is a sequence of one or more\nlist items "
- "[of the same type].  The list items\n"
- "may be separated by any number of blank lines.\n\n"
- "Two list items are [of the same type](@)\n"
- "if they begin with a [list marker] of the same type.\n"
- "Two list markers are of the\n"
- "same type if (a) they are bullet list markers using the same character\n("
- "`-`, `+`, or `*`"
- ") or (b) they are ordered list numbers with the same\n"
- "delimiter (either `.` or `)`).\n\n"
- "A list is an [ordered list](@)\n"
- "if its constituent list items begin with\n[ordered list markers], and a\n"
- "[bullet list](@) if its constituent list\nitems begin with ["
- "bullet list markers].\n\n"
- "The [start number](@)\nof an [ordered list]"
- " is determined by the list number of\n"
- "its initial list item.  The numbers of subsequent list items are\n"
- "disregarded.\n\n"
- "A list is [loose](@) if any of its constituent\n"
- "list items are separated by blank lines, or if any of its constituent\n"
- "list items directly contain two block-level elements with a blank line\n"
- "between them.  Otherwise a list is [tight](@).\n"
- "(The difference in HTML output is that paragraphs in a loose list "
- "are\nwrapped in `<p>`"
- " tags, while paragraphs in a tight list are not.)\n\n"
- "Changing the bullet or ordered list delimiter starts a new list:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n- bar\n+ baz\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n</ul>\n"
- "<ul>\n<li>baz</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1. foo\n2. bar\n3) baz\n.\n<ol>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n</ol>\n"
- "<ol start=\"3\">\n"
- "<li>baz</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "In CommonMark, a list can interrupt a paragraph. That is,\n"
- "no blank line is needed to separate a paragraph from a following\nlist:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo\n- bar\n- baz\n.\n"
- "<p>Foo</p>\n<ul>\n"
- "<li>bar</li>\n"
- "<li>baz</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "`Markdown.pl`"
- " does not allow this, through fear of triggering a list\n"
- "via a numeral in a hard-wrapped line:\n\n"
- "``` markdown\n"
- "The number of windows in my house is\n14.  "
- "The number of doors is 6.\n```\n\n"
- "Oddly, though, `Markdown.pl` *does*"
- " allow a blockquote to\n"
- "interrupt a paragraph, even though the same considerations might\napply.\n\n"
- "In CommonMark, we do allow lists to interrupt paragraphs, for\n"
- "two reasons.  First, it is natural and not uncommon for people\n"
- "to start lists without blank lines:\n\n"
- "``` markdown\n"
- "I need to buy\n- new shoes\n- a coat\n- a plane ticket\n"
- "```\n\nSecond, we are attracted to a\n"
- "\n> [principle of uniformity](@):\n> "
- "if a chunk of text has a certain\n> "
- "meaning, it will continue to have the same meaning when put into a\n> "
- "container block (such as a list item or blockquote).\n\n"
- "(Indeed, the spec for [list items] and [block quotes]"
- " presupposes\nthis principle.) This principle implies that if\n\n"
- "``` markdown\n"
- "  * I need to buy\n    - new shoes\n    - a coat\n    - a plane ticket\n"
- "```\n\n"
- "is a list item containing a paragraph followed by a nested sublist,\n"
- "as all Markdown implementations agree it is (though the paragraph\n"
- "may be rendered without `<p>` tags, since the list is \""
- "tight\"),\nthen\n\n"
- "``` markdown\n"
- "I need to buy\n- new shoes\n- a coat\n- a plane ticket\n"
- "```\n\n"
- "by itself should be a paragraph followed by a nested sublist.\n"
- "\nSince it is well established Markdown practice to allow lists to\n"
- "interrupt paragraphs inside list items, the [principle of\nuniformity]"
- " requires us to allow this outside list items as\nwell.  ("
- "[reStructuredText](https://"
- "docutils.sourceforge.net/rst.html)\n"
- "takes a different approach, requiring blank lines before lists\n"
- "even inside other list items.)\n\n"
- "In order to solve the problem of unwanted lists in paragraphs with\n"
- "hard-wrapped numerals, we allow only lists starting with `1`"
- " to\ninterrupt paragraphs.  Thus,\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "The number of windows in my house is\n14.  "
- "The number of doors is 6.\n.\n"
- "<p>The number of windows in my house is\n14.  "
- "The number of doors is 6.</p>\n"
- "````````````````"
- "````````````````\n\n"
- "We may still get an unintended result in cases like\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "The number of windows in my house is\n1.  "
- "The number of doors is 6.\n.\n"
- "<p>The number of windows in my house is</p>\n"
- "<ol>\n"
- "<li>The number of doors is 6.</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````\n\n"
- "but this rule should prevent most spurious list captures.\n"
- "\nThere can be any number of blank lines between items:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n\n- bar\n\n\n- baz\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n</li>\n"
- "<li>\n<p>bar</p>\n"
- "</li>\n<li>\n"
- "<p>baz</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n  - bar\n    - baz\n\n\n      bim\n.\n<ul>\n"
- "<li>foo\n<ul>\n<li>bar\n"
- "<ul>\n<li>\n<p>baz</p>\n"
- "<p>bim</p>\n</li>\n"
- "</ul>\n</li>\n</ul>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "To separate consecutive lists of the same type, or to separate a\n"
- "list from an indented code block that would otherwise be parsed\n"
- "as a subparagraph of the final list item, you can insert "
- "a blank HTML\ncomment:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- foo\n- bar\n\n<!-- -->\n\n- baz\n"
- "- bim\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n</ul>\n"
- "<!-- -->\n<ul>\n"
- "<li>baz</li>\n"
- "<li>bim</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n"
- ".\n<ul>\n<li>\n"
- "<p>foo</p>\n"
- "<p>notcode</p>\n</li>\n"
- "<li>\n<p>foo</p>\n"
- "</li>\n</ul>\n<!-- -->\n"
- "<pre><code>code\n</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "List items need not be indented to the same level.  The following\n"
- "list items will be treated as items at the same list level,\n"
- "since none is indented enough to belong to the previous list\nitem:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n.\n"
- "<ul>\n<li>a</li>\n"
- "<li>b</li>\n"
- "<li>c</li>\n"
- "<li>d</li>\n"
- "<li>e</li>\n"
- "<li>f</li>\n"
- "<li>g</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1. a\n\n  2. b\n\n   3. c\n.\n<ol>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<p>b</p>\n</li>\n"
- "<li>\n<p>c</p>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n"
- "Note, however, that list items may not be preceded by more than\n"
- "three spaces of indentation.  Here `- e`"
- " is treated as a paragraph continuation\n"
- "line, because it is indented more than three spaces:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n - b\n  - c\n   - d\n    - e\n.\n<ul>\n"
- "<li>a</li>\n"
- "<li>b</li>\n"
- "<li>c</li>\n<li>d\n"
- "- e</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n"
- "And here, `3. c`"
- " is treated as in indented code block,\n"
- "because it is indented four spaces and preceded by a\nblank line.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1. a\n\n  2. b\n\n    3. c\n.\n<ol>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<p>b</p>\n</li>\n"
- "</ol>\n<pre><code>3. c\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is a loose list, because there is a blank line between\n"
- "two of the list items:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n- b\n\n- c\n.\n<ul>\n<li>\n"
- "<p>a</p>\n</li>\n"
- "<li>\n<p>b</p>\n"
- "</li>\n<li>\n"
- "<p>c</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "So is this, with a empty second item:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "* a\n*\n\n* c\n.\n<ul>\n<li>\n"
- "<p>a</p>\n</li>\n"
- "<li></li>\n<li>\n"
- "<p>c</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "These are loose lists, even though there are no blank lines between the items,\n"
- "because one of the items directly contains two block-level elements\n"
- "with a blank line between them:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n- b\n\n  c\n- d\n.\n<ul>\n<li>\n"
- "<p>a</p>\n</li>\n"
- "<li>\n<p>b</p>\n"
- "<p>c</p>\n</li>\n"
- "<li>\n<p>d</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n- b\n\n  [ref]: /url\n- d\n.\n"
- "<ul>\n<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<p>b</p>\n</li>\n"
- "<li>\n<p>d</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is a tight list, because the blank lines are in a code block:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n- ```\n  b\n\n\n  ```\n- c\n.\n<ul>\n"
- "<li>a</li>\n<li>\n"
- "<pre><code>b\n\n\n</code></pre>\n"
- "</li>\n<li>c</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is a tight list, because the blank line is between two\n"
- "paragraphs of a sublist.  So the sublist is loose while\n"
- "the outer list is tight:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n  - b\n\n    c\n- d\n.\n<ul>\n<li>a\n"
- "<ul>\n<li>\n<p>b</p>\n"
- "<p>c</p>\n</li>\n"
- "</ul>\n</li>\n"
- "<li>d</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is a tight list, because the blank line is inside the\nblock quote:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "* a\n  > b\n  >\n* c\n.\n<ul>\n<li>a\n"
- "<blockquote>\n<p>b</p>\n"
- "</blockquote>\n</li>\n"
- "<li>c</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This list is tight, because the consecutive block elements\n"
- "are not separated by blank lines:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n  > b\n  ```\n  c\n  ```\n- d\n.\n"
- "<ul>\n<li>a\n<blockquote>\n"
- "<p>b</p>\n</blockquote>\n"
- "<pre><code>c\n</code></pre>\n"
- "</li>\n<li>d</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A single-paragraph list is tight:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n.\n<ul>\n<li>a</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n  - b\n.\n<ul>\n<li>a\n<ul>\n"
- "<li>b</li>\n</ul>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This list is loose, because of the blank line between the\n"
- "two block elements in the list item:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "1. ```\n   foo\n   ```\n\n   bar\n.\n<ol>\n"
- "<li>\n<pre><code>foo\n"
- "</code></pre>\n<p>bar</p>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here the outer list is loose, the inner list tight:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "* foo\n  * bar\n\n  baz\n.\n<ul>\n<li>\n"
- "<p>foo</p>\n<ul>\n"
- "<li>bar</li>\n</ul>\n"
- "<p>baz</p>\n</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n.\n<ul>\n"
- "<li>\n<p>a</p>\n<ul>\n"
- "<li>b</li>\n"
- "<li>c</li>\n</ul>\n"
- "</li>\n<li>\n"
- "<p>d</p>\n<ul>\n"
- "<li>e</li>\n"
- "<li>f</li>\n</ul>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````\n\n\n"
- "# Inlines\n\n"
- "Inlines are parsed sequentially from the beginning of the character\n"
- "stream to the end (left to right, in left-to-right languages"
- ").\nThus, for example, in\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`hi`lo`\n.\n"
- "<p><code>hi</code>lo`</p"
- ">\n"
- "````````````````"
- "````````````````\n\n"
- "`hi`"
- " is parsed as code, leaving the backtick at the end as a literal\n"
- "backtick.\n\n\n\n"
- "## Code spans\n\n"
- "A [backtick string](@)\n"
- "is a string of one or more backtick characters (`` ` ``"
- ") that is neither\npreceded nor followed by a backtick.\n\n"
- "A [code span](@)"
- " begins with a backtick string and ends with\n"
- "a backtick string of equal length.  The contents of the code span are\n"
- "the characters between these two backtick strings, normalized in the\nfollowing ways:\n\n"
- "- First, [line endings] are converted to [spaces].\n"
- "- If the resulting string both begins *and* ends with a [space]\n  "
- "character, but does not consist entirely of [space]\n  characters, a single ["
- "space] character is removed from the\n  "
- "front and back.  This allows you to include code that begins\n  "
- "or ends with backtick characters, which must be separated by\n  "
- "whitespace from the opening or closing backtick strings.\n\n"
- "This is a simple code span:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`foo`\n.\n"
- "<p><code>foo</code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here two backticks are used, because the code contains a backtick.\n"
- "This example also illustrates stripping of a single leading and\ntrailing space:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`` foo ` bar ``\n.\n"
- "<p><code>foo ` bar</code></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This example shows the motivation for stripping leading and trailing\nspaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "` `` `\n.\n"
- "<p><code>``</code></p>\n"
- "````````````````"
- "````````````````\n\n"
- "Note that only *one* space is stripped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`  ``  `\n.\n"
- "<p><code> `` </code></p>\n"
- "````````````````"
- "````````````````\n\n"
- "The stripping only happens if the space is on both\nsides of the string:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "` a`\n.\n"
- "<p><code> a</code></p>\n"
- "````````````````"
- "````````````````\n\n"
- "Only [spaces], and not [unicode whitespace]"
- " in general, are\nstripped in this way:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "` b `\n.\n"
- "<p><code> b </code></p>\n"
- "````````````````"
- "````````````````\n\n"
- "No stripping occurs if the code span contains only spaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "` `\n`  `\n.\n<p><code> </code>\n"
- "<code>  </code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Line endings] are treated like spaces:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``\nfoo\nbar  \nbaz\n``\n.\n"
- "<p><code>foo bar   baz</code><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``\nfoo \n``\n.\n"
- "<p><code>foo </code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Interior spaces are not collapsed:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`foo   bar \nbaz`\n.\n"
- "<p><code>foo   bar  baz</code><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n"
- "Note that browsers will typically collapse consecutive spaces\nwhen rendering `<code>`"
- " elements, so it is recommended that\nthe following CSS be used:\n\n    "
- "code{white-space: pre-wrap;}\n"
- "\n\nNote that backslash escapes do not work in code spans. All backslashes\n"
- "are treated literally:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`foo\\`bar`\n.\n"
- "<p><code>foo\\</code>bar`<"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash escapes are never needed, because one can always choose a\nstring of "
- "*n* backtick characters as delimiters, where the code does\n"
- "not contain any strings of exactly *n* backtick characters.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "``foo`bar``\n.\n"
- "<p><code>foo`bar</code></"
- "p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "` foo `` bar `\n.\n"
- "<p><code>foo `` bar</code><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Code span backticks have higher precedence than any other inline\n"
- "constructs except HTML tags and autolinks.  "
- "Thus, for example, this is\n"
- "not parsed as emphasized text, since the second `*`"
- " is part of a code\nspan:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo`*`\n.\n"
- "<p>*foo<code>*</code></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "And this is not parsed as a link:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[not a `link](/foo`)\n.\n"
- "<p>[not a <code>link](/foo<"
- "/code>)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Code spans, HTML tags, and autolinks have the same precedence"
- ".\nThus, this is code:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`<a href=\"`\">`\n.\n"
- "<p><code>&lt;a href=&"
- quot;</code>&quot;&gt
- ";`</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "But this is an HTML tag:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"`\">`\n.\n"
- "<p><a href=\"`\">`</"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "And this is code:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`<https://foo.bar.`baz>`\n"
- ".\n"
- "<p><code>&lt;https://"
- "foo.bar.</code>baz&gt;`"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "But this is an autolink:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<https://foo.bar.`baz>`\n.\n"
- "<p><a href=\"https://"
- "foo.bar.%60baz\">https://"
- "foo.bar.`baz</a>`</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "When a backtick string is not closed by a matching backtick string,\n"
- "we just have literal backticks:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "```foo``\n.\n"
- "<p>```foo``</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n`foo\n.\n<p>`foo</p>\n"
- "````````````````"
- "````````````````\n\n"
- "The following case also illustrates the need for opening and\n"
- "closing backtick strings to be equal in length:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`foo``bar``\n.\n"
- "<p>`foo<code>bar</code></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Emphasis and strong emphasis\n\n"
- "John Gruber's original "
- "[Markdown syntax\ndescription"
- "](https://daringfireball.net/projects/markdown"
- "/syntax#em) says:\n\n"
- "> Markdown treats asterisks (`*`"
- ") and underscores (`_`) as indicators of\n> "
- "emphasis. Text wrapped with one `*` or `_`"
- " will be wrapped with an HTML\n> `<em>`"
- " tag; double `*`'s or `_`'"
- "s will be wrapped with an HTML `<strong>`\n> "
- "tag.\n\n"
- "This is enough for most users, but these rules leave much undecided,\n"
- "especially when it comes to nested emphasis.  The original\n"
- "`Markdown.pl` test suite makes it clear that triple "
- "`***` and\n`___`"
- " delimiters can be used for strong emphasis, and most\n"
- "implementations have also allowed the following patterns:\n\n"
- "``` markdown\n"
- "***strong emph***\n"
- "***strong** in emph*\n"
- "***emph* in strong**\n"
- "**in strong *emph***\n"
- "*in emph **strong***\n```\n\n"
- "The following patterns are less widely supported, but the intent\n"
- "is clear and they are useful (especially in contexts like bibliography\n"
- "entries):\n\n"
- "``` markdown\n"
- "*emph *with emph* in it*\n"
- "**strong **with strong** in it**\n```\n\n"
- "Many implementations have also restricted intraword emphasis to\nthe `*`"
- " forms, to avoid unwanted emphasis in words containing\n"
- "internal underscores.  (It is best practice to put these in code\n"
- "spans, but users often do not.)\n\n"
- "``` markdown\n"
- "internal emphasis: foo*bar*baz\n"
- "no emphasis: foo_bar_baz\n```\n\n"
- "The rules given below capture all of these patterns, while allowing\n"
- "for efficient parsing strategies that do not backtrack.\n\n"
- "First, some definitions.  A [delimiter run](@)"
- " is either\na sequence of one or more `*`"
- " characters that is not preceded or\nfollowed by a non-backslash-escaped "
- "`*` character, or a sequence\nof one or more `_`"
- " characters that is not preceded or followed by\na non-backslash-escaped "
- "`_` character.\n\n"
- "A [left-flanking delimiter run](@) is\na "
- "[delimiter run] that is (1) not followed by ["
- "Unicode whitespace],\n"
- "and either (2a) not followed by a ["
- "Unicode punctuation character], or\n"
- "(2b) followed by a [Unicode punctuation character"
- "] and\npreceded by [Unicode whitespace] or a ["
- "Unicode punctuation character].\n"
- "For purposes of this definition, the beginning and the end of\n"
- "the line count as Unicode whitespace.\n\n"
- "A [right-flanking delimiter run](@) is\na "
- "[delimiter run] that is (1) not preceded by ["
- "Unicode whitespace],\n"
- "and either (2a) not preceded by a ["
- "Unicode punctuation character], or\n"
- "(2b) preceded by a [Unicode punctuation character"
- "] and\nfollowed by [Unicode whitespace] or a ["
- "Unicode punctuation character].\n"
- "For purposes of this definition, the beginning and the end of\n"
- "the line count as Unicode whitespace.\n\n"
- "Here are some examples of delimiter runs.\n"
- "\n  - left-flanking but not right-flanking:"
- "\n\n    ```\n    ***abc\n      _abc\n    "
- "**\"abc\"\n     _\"abc\"\n    ```\n\n"
- "  - right-flanking but not left-flanking:"
- "\n\n    ```\n     abc***\n     abc_\n    "
- "\"abc\"**\n    \"abc\"_\n    ```\n\n"
- "  - Both left and right-flanking:"
- "\n\n    ```\n     abc***def\n    "
- "\"abc\"_\"def\"\n    ```\n\n"
- "  - Neither left nor right-flanking:"
- "\n\n    ```\n    abc *** def\n    a _ b\n    ```"
- "\n\n(The idea of distinguishing left-flanking and right-flanking\n"
- "delimiter runs based on the character before and the character\n"
- "after comes from Roopesh Chander's\n"
- "[vfmd](https://web.archive.org"
- "/web/20220608143320/http://"
- www.vfmd.org/vfmd-spec
- "/specification/#procedure-for-identifying-emphasis-tags).\n"
- "vfmd uses the terminology \"emphasis indicator string\" instead of \""
- "delimiter\nrun,\""
- " and its rules for distinguishing left- and right-flanking runs\n"
- "are a bit more complex than the ones given here.)\n\n"
- "The following rules define emphasis and strong emphasis:\n"
- "\n1.  A single `*` character [can open emphasis](@)\n    "
- "iff (if and only if) it is part of a ["
- "left-flanking delimiter run].\n\n"
- "2.  A single `_` character [can open emphasis] iff\n    "
- "it is part of a [left-flanking delimiter run]\n    "
- "and either (a) not part of a ["
- "right-flanking delimiter run]\n    or (b) part of a "
- "[right-flanking delimiter run]\n    preceded by a ["
- "Unicode punctuation character].\n\n"
- "3.  A single `*` character [can close emphasis](@)\n    "
- "iff it is part of a [right-flanking delimiter run"
- "].\n\n"
- "4.  A single `_` character [can close emphasis] iff\n    "
- "it is part of a [right-flanking delimiter run]\n    "
- "and either (a) not part of a ["
- "left-flanking delimiter run]\n    or (b) part of a "
- "[left-flanking delimiter run]\n    followed by a ["
- "Unicode punctuation character].\n\n"
- "5.  A double `**` "
- "[can open strong emphasis](@)\n    iff it is part of a "
- "[left-flanking delimiter run].\n\n"
- "6.  A double `__` [can open strong emphasis] iff\n    "
- "it is part of a [left-flanking delimiter run]\n    "
- "and either (a) not part of a ["
- "right-flanking delimiter run]\n    or (b) part of a "
- "[right-flanking delimiter run]\n    preceded by a ["
- "Unicode punctuation character].\n\n"
- "7.  A double `**` "
- "[can close strong emphasis](@)\n    iff it is part of a "
- "[right-flanking delimiter run].\n\n"
- "8.  A double `__` [can close strong emphasis] iff\n    "
- "it is part of a [right-flanking delimiter run]\n    "
- "and either (a) not part of a ["
- "left-flanking delimiter run]\n    or (b) part of a "
- "[left-flanking delimiter run]\n    followed by a ["
- "Unicode punctuation character].\n\n"
- "9.  Emphasis begins with a delimiter that [can open emphasis"
- "] and ends\n    with a delimiter that [can close emphasis]"
- ", and that uses the same\n    character (`_` or `*`"
- ") as the opening delimiter.  The\n    "
- "opening and closing delimiters must belong to separate\n    [delimiter runs"
- "].  If one of the delimiters can both\n    "
- "open and close emphasis, then the sum of the lengths of the\n    "
- "delimiter runs containing the opening and closing delimiters\n    "
- "must not be a multiple of 3 unless both lengths are\n    multiples of 3.\n\n"
- "10. Strong emphasis begins with a delimiter that\n    [can open strong emphasis"
- "] and ends with a delimiter that\n    [can close strong emphasis]"
- ", and that uses the same character\n    (`_` or `*`"
- ") as the opening delimiter.  The\n    "
- "opening and closing delimiters must belong to separate\n    [delimiter runs"
- "].  If one of the delimiters can both open\n    "
- "and close strong emphasis, then the sum of the lengths of\n    "
- "the delimiter runs containing the opening and closing\n    "
- "delimiters must not be a multiple of 3 unless both lengths\n    "
- "are multiples of 3.\n\n"
- "11. A literal `*` character cannot occur at the beginning or end of\n    "
- "`*`-delimited emphasis or `**`"
- "-delimited strong emphasis, unless it\n    is backslash-escaped.\n\n"
- "12. A literal `_` character cannot occur at the beginning or end of\n    "
- "`_`-delimited emphasis or `__`"
- "-delimited strong emphasis, unless it\n    is backslash-escaped.\n\n"
- "Where rules 1--12 above are compatible with multiple parsings,\n"
- "the following principles resolve ambiguity:\n\n"
- "13. "
- "The number of nestings should be minimized. Thus, for example,\n    "
- "an interpretation `<strong>...</strong>`"
- " is always preferred to\n    "
- "`<em><em>...</em></"
- "em>`.\n\n"
- "14. An interpretation "
- "`<em><strong>...</strong></"
- "em>` is always\n    preferred to "
- "`<strong><em>...</em></"
- "strong>`.\n\n"
- "15. When two potential emphasis or strong emphasis spans overlap,\n    "
- "so that the second begins before the first ends and ends after\n    "
- "the first ends, the first takes precedence. Thus, for example,\n    "
- "`*foo _bar* baz_` is parsed as "
- "`<em>foo _bar</em> baz_`"
- " rather\n    than "
- "`*foo <em>bar* baz</em>`"
- ".\n\n"
- "16. When there are two potential emphasis or strong emphasis spans\n    "
- "with the same closing delimiter, the shorter one (the one that\n    "
- "opens later) takes precedence. Thus, for example,\n    "
- "`**foo **bar baz**`"
- " is parsed as "
- "`**foo <strong>bar baz</strong>`\n    "
- "rather than "
- "`<strong>foo **bar baz</strong>`"
- ".\n\n"
- "17. "
- "Inline code spans, links, images, and HTML tags group more "
- "tightly\n    than emphasis.  So, when there is a choice between an interpretation\n    "
- "that contains one of these elements and one that does not, the\n    "
- "former always wins.  Thus, for example, "
- "`*[foo*](bar)` is\n    parsed as "
- "`*<a href=\"bar\">foo*<"
- "/a>` rather than as\n    "
- "`<em>[foo</em>](bar)`"
- ".\n\nThese rules can be illustrated through a series of examples.\n\nRule 1:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo bar*\n.\n"
- "<p><em>foo bar</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the opening `*` is followed by\n"
- "whitespace, and hence not part of a ["
- "left-flanking delimiter run]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "a * foo bar*\n.\n"
- "<p>a * foo bar*</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the opening `*` is preceded\n"
- "by an alphanumeric and followed by punctuation, and hence\n"
- "not part of a [left-flanking delimiter run]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "a*\"foo\"*\n.\n"
- "<p>a*&quot;foo&quot"
- ";*</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Unicode nonbreaking spaces count as whitespace, too:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n* a *\n.\n<p>* a *</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Unicode symbols count as punctuation, too:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*$*alpha.\n\n*£*bravo.\n\n"
- "*€*charlie.\n.\n"
- "<p>*$*alpha.</p>\n"
- "<p>*£*bravo.</p>\n"
- "<p>*€*charlie.</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis with `*` is permitted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo*bar*\n.\n"
- "<p>foo<em>bar</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "5*6*78\n.\n"
- "<p>5<em>6</em>78</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 2:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo bar_\n.\n"
- "<p><em>foo bar</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the opening `_` is followed by\n"
- "whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_ foo bar_\n.\n"
- "<p>_ foo bar_</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the opening `_` is preceded\n"
- "by an alphanumeric and followed by punctuation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "a_\"foo\"_\n.\n"
- "<p>a_&quot;foo&quot"
- ";_</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Emphasis with `_` is not allowed inside words:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo_bar_\n.\n"
- "<p>foo_bar_</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "5_6_78\n.\n"
- "<p>5_6_78</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- пристаням_стремя
- "тся_\n.\n"
- "<p>"
- пристаням_стремя
- "тся_</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here `_` does not generate emphasis, because the first delimiter run\n"
- "is right-flanking and the second left-flanking:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "aa_\"bb\"_cc\n.\n"
- "<p>aa_&quot;bb&"
- "quot;_cc</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is emphasis, even though the opening delimiter is\n"
- "both left- and right-flanking, because it is preceded by\n"
- "punctuation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo-_(bar)_\n.\n"
- "<p>foo-<em>(bar)</em>"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 3:\n"
- "\nThis is not emphasis, because the closing delimiter does\n"
- "not match the opening delimiter:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo*\n.\n<p>_foo*</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the closing `*` is preceded by\n"
- "whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo bar *\n.\n"
- "<p>*foo bar *</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A line ending also counts as whitespace:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo bar\n*\n.\n<p>*foo bar\n"
- "*</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the second `*` is\n"
- "preceded by punctuation and followed by an alphanumeric\n"
- "(hence it is not part of a ["
- "right-flanking delimiter run]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*(*foo)\n.\n"
- "<p>*(*foo)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The point of this restriction is more easily appreciated\nwith this example:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*(*foo*)*\n.\n"
- "<p><em>(<em>foo</em>"
- ")</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis with `*` is allowed:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo*bar\n.\n"
- "<p><em>foo</em>bar</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Rule 4:\n"
- "\nThis is not emphasis, because the closing `_` is preceded by\n"
- "whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo bar _\n.\n"
- "<p>_foo bar _</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not emphasis, because the second `_` is\n"
- "preceded by punctuation and followed by an alphanumeric:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_(_foo)\n.\n"
- "<p>_(_foo)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is emphasis within emphasis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_(_foo_)_\n.\n"
- "<p><em>(<em>foo</em>"
- ")</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis is disallowed for `_`:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo_bar\n.\n"
- "<p>_foo_bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- _пристаням_стрем
- "ятся\n.\n"
- "<p>"
- _пристаням_стрем
- "ятся</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo_bar_baz_\n.\n"
- "<p><em>foo_bar_baz</em"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is emphasis, even though the closing delimiter is\n"
- "both left- and right-flanking, because it is followed by\n"
- "punctuation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_(bar)_.\n.\n"
- "<p><em>(bar)</em>.</"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 5:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo bar**\n.\n"
- "<p><strong>foo bar</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, because the opening delimiter is\n"
- "followed by whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "** foo bar**\n.\n"
- "<p>** foo bar**</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, because the opening `**` is preceded\n"
- "by an alphanumeric and followed by punctuation, and hence\n"
- "not part of a [left-flanking delimiter run]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "a**\"foo\"**\n.\n"
- "<p>a**&quot;foo&"
- "quot;**</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword strong emphasis with `**` is permitted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo**bar**\n.\n"
- "<p>foo<strong>bar</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 6:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo bar__\n.\n"
- "<p><strong>foo bar</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, because the opening delimiter is\n"
- "followed by whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__ foo bar__\n.\n"
- "<p>__ foo bar__</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A line ending counts as whitespace:\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__\nfoo bar__\n.\n<p>__\n"
- "foo bar__</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, because the opening `__` is preceded\n"
- "by an alphanumeric and followed by punctuation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "a__\"foo\"__\n.\n"
- "<p>a__&quot;foo&"
- "quot;__</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword strong emphasis is forbidden with `__`:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo__bar__\n.\n"
- "<p>foo__bar__</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "5__6__78\n.\n"
- "<p>5__6__78</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- пристаням__стрем
- "ятся__\n.\n"
- "<p>"
- пристаням__стрем
- "ятся__</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo, __bar__, baz__\n.\n"
- "<p><strong>foo, <strong>bar</strong"
- ">, baz</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is strong emphasis, even though the opening delimiter is\n"
- "both left- and right-flanking, because it is preceded by\n"
- "punctuation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo-__(bar)__\n.\n"
- "<p>foo-<strong>(bar)</strong>"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Rule 7:\n"
- "\nThis is not strong emphasis, because the closing delimiter is preceded\n"
- "by whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo bar **\n.\n"
- "<p>**foo bar **</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "(Nor can it be interpreted as an emphasized `*foo bar *`"
- ", because of\nRule 11.)\n\n"
- "This is not strong emphasis, because the second `**` is\n"
- "preceded by punctuation and followed by an alphanumeric:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**(**foo)\n.\n"
- "<p>**(**foo)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The point of this restriction is more easily appreciated\nwith these examples:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*(**foo**)*\n.\n"
- "<p><em>(<strong>foo</strong>"
- ")</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**Gomphocarpus (*Gomphocarpus "
- "physocarpus*, syn.\n"
- "*Asclepias physocarpa*)**\n.\n"
- "<p><strong>Gomphocarpus (<em>"
- "Gomphocarpus physocarpus</em>, "
- "syn.\n"
- "<em>Asclepias physocarpa</em>"
- ")</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo \"*bar*\" foo**\n.\n"
- "<p><strong>foo &quot;<em>"
- bar</em>&quot; foo</strong>
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword emphasis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo**bar\n.\n"
- "<p><strong>foo</strong>bar</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 8:\n"
- "\nThis is not strong emphasis, because the closing delimiter is\n"
- "preceded by whitespace:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo bar __\n.\n"
- "<p>__foo bar __</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is not strong emphasis, because the second `__` is\n"
- "preceded by punctuation and followed by an alphanumeric:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__(__foo)\n.\n"
- "<p>__(__foo)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The point of this restriction is more easily appreciated\nwith this example:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_(__foo__)_\n.\n"
- "<p><em>(<strong>foo</strong>"
- ")</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Intraword strong emphasis is forbidden with `__`:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo__bar\n.\n"
- "<p>__foo__bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- __пристаням__стр
- "емятся\n.\n"
- "<p>"
- __пристаням__стр
- "емятся</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo__bar__baz__\n.\n"
- "<p><strong>foo__bar__baz<"
- "/strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is strong emphasis, even though the closing delimiter is\n"
- "both left- and right-flanking, because it is followed by\n"
- "punctuation:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__(bar)__.\n.\n"
- "<p><strong>(bar)</strong>.</"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 9:\n"
- "\nAny nonempty sequence of inline elements can be the contents of an\n"
- "emphasized span.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo [bar](/url)*\n.\n"
- "<p><em>foo <a href=\"/"
- "url\">bar</a></em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo\nbar*\n.\n<p><em>foo\n"
- "bar</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "In particular, emphasis and strong emphasis can be nested\ninside emphasis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo __bar__ baz_\n.\n"
- "<p><em>foo <strong>bar</strong> "
- "baz</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo _bar_ baz_\n.\n"
- "<p><em>foo <em>bar</em> "
- "baz</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo_ bar_\n.\n"
- "<p><em><em>foo</em> bar"
- "</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo *bar**\n.\n"
- "<p><em>foo <em>bar</em>"
- "</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo **bar** baz*\n.\n"
- "<p><em>foo <strong>bar</strong> "
- "baz</em></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo**bar**baz*\n.\n"
- "<p><em>foo<strong>bar</strong>"
- "baz</em></p>\n"
- "````````````````"
- "````````````````\n\n"
- "Note that in the preceding case, the interpretation\n"
- "\n``` markdown\n"
- "<p><em>foo</em><em>bar"
- "<em></em>baz</em></p"
- ">\n```\n\n\n"
- "is precluded by the condition that a delimiter that\n"
- "can both open and close (like the `*` after `foo`"
- ")\ncannot form emphasis if the sum of the lengths of\n"
- "the delimiter runs containing the opening and\n"
- "closing delimiters is a multiple of 3 unless\n"
- "both lengths are multiples of 3.\n\n\n"
- "For the same reason, we don't get two consecutive\n"
- "emphasis sections in this example:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo**bar*\n.\n"
- "<p><em>foo**bar</em><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The same condition ensures that the following\ncases are all strong emphasis nested inside\n"
- "emphasis, even when the interior whitespace is\nomitted:\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "***foo** bar*\n.\n"
- "<p><em><strong>foo</strong> bar"
- "</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo **bar***\n.\n"
- "<p><em>foo <strong>bar</strong>"
- "</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo**bar***\n.\n"
- "<p><em>foo<strong>bar</strong>"
- "</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "When the lengths of the interior closing and opening\ndelimiter runs are "
- "*both* multiples of 3, though,\n"
- "they can match to create emphasis:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo***bar***baz\n.\n"
- "<p>foo<em><strong>bar</strong>"
- "</em>baz</p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- foo******bar*******
- "**baz\n.\n"
- "<p>foo<strong><strong><strong>bar<"
- /strong></strong></strong>***baz
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Indefinite levels of nesting are possible:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo **bar *baz* bim** bop"
- "*\n.\n"
- "<p><em>foo <strong>bar <em>"
- baz</em> bim</strong> bop</
- "em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo [*bar*](/url)*\n.\n"
- "<p><em>foo <a href=\"/"
- "url\"><em>bar</em></a>"
- "</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "There can be no empty emphasis or strong emphasis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "** is not an empty emphasis\n.\n"
- "<p>** is not an empty emphasis</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**** is not an empty strong emphasis\n.\n"
- "<p>**** is not an empty strong emphasis</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Rule 10:\n"
- "\nAny nonempty sequence of inline elements can be the contents of an\n"
- "strongly emphasized span.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo [bar](/url)**\n.\n"
- "<p><strong>foo <a href=\"/"
- "url\">bar</a></strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo\nbar**\n.\n<p><strong>foo\n"
- "bar</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "In particular, emphasis and strong emphasis can be nested\ninside strong emphasis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo _bar_ baz__\n.\n"
- "<p><strong>foo <em>bar</em> "
- "baz</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo __bar__ baz__\n.\n"
- "<p><strong>foo <strong>bar</strong> "
- "baz</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "____foo__ bar__\n.\n"
- "<p><strong><strong>foo</strong> bar"
- "</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo **bar****\n.\n"
- "<p><strong>foo <strong>bar</strong>"
- "</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo *bar* baz**\n.\n"
- "<p><strong>foo <em>bar</em> "
- "baz</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo*bar*baz**\n.\n"
- "<p><strong>foo<em>bar</em>"
- "baz</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "***foo* bar**\n.\n"
- "<p><strong><em>foo</em> bar"
- "</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo *bar***\n.\n"
- "<p><strong>foo <em>bar</em>"
- "</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Indefinite levels of nesting are possible:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo *bar **baz**\n"
- "bim* bop**\n.\n"
- "<p><strong>foo <em>bar <strong>"
- "baz</strong>\n"
- "bim</em> bop</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo [*bar*](/url)**\n"
- ".\n"
- "<p><strong>foo <a href=\"/"
- "url\"><em>bar</em></a>"
- "</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "There can be no empty emphasis or strong emphasis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__ is not an empty emphasis\n.\n"
- "<p>__ is not an empty emphasis</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "____ is not an empty strong emphasis\n.\n"
- "<p>____ is not an empty strong emphasis</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Rule 11:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo ***\n.\n"
- "<p>foo ***</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo *\\**\n.\n"
- "<p>foo <em>*</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo *_*\n.\n"
- "<p>foo <em>_</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo *****\n.\n"
- "<p>foo *****</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo **\\***\n.\n"
- "<p>foo <strong>*</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo **_**\n.\n"
- "<p>foo <strong>_</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that when delimiters do not match evenly, Rule 11 determines\n"
- "that the excess literal `*` characters will appear outside of the\n"
- "emphasis, rather than inside it:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo*\n.\n"
- "<p>*<em>foo</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo**\n.\n"
- "<p><em>foo</em>*</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "***foo**\n.\n"
- "<p>*<strong>foo</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "****foo*\n.\n"
- "<p>***<em>foo</em><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo***\n.\n"
- "<p><strong>foo</strong>*</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo****\n.\n"
- "<p><em>foo</em>***<"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Rule 12:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo ___\n.\n"
- "<p>foo ___</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo _\\__\n.\n"
- "<p>foo <em>_</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo _*_\n.\n"
- "<p>foo <em>*</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo _____\n.\n"
- "<p>foo _____</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo __\\___\n.\n"
- "<p>foo <strong>_</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo __*__\n.\n"
- "<p>foo <strong>*</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo_\n.\n"
- "<p>_<em>foo</em></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that when delimiters do not match evenly, Rule 12 determines\n"
- "that the excess literal `_` characters will appear outside of the\n"
- "emphasis, rather than inside it:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo__\n.\n"
- "<p><em>foo</em>_</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "___foo__\n.\n"
- "<p>_<strong>foo</strong></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "____foo_\n.\n"
- "<p>___<em>foo</em><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo___\n.\n"
- "<p><strong>foo</strong>_</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo____\n.\n"
- "<p><em>foo</em>___<"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 13 implies that if you want emphasis nested directly inside\n"
- "emphasis, you must use different delimiters:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo**\n.\n"
- "<p><strong>foo</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*_foo_*\n.\n"
- "<p><em><em>foo</em><"
- "/em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__foo__\n.\n"
- "<p><strong>foo</strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_*foo*_\n.\n"
- "<p><em><em>foo</em><"
- "/em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, strong emphasis within strong emphasis is possible without\nswitching delimiters:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "****foo****\n.\n"
- "<p><strong><strong>foo</strong><"
- "/strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "____foo____\n.\n"
- "<p><strong><strong>foo</strong><"
- "/strong></p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "Rule 13 can be applied to arbitrarily long sequences of\n"
- "delimiters:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "******foo******\n.\n"
- "<p><strong><strong><strong>foo</"
- "strong></strong></strong></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 14:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "***foo***\n.\n"
- "<p><em><strong>foo</strong><"
- "/em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_____foo_____\n.\n"
- "<p><em><strong><strong>foo</"
- "strong></strong></em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 15:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo _bar* baz_\n.\n"
- "<p><em>foo _bar</em> "
- "baz_</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo __bar *baz bim__ bam*\n"
- ".\n"
- "<p><em>foo <strong>bar *baz "
- "bim</strong> bam</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 16:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**foo **bar baz**\n.\n"
- "<p>**foo <strong>bar baz</strong"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo *bar baz*\n.\n"
- "<p>*foo <em>bar baz</em>"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Rule 17:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*[bar*](/url)\n.\n"
- "<p>*<a href=\"/url\">"
- "bar*</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_foo [bar_](/url)\n.\n"
- "<p>_foo <a href=\"/url"
- "\">bar_</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*<img src=\"foo\" title=\"*\""
- "/>\n.\n"
- "<p>*<img src=\"foo\" title="
- "\"*\"/></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**<a href=\"**\">\n.\n"
- "<p>**<a href=\"**\">"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__<a href=\"__\">\n.\n"
- "<p>__<a href=\"__\">"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*a `*`*\n.\n"
- "<p><em>a <code>*</code><"
- "/em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "_a `_`_\n.\n"
- "<p><em>a <code>_</code><"
- "/em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "**a<https://foo.bar/?"
- "q=**>\n.\n"
- "<p>**a<a href=\"https:/"
- /foo.bar/?
- "q=**\">https://foo.bar/?"
- "q=**</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "__a<https://foo.bar/?"
- "q=__>\n.\n"
- "<p>__a<a href=\"https:/"
- /foo.bar/?
- "q=__\">https://foo.bar/?"
- "q=__</a></p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "## Links\n\n"
- "A link contains [link text] (the visible text), a ["
- "link destination]\n"
- "(the URI that is the link destination), and optionally a ["
- "link title].\nThere are two basic kinds of links in Markdown.  In "
- "[inline links] the\n"
- "destination and title are given immediately after the link text.  In\n[reference links]"
- " the destination and title are defined elsewhere in\nthe document.\n\n"
- "A [link text](@) consists of a sequence of zero or more\n"
- "inline elements enclosed by square brackets (`[` and `]`"
- ").  The\nfollowing rules apply:\n\n"
- "- Links may not contain other links, at any level of nesting. If\n  "
- "multiple otherwise valid link definitions appear nested inside each\n  "
- "other, the inner-most definition is used.\n\n"
- "- Brackets are allowed in the [link text]"
- " only if (a) they\n  "
- "are backslash-escaped or (b) they appear as a matched pair of "
- "brackets,\n  with an open bracket `[`"
- ", a sequence of zero or more inlines, and\n  a close bracket "
- "`]`.\n\n"
- "- Backtick [code spans], [autolinks], and raw "
- "[HTML tags] bind more tightly\n  "
- "than the brackets in link text.  Thus, for example,\n  "
- "`` [foo`]` ``"
- " could not be a link text, since the second `]`\n  "
- "is part of a code span.\n\n"
- "- The brackets in link text bind more tightly than markers for\n  ["
- "emphasis and strong emphasis]. Thus, for example, "
- "`*[foo*](url)` is a link.\n\n"
- "A [link destination](@) consists of either\n"
- "\n- a sequence of zero or more characters between an opening `<` and a\n  "
- "closing `>` that contains no line endings or unescaped\n  `<`"
- " or `>` characters, or\n\n"
- "- a nonempty sequence of characters that does not start with `<`"
- ",\n  does not include [ASCII control characters]["
- "ASCII control character]\n  or [space]"
- " character, and includes parentheses only if (a) they are\n  "
- "backslash-escaped or (b) they are part of a balanced pair of\n  "
- "unescaped parentheses.\n  "
- "(Implementations may impose limits on parentheses nesting to\n  "
- "avoid performance issues, but at least three levels of nesting\n  should be supported.)\n\n"
- "A [link title](@)  consists of either\n"
- "\n- a sequence of zero or more characters between straight double-quote\n  characters ("
- "`\"`), including a `\"` character only if it is\n  "
- "backslash-escaped, or\n\n"
- "- a sequence of zero or more characters between straight single-quote\n  characters ("
- "`'`), including a `'` character only if it is\n  "
- "backslash-escaped, or\n\n"
- "- a sequence of zero or more characters between matching parentheses\n  ("
- "`(...)`), including a `(` or "
- "`)` character only if it is\n  backslash-escaped.\n\n"
- "Although [link titles] may span multiple lines, they may not contain\na ["
- "blank line].\n\n"
- "An [inline link](@) consists of a [link text]"
- " followed immediately\nby a left parenthesis `(`, an optional [link destination"
- "], an optional\n[link title], and a right parenthesis "
- "`)`.\n"
- "These four components may be separated by spaces, tabs, and up to one "
- "line\nending.\nIf both [link destination] and [link title]"
- " are present, they *must* be\n"
- "separated by spaces, tabs, and up to one line ending.\n\n"
- "The link's text consists of the inlines contained\nin the [link text"
- "] (excluding the enclosing square brackets).\nThe link'"
- "s URI consists of the link destination, excluding enclosing\n"
- "`<...>`"
- " if present, with backslash-escapes in effect as described\nabove.  The link"
- "'s title consists of the link title, excluding its\n"
- "enclosing delimiters, with backslash-escapes in effect "
- "as described\nabove.\n\nHere is a simple inline link:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/uri \"title\")\n.\n"
- "<p><a href=\"/uri\" title="
- "\"title\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The title, the link text and even \nthe destination may be omitted:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/uri)\n.\n"
- "<p><a href=\"/uri\">link"
- "</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[](./target.md)\n.\n"
- "<p><a href=\"./target.md"
- "\"></a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link]()\n.\n"
- "<p><a href=\"\">link</a"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](<>)\n.\n"
- "<p><a href=\"\">link</a"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[]()\n.\n"
- "<p><a href=\"\"></a>"
- "</p>\n"
- "````````````````"
- "````````````````\n\n"
- "The destination can only contain spaces if it is\nenclosed in pointy brackets:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/my uri)\n.\n"
- "<p>[link](/my uri)</p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](</my uri>)\n.\n"
- "<p><a href=\"/my%20uri\""
- ">link</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "The destination cannot contain line endings,\neven if enclosed in pointy brackets:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo\nbar)\n.\n"
- "<p>[link](foo\nbar)</p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](<foo\nbar>)\n.\n"
- "<p>[link](<foo\n"
- "bar>)</p>\n"
- "````````````````"
- "````````````````\n\n"
- "The destination can contain `)` if it is enclosed\nin pointy brackets:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[a](<b)c>)\n.\n"
- "<p><a href=\"b)c\">a"
- "</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "Pointy brackets that enclose links must be unescaped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](<foo\\>)\n.\n"
- "<p>[link](&lt;foo&gt"
- ";)</p>\n"
- "````````````````"
- "````````````````\n\n"
- "These are not links, because the opening pointy bracket\nis not matched properly:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[a](<b)c\n"
- "[a](<b)c>\n"
- "[a](<b>c)\n.\n"
- "<p>[a](&lt;b)c\n"
- "[a](&lt;b)c&gt;\n"
- "[a](<b>c)</p>\n"
- "````````````````"
- "````````````````\n\n"
- "Parentheses inside the link destination may be escaped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](\\(foo\\))\n.\n"
- "<p><a href=\"(foo)\">"
- "link</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "Any number of parentheses are allowed without escaping, as long as they are\n"
- "balanced:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo(and(bar)))\n.\n"
- "<p><a href=\"foo(and(bar"
- "))\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "However, if you have unbalanced parentheses, you need to escape "
- "or use the\n`<...>` form:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo(and(bar))\n.\n"
- "<p>[link](foo(and(bar))<"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo\\(and\\(bar\\))\n.\n"
- "<p><a href=\"foo(and(bar"
- ")\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](<foo(and(bar)>)\n.\n"
- "<p><a href=\"foo(and(bar"
- ")\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Parentheses and other symbols can also be escaped, as usual\n"
- "in Markdown:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo\\)\\:)\n.\n"
- "<p><a href=\"foo):\">"
- "link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A link can contain fragment identifiers and queries:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](#fragment)\n\n"
- "[link](https://example.com#fragment)\n\n"
- "[link](https://example.com?"
- "foo=3#frag)\n.\n"
- "<p><a href=\"#fragment\">link<"
- "/a></p>\n"
- "<p><a href=\"https://"
- "example.com#fragment\">link</a></p>\n"
- "<p><a href=\"https://"
- example.com?
- "foo=3#frag\">link</a></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that a backslash before a non-escapable character is\n"
- "just a backslash:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo\\bar)\n.\n"
- "<p><a href=\"foo%5Cbar"
- "\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "URL-escaping should be left alone inside the destination, as all\n"
- "URL-escaped characters are also valid URL characters. Entity and\n"
- "numerical character references in the destination will be parsed\n"
- "into the corresponding Unicode code points, as usual.  These may\n"
- "be optionally URL-escaped when written as HTML, but this "
- "spec\ndoes not enforce any particular policy for rendering URLs in\n"
- "HTML or other formats.  Renderers may make different decisions\n"
- "about how to escape or normalize URLs in the output.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](foo%20b&auml;)\n.\n"
- "<p><a href=\"foo%20b%"
- "C3%A4\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that, because titles can often be parsed as destinations,\n"
- "if you try to omit the destination and keep the title, you'll\n"
- "get unexpected results:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](\"title\")\n.\n"
- "<p><a href=\"%22title%22"
- "\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Titles may be in single quotes, double quotes, or parentheses:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/url \"title\")\n"
- "[link](/url 'title')\n"
- "[link](/url (title))\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">link</a>\n"
- "<a href=\"/url\" title=\"title\""
- ">link</a>\n"
- "<a href=\"/url\" title=\"title\""
- ">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash escapes and entity and numeric character references\n"
- "may be used in titles:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/url \"title \\\"&quot;"
- "\")\n.\n"
- "<p><a href=\"/url\" title="
- "\"title &quot;&quot;\">link<"
- "/a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Titles must be separated from the link using spaces, tabs, and up "
- "to one line\nending.\nOther [Unicode whitespace]"
- " like non-breaking space doesn't work.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/url \"title\")\n.\n"
- "<p><a href=\"/url%C2"
- "%A0%22title%22\">link</a>"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Nested balanced quotes are not allowed without escaping:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/url \"title \"and\" title\")\n.\n"
- "<p>[link](/url &quot;title "
- "&quot;and&quot; title&quot"
- ";)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "But it is easy to work around this by using a different quote type:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](/url 'title \"and\" title')\n.\n"
- "<p><a href=\"/url\" title="
- "\"title &quot;and&quot; title\">"
- "link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "(Note:  `Markdown.pl`"
- " did allow double quotes inside a double-quoted\n"
- "title, and its test suite included a test demonstrating this.\n"
- "But it is hard to see a good rationale for the extra complexity this\n"
- "brings, since there are already many ways---backslash escaping,\n"
- "entity and numeric character references, or using a different\n"
- "quote type for the enclosing title---to write titles containing\n"
- "double quotes.  `Markdown.pl`'"
- "s handling of titles has a number\n"
- "of other strange features.  For example, it allows single-quoted\n"
- "titles in inline links, but not reference links.  And, in\n"
- "reference links but not inline links, it allows a title to begin\nwith "
- "`\"` and end with `)`.  "
- "`Markdown.pl` 1.0.1 even allows\n"
- "titles with no closing quotation mark, though 1.0.2b8 "
- "does not.\nIt seems preferable to adopt a simple, rational rule that works\n"
- "the same way in inline links and link reference definitions.)\n\n"
- "Spaces, tabs, and up to one line ending is allowed around the "
- "destination and\ntitle:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link](   /uri\n  \"title\"  )\n.\n"
- "<p><a href=\"/uri\" title="
- "\"title\">link</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "But it is not allowed between the link text and the\nfollowing parenthesis:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link] (/uri)\n.\n"
- "<p>[link] (/uri)</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link text may contain balanced brackets, but not unbalanced ones,\n"
- "unless they are escaped:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link [foo [bar]]](/uri)\n.\n"
- "<p><a href=\"/uri\">link "
- "[foo [bar]]</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link] bar](/uri)\n.\n"
- "<p>[link] bar](/uri)</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link [bar](/uri)\n.\n"
- "<p>[link <a href=\"/uri\""
- ">bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link \\[bar](/uri)\n.\n"
- "<p><a href=\"/uri\">link "
- "[bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link text may contain inline content:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link *foo **bar** `#`*]("
- "/uri)\n.\n"
- "<p><a href=\"/uri\">link "
- "<em>foo <strong>bar</strong> <code>"
- "#</code></em></a></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[!["
- "moon](moon.jpg)](/uri)\n.\n"
- "<p><a href=\"/uri\"><"
- "img src=\"moon.jpg\" alt=\""
- "moon\" /></a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, links may not contain other links, at any level of nesting.\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo [bar](/uri)](/uri"
- ")\n.\n"
- "<p>[foo <a href=\"/uri"
- "\">bar</a>](/uri)</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo *[bar [baz](/uri)]"
- "(/uri)*](/uri)\n.\n"
- "<p>[foo <em>[bar <a href"
- "=\"/uri\">baz</a>](/"
- "uri)</em>](/uri)</p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![[["
- "foo](uri1)](uri2)]("
- "uri3)\n.\n"
- "<p><img src=\"uri3\" alt"
- "=\"[foo](uri2)\" /></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "These cases illustrate the precedence of link text grouping over\nemphasis grouping:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*[foo*](/uri)\n.\n"
- "<p>*<a href=\"/uri\">"
- "foo*</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo *bar](baz*)\n.\n"
- "<p><a href=\"baz*\">"
- "foo *bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that brackets that *aren't* part of links do not take\n"
- "precedence:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo [bar* baz]\n.\n"
- "<p><em>foo [bar</em> baz"
- "]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "These cases illustrate the precedence of HTML tags, code spans,\n"
- "and autolinks over link grouping:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo <bar attr=\"](baz)\">\n"
- ".\n"
- "<p>[foo <bar attr=\"](baz"
- ")\"></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo`](/uri)`\n.\n"
- "<p>[foo<code>](/uri)<"
- "/code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo<https://example.com/?"
- "search=](uri)>\n.\n"
- "<p>[foo<a href=\"https:/"
- /example.com/?
- "search=%5D(uri)\">https://"
- example.com/?
- "search=](uri)</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "There are three kinds of [reference link](@)s:\n"
- "[full](#full-reference-link), "
- "[collapsed](#collapsed-reference-link),\nand "
- "[shortcut](#shortcut-reference-link).\n\n"
- "A [full reference link](@)\nconsists of a [link text]"
- " immediately followed by a [link label]\nthat [matches] a ["
- "link reference definition] elsewhere in the document.\n\n"
- "A [link label](@)  begins with a left bracket ("
- "`[`) and ends\nwith the first right bracket (`]`"
- ") that is not backslash-escaped.\n"
- "Between these brackets there must be at least one character that is not a space,\n"
- "tab, or line ending.\n"
- "Unescaped square bracket characters are not allowed inside the\n"
- "opening and closing square brackets of [link labels].  A link\n"
- "label can have at most 999 characters inside the square\nbrackets.\n\n"
- "One label [matches](@)\n"
- "another just in case their normalized forms are equal.  To normalize a\n"
- "label, strip off the opening and closing brackets,\nperform the "
- "*Unicode case fold*, strip leading and trailing\n"
- "spaces, tabs, and line endings, and collapse consecutive internal\n"
- "spaces, tabs, and line endings to a single space.  "
- "If there are multiple\nmatching reference link definitions, the one that comes first in the\n"
- "document is used.  "
- "(It is desirable in such cases to emit a warning.)\n\n"
- "The link's URI and title are provided by the matching [link\n"
- "reference definition].\n\nHere is a simple example:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][bar]\n\n"
- "[bar]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The rules for the [link text] are the same as with\n["
- "inline links].  Thus:\n\n"
- "The link text may contain balanced brackets, but not unbalanced ones,\n"
- "unless they are escaped:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link [foo [bar]]][ref]\n\n"
- "[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">link "
- "[foo [bar]]</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link \\[bar][ref]\n\n"
- "[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">link "
- "[bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link text may contain inline content:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[link *foo **bar** `#`*]["
- "ref]\n\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">link "
- "<em>foo <strong>bar</strong> <code>"
- "#</code></em></a></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[!["
- "moon](moon.jpg)][ref]\n\n"
- "[ref]: /uri\n.\n"
- "<p><a href=\"/uri\"><"
- "img src=\"moon.jpg\" alt=\""
- "moon\" /></a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "However, links may not contain other links, at any level of nesting.\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo [bar](/uri)][ref]\n\n"
- "[ref]: /uri\n.\n"
- "<p>[foo <a href=\"/uri"
- "\">bar</a>]<a href=\"/"
- "uri\">ref</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo *bar [baz][ref]*]["
- "ref]\n\n[ref]: /uri\n.\n"
- "<p>[foo <em>bar <a href="
- "\"/uri\">baz</a></em>"
- "]<a href=\"/uri\">ref<"
- "/a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "(In the examples above, we have two [shortcut reference links]\n"
- "instead of one [full reference link].)\n\n"
- "The following cases illustrate the precedence of link text grouping over\nemphasis grouping:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*[foo*][ref]\n\n"
- "[ref]: /uri\n.\n"
- "<p>*<a href=\"/uri\">"
- "foo*</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo *bar][ref]*\n\n"
- "[ref]: /uri\n.\n"
- "<p><a href=\"/uri\">"
- "foo *bar</a>*</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "These cases illustrate the precedence of HTML tags, code spans,\n"
- "and autolinks over link grouping:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo <bar attr=\"][ref]\">\n\n"
- "[ref]: /uri\n.\n"
- "<p>[foo <bar attr=\"][ref"
- "]\"></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo`][ref]`\n\n"
- "[ref]: /uri\n.\n"
- "<p>[foo<code>][ref]</"
- "code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo<https://example.com/?"
- "search=][ref]>\n\n[ref]: /uri\n"
- ".\n"
- "<p>[foo<a href=\"https:/"
- /example.com/?
- "search=%5D%5Bref%5D\">https"
- "://example.com/?"
- "search=][ref]</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Matching is case-insensitive:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][BaR]\n\n"
- "[bar]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Unicode case fold is used:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[ẞ]\n\n[SS]: /url\n.\n"
- "<p><a href=\"/url\">ẞ"
- "</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Consecutive internal spaces, tabs, and line endings are treated as "
- "one space for\npurposes of determining matching:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[Foo\n  bar]: /url\n\n"
- "[Baz][Foo bar]\n.\n"
- "<p><a href=\"/url\">"
- "Baz</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "No spaces, tabs, or line endings are allowed between the [link text"
- "] and the\n[link label]:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo] [bar]\n\n"
- "[bar]: /url \"title\"\n.\n"
- "<p>[foo] <a href=\"/"
- "url\" title=\"title\">bar</a></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n[bar]\n\n"
- "[bar]: /url \"title\"\n.\n"
- "<p>[foo]\n"
- "<a href=\"/url\" title=\"title\""
- ">bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "This is a departure from John Gruber's original Markdown syntax\n"
- "description, which explicitly allows whitespace between the link\n"
- "text and the link label.  It brings reference links in line with\n["
- "inline links], which (according to both original Markdown and\n"
- "this spec) cannot have whitespace after the link text.  More\n"
- "importantly, it prevents inadvertent capture of consecutive\n[shortcut reference links"
- "]. If whitespace is allowed between the\n"
- "link text and the link label, then in the following we will have\n"
- "a single reference link, not two shortcut reference links, as\nintended:\n\n"
- "``` markdown\n"
- "[foo]\n[bar]\n\n[foo]: /url1\n"
- "[bar]: /url2\n```\n\n"
- "(Note that [shortcut reference links] were introduced by Gruber\n"
- "himself in a beta version of `Markdown.pl`"
- ", but never included\nin the official syntax description.  Without shortcut reference\n"
- "links, it is harmless to allow space between the link text and\n"
- "link label; but once shortcut references are introduced, it is\n"
- "too dangerous to allow this, as it frequently leads to\n"
- "unintended results.)\n\n"
- "When there are multiple matching [link reference definitions],\nthe first is used:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]: /url1\n\n"
- "[foo]: /url2\n\n[bar][foo]\n"
- ".\n"
- "<p><a href=\"/url1\">"
- "bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that matching is performed on normalized strings, not parsed\n"
- "inline content.  So the following does not match, even though the\n"
- "labels define equivalent inline content:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[bar][foo\\!]\n\n"
- "[foo!]: /url\n.\n"
- "<p>[bar][foo!]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "[Link labels] cannot contain brackets, unless they are\nbackslash-escaped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][ref[]\n\n"
- "[ref[]: /uri\n.\n"
- "<p>[foo][ref[]</p>\n"
- "<p>[ref[]: /uri</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][ref[bar]]\n\n"
- "[ref[bar]]: /uri\n.\n"
- "<p>[foo][ref[bar]]</"
- "p>\n"
- "<p>[ref[bar]]: /uri</"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[[[foo]]]\n\n"
- "[[[foo]]]: /url\n.\n"
- "<p>[[[foo]]]</p>\n"
- "<p>[[[foo]]]: /url<"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][ref\\[]\n\n"
- "[ref\\[]: /uri\n.\n"
- "<p><a href=\"/uri\">"
- "foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that in this example `]` is not backslash-escaped:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[bar\\\\]: /uri\n\n[bar\\\\]\n.\n"
- "<p><a href=\"/uri\">bar"
- "\\</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A [link label]"
- " must contain at least one character that is not a space, tab, or\n"
- "line ending:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[]\n\n[]: /uri\n.\n"
- "<p>[]</p>\n"
- "<p>[]: /uri</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[\n ]\n\n[\n ]: /uri\n.\n<p>[\n"
- "]</p>\n<p>[\n"
- "]: /uri</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A [collapsed reference link](@)\nconsists of a [link label]"
- " that [matches] a\n[link reference definition] elsewhere in the\n"
- "document, followed by the string `[]`.\n"
- "The contents of the link label are parsed as inlines,\n"
- "which are used as the link's text.  The link'"
- "s URI and title are\nprovided by the matching reference link definition.  Thus,\n"
- "`[foo][]` is equivalent to "
- "`[foo][foo]`.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[*foo* bar][]\n\n"
- "[*foo* bar]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\"><em>foo</em> bar</"
- "a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link labels are case-insensitive:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[Foo][]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">Foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "As with full reference links, spaces, tabs, or line endings are not\n"
- "allowed between the two sets of brackets:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo] \n[]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">foo</a>\n[]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A [shortcut reference link](@)\nconsists of a [link label"
- "] that [matches] a\n[link reference definition] elsewhere in the\n"
- "document and is not followed by `[]` or a link label.\n"
- "The contents of the link label are parsed as inlines,\n"
- "which are used as the link's text.  The link'"
- "s URI and title\nare provided by the matching link reference definition.\nThus, "
- "`[foo]` is equivalent to "
- "`[foo][]`.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]\n\n[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[*foo* bar]\n\n"
- "[*foo* bar]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\"><em>foo</em> bar</"
- "a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[[*foo* bar]]\n\n"
- "[*foo* bar]: /url \"title\"\n.\n"
- "<p>[<a href=\"/url\" title"
- "=\"title\"><em>foo</em> bar<"
- "/a>]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[[bar [foo]\n\n[foo]: /url\n.\n"
- "<p>[[bar <a href=\"/url"
- "\">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link labels are case-insensitive:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[Foo]\n\n[foo]: /url \"title\"\n.\n"
- "<p><a href=\"/url\" title="
- "\"title\">Foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A space after the link text should be preserved:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo] bar\n\n[foo]: /url\n.\n"
- "<p><a href=\"/url\">"
- "foo</a> bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If you just want bracketed text, you can backslash-escape the\n"
- "opening bracket to avoid links:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\[foo]\n\n[foo]: /url \"title\"\n"
- ".\n<p>[foo]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that this is a link, because a link label ends with the first\n"
- "following closing bracket:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo*]: /url\n\n*[foo*]\n.\n"
- "<p>*<a href=\"/url\">"
- "foo*</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Full and collapsed references take precedence over shortcut\nreferences:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][bar]\n\n[foo]: /url1\n"
- "[bar]: /url2\n.\n"
- "<p><a href=\"/url2\">"
- "foo</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][]\n\n[foo]: /url1\n.\n"
- "<p><a href=\"/url1\">"
- "foo</a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "Inline links also take precedence:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo]()\n\n[foo]: /url1\n.\n"
- "<p><a href=\"\">foo</"
- "a></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo](not a link)\n\n"
- "[foo]: /url1\n.\n"
- "<p><a href=\"/url1\">"
- "foo</a>(not a link)</p>\n"
- "````````````````"
- "````````````````\n\n"
- "In the following case `[bar][baz]`"
- " is parsed as a reference,\n`[foo]`"
- " as normal text:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][bar][baz]\n\n"
- "[baz]: /url\n.\n"
- "<p>[foo]<a href=\"/"
- "url\">bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here, though, `[foo][bar]`"
- " is parsed as a reference, since\n`[bar]` is defined:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][bar][baz]\n\n"
- "[baz]: /url1\n"
- "[bar]: /url2\n.\n"
- "<p><a href=\"/url2\">"
- "foo</a><a href=\"/"
- "url1\">baz</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Here `[foo]`"
- " is not parsed as a shortcut reference, because it\n"
- "is followed by a link label (even though `[bar]`"
- " is not defined):\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "[foo][bar][baz]\n\n"
- "[baz]: /url1\n"
- "[foo]: /url2\n.\n"
- "<p>[foo]<a href=\"/"
- "url1\">bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n\n"
- "## Images\n\n"
- "Syntax for images is like the syntax for links, with one\n"
- "difference. Instead of [link text], we have an\n"
- "[image description](@).  The rules for this are the\n"
- "same as for [link text], except that (a) an\n"
- "image description starts with `![` rather than `[`, and\n"
- "(b) an image description may contain links.\n"
- "An image description has inline elements\n"
- "as its contents.  When an image is rendered to HTML,\n"
- "this is standardly used as the image's `alt` attribute.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo](/url \"title\")\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"foo\" title=\"title\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo *bar*]\n\n"
- "[foo *bar*]: train.jpg \"train & "
- "tracks\"\n.\n"
- "<p><img src=\"train.jpg\" "
- "alt=\"foo bar\" title=\"train &amp; "
- "tracks\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo !["
- "bar](/url)](/url2)\n.\n"
- "<p><img src=\"/url2\" "
- "alt=\"foo bar\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "!["
- "foo [bar](/url)](/url2"
- ")\n.\n"
- "<p><img src=\"/url2\" "
- "alt=\"foo bar\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Though this spec is concerned with parsing, not rendering, it is\n"
- "recommended that in rendering to HTML, only the plain string content\nof the "
- "[image description] be used.  Note that in\n"
- "the above example, the alt attribute's value is "
- "`foo bar`, not "
- "`foo\n[bar](/url)` or "
- "`foo <a href=\"/url\">bar"
- "</a>`.  Only the plain string\n"
- "content is rendered, without formatting.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo *bar*][]\n\n"
- "[foo *bar*]: train.jpg \"train & "
- "tracks\"\n.\n"
- "<p><img src=\"train.jpg\" "
- "alt=\"foo bar\" title=\"train &amp; "
- "tracks\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo *bar*][foobar]\n\n"
- "[FOOBAR]: train.jpg \"train & "
- "tracks\"\n.\n"
- "<p><img src=\"train.jpg\" "
- "alt=\"foo bar\" title=\"train &amp; "
- "tracks\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo](train.jpg)\n.\n"
- "<p><img src=\"train.jpg\" "
- "alt=\"foo\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "My !["
- "foo bar](/path/to/train.jpg  \""
- "title\"   )\n.\n"
- "<p>My <img src=\"/path/to/"
- "train.jpg\" alt=\"foo bar\" title="
- "\"title\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo](<url>)\n.\n"
- "<p><img src=\"url\" alt="
- "\"foo\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![](/url)\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Reference-style:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo][bar]\n\n[bar]: /url\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"foo\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo][bar]\n\n[BAR]: /url\n"
- ".\n"
- "<p><img src=\"/url\" alt"
- "=\"foo\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Collapsed:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo][]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"foo\" title=\"title\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![*foo* bar][]\n\n"
- "[*foo* bar]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"foo bar\" title=\"title\" /></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "The labels are case-insensitive:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![Foo][]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"Foo\" title=\"title\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "As with reference links, spaces, tabs, and line endings, are not "
- "allowed\nbetween the two sets of brackets:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo] \n[]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"foo\" title=\"title\" />\n"
- "[]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Shortcut:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![foo]\n\n[foo]: /url \"title\"\n"
- ".\n"
- "<p><img src=\"/url\" alt"
- "=\"foo\" title=\"title\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![*foo* bar]\n\n"
- "[*foo* bar]: /url \"title\"\n.\n"
- "<p><img src=\"/url\" alt"
- "=\"foo bar\" title=\"title\" /></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that link labels cannot contain unescaped brackets:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![[foo]]\n\n"
- "[[foo]]: /url \"title\"\n.\n"
- "<p>![[foo]]</p>\n"
- "<p>[[foo]]: /url &"
- "quot;title&quot;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "The link labels are case-insensitive:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "![Foo]\n\n[foo]: /url \"title\"\n"
- ".\n"
- "<p><img src=\"/url\" alt"
- "=\"Foo\" title=\"title\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If you just want a literal `!`"
- " followed by bracketed text, you can\nbackslash-escape the opening "
- "`[`:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "!\\[foo]\n\n"
- "[foo]: /url \"title\"\n.\n"
- "<p>![foo]</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "If you want a link after a literal `!`"
- ", backslash-escape the\n`!`:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "\\![foo]\n\n"
- "[foo]: /url \"title\"\n.\n<p>!"
- "<a href=\"/url\" title=\"title\""
- ">foo</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Autolinks\n\n"
- "[Autolink](@)"
- "s are absolute URIs and email addresses inside\n`<` and "
- "`>`"
- ". They are parsed as links, with the URL or email address\n"
- "as the link label.\n\n"
- "A [URI autolink](@) consists of `<`"
- ", followed by an\n[absolute URI] followed by `>`"
- ".  It is parsed as\n"
- "a link to the URI, with the URI as the link'"
- "s label.\n\n"
- "An [absolute URI](@),\n"
- "for these purposes, consists of a [scheme] followed by a colon ("
- "`:`)\nfollowed by zero or more characters other than ["
- "ASCII control\ncharacters][ASCII control character], [space"
- "], `<`, and `>`.\n"
- "If the URI includes these characters, they must be percent-encoded\n"
- "(e.g. `%20` for a space).\n\n"
- "For purposes of this spec, a [scheme](@)"
- " is any sequence\nof 2--"
- "32 characters beginning with an ASCII letter and followed\n"
- "by any combination of ASCII letters, digits, or the symbols plus\n("
- "\"+\"), period (\".\""
- "), or hyphen (\"-\").\n\n"
- "Here are some valid autolinks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<http://foo.bar.baz>\n.\n"
- "<p><a href=\"http://"
- "foo.bar.baz\">http://"
- "foo.bar.baz</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<https://foo.bar.baz/test?"
- "q=hello&id=22&boolean>\n.\n"
- "<p><a href=\"https://"
- foo.bar.baz/test?
- q=hello&amp;id=22&amp;
- "boolean\">https://foo.bar.baz"
- /test?
- q=hello&amp;id=22&amp;
- "boolean</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<irc://foo.bar:2233/baz"
- ">\n.\n"
- "<p><a href=\"irc://"
- "foo.bar:2233/baz\">irc:/"
- "/foo.bar:2233/baz</a><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Uppercase is also fine:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<MAILTO:FOO@BAR.BAZ>\n.\n"
- "<p><a href=\""
- "MAILTO:FOO@BAR.BAZ\">"
- "MAILTO:FOO@BAR.BAZ</a"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Note that many strings that count as [absolute URIs] for\n"
- "purposes of this spec are not valid URIs, because their\n"
- "schemes are not registered or because of other problems\nwith their syntax:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a+b+c:d>\n.\n"
- "<p><a href=\"a+b+"
- "c:d\">a+b+c:d</a>"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<made-up-scheme://foo,bar>\n.\n"
- "<p><a href=\"made-up-scheme:"
- "//foo,bar\">made-up-scheme://"
- "foo,bar</a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<https://../>\n.\n"
- "<p><a href=\"https://.."
- "/\">https://../</a></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<localhost:5001/foo>\n.\n"
- "<p><a href=\"localhost:5001"
- "/foo\">localhost:5001/foo</"
- "a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Spaces are not allowed in autolinks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<https://foo.bar/baz bim>\n.\n"
- "<p>&lt;https://foo.bar/"
- "baz bim&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash-escapes do not work inside autolinks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<https://example.com/\\[\\>\n.\n"
- "<p><a href=\"https://"
- "example.com/%5C%5B%5C\">https"
- "://example.com/\\[\\</a></"
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "An [email autolink](@)\nconsists of `<`"
- ", followed by an [email address],\nfollowed by `>`"
- ".  The link's label is the email address,\nand the URL is "
- "`mailto:` followed by the email address.\n\n"
- "An [email address](@),\n"
- "for these purposes, is anything that matches\nthe "
- "[non-normative regex from the HTML5\nspec"
- "](https://html.spec.whatwg.org"
- "/multipage/forms.html#e-mail-state-(type"
- "=email)):\n\n    "
- "/^[a-zA-Z0-9.!"
- "#$%&'*+/=?"
- "^_`{|}~-]+@[a-zA"
- "-Z0-9](?:[a-zA-"
- "Z0-9-]{0,61}[a-zA"
- "-Z0-9])?\n    "
- "(?:\\.[a-zA-Z0-9]"
- "(?:[a-zA-Z0-9-]{"
- "0,61}[a-zA-Z0-9])"
- "?)*$/\n\nExamples of email autolinks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<foo@bar.example.com>\n.\n"
- "<p><a href=\"mailto:foo@"
- "bar.example.com\">foo@bar.example.com<"
- "/a></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<foo+special@Bar.baz-bar0.com>\n"
- ".\n"
- "<p><a href=\"mailto:foo+"
- "special@Bar.baz-bar0.com\">foo+"
- special@Bar.baz-bar0.com</a><
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash-escapes do not work inside email autolinks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<foo\\+@bar.example.com>\n.\n"
- "<p>&lt;foo+@bar.example.com"
- "&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "These are not autolinks:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<>\n.\n"
- "<p>&lt;&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "< https://foo.bar >\n.\n"
- "<p>&lt; https://foo.bar &"
- "gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<m:abc>\n.\n"
- "<p>&lt;m:abc&gt;"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<foo.bar.baz>\n.\n"
- "<p>&lt;foo.bar.baz&"
- "gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "https://example.com\n.\n"
- "<p>https://example.com</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo@bar.example.com\n.\n"
- "<p>foo@bar.example.com</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Raw HTML\n\n"
- "Text between `<` and `>`"
- " that looks like an HTML tag is parsed as a\n"
- "raw HTML tag and will be rendered in HTML without escaping.\n"
- "Tag and attribute names are not limited to current HTML tags,\n"
- "so custom tags (and even, say, DocBook tags) may be "
- "used.\n\nHere is the grammar for tags:\n"
- "\nA [tag name](@) consists of an ASCII letter\n"
- "followed by zero or more ASCII letters, digits, or\n"
- "hyphens (`-`).\n\n"
- "An [attribute](@)"
- " consists of spaces, tabs, and up to one line ending,\nan ["
- "attribute name], and an optional\n[attribute value specification].\n\n"
- "An [attribute name](@)\nconsists of an ASCII letter, "
- "`_`, or `:`"
- ", followed by zero or more ASCII\nletters, digits, `_`"
- ", `.`, `:`, or `-`"
- ".  (Note:  This is the XML\n"
- "specification restricted to ASCII.  "
- "HTML5 is laxer.)\n\n"
- "An [attribute value specification](@)\n"
- "consists of optional spaces, tabs, and up to one line ending,\na "
- "`=`"
- " character, optional spaces, tabs, and up to one line ending,\n"
- "and an [attribute value].\n\n"
- "An [attribute value](@)\nconsists of an ["
- "unquoted attribute value],\na [single-quoted attribute value]"
- ", or a [double-quoted attribute value].\n\n"
- "An [unquoted attribute value](@)\n"
- "is a nonempty string of characters not\n"
- "including spaces, tabs, line endings, `\"`, `'`"
- ", `=`, `<`, `>`, or "
- "`` ` ``.\n\n"
- "A [single-quoted attribute value](@)\nconsists of `'`"
- ", zero or more\ncharacters not including `'`, and a final "
- "`'`.\n\n"
- "A [double-quoted attribute value](@)\nconsists of `\"`"
- ", zero or more\ncharacters not including `\"`, and a final "
- "`\"`.\n\n"
- "An [open tag](@) consists of a `<`"
- " character, a [tag name],\nzero or more [attributes]"
- ", optional spaces, tabs, and up to one line ending,\nan optional "
- "`/` character, and a `>` character.\n\n"
- "A [closing tag](@) consists of the string `</`"
- ", a\n[tag name]"
- ", optional spaces, tabs, and up to one line ending, and the "
- "character\n`>`.\n\n"
- "An [HTML comment](@) consists of "
- "`<!-->`, `<!--->`"
- ", or  `<!--`, a string of\n"
- "characters not including the string `-->`, and "
- "`-->` (see the\n"
- "[HTML spec](https://"
- html.spec.whatwg.org/multipage/
- "parsing.html#markup-declaration-open-state)).\n\n"
- "A [processing instruction](@)\nconsists of the string `<?`"
- ", a string\nof characters not including the string `?>`"
- ", and the string\n`?>`.\n\n"
- "A [declaration](@) consists of the string `<!`"
- ", an ASCII letter, zero or more\ncharacters not including the character "
- "`>`, and the character `>`.\n\n"
- "A [CDATA section](@) consists of\nthe string "
- "`<![CDATA[`"
- ", a string of characters not including the string\n`]]>`"
- ", and the string `]]>`.\n\n"
- "An [HTML tag](@) consists of an [open tag"
- "], a [closing tag],\nan [HTML comment]"
- ", a [processing instruction], a [declaration],\nor a ["
- "CDATA section].\n\nHere are some simple open tags:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a><bab><c2c>\n.\n"
- "<p><a><bab><c2c><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Empty elements:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a/><b2/>\n.\n"
- "<p><a/><b2/></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Whitespace is allowed:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a  /><b2\ndata=\"foo\" >\n.\n"
- "<p><a  /><b2\n"
- "data=\"foo\" ></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "With attributes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a foo=\"bar\" bam = 'baz <em"
- ">\"</em>'\n"
- "_boolean zoop:33=zoop:33 />\n.\n"
- "<p><a foo=\"bar\" bam = '"
- "baz <em>\"</em>'\n"
- "_boolean zoop:33=zoop:33 /><"
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Custom tag names can be used:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo <responsive-image src=\""
- "foo.jpg\" />\n.\n"
- "<p>Foo <responsive-image src=\""
- "foo.jpg\" /></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Illegal tag names, not parsed as HTML:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<33> <__>\n.\n"
- "<p>&lt;33&gt; &lt;"
- "__&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Illegal attribute names:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a h*#ref=\"hi\">\n.\n"
- "<p>&lt;a h*#ref=&"
- quot;hi&quot;&gt;</
- "p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Illegal attribute values:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"hi'> <a href="
- "hi'>\n.\n"
- "<p>&lt;a href=&quot"
- ";hi'&gt; &lt;a href="
- "hi'&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Illegal whitespace:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "< a><\nfoo><bar/ >\n"
- "<foo bar=baz\nbim!bop />\n.\n"
- "<p>&lt; a&gt;&lt;\n"
- "foo&gt;&lt;bar/ &gt;\n"
- "&lt;foo bar=baz\nbim!"
- "bop /&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Missing whitespace:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href='bar'title=title>\n.\n"
- "<p>&lt;a href='bar'title"
- "=title&gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Closing tags:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "</a></foo >\n.\n"
- "<p></a></foo ></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Illegal attributes in closing tag:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "</a href=\"foo\">\n.\n"
- "<p>&lt;/a href=&"
- quot;foo&quot;&gt;<
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Comments:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <!-- this is a --\n"
- "comment - with hyphens -->\n.\n"
- "<p>foo <!-- this is a --\n"
- "comment - with hyphens --></p>\n"
- "````````````````"
- "````````````````\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <!--> foo -->\n\n"
- "foo <!---> foo -->\n.\n"
- "<p>foo <!--> foo --&"
- "gt;</p>\n"
- "<p>foo <!---> foo --&"
- "gt;</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Processing instructions:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <?php echo $a; ?>\n.\n"
- "<p>foo <?php echo $a; ?"
- "></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Declarations:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <!ELEMENT br EMPTY>\n.\n"
- "<p>foo <!"
- "ELEMENT br EMPTY></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "CDATA sections:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <![CDATA[>&<]]>\n.\n"
- "<p>foo <!["
- "CDATA[>&<]]></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Entity and numeric character references are preserved in HTML\n"
- "attributes:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <a href=\"&ouml;\">\n"
- ".\n"
- "<p>foo <a href=\"&ouml"
- ";\"></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Backslash escapes do not work in HTML attributes:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo <a href=\"\\*\">\n.\n"
- "<p>foo <a href=\"\\*\">"
- "</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"\\\"\">\n.\n"
- "<p>&lt;a href=&quot"
- ;&quot;&quot;&gt;<
- "/p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Hard line breaks\n\n"
- "A line ending (not in a code span or HTML tag) that "
- "is preceded\n"
- "by two or more spaces and does not occur at the end of a block\n"
- "is parsed as a [hard line break](@) (rendered\n"
- "in HTML as a `<br />` tag):\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo  \nbaz\n.\n<p>foo<br />\n"
- "baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "For a more visible alternative, a backslash before the\n[line ending]"
- " may be used instead of two or more spaces:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\\\nbaz\n.\n<p>foo<br />\n"
- "baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "More than two spaces can be used:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo       \nbaz\n.\n<p>foo<br />\n"
- "baz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Leading spaces at the beginning of the next line are ignored:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo  \n     bar\n.\n<p>foo<br />\n"
- "bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\\\n     bar\n.\n<p>foo<br />\n"
- "bar</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Hard line breaks can occur inside emphasis, links, and other constructs\n"
- "that allow inline content:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo  \nbar*\n.\n"
- "<p><em>foo<br />\n"
- "bar</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "*foo\\\nbar*\n.\n"
- "<p><em>foo<br />\n"
- "bar</em></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Hard line breaks do not occur inside code spans\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`code  \nspan`\n.\n"
- "<p><code>code   span</code></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "`code\\\nspan`\n.\n"
- "<p><code>code\\ span</code></p"
- ">\n"
- "````````````````"
- "````````````````\n\n\n"
- "or HTML tags:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"foo  \nbar\">\n.\n"
- "<p><a href=\"foo  \n"
- "bar\"></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "<a href=\"foo\\\nbar\">\n.\n"
- "<p><a href=\"foo\\\n"
- "bar\"></p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Hard line breaks are for separating inline content within a block.\n"
- "Neither syntax for hard line breaks works at the end of a paragraph or\n"
- "other block element:\n\n"
- "````````````````"
- "```````````````` "
- "example\nfoo\\\n.\n<p>foo\\</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\nfoo  \n.\n<p>foo</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "### foo\\\n.\n"
- "<h3>foo\\</h3>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "### foo  \n.\n"
- "<h3>foo</h3>\n"
- "````````````````"
- "````````````````\n\n\n"
- "## Soft line breaks\n\n"
- "A regular line ending (not in a code span or HTML tag) "
- "that is not\n"
- "preceded by two or more spaces or a backslash is parsed as a\n"
- "[softbreak](@)"
- ".  (A soft line break may be rendered in HTML either as a\n"
- "[line ending] or as a space. The result will be the same in\n"
- "browsers. In the examples here, a [line ending]"
- " will be used.)\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo\nbaz\n.\n<p>foo\nbaz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Spaces at the end of the line and beginning of the next line are\n"
- "removed:\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "foo \n baz\n.\n<p>foo\nbaz</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "A conforming parser may render a soft line break in HTML either "
- "as a\nline ending or as a space.\n\n"
- "A renderer may also provide an option to render soft line breaks\n"
- "as hard line breaks.\n\n"
- "## Textual content\n\n"
- "Any characters not given an interpretation by the above rules will\n"
- "be parsed as plain textual content.\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "hello $.;'there\n.\n"
- "<p>hello $.;'there</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "````````````````"
- "```````````````` "
- "example\n"
- "Foo χρῆν\n.\n"
- "<p>Foo χρῆν</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "Internal spaces are preserved verbatim:\n"
- "\n"
- "````````````````"
- "```````````````` "
- "example\nMultiple     spaces\n.\n<p>Multiple     spaces</p>\n"
- "````````````````"
- "````````````````\n\n\n"
- "<!-- END TESTS -->\n\n"
- "# Appendix: A parsing strategy\n\n"
- "In this appendix we describe some features of the parsing strategy\n"
- "used in the CommonMark reference implementations.\n\n"
- "## Overview\n\nParsing has two phases:\n"
- "\n1. In the first phase, lines of input are consumed and the block\n"
- "structure of the document---its division into paragraphs, block quotes,\n"
- "list items, and so on---"
- "is constructed.  Text is assigned to these\n"
- "blocks but not parsed. Link reference definitions are parsed and a\n"
- "map of links is constructed.\n\n"
- "2. "
- "In the second phase, the raw text contents of paragraphs and headings\n"
- "are parsed into sequences of Markdown inline elements (strings,\n"
- "code spans, links, emphasis, and so on), using the map of "
- "link\nreferences constructed in phase 1.\n\n"
- "At each point in processing, the document is represented as a tree of\n"
- "**blocks**.  The root of the tree is a `document`"
- " block.  The `document`\nmay have any number of other blocks as "
- "**children**.  These children\n"
- "may, in turn, have other blocks as children.  "
- "The last child of a block\nis normally considered **open**"
- ", meaning that subsequent lines of input\n"
- "can alter its contents.  (Blocks that are not open are "
- "**closed**.)\n"
- "Here, for example, is a possible document tree, with the open blocks\n"
- "marked by arrows:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n       paragraph\n"
- "         \"Lorem ipsum dolor\\nsit amet.\"\n"
- "    -> list (type=bullet tight=true bullet_char=-"
- ")\n         list_item\n           paragraph\n"
- "             \"Qui *quodsi iracundia*\"\n"
- "      -> list_item\n        -> paragraph\n             \"aliquando id\"\n"
- "```\n\n"
- "## Phase 1: block structure\n\n"
- "Each line that is processed has an effect on this tree.  The line is\n"
- "analyzed and, depending on its contents, the document may be altered\n"
- "in one or more of the following ways:\n\n"
- "1. One or more open blocks may be closed.\n"
- "2. One or more new blocks may be created as children of the\n   "
- "last open block.\n"
- "3. Text may be added to the last (deepest) open block remaining\n   "
- "on the tree.\n\n"
- "Once a line has been incorporated into the tree in this way,\n"
- "it can be discarded, so input can be read in a stream.\n\n"
- "For each line, we follow this procedure:\n"
- "\n1. First we iterate through the open blocks, starting with the\n"
- "root document, and descending through last children down to the last\n"
- "open block.  Each block imposes a condition that the line must satisfy\n"
- "if the block is to remain open.  For example, a block quote requires a\n"
- "`>` character.  A paragraph requires a non-blank line.\n"
- "In this phase we may match all or just some of the open\n"
- "blocks.  "
- "But we cannot close unmatched blocks yet, because we may have a\n["
- "lazy continuation line].\n\n"
- "2.  Next, after consuming the continuation markers for existing\n"
- "blocks, we look for new block starts (e.g. `>`"
- " for a block quote).\n"
- "If we encounter a new block start, we close any blocks unmatched\n"
- "in step 1 before creating the new block as a child of the last\n"
- "matched container block.\n\n"
- "3.  Finally, we look at the remainder of the line (after block\n"
- "markers like `>`"
- ", list markers, and indentation have been consumed).\n"
- "This is text that can be incorporated into the last open\n"
- "block (a paragraph, code block, heading, or raw HTML)"
- ".\n\n"
- "Setext headings are formed when we see a line of a paragraph\n"
- "that is a [setext heading underline].\n\n"
- "Reference link definitions are detected when a paragraph is closed;\n"
- "the accumulated text lines are parsed to see if they begin with\n"
- "one or more reference link definitions.  Any remainder becomes a\nnormal paragraph.\n\n"
- "We can see how this works by considering how the tree above is\n"
- "generated by four lines of Markdown:\n\n"
- "``` markdown\n"
- "> Lorem ipsum dolor\nsit amet.\n"
- "> - Qui *quodsi iracundia*\n"
- "> - aliquando id\n```\n\n"
- "At the outset, our document model is just\n"
- "\n``` tree\n-> document\n```"
- "\n\nThe first line of our text,\n"
- "\n``` markdown\n> Lorem ipsum dolor\n```"
- "\n\ncauses a `block_quote` block to be created as a child of our\n"
- "open `document` block, and a `paragraph` block as a child of\n"
- "the `block_quote`.  Then the text is added to the last open\n"
- "block, the `paragraph`:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n    -> paragraph\n"
- "         \"Lorem ipsum dolor\"\n```\n\nThe next line,\n"
- "\n``` markdown\nsit amet.\n```"
- "\n\nis a \"lazy continuation\" of the open `paragraph`"
- ", so it gets added\nto the paragraph's text:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n    -> paragraph\n"
- "         \"Lorem ipsum dolor\\nsit amet.\"\n"
- "```\n\nThe third line,\n"
- "\n``` markdown\n"
- "> - Qui *quodsi iracundia*\n"
- "```\n\n"
- "causes the `paragraph` block to be closed, and a new `list`"
- " block\nopened as a child of the `block_quote`.  A "
- "`list_item` is also\nadded as a child of the `list`"
- ", and a `paragraph` as a child of\nthe `list_item`"
- ".  The text is then added to the new `paragraph`:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n       paragraph\n"
- "         \"Lorem ipsum dolor\\nsit amet.\"\n"
- "    -> list (type=bullet tight=true bullet_char=-"
- ")\n      -> list_item\n        -> paragraph\n"
- "             \"Qui *quodsi iracundia*\"\n"
- "```\n\nThe fourth line,\n"
- "\n``` markdown\n> - aliquando id\n```"
- "\n\ncauses the `list_item` (and its child the `paragraph`"
- ") to be closed,\nand a new `list_item`"
- " opened up as child of the `list`.  A `paragraph`\n"
- "is added as a child of the new `list_item`"
- ", to contain the text.\nWe thus obtain the final tree:\n\n"
- "``` tree\n"
- "-> document\n  -> block_quote\n       paragraph\n"
- "         \"Lorem ipsum dolor\\nsit amet.\"\n"
- "    -> list (type=bullet tight=true bullet_char=-"
- ")\n         list_item\n           paragraph\n"
- "             \"Qui *quodsi iracundia*\"\n"
- "      -> list_item\n        -> paragraph\n             \"aliquando id\"\n"
- "```\n\n"
- "## Phase 2: inline structure\n\n"
- "Once all of the input has been parsed, all open blocks are closed.\n"
- "\nWe then \"walk the tree,\" visiting every node, and parse raw\n"
- "string contents of paragraphs and headings as inlines.  At this\n"
- "point we have seen all the link reference definitions, so we can\n"
- "resolve reference links as we go.\n\n"
- "``` tree\n"
- "document\n  block_quote\n    paragraph\n      str \"Lorem ipsum dolor\"\n"
- "      softbreak\n      str \"sit amet.\"\n"
- "    list (type=bullet tight=true bullet_char=-)\n"
- "      list_item\n        paragraph\n          str \"Qui \"\n          emph\n"
- "            str \"quodsi iracundia\"\n      list_item\n        paragraph\n"
- "          str \"aliquando id\"\n```\n\n"
- "Notice how the [line ending] in the first paragraph has\n"
- "been parsed as a `softbreak`"
- ", and the asterisks in the first list item\nhave become an "
- "`emph`.\n\n"
- "### An algorithm for parsing nested emphasis and links\n\n"
- "By far the trickiest part of inline parsing is handling emphasis,\n"
- "strong emphasis, links, and images.  This is done using the following\nalgorithm.\n\n"
- "When we're parsing inlines and we hit either\n"
- "\n- a run of `*` or `_` characters, or\n"
- "- a `[` or `![`\n\n"
- "we insert a text node with these symbols as its literal content, and we\n"
- "add a pointer to this text node to the "
- "[delimiter stack](@).\n\n"
- "The [delimiter stack] is a doubly linked list.  Each\n"
- "element contains a pointer to a text node, plus information about\n\n"
- "- the type of delimiter (`[`, `![`"
- ", `*`, `_`)\n"
- "- the number of delimiters,\n"
- "- whether the delimiter is \"active\""
- " (all are active to start), and\n"
- "- whether the delimiter is a potential opener, a potential closer,\n  "
- "or both (which depends on what sort of characters precede\n  "
- "and follow the delimiters).\n\n"
- "When we hit a `]` character, we call the "
- "*look for link or image*\nprocedure (see below).\n\n"
- "When we hit the end of the input, we call the *process emphasis*\n"
- "procedure (see below), with `stack_bottom`"
- " = NULL.\n\n"
- "#### *look for link or image*\n\n"
- "Starting at the top of the delimiter stack, we look backwards\n"
- "through the stack for an opening `[` or `![`"
- " delimiter.\n\n"
- "- If we don't find one, we return a literal text node `"
- "]`.\n\n"
- "- If we do find one, but it's not *active*"
- ", we remove the inactive\n  "
- "delimiter from the stack, and return a literal text node `]`"
- ".\n\n"
- "- If we find one and it'"
- "s active, then we parse ahead to see if\n  "
- "we have an inline link/image, reference link/image, collapsed reference\n  "
- "link/image, or shortcut reference link/image.\n\n  "
- "+ If we don'"
- "t, then we remove the opening delimiter from the\n    "
- "delimiter stack and return a literal text node `]`.\n\n  "
- "+ If we do, then"
- "\n\n    * We return a link or image node whose children are the inlines\n      "
- "after the text node pointed to by the opening delimiter.\n\n    "
- "* We run *process emphasis* on these inlines, with the "
- "`[` opener\n      as `stack_bottom`.\n\n    "
- "* We remove the opening delimiter.\n\n"
- "    * "
- "If we have a link (and not an image), we also set all\n      "
- "`[` delimiters before the opening delimiter to "
- "*inactive*.  (This\n      will prevent us from getting links within links.)\n\n"
- "#### *process emphasis*\n\n"
- "Parameter `stack_bottom` sets a lower bound to how far we\n"
- "descend in the [delimiter stack]"
- ".  If it is NULL, we can\n"
- "go all the way to the bottom.  Otherwise, we stop before\nvisiting "
- "`stack_bottom`.\n\n"
- "Let `current_position` point to the element on the ["
- "delimiter stack]\njust above `stack_bottom`"
- " (or the first element if `stack_bottom`\n"
- "is NULL).\n\n"
- "We keep track of the `openers_bottom` for each delimiter\n"
- "type (`*`, `_`"
- "), indexed to the length of the closing delimiter run\n"
- "(modulo 3) and to whether the closing delimiter can also "
- "be an\nopener.  Initialize this to `stack_bottom`.\n\n"
- "Then we repeat the following until we run out of potential\nclosers:\n"
- "\n- Move `current_position`"
- " forward in the delimiter stack (if needed)\n  "
- "until we find the first potential closer with delimiter `*` or "
- "`_`.\n  (This will be the potential closer closest\n  "
- to the beginning of the input --
- " the first one in parse order.)\n\n"
- "- Now, look back in the stack (staying above `stack_bottom`"
- " and\n  the `openers_bottom`"
- " for this delimiter type) for the\n  first matching potential opener (\"matching"
- "\" means same delimiter).\n\n"
- "- If one is found:"
- "\n\n  + Figure out whether we have emphasis or strong emphasis:\n    "
- "if both closer and opener spans have length >= 2, we have\n    "
- "strong, otherwise regular.\n\n  "
- "+ Insert an emph or strong emph node accordingly, after\n    "
- "the text node corresponding to the opener.\n\n  "
- "+ Remove any delimiters between the opener and closer from\n    "
- "the delimiter stack.\n\n  "
- "+ "
- "Remove 1 (for regular emph) or 2 (for strong "
- "emph) delimiters\n    "
- "from the opening and closing text nodes.  If they become empty\n    "
- "as a result, remove them and remove the corresponding element\n    "
- "of the delimiter stack.  If the closing node is removed, reset\n    "
- "`current_position` to the next element in the stack.\n\n"
- "- If none is found:"
- "\n\n  + Set `openers_bottom` to the element before "
- "`current_position`.\n    "
- "(We know that there are no openers for this kind of closer up to "
- "and\n    including this point, so this puts a lower bound on future searches.)\n\n  "
- "+ If the closer at `current_position` is not a potential opener,\n    "
- "remove it from the delimiter stack (since we know it can't\n    "
- "be a closer either).\n\n  "
- "+ Advance `current_position` to the next element in the stack.\n\n"
- "After we're done, we remove all delimiters above "
- "`stack_bottom` from the\ndelimiter stack.\n"
