---
source: tests/text_splitter_snapshots.rs
expression: chunks
input_file: tests/inputs/markdown/blog_frontmatter.md
---
- "---\nlayout: page\ntitle: Philosophy\npermalink: /philosophy/\n---"
- "\n\n"
- "Jekyll offers a unique philosophy when approaching the problem of static\nsite generation. "
- "This core philosophy drives development and product\n"
- "decisions. When a contributor, maintainer, or user asks herself what Jekyll\n"
- "is about, the following principles should come to mind:\n\n"
- "### 1. No Magic\n\n"
- "Jekyll is not magic. A user should be able to understand the underlying\n"
- "processes that make up the Jekyll build without much reading. It should\n"
- "do only what you ask it to and nothing more. When a user takes a certain\n"
- "action, the outcome should be easily understandable and focused.\n\n"
- "### 2. It \"Just Works\"\n\n"
- "The out-of-the-box experience should be that it \"just works.\" Run\n"
- "`gem install jekyll`"
- " and it should build any Jekyll site that it's given.\n"
- "Features like auto-regeneration and settings like the markdown renderer\n"
- "should represent sane defaults that work perfectly for the vast majority of\n"
- "cases. The burden of initial configuration should not be placed on the user.\n\n"
- "### 3. Content is King\n\n"
- "Why is Jekyll so loved by content creators? It focuses on content first and\n"
- "foremost, making the process of publishing content on the Web easy. Users\n"
- "should find the management of their content enjoyable and simple.\n\n"
- "### 4. Stability\n\n"
- "If a user's site builds today, it should build tomorrow.\n"
- "Backwards-compatibility should be strongly preferred over breaking changes.\n"
- "Breaking changes should be made to support a strong practical goal, and\n"
- "breaking changes should never be made to drive forward \"purity\" of the\n"
- "codebase, or other changes purely to make the maintainers' lives easier.\n"
- "Breaking changes provide a significant amount of friction between upgrades\n"
- "and reduce the confidence of users in this software, and should thus be\n"
- "avoided unless absolutely necessary.\n"
- "Upon breaking changes, provide a clear path for users to upgrade.\n\n"
- "### 5. Small & Extensible\n\n"
- "The core of Jekyll should be simple and small, and extensibility should be\n"
- "a first-class feature to provide added functionality from community\n"
- "contributors. The core should be kept to features used by at least 90% of\n"
- "usersâ€“everything else should be provided as a plugin. New features should\n"
- "be shipped as plugins and focus should be put on creating extensible core\nAPI'"
- "s to support rich plugins.\n"
