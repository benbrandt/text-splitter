---
source: tests/text_splitter_snapshots.rs
expression: chunks
---
- "---\n"
- "title: "
- ": CommonMark "
- " Spec\n"
- "author: John "
- " John MacFarlane"
- "\n"
- "version: '0.31.2"
- " '0.31.2'\n"
- "date: '2024-01-"
- "2024-01-28'\n"
- "license: '[CC-BY"
- " '[CC-BY-SA 4.0]"
- "-SA 4.0](https:/"
- "(https://"
- creativecommons.
- commons.org/
- /licenses/by-sa/
- "/by-sa/4.0/)'\n"
- "...\n\n"
- "# Introduction\n\n"
- "## "
- What is Markdown
- "Markdown?\n\n"
- "Markdown is a "
- " is a plain text"
- " text format for"
- " for writing "
- " structured "
- " documents,\n"
- "based on "
- " on conventions "
- " for indicating "
- " formatting in "
- " in email\n"
- and usenet posts
- " posts.  "
- It was developed
- " by John Gruber "
- " Gruber (with\n"
- "help from Aaron "
- " Aaron Swartz) "
- "Swartz) and "
- ") and released "
- " in 2004 in the "
- " in the form of "
- "form of a\n"
- "[syntax "
- " description]("
- "](https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/syntax
- "/syntax)\n"
- "and a Perl "
- " a Perl script ("
- "`Markdown.pl`"
- ) for converting
- " Markdown to\n"
- "HTML.  "
- "In the next "
- " next decade, "
- "decade, dozens "
- " dozens of "
- " implementations"
- " were\n"
- "developed in "
- " in many "
- " many languages."
- ".  "
- "Some extended "
- " the original\n"
- "Markdown syntax "
- " syntax with "
- with conventions
- " for footnotes, "
- ", tables, and\n"
- "other document "
- " elements.  "
- "Some allowed "
- allowed Markdown
- "Markdown "
- " documents to be"
- "\n"
- "rendered in "
- " in formats "
- "formats other "
- " other than HTML"
- " HTML.  "
- "Websites like "
- " like Reddit,\n"
- "StackOverflow, "
- ", and GitHub had"
- " had millions of"
- " of people using"
- " using Markdown."
- "\n"
- "And Markdown "
- " started to be "
- " to be used "
- "be used beyond "
- " beyond the web,"
- "the web, to "
- "web, to author "
- " author books,\n"
- "articles, slide "
- ", slide shows, "
- " shows, letters,"
- "letters, and "
- ", and lecture "
- "lecture notes.\n\n"
- "What "
- " distinguishes "
- " Markdown from "
- " from many other"
- " other "
- " lightweight "
- " markup\n"
- "syntaxes, which "
- ", which are "
- " are often "
- " often easier to"
- " to write, is "
- ", is its "
- " its readability"
- ".\n"
- As Gruber writes
- " writes:\n\n"
- "> "
- "The overriding "
- " design goal for"
- "goal for "
- " for Markdown'"
- "s formatting "
- " syntax is\n> "
- "to make it as "
- " it as readable "
- " as possible. "
- The idea is that
- " is that a\n> "
- Markdown-
- "-formatted "
- " document should"
- " should be "
- " be publishable "
- " as-is, as\n> "
- "plain text, "
- " text, without "
- "without looking "
- "looking like it'"
- s been marked up
- " up with tags\n> "
- "or formatting "
- " instructions.\n"
- "\n> ("
- "<https://"
- daringfireball.n
- reball.net/
- /projects/
- "/markdown/>)\n\n"
- The point can be
- " can be "
- " be illustrated "
- " by comparing a "
- " a sample of\n"
- "[AsciiDoc](https"
- "](https://"
- "://asciidoc.org/"
- "/) with\n"
- "an equivalent "
- " sample of "
- " of Markdown.  "
- Here is a sample
- "a sample of\n"
- "AsciiDoc from "
- " from the "
- " the AsciiDoc "
- " manual:\n\n"
- "```\n"
- "1. "
- "List item one.\n"
- "+\n"
- "List item one "
- " one continued "
- " with a second "
- second paragraph
- " followed by an\n"
- "Indented block.\n"
- "+\n"
- "................"
- ".........\n"
- "$ ls *.sh\n"
- "$ mv *.sh ~/tmp\n"
- "................"
- ".........\n+\n"
- "List item "
- " item continued "
- " with a third "
- " third paragraph"
- ".\n\n2. "
- "List item two "
- " two continued "
- " with an open "
- "an open block.\n"
- "+\n--\n"
- "This paragraph "
- " is part of the "
- of the preceding
- " list item.\n\na. "
- "This list is "
- "list is nested "
- " nested and does"
- "and does not "
- " not require "
- require explicit
- "explicit item\n"
- "continuation.\n+\n"
- "This paragraph "
- " is part of the "
- of the preceding
- " list item.\n\nb. "
- "b. List item b.\n"
- "\n"
- "This paragraph "
- " belongs to item"
- " to item two of "
- " two of the "
- " of the outer "
- " outer list.\n--\n"
- "--\n```\n\n"
- "And here is the "
- " the equivalent "
- " in Markdown:\n"
- "```\n"
- "1.  "
- "List item one.\n\n"
- "    List item "
- " item one "
- " one continued "
- " with a second "
- second paragraph
- " followed by an\n"
- "    Indented "
- " block.\n\n"
- "        $ ls *."
- "$ ls *.sh\n"
- "        $ mv *."
- "$ mv *.sh ~/tmp\n"
- "\n"
- "    List item "
- " item continued "
- " with a third "
- " third paragraph"
- ".\n\n2.  "
- "List item two "
- " two continued "
- " with an open "
- "an open block.\n\n"
- "    This "
- "This paragraph "
- " is part of the "
- of the preceding
- " list item.\n\n"
- "\n    1. "
- "This list is "
- "list is nested "
- " nested and does"
- "and does not "
- " not require "
- require explicit
- "explicit item "
- " continuation.\n\n"
- "       This "
- "This paragraph "
- " is part of the "
- of the preceding
- " list item.\n\n"
- "\n    2. "
- "List item b.\n\n"
- "    This "
- "This paragraph "
- " belongs to item"
- " to item two of "
- " two of the "
- " of the outer "
- " outer list.\n"
- "```\n\n"
- "The AsciiDoc "
- " version is, "
- " is, arguably, "
- ", easier to "
- " to write. "
- "You don't need\n"
- "to worry about "
- " indentation.  "
- But the Markdown
- Markdown version
- " version is much"
- " is much easier\n"
- "to read.  "
- "The nesting of "
- " of list items "
- " items is "
- " is apparent to "
- " to the eye in "
- " eye in the\n"
- "source, not just"
- "not just in the "
- in the processed
- " document.\n\n"
- "## "
- "Why is a spec "
- " a spec needed?\n"
- "\nJohn Gruber's "
- "["
- "canonical "
- " description of "
- " of Markdown's\n"
- "'s\nsyntax"
- "](https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/syntax
- "/syntax)\n"
- does not specify
- " specify the "
- " the syntax "
- " unambiguously."
- ".  "
- "Here are some "
- " some examples "
- " of\n"
- "questions it "
- " it does not "
- " not answer:\n\n"
- "1.  "
- "How much "
- much indentation
- " is needed for a"
- " for a sublist?"
- "sublist?  "
- "The spec says "
- " says that\n    "
- "continuation "
- " paragraphs need"
- " need to be "
- " to be indented "
- " four spaces, "
- "spaces, but is\n"
- "\n    "
- "not fully "
- " fully explicit "
- " about sublists."
- ".  "
- It is natural to
- " to think that\n"
- "\n    "
- "they, too, must "
- ", must be "
- must be indented
- "indented four "
- " four spaces, "
- "spaces, but "
- "`Markdown.pl`"
- " does\n    "
- not require that
- " that.  "
- This is hardly a
- "hardly a \""
- "\"corner case,\""
- " and divergences"
- "\n    "
- "between "
- " implementations"
- " on this issue "
- " issue often "
- " often lead to "
- " to surprises "
- " for\n    "
- "users in real "
- " real documents."
- ". (See "
- "["
- "this comment by "
- " by John\n    "
- Gruber
- "](https://"
- /web.archive.org
- /web/
- /20170611172104/
- "/http://"
- article.gmane.or
- gmane.org/
- gmane.text.markd
- xt.markdown.gene
- own.general/1997
- "/1997).)\n\n"
- "2.  "
- "Is a blank line "
- " line needed "
- " needed before a"
- "before a block "
- a block quote or
- quote or heading
- " heading?\n    "
- "Most "
- " implementations"
- " do not require "
- "require the "
- " the blank line."
- " line.  However,"
- "\n    "
- this can lead to
- " lead to "
- " to unexpected "
- " results in hard"
- " in hard-wrapped"
- "-wrapped text, "
- " text, and\n    "
- "also to "
- " to ambiguities "
- " in parsing ("
- " (note that some"
- " some "
- " implementations"
- "\n    "
- "put the heading "
- "heading inside "
- " inside the "
- " the blockquote,"
- ", while others "
- " others do not)."
- "\n    "
- (John Gruber has
- " has also spoken"
- " spoken "
- "["
- "in favor of "
- " of requiring "
- " the blank\n    "
- lines
- "](https://"
- /web.archive.org
- /web/
- /20170611172104/
- "/http://"
- article.gmane.or
- gmane.org/
- gmane.text.markd
- xt.markdown.gene
- own.general/2146
- "/2146).)\n\n"
- "3.  "
- "Is a blank line "
- " line needed "
- " needed before "
- " before an "
- " an indented "
- " code block?\n"
- "\n    ("
- "(`Markdown.pl`"
- " requires it, "
- " it, but this is"
- " this is not "
- is not mentioned
- " in the\n    "
- "documentation, "
- ", and some "
- " implementations"
- " do not require "
- "require it.)\n\n"
- "    ``` markdown"
- "markdown\n    "
- "paragraph\n    "
- "        code?\n"
- "    ```\n\n"
- "4.  "
- "What is the "
- " is the exact "
- " exact rule for "
- " for determining"
- " when list items"
- " items get\n    "
- "wrapped in `<p>`"
- " tags?  "
- "Can a list be "
- " be partially \""
- "\"loose\""
- "\" and partially"
- "\n    \"tight\""
- "?  "
- "What should we "
- " we do with a "
- " with a list "
- " a list like "
- " like this?\n\n"
- "    ``` markdown"
- "markdown\n    "
- "1. one\n\n    "
- "    2. two\n    "
- "    3. three\n"
- "    ```\n\n    "
- "Or this?\n"
- "\n"
- "    ``` markdown"
- "markdown\n    "
- "1.  one\n    "
- "        - a\n\n"
- "        - b\n    "
- "    2.  two\n"
- "    ```\n\n    "
- "(There are some "
- " some relevant "
- " comments by "
- " by John Gruber\n"
- "\n    "
- "[here](https://"
- /web.archive.org
- /web/
- /20170611172104/
- "/http://"
- article.gmane.or
- gmane.org/
- gmane.text.markd
- xt.markdown.gene
- own.general/2554
- "/2554).)\n\n"
- "5.  "
- Can list markers
- " markers be "
- " be indented?  "
- Can ordered list
- " list markers be"
- " be right-"
- " right-aligned?\n"
- "\n"
- "    ``` markdown"
- "markdown\n    "
- " 8. item 1\n    "
- "     9. item 2\n"
- "    10. item 2a\n"
- "    ```\n\n"
- "6.  "
- Is this one list
- "one list with a "
- " with a thematic"
- "thematic break "
- " break in its "
- " in its second "
- " second item,\n"
- "\n    "
- "or two lists "
- " lists separated"
- " by a thematic "
- " break?\n\n    "
- "``` markdown\n"
- "    * a\n    "
- "    * * * * *\n"
- "    * b\n"
- "* b\n    ```\n\n"
- "7.  "
- "When list "
- " list markers "
- "markers change "
- " change from "
- " from numbers to"
- " to bullets, do "
- ", do we have\n"
- "\n    "
- two lists or one
- " or one?  "
- "(The Markdown "
- " syntax "
- " description "
- " suggests two,\n"
- "\n    "
- "but the perl "
- " perl scripts "
- scripts and many
- "and many other "
- " implementations"
- " produce one.)\n\n"
- "    ``` markdown"
- "markdown\n    "
- "1. fee\n    "
- "    2. fie\n    "
- "    -  foe\n    "
- "    -  fum\n"
- "-  fum\n    ```\n\n"
- "8.  "
- "What are the "
- " the precedence "
- " rules for the "
- "for the markers "
- "markers of "
- " of inline "
- inline structure
- "?\n    "
- "For example, is "
- ", is the "
- is the following
- " a valid link, "
- " link, or does "
- or does the code
- "the code span\n"
- "\n    "
- "take precedence "
- " ?\n\n    "
- "``` markdown\n"
- "    "
- "[a backtick (`)]"
- " (`)](/url) and "
- ") and [another "
- another backtick
- "backtick (`)](/"
- " (`)](/url).\n"
- "    ```\n\n"
- "9.  "
- "What are the "
- " the precedence "
- " rules for "
- " for markers of "
- " of emphasis and"
- " and strong\n    "
- "emphasis?  "
- "For example, how"
- ", how should the"
- " the following "
- " be parsed?\n\n"
- "    ``` markdown"
- "markdown\n    "
- "*foo *bar* baz*\n"
- "    ```\n\n"
- "10. "
- "What are the "
- " the precedence "
- " rules between "
- between block-
- " block-level and"
- " and inline-"
- " inline-level\n"
- "\n    "
- "structure?  "
- "For example, how"
- ", how should the"
- " the following "
- " be parsed?\n\n"
- "    ``` markdown"
- "markdown\n    "
- "- `a long code "
- " code span can "
- " can contain a "
- " a hyphen like "
- " like this\n    "
- "  - and it can "
- " it can screw "
- " screw things up"
- " up`\n    ```\n\n"
- "11. "
- "Can list items "
- " items include "
- "include section "
- section headings
- headings?  (
- "`Markdown.pl`"
- " does not\n    "
- "allow this, but "
- ", but does allow"
- " allow "
- " blockquotes to "
- " to include "
- include headings
- "headings.)\n\n    "
- "``` markdown\n"
- "    - # Heading\n"
- "    ```\n\n"
- "12. "
- "Can list items "
- " items be empty?"
- " empty?\n\n    "
- "``` markdown\n"
- "    * a\n    *\n"
- "    *\n    * b\n"
- "* b\n    ```\n\n"
- "13. "
- "Can link "
- " link references"
- " be defined "
- "defined inside "
- " inside block "
- " block quotes or"
- " or list items?\n"
- "\n"
- "    ``` markdown"
- "markdown\n    "
- "> Blockquote ["
- " [foo].\n    >\n"
- ">\n    "
- "> [foo]: /url\n"
- "    ```\n\n"
- "14. "
- "If there are "
- " are multiple "
- " definitions for"
- " for the same "
- " same reference,"
- ", which takes\n"
- "\n    precedence?"
- "\n\n"
- "    ``` markdown"
- "markdown\n    "
- "[foo]: /url1\n"
- "    "
- "[foo]: /url2\n\n"
- "    [foo][]\n"
- "    ```\n\n"
- "In the absence "
- "absence of a "
- " of a spec, "
- "a spec, early "
- " implementers "
- " consulted "
- "`Markdown.pl`\n"
- to resolve these
- " these "
- " ambiguities.  "
- "But "
- "`Markdown.pl`"
- " was quite buggy"
- " buggy, and\n"
- "gave manifestly "
- " bad results in "
- " in many cases, "
- " cases, so it "
- ", so it was not "
- "was not a\n"
- "satisfactory "
- " replacement for"
- " for a spec.\n\n"
- Because there is
- "there is no "
- " no unambiguous "
- " spec, "
- " implementations"
- " have diverged\n"
- "considerably.  "
- "As a result, "
- "result, users "
- ", users are "
- " are often "
- " often surprised"
- " to find that\n"
- "a document that "
- " that renders "
- "renders one way "
- "one way on one "
- " on one system ("
- "system (say, a "
- "(say, a GitHub "
- " GitHub wiki)\n"
- "renders "
- " differently on "
- " on another (say"
- " (say, "
- "(say, converting"
- " to docbook "
- "docbook using\n"
- "pandoc).  "
- "To make matters "
- "matters worse, "
- " worse, because "
- "because nothing "
- "nothing in "
- " in Markdown "
- " counts\nas a \""
- "\"syntax error,\""
- " the divergence "
- " often isn'"
- "t discovered "
- " right away.\n\n"
- "## "
- "About this "
- " this document\n\n"
- "This document "
- " attempts to "
- " to specify "
- specify Markdown
- "Markdown syntax "
- " unambiguously.\n"
- It contains many
- " many examples "
- " with side-by-"
- "side-by-side "
- by-side Markdown
- "Markdown and\n"
- "HTML.  "
- "These are "
- " are intended to"
- " to double as "
- " as conformance "
- " tests.  An\n"
- "accompanying "
- " script "
- "`spec_tests.py`"
- " can be used to "
- "used to run the "
- "run the tests\n"
- "against any "
- " any Markdown "
- " program:\n\n    "
- python test/
- /spec_tests.py -
- " --spec spec.txt"
- spec.txt --
- " --program "
- "program PROGRAM\n"
- "\n"
- "Since this "
- " this document "
- " describes how "
- " how Markdown is"
- " is to be parsed"
- " parsed into\n"
- "an abstract "
- " syntax tree, it"
- "tree, it would "
- " would have made"
- " made sense to "
- " to use an "
- " use an abstract"
- "\n"
- "representation "
- " of the syntax "
- " syntax tree "
- " tree instead of"
- " of HTML.  "
- "But HTML is "
- "HTML is capable\n"
- "of representing "
- " the structural "
- " distinctions we"
- " we need to make"
- " to make, and "
- ", and the\n"
- "choice of HTML "
- "of HTML for the "
- "for the tests "
- " tests makes it "
- " it possible to "
- " to run the "
- "run the tests "
- " tests against\n"
- "an "
- " implementation "
- " without writing"
- " writing an "
- " an abstract "
- " syntax tree "
- " tree renderer.\n"
- "\n"
- "Note that not "
- " not every "
- " every feature "
- "feature of the "
- " of the HTML "
- " HTML samples is"
- " is mandated by\n"
- "the spec.  "
- "For example, the"
- ", the spec says "
- " says what "
- " what counts as "
- " as a link\n"
- "destination, but"
- ", but it doesn'"
- "t mandate that "
- " that non-ASCII "
- ASCII characters
- " in\n"
- "the URL be "
- " URL be percent-"
- percent-encoded.
- "encoded.  "
- "To use the "
- " the automatic "
- " tests,\n"
- "implementers "
- " will need to "
- "need to provide "
- "provide a "
- " a renderer that"
- " that conforms "
- " to\n"
- the expectations
- " of the spec "
- " spec examples ("
- " (percent-"
- percent-encoding
- "\n"
- "non-ASCII "
- ASCII characters
- " in URLs).  "
- But a conforming
- " implementation\n"
- "can use a "
- " use a different"
- " renderer and "
- " and may choose "
- " choose not to\n"
- "percent-encode "
- "-encode non-"
- " non-ASCII "
- ASCII characters
- " in URLs.\n\n"
- This document is
- " is generated "
- " from a text "
- " a text file, "
- "`spec.txt`"
- ", written\n"
- in Markdown with
- " with a small "
- " small extension"
- " for the side-by"
- " side-by-side "
- "by-side tests.\n"
- "The script "
- "`tools/"
- "/makespec.py`"
- " can be used to "
- "used to convert "
- "`spec.txt` into\n"
- "HTML or "
- " or CommonMark ("
- " (which can then"
- "can then be "
- " be converted "
- " into other "
- " other formats)."
- ").\n\n"
- "In the examples,"
- ", the `→`"
- " character is "
- " is used to "
- " to represent "
- " tabs.\n\n"
- "# Preliminaries"
- "\n\n"
- "## "
- "Characters and "
- " and lines\n\n"
- "Any sequence of "
- "[characters]"
- " is a valid "
- valid CommonMark
- "\ndocument.\n\n"
- "A [character](@)"
- " is a Unicode "
- "Unicode code "
- " code point.  "
- "Although some\n"
- code points (for
- " (for example, "
- ", combining "
- " accents) do not"
- ") do not "
- " not correspond "
- " to\n"
- characters in an
- " in an intuitive"
- " sense, all code"
- "all code points "
- " points count as"
- "count as "
- " as characters\n"
- "for purposes of "
- " of this spec.\n\n"
- "This spec does "
- " does not "
- " not specify an "
- " an encoding; it"
- "; it thinks of "
- " of lines as "
- " as composed\nof "
- "of [characters]"
- " rather than "
- " than bytes.  "
- "A conforming "
- " parser may be "
- " may be limited\n"
- "to a certain "
- certain encoding
- "encoding.\n\n"
- "A [line](@)"
- " is a sequence "
- " of zero or more"
- " or more ["
- "[characters]\n"
- "other than line "
- " line feed ("
- "`U+000A`"
- ") or carriage "
- " return ("
- "`U+000D`),\n"
- "\nfollowed by a ["
- "[line ending]"
- " or by the end "
- the end of file.
- "of file.\n\n"
- "A "
- "[line ending](@)"
- " is a line feed "
- " feed (`U+000A`"
- "), a carriage "
- " return\n("
- "(`U+000D`"
- ") not followed "
- " by a line feed,"
- " feed, or a "
- ", or a carriage "
- " return and a\n"
- "following line "
- " line feed.\n\n"
- "A line "
- " line containing"
- " no characters, "
- ", or a line "
- " line containing"
- " only spaces\n("
- "(`U+0020`"
- ) or tabs (
- "`U+0009`"
- "), is called a "
- "[blank line](@)."
- ".\n\n"
- "The following "
- " definitions of "
- " of character "
- " classes will be"
- " will be used in"
- " used in this "
- "in this spec:\n\n"
- "A "
- "[Unicode "
- " whitespace "
- " character](@)"
- " is a character "
- " in the Unicode "
- "`Zs` general\n"
- "category, or a "
- ", or a tab ("
- "`U+0009`"
- "), line feed ("
- "`U+000A`"
- "), form feed ("
- "`U+000C`), or\n"
- "carriage return "
- " return ("
- "`U+000D`).\n\n"
- "[Unicode "
- " whitespace](@)"
- " is a sequence "
- " of one or more\n"
- "["
- "Unicode "
- " whitespace "
- " characters].\n\n"
- "A [tab](@) is "
- " is `U+0009`.\n\n"
- "A [space](@) is "
- " is `U+0020`.\n\n"
- "An "
- "[ASCII control "
- " character](@)"
- " is a character "
- " between "
- "`U+0000–1F`"
- " (both\n"
- "\nincluding) or "
- "`U+007F`.\n\n"
- "An "
- "[ASCII "
- " punctuation "
- " character](@)\n"
- "is `!`, `\"`, `#`"
- "`\"`, `#`, `$`, "
- ", `$`, `%`, `&`"
- "`%`, `&`, `'`, "
- ", `'`, `(`, `)`,"
- ", `)`,\n`*`, `+`"
- "`*`, `+`, `,`, "
- ", `,`, `-`, `.`"
- "`-`, `.`, `/`"
- "`/` (U+0021–2F),"
- " \n`:`, `;`, `<`"
- "`;`, `<`, `=`, "
- ", `=`, `>`, `?`"
- "`>`, `?`, `@`"
- " (U+003A–0040),\n"
- "\n`[`, `\\`, `]`, "
- ", `]`, `^`, `_`"
- "`^`, `_`, "
- ", `_`, `` ` ``"
- " (U+005B–0060),"
- " \n`{`, `|`, `}`"
- "`|`, `}`, or `~`"
- " (U+007B–007E)."
- "\n\nA "
- "[Unicode "
- " punctuation "
- " character](@)"
- " is a character "
- " in the Unicode "
- "`P`\n"
- "(puncuation) or "
- "`S`"
- " (symbol) "
- "symbol) general "
- " categories.\n\n"
- "## Tabs\n\n"
- "Tabs in lines "
- " lines are not "
- are not expanded
- "expanded to ["
- "[spaces]"
- "].  However,\n"
- "in contexts "
- " where spaces "
- " spaces help to "
- "help to define "
- " define block "
- " block structure"
- ",\n"
- "tabs behave as "
- " as if they were"
- " were replaced "
- " by spaces with "
- " with a tab stop"
- "\n"
- of 4 characters.
- "\n\n"
- "Thus, for "
- ", for example, a"
- ", a tab can be "
- " can be used "
- "be used instead "
- "instead of four "
- "of four spaces\n"
- "in an indented "
- " code block.  "
- "(Note, however, "
- ", that internal\n"
- "tabs are passed "
- " passed through "
- "through as "
- " as literal tabs"
- " tabs, not "
- ", not expanded "
- " to\nspaces.)\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "→foo→baz→→bim\n.\n"
- "<pre><code>foo→"
- ">foo→baz→→bim\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  →foo→baz→→bim\n"
- ".\n"
- "<pre><code>foo→"
- ">foo→baz→→bim\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    a→a\n    ὐ→a\n"
- "    ὐ→a\n.\n"
- "<pre><code>a→a\n"
- "ὐ→a\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- In the following
- " example, a "
- ", a continuation"
- " paragraph of a "
- " of a list\n"
- item is indented
- "indented with a "
- " with a tab; "
- " a tab; this has"
- this has exactly
- " exactly the "
- " the same effect"
- "\n"
- "as indentation "
- " with four "
- " four spaces "
- " spaces would:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  - foo\n\n→bar\n.\n"
- "\n→bar\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<p>bar</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n\n→→bar\n.\n"
- "→→bar\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<pre><code>  bar"
- ">  bar\n"
- "</code></pre>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Normally the `>`"
- " that begins a "
- " a block quote "
- " quote may be "
- " may be followed"
- "\n"
- "optionally by a "
- " by a space, "
- " space, which is"
- "which is not "
- " not considered "
- " part of the\n"
- "content.  "
- In the following
- " case `>`"
- " is followed by "
- " by a tab,\n"
- which is treated
- " treated as if "
- " as if it were "
- it were expanded
- "expanded into "
- " into three "
- " three spaces.\n"
- "Since one of "
- " one of these "
- " these spaces is"
- " is considered "
- " part of the\n"
- "delimiter, `foo`"
- " is considered "
- " to be indented "
- " six spaces\n"
- inside the block
- " block quote "
- " quote context, "
- ", so we get an "
- " get an indented"
- "\n"
- "code block "
- " block starting "
- " with two spaces"
- " spaces.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">→→foo\n.\n"
- ".\n<blockquote>\n"
- "<pre><code>  foo"
- ">  foo\n"
- "</code></pre>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-→→foo\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<pre><code>  foo"
- ">  foo\n"
- "</code></pre>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    foo\n→bar\n.\n"
- "<pre><code>foo\n"
- "bar\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " - foo\n   - bar\n"
- "→ - baz\n.\n<ul>\n"
- ".\n<ul>\n<li>foo\n"
- "<li>foo\n<ul>\n"
- "<ul>\n<li>bar\n"
- "<li>bar\n<ul>\n"
- "<li>baz</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "#→Foo\n.\n"
- ".\n<h1>Foo</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*→*→*→\n.\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- "Insecure "
- " characters\n\n"
- "For security "
- " reasons, the "
- ", the Unicode "
- " character "
- "`U+0000`"
- " must be "
- must be replaced
- "\n"
- "with the "
- " the REPLACEMENT"
- " CHARACTER ("
- "`U+FFFD`).\n\n\n"
- "## "
- "Backslash "
- " escapes\n\n"
- "Any ASCII "
- " punctuation "
- " character may "
- " may be "
- may be backslash
- "-escaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\!"
- "\\\"\\#\\$\\%\\&\\'\\(\\)"
- "\\&\\'\\(\\)\\*\\+\\,\\-"
- "\\*\\+\\,\\-\\."
- "\\/\\:\\;\\<\\=\\>\\?"
- "\\@\\[\\\\\\]\\^\\_\\`\\{"
- "\\^\\_\\`\\{\\|\\}\\~\n"
- ".\n<p>!"
- "&quot;#$%&amp;'("
- "%&amp;'()*+,-./:"
- ")*+,-./:;&lt;=&"
- ":;&lt;=&gt;?"
- "@[\\]^_`{|}~</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Backslashes "
- " before other "
- other characters
- " are treated as "
- " as literal\n"
- "backslashes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\→\\A\\a\\ \\3\\φ\\«\n"
- ".\n"
- "<p>\\→\\A\\a\\ \\3\\φ\\"
- "a\\ \\3\\φ\\«</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Escaped "
- " characters are "
- " are treated as "
- " as regular "
- " characters and "
- " and do\n"
- "not have their "
- " their usual "
- " usual Markdown "
- " meanings:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\*not emphasized"
- "*\n"
- "\\<br/> not a tag"
- " a tag\n"
- "\\[not a link](/"
- " link](/foo)\n"
- "\\`not code`\n"
- "1\\. not a list\n"
- "\\* not a list\n"
- "\\# not a heading"
- " heading\n"
- "\\[foo]: /url \""
- ": /url \"not a "
- "\"not a reference"
- "\"\n"
- "\\&ouml; not a "
- " not a character"
- " entity\n.\n"
- "<p>*not "
- ">*not emphasized"
- "*\n"
- "&lt;br/&gt; not "
- "gt; not a tag\n"
- "[not a link](/"
- " link](/foo)\n"
- "`not code`\n"
- "1. not a list\n"
- "* not a list\n"
- "# not a heading\n"
- "[foo]: /url &"
- ": /url &quot;not"
- "quot;not a "
- ;not a reference
- "&quot;\n"
- "&amp;ouml; not a"
- "; not a "
- " not a character"
- " entity</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If a backslash "
- " is itself "
- " itself escaped,"
- "escaped, the "
- ", the following "
- " character is "
- " is not:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\\\*emphasis*\n.\n"
- "<p>\\<em>emphasis"
- emphasis</em></p
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A backslash at "
- " at the end of "
- " end of the line"
- "the line is a ["
- "[hard line break"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\\\nbar\n.\n"
- ".\n<p>foo<br />\n"
- "bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Backslash "
- " escapes do not "
- " do not work in "
- "work in code "
- "in code blocks, "
- "blocks, code "
- ", code spans, "
- "spans, autolinks"
- ", or\nraw HTML:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`` \\[\\` ``\n.\n"
- "<p><code>\\[\\`</"
- ">\\[\\`</code></p>"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    \\[\\]\n.\n"
- "<pre><code>\\[\\]\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~\n\\[\\]\n~~~\n.\n"
- "<pre><code>\\[\\]\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<https://"
- "://example.com?"
- "find=\\*>\n.\n"
- "<p><a href=\""
- "a href=\"https://"
- "://example.com?"
- "find=%5C*\">https"
- "*\">https://"
- "://example.com?"
- "find=\\*</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"/bar\\/)"
- "\"/bar\\/)\">\n.\n"
- "<a href=\"/bar\\/)"
- "\"/bar\\/)\">\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- But they work in
- " work in all "
- " in all other "
- " other contexts,"
- ", including URLs"
- " URLs and link "
- " link titles,\n"
- "link references,"
- ", and ["
- "[info strings]"
- "] in ["
- "fenced code "
- " code blocks]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo](/bar\\* \"ti"
- "\\* \"ti\\*tle\")\n.\n"
- "<p><a href=\"/bar"
- "=\"/bar*\" title=\""
- " title=\"ti*tle\">"
- "ti*tle\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n\n"
- "[foo]: /bar\\* \""
- "/bar\\* \"ti\\*tle\""
- "ti\\*tle\"\n.\n"
- "<p><a href=\"/bar"
- "=\"/bar*\" title=\""
- " title=\"ti*tle\">"
- "ti*tle\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``` foo\\+bar\n"
- "foo\n```\n.\n"
- "<pre><code class"
- " class=\"language"
- language-foo+bar
- "-foo+bar\">foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- "Entity and "
- " and numeric "
- " character "
- " references\n\n"
- "Valid HTML "
- " HTML entity "
- " references and "
- " and numeric "
- " character "
- " references\n"
- "can be used in "
- used in place of
- "place of the "
- " corresponding "
- " Unicode "
- " character,\n"
- "with the "
- " the following "
- " exceptions:\n\n"
- "- "
- "Entity and "
- " and character "
- " references are "
- " are not "
- " not recognized "
- " in code\n  "
- "blocks and code "
- " code spans.\n\n"
- "- "
- "Entity and "
- " and character "
- " references "
- " cannot stand in"
- "stand in place "
- " place of\n  "
- "special "
- " characters that"
- " that define "
- " structural "
- " elements in\n  "
- "CommonMark.  "
- "For example, "
- ", although "
- "`&#42;`"
- " can be used\n  "
- "in place of a "
- " of a literal "
- "`*` character, "
- "`&#42;`"
- " cannot replace"
- "\n  `*`"
- " in emphasis "
- " delimiters, "
- ", bullet list "
- " list markers, "
- ", or thematic\n  "
- "breaks.\n\n"
- "Conforming "
- " CommonMark "
- " parsers need "
- " need not store "
- " information "
- " about\n"
- "whether a "
- " a particular "
- " character was "
- " was represented"
- " in the source\n"
- "using a Unicode "
- " character or an"
- " or an entity "
- entity reference
- ".\n\n"
- "[Entity "
- " references](@)"
- " consist of `&`"
- " + any of the "
- " of the valid\n"
- "HTML5 entity "
- " entity names + "
- "`;`. The\n"
- ". The\ndocument "
- "<https://"
- html.spec.whatwg
- c.whatwg.org/
- "/entities.json>\n"
- "is used as an "
- an authoritative
- " source for the "
- "for the valid "
- " valid entity\n"
- "references and "
- " and their "
- " corresponding "
- " code points.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&nbsp; &amp; &"
- " &amp; &copy; &"
- "&copy; &AElig; &"
- "AElig; &Dcaron;\n"
- "&frac34; &"
- ; &HilbertSpace;
- ; &DifferentialD
- ";\n"
- "&"
- ClockwiseContour
- eContourIntegral
- "; &ngE;\n.\n"
- "<p>  &amp; © Æ Ď"
- "; © Æ Ď\n¾ ℋ ⅆ\n"
- "¾ ℋ ⅆ\n∲ ≧̸</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "["
- "Decimal numeric "
- " character\n"
- "references](@)\n"
- "](@)\nconsist of "
- "`&#`"
- " + a string of 1"
- "--"
- "7 arabic digits "
- " digits + `;`. A"
- "`;`. A\n"
- "numeric "
- " character "
- " reference is "
- " is parsed as "
- " as the "
- " corresponding\n"
- "Unicode "
- " character. "
- "Invalid Unicode "
- "Unicode code "
- " code points "
- " points will be "
- will be replaced
- "replaced by\n"
- "the REPLACEMENT "
- " CHARACTER ("
- "`U+FFFD`"
- ").  "
- "For security "
- " reasons,\n"
- "the code point "
- "`U+0000`"
- " will also be "
- also be replaced
- "replaced by "
- "`U+FFFD`.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&#35; &#1234; &#"
- "1234; &#992; &#0"
- "992; &#0;\n.\n"
- "<p># Ӓ Ϡ �</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "["
- "Hexadecimal "
- " numeric "
- " character\n"
- "references](@)"
- "](@) consist of "
- "`&#` +\neither "
- "\neither `X` or "
- "`X` or `x`"
- " + a string of 1"
- " of 1-6 "
- " 1-6 hexadecimal"
- " digits + `;`.\n"
- "They too are "
- "too are parsed "
- " parsed as the "
- " corresponding "
- " Unicode "
- " character (this"
- "\n"
- "time specified "
- " with a "
- " a hexadecimal "
- " numeral instead"
- " instead of "
- " of decimal).\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&#X22; &#XD06; &"
- "#XD06; &#xcab;\n"
- ".\n"
- "<p>&quot; ആ ಫ</p"
- "; ആ ಫ</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here are some "
- some nonentities
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&nbsp &x; &#; &#"
- "; &#; &#x;\n"
- "&#87654321;\n"
- "&#abcdef0;\n"
- "&"
- ThisIsNotDefined
- "; &hi?;\n.\n"
- "<p>&amp;nbsp &"
- ;nbsp &amp;x; &
- "amp;x; &amp;#; &"
- "amp;#; &amp;#x;\n"
- "&amp;#87654321;\n"
- "&amp;#abcdef0;\n"
- "&amp;"
- ThisIsNotDefined
- "; &amp;hi?;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Although HTML5 "
- " HTML5 does "
- " does accept "
- " accept some "
- " some entity "
- " references\n"
- "without a "
- " a trailing "
- " semicolon (such"
- " (such as "
- "`&copy`"
- "), these are not"
- "\n"
- "recognized here,"
- " here, because "
- because it makes
- "it makes the "
- " the grammar too"
- " too ambiguous:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&copy\n.\n"
- "<p>&amp;copy</p>"
- "copy</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Strings that are
- "that are not on "
- " not on the list"
- "the list of "
- "list of HTML5 "
- " HTML5 named "
- " named entities "
- " are not\n"
- "recognized as "
- " as entity "
- " references "
- " either:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&MadeUpEntity;\n"
- ".\n"
- "<p>&amp;"
- amp;MadeUpEntity
- ";</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Entity and "
- " and numeric "
- " character "
- " references are "
- " are recognized "
- " in any\n"
- "context besides "
- "besides code "
- " code spans or "
- " or code blocks,"
- " blocks, "
- ", including\n"
- "URLs, ["
- "[link titles]"
- "], and ["
- "fenced code "
- " code block][] ["
- "[] [info strings"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"&ouml;&"
- "\"&ouml;&ouml;."
- ";&ouml;.html\">\n"
- ".\n"
- "<a href=\"&ouml;&"
- "\"&ouml;&ouml;."
- ";&ouml;.html\">\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo](/f&ouml;&"
- "f&ouml;&ouml; \"f"
- "ouml; \"f&ouml;&"
- "f&ouml;&ouml;\")\n"
- ".\n"
- "<p><a href=\"/f%"
- "=\"/f%C3%B6%C3%B6"
- "B6%C3%B6\" title="
- "\" title=\"föö\">"
- "=\"föö\">foo</a></"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n\n"
- "[foo]: /f&ouml;&"
- "f&ouml;&ouml; \"f"
- "ouml; \"f&ouml;&"
- "f&ouml;&ouml;\"\n"
- ".\n"
- "<p><a href=\"/f%"
- "=\"/f%C3%B6%C3%B6"
- "B6%C3%B6\" title="
- "\" title=\"föö\">"
- "=\"föö\">foo</a></"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``` f&ouml;&ouml"
- ";&ouml;\nfoo\n```\n"
- "foo\n```\n.\n"
- "<pre><code class"
- " class=\"language"
- "language-föö\">"
- "-föö\">foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Entity and "
- " and numeric "
- " character "
- " references are "
- " are treated as "
- " as literal\n"
- "text in code "
- "in code spans "
- " spans and code "
- " code blocks:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`f&ouml;&ouml;`\n"
- ".\n"
- "<p><code>f&amp;"
- ">f&amp;ouml;&amp"
- ;&amp;ouml;</
- ;ouml;</code></p
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    f&ouml;f&"
- "&ouml;f&ouml;\n.\n"
- "<pre><code>f&amp"
- ">f&amp;ouml;f&"
- ;ouml;f&amp;ouml
- "amp;ouml;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Entity and "
- " and numeric "
- " character "
- " references "
- " cannot be used\n"
- "in place of "
- " of symbols "
- " indicating "
- " structure in "
- " in CommonMark\n"
- "documents.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&#42;foo&#42;\n"
- "*foo*\n.\n"
- ".\n<p>*foo*\n"
- "<em>foo</em></p>"
- "/em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&#42; foo\n\n"
- "\n* foo\n.\n"
- ".\n<p>* foo</p>\n"
- "<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo&#10;&#10;bar"
- "&#10;bar\n.\n"
- ".\n<p>foo\n\n"
- "<p>foo\n\nbar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "&#9;foo\n.\n"
- ".\n<p>→foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[a](url &quot;"
- " &quot;tit&quot;"
- "&quot;)\n.\n"
- "<p>[a](url &quot"
- " &quot;tit&quot;"
- "&quot;)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "# "
- "Blocks and "
- " and inlines\n\n"
- "We can think of "
- " of a document "
- " as a sequence "
- " of\n[blocks](@)"
- "---"
- "structural "
- " elements like "
- " like paragraphs"
- ", block\n"
- "quotations, "
- ", lists, "
- " lists, headings"
- "headings, rules,"
- ", rules, and "
- ", and code "
- " code blocks.  "
- Some blocks (
- "blocks (like\n"
- block quotes and
- " and list items)"
- " items) contain "
- "contain other "
- " other blocks; "
- blocks; others (
- "others (like\n"
- "headings and "
- " and paragraphs)"
- ") contain "
- "[inline](@)"
- " content---text,"
- "---text,\n"
- "links, "
- ", emphasized "
- " text, images, "
- "images, code "
- ", code spans, "
- " spans, and so "
- " and so on.\n\n"
- "## Precedence\n\n"
- "Indicators of "
- " of block "
- " block structure"
- " always take "
- " take precedence"
- " over indicators"
- "\n"
- "of inline "
- inline structure
- ".  "
- "So, for example,"
- "example, the "
- ", the following "
- " is a list with\n"
- "two items, not a"
- ", not a list "
- " a list with one"
- "with one item "
- " item containing"
- " a code span:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- `one\n- two`\n.\n"
- ".\n<ul>\n"
- "<li>`one</li>\n"
- "<li>two`</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This means that "
- " that parsing "
- "parsing can "
- " can proceed in "
- " in two steps:  "
- "steps:  first, "
- "first, the block"
- "\n"
- structure of the
- " of the document"
- "document can be "
- can be discerned
- "; second, text "
- ", text lines "
- " lines inside\n"
- "paragraphs, "
- ", headings, and "
- ", and other "
- " other block "
- block constructs
- " can be parsed "
- " parsed for "
- " for inline\n"
- "structure.  "
- "The second step "
- " step requires "
- " information "
- " about link "
- " link reference\n"
- definitions that
- " that will be "
- " be available "
- " only at the end"
- " the end of the "
- " of the first\n"
- "step.  "
- "Note that the "
- " the first step "
- " step requires "
- " processing "
- " lines in "
- " in sequence,\n"
- "but the second "
- " second can be "
- " be parallelized"
- ", since the "
- " the inline "
- " inline parsing "
- "parsing of\n"
- "one block "
- " block element "
- element does not
- "does not affect "
- " affect the "
- " the inline "
- " inline parsing "
- "parsing of any "
- " of any other.\n\n"
- "## "
- Container blocks
- " blocks and leaf"
- "and leaf blocks\n"
- "\n"
- "We can divide "
- " divide blocks "
- " blocks into two"
- "into two types:\n"
- "[container "
- " blocks](#"
- "](#container-"
- "-blocks),\n"
- "which can "
- " can contain "
- "contain other "
- " other blocks, "
- "blocks, and "
- "[leaf blocks](#"
- "](#leaf-blocks),"
- ",\nwhich cannot."
- "\n\n"
- "# Leaf blocks\n\n"
- "This section "
- " describes the "
- " the different "
- " kinds of leaf "
- "of leaf block "
- " block that make"
- " make up a\n"
- "Markdown "
- " document.\n\n"
- "## "
- Thematic breaks
- "\n\n"
- "A line "
- " line consisting"
- " of optionally "
- " up to three "
- " three spaces of"
- " of indentation,"
- ", followed by a\n"
- "sequence of "
- " of three or "
- " or more "
- or more matching
- "matching `-`, "
- "`-`, `_`, or `*`"
- " characters, "
- ", each followed\n"
- "optionally by "
- " by any number "
- " number of "
- " of spaces or "
- " or tabs, forms "
- ", forms a\n"
- "[thematic break]"
- " break](@).\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "***\n---\n___\n.\n"
- "___\n.\n<hr />\n"
- "<hr />\n<hr />\n"
- "<hr />\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Wrong characters
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "+++\n.\n"
- ".\n<p>+++</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "===\n.\n"
- ".\n<p>===</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Not enough "
- " characters:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "--\n**\n__\n.\n"
- "**\n__\n.\n<p>--\n"
- ".\n<p>--\n**\n"
- "**\n__</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Up to three "
- " three spaces of"
- " of indentation "
- " are allowed:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " ***\n  ***\n"
- "  ***\n   ***\n.\n"
- ".\n<hr />\n<hr />\n"
- "<hr />\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    ***\n.\n"
- "<pre><code>***\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n    ***\n.\n"
- ".\n<p>Foo\n"
- "<p>Foo\n***</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "More than three "
- three characters
- " may be used:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ________________
- ________________
- ________________
- "_____________\n.\n"
- ".\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Spaces and tabs "
- " tabs are "
- " are allowed "
- "allowed between "
- "between the "
- " the characters:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " - - -\n.\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " **  * ** * ** *"
- "* * ** * **\n.\n"
- ".\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-     -      -"
- "-      -      -\n"
- ".\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Spaces and tabs "
- " tabs are "
- " are allowed at "
- " at the end:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- - - -    \n.\n"
- ".\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, no "
- ", no other "
- other characters
- " may occur in "
- " in the line:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_ _ _ _ a\n\n"
- "\na------\n\n"
- "\n---a---\n.\n"
- "<p>_ _ _ _ a</p>"
- " _ a</p>\n"
- "<p>a------</p>\n"
- "<p>---a---</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "It is required "
- " that all of the"
- " of the "
- " the characters "
- " other than "
- " than spaces or "
- " or tabs be the "
- " be the same.\n"
- "So, this is not "
- " is not a "
- " not a thematic "
- " break:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " *-*\n.\n"
- "<p><em>-</em></p"
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Thematic breaks "
- " breaks do not "
- " do not need "
- " need blank "
- " blank lines "
- " lines before or"
- " or after:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n***\n- bar\n"
- "- bar\n.\n<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n<hr />\n"
- "<hr />\n<ul>\n"
- "<li>bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Thematic breaks "
- " breaks can "
- " can interrupt a"
- " a paragraph:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n***\nbar\n.\n"
- ".\n<p>Foo</p>\n"
- "<hr />\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If a line of "
- "line of dashes "
- " dashes that "
- " that meets the "
- " the above "
- above conditions
- " for being a\n"
- "thematic break "
- " break could "
- " could also be "
- " be interpreted "
- " as the "
- as the underline
- " of a [setext\n"
- "[setext\nheading]"
- ", the "
- " interpretation "
- " as a\n["
- "[setext heading]"
- " takes "
- takes precedence
- ". "
- "Thus, for "
- ", for example,\n"
- this is a setext
- a setext heading
- " heading, not a "
- " not a paragraph"
- " followed by a "
- " by a thematic "
- " break:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n---\nbar\n.\n"
- ".\n<h2>Foo</h2>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "When both a "
- " both a thematic"
- "thematic break "
- " break and a "
- " and a list item"
- " item are "
- " are possible\n"
- "interpretations "
- " of a line, the "
- ", the thematic "
- " break takes "
- takes precedence
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "* Foo\n* * *\n"
- "* * *\n* Bar\n.\n"
- "* Bar\n.\n<ul>\n"
- "<li>Foo</li>\n"
- "</ul>\n<hr />\n"
- "<hr />\n<ul>\n"
- "<li>Bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If you want a "
- " want a thematic"
- "thematic break "
- " break in a list"
- " a list item, "
- " item, use a "
- " use a different"
- " bullet:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- Foo\n- * * *\n.\n"
- ".\n<ul>\n"
- "<li>Foo</li>\n"
- "<li>\n<hr />\n"
- "<hr />\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## ATX headings"
- "\n\nAn "
- "[ATX heading](@)"
- "\n"
- "consists of a "
- " of a string of "
- " of characters, "
- ", parsed as "
- " as inline "
- " inline content,"
- "content, between"
- " between an\n"
- opening sequence
- sequence of 1--
- "--6 unescaped "
- "`#`"
- " characters and "
- " and an optional"
- "\n"
- closing sequence
- "sequence of any "
- " of any number "
- " number of "
- " of unescaped "
- "`#` characters.\n"
- "The opening "
- opening sequence
- "sequence of `#`"
- " characters must"
- " must be "
- must be followed
- "followed by "
- " by spaces or "
- " or tabs, or\n"
- "by the end of "
- " end of line. "
- "The optional "
- " closing "
- closing sequence
- "sequence of `#`"
- "s must be "
- must be preceded
- "preceded by\n"
- "spaces or tabs "
- "or tabs and may "
- "and may be "
- " may be followed"
- "followed by "
- " by spaces or "
- " or tabs only.  "
- "The opening\n`#`"
- " character may "
- " may be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation."
- ".  The raw\n"
- "contents of the "
- " of the heading "
- "heading are "
- " are stripped of"
- " of leading and "
- " and trailing "
- " space or tabs\n"
- "before being "
- " being parsed as"
- " as inline "
- " inline content."
- "content.  "
- "The heading "
- heading level is
- "level is equal "
- " equal to the "
- " to the number\n"
- "of `#`"
- " characters in "
- " in the opening "
- opening sequence
- "sequence.\n\n"
- "Simple headings:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "# foo\n## foo\n"
- "## foo\n### foo\n"
- "#### foo\n"
- "##### foo\n"
- "###### foo\n.\n"
- ".\n<h1>foo</h1>\n"
- "<h2>foo</h2>\n"
- "<h3>foo</h3>\n"
- "<h4>foo</h4>\n"
- "<h5>foo</h5>\n"
- "<h6>foo</h6>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "More than six "
- "`#`"
- " characters is "
- " is not a "
- " not a heading:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "####### foo\n.\n"
- "<p>####### foo</"
- "## foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "At least one "
- " one space or "
- " or tab is "
- " tab is required"
- required between
- " between the `#`"
- " characters and "
- " and the\nheading"
- "heading'"
- "s contents, "
- ", unless the "
- " the heading is "
- " is empty.  "
- "Note that many\n"
- "implementations "
- " currently do "
- " do not require "
- "require the "
- " the space.  "
- "However, the\n"
- "space was "
- " was required by"
- " by the\n"
- "[original ATX "
- " implementation]"
- "](http://"
- /www.aaronsw.com
- /2002/atx/atx.py
- "/atx.py),\n"
- "and it helps "
- " helps prevent "
- "prevent things "
- " things like the"
- "like the "
- " the following "
- " from being "
- " being parsed as"
- "\nheadings:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "#5 bolt\n\n"
- "\n#hashtag\n.\n"
- "<p>#5 bolt</p>\n"
- "<p>#hashtag</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not a "
- " not a heading, "
- ", because the "
- " the first `#`"
- "`#` is escaped:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\## foo\n.\n"
- ".\n<p>## foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Contents are "
- " are parsed as "
- " as inlines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "# foo *bar* \\*"
- "*bar* \\*baz\\*\n.\n"
- "<h1>foo <em>bar<"
- "<em>bar</em> *"
- "</em> *baz*</h1>"
- "*</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Leading and "
- " and trailing "
- " spaces or tabs "
- "or tabs are "
- " are ignored in "
- " in parsing "
- "parsing inline "
- " inline content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "#"
- "                "
- "          foo"
- "                "
- "             \n.\n"
- ".\n<h1>foo</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Up to three "
- " three spaces of"
- " of indentation "
- " are allowed:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " ### foo\n"
- "  ## foo\n"
- "   # foo\n.\n"
- ".\n<h3>foo</h3>\n"
- "<h2>foo</h2>\n"
- "<h1>foo</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    # foo\n.\n"
- "<pre><code># foo"
- "># foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\n    # bar\n.\n"
- ".\n<p>foo\n"
- "# bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A closing "
- closing sequence
- "sequence of `#`"
- " characters is "
- " is optional:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "## foo ##\n"
- "  ###   bar    #"
- "bar    ###\n.\n"
- ".\n<h2>foo</h2>\n"
- "<h3>bar</h3>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "It need not be "
- " not be the same"
- "the same length "
- " length as the "
- " as the opening "
- opening sequence
- "sequence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "# foo ##########"
- "################"
- "################"
- "################"
- "########\n"
- "##### foo ##\n.\n"
- ".\n<h1>foo</h1>\n"
- "<h5>foo</h5>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Spaces or tabs "
- "or tabs are "
- " are allowed "
- "allowed after "
- " after the "
- " the closing "
- closing sequence
- "sequence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "### foo ###     "
- "###     \n.\n"
- ".\n<h3>foo</h3>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A sequence of "
- "`#`"
- " characters with"
- " with anything "
- " but spaces or "
- " or tabs "
- " tabs following "
- " it\n"
- is not a closing
- " closing "
- closing sequence
- "sequence, but "
- ", but counts as "
- " as part of the "
- " of the contents"
- "contents of the\n"
- "heading:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "### foo ### b\n.\n"
- "<h3>foo ### b</"
- " ### b</h3>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The closing "
- closing sequence
- sequence must be
- " must be "
- must be preceded
- "preceded by a "
- " by a space or "
- " or tab:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "# foo#\n.\n"
- ".\n<h1>foo#</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Backslash-
- "-escaped `#`"
- " characters do "
- " do not count as"
- "count as part\n"
- "of the closing "
- closing sequence
- "sequence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "### foo \\###\n"
- "## foo #\\##\n"
- "# foo \\#\n.\n"
- "<h3>foo ###</h3>"
- "###</h3>\n"
- "<h2>foo ###</h2>"
- "###</h2>\n"
- "<h1>foo #</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "ATX headings "
- " need not be "
- not be separated
- " from "
- from surrounding
- " content by "
- " by blank\n"
- "lines, and they "
- " they can "
- " can interrupt "
- " paragraphs:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "****\n## foo\n"
- "## foo\n****\n.\n"
- "****\n.\n<hr />\n"
- "<h2>foo</h2>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo bar\n# baz\n"
- "# baz\nBar foo\n.\n"
- "<p>Foo bar</p>\n"
- "<h1>baz</h1>\n"
- "<p>Bar foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- ATX headings can
- " can be empty:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "## \n#\n### ###\n.\n"
- ".\n<h2></h2>\n"
- "<h1></h1>\n"
- "<h3></h3>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- Setext headings
- "\n\nA "
- "[setext heading]"
- "heading](@)"
- " consists of one"
- " of one or more\n"
- "lines of text, "
- " text, not "
- " not interrupted"
- " by a blank line"
- " line, of which "
- " which the first"
- " first line does"
- " does not\n"
- have more than 3
- " than 3 spaces "
- " spaces of "
- " of indentation,"
- ", followed by\na "
- "a ["
- "setext heading "
- " underline]"
- ".  "
- "The lines of "
- " of text must be"
- " must be such\n"
- "that, were they "
- " they not "
- " not followed by"
- " by the setext "
- " setext heading "
- " underline,\n"
- "they would be "
- " be interpreted "
- " as a paragraph:"
- ":  they cannot "
- " cannot be\n"
- interpretable as
- " as a ["
- "[code fence], ["
- "], [ATX heading]"
- "][ATX headings],"
- "],\n[block quote]"
- "][block quotes]"
- "], ["
- "[thematic break]"
- "]["
- "[thematic breaks"
- "],\n[list item]["
- "][list items]"
- "], or ["
- ", or [HTML block"
- "][HTML blocks]."
- "].\n\n"
- "A "
- "[setext heading "
- " underline](@)"
- " is a sequence "
- " of\n`=`"
- " characters or a"
- " or a sequence "
- " of `-`"
- " characters, "
- ", with no more "
- "no more than 3\n"
- "spaces of "
- " of indentation "
- " and any number "
- " number of "
- " of trailing "
- " spaces or tabs."
- "or tabs.\n\n"
- The heading is a
- " is a level 1 "
- "level 1 heading "
- "heading if `=`"
- " characters are "
- " are used in\n"
- "the ["
- "setext heading "
- " underline]"
- ", and a level 2 "
- "level 2 heading "
- "heading if `-`\n"
- "characters are "
- " are used.  "
- "The contents of "
- " of the heading "
- "heading are the "
- "are the result\n"
- "of parsing the "
- " the preceding "
- " lines of text "
- "of text as "
- " as CommonMark "
- " inline\ncontent."
- "content.\n\n"
- "In general, a "
- ", a setext "
- " setext heading "
- heading need not
- "need not be "
- " not be preceded"
- "preceded or "
- " or followed by "
- " by a\n"
- "blank line.  "
- "However, it "
- ", it cannot "
- cannot interrupt
- " a paragraph, so"
- ", so when a\n"
- "setext heading "
- "heading comes "
- " comes after a "
- " a paragraph, a "
- ", a blank line "
- " line is needed "
- " needed between\n"
- "them.\n\n"
- "Simple examples:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo *bar*\n"
- "=========\n\n"
- "\nFoo *bar*\n"
- "---------\n.\n"
- "<h1>Foo <em>bar<"
- "<em>bar</em></h1"
- "/em></h1>\n"
- "<h2>Foo <em>bar<"
- "<em>bar</em></h2"
- "/em></h2>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The content of "
- " of the header "
- " header may span"
- "may span more "
- " more than one "
- " one line:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo *bar\nbaz*\n"
- "baz*\n====\n.\n"
- "<h1>Foo <em>bar\n"
- "baz</em></h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- The contents are
- " are the result "
- " result of "
- " of parsing the "
- " the headings'"
- "'s raw\n"
- "content as "
- " as inlines.  "
- "The heading'"
- s raw content is
- " is formed by\n"
- "concatenating "
- " the lines and "
- " and removing "
- " initial and "
- " and final\n"
- spaces or tabs.
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  Foo *bar\n"
- "baz*→\n====\n.\n"
- "<h1>Foo <em>bar\n"
- "baz</em></h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The underlining "
- " can be any "
- " be any length:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n"
- "----------------"
- "----------------"
- "---------\n\nFoo\n"
- "\nFoo\n=\n.\n"
- ".\n<h2>Foo</h2>\n"
- "<h1>Foo</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The heading "
- "heading content "
- "content can be "
- " can be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation,"
- ", and\n"
- need not line up
- " line up with "
- "up with the "
- " the underlining"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   Foo\n---\n\n"
- "---\n\n  Foo\n"
- "\n  Foo\n-----\n\n"
- "-----\n\n  Foo\n"
- "\n  Foo\n  ===\n.\n"
- ".\n<h2>Foo</h2>\n"
- "<h2>Foo</h2>\n"
- "<h1>Foo</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    Foo\n    ---\n"
- "    ---\n\n"
- "\n    Foo\n---\n.\n"
- "<pre><code>Foo\n"
- "---\n\nFoo\n"
- "</code></pre>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The setext "
- " setext heading "
- " underline can "
- " can be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- "\n"
- "indentation, and"
- ", and may have "
- " have trailing "
- " spaces or tabs:"
- "or tabs:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n"
- "   ----      \n.\n"
- ".\n<h2>Foo</h2>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n    ---\n.\n"
- ".\n<p>Foo\n"
- "<p>Foo\n---</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The setext "
- " setext heading "
- " underline "
- " cannot contain "
- contain internal
- "internal spaces "
- " spaces or tabs:"
- "or tabs:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n= =\n\nFoo\n"
- "\nFoo\n--- -\n.\n"
- "--- -\n.\n<p>Foo\n"
- "<p>Foo\n= =</p>\n"
- "<p>Foo</p>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Trailing spaces "
- " spaces or tabs "
- "or tabs in the "
- " in the content "
- "content line do "
- "line do not "
- " do not cause a "
- "cause a hard "
- " a hard line "
- " line break:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo  \n-----\n.\n"
- ".\n<h2>Foo</h2>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Nor does a "
- does a backslash
- " at the end:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\\\n----\n.\n"
- ".\n<h2>Foo\\</h2>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Since indicators
- " of block "
- " block structure"
- " take precedence"
- " over\n"
- "indicators of "
- " of inline "
- inline structure
- ", the following "
- " are setext "
- " setext headings"
- "headings:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`Foo\n----\n`\n\n"
- "<a title=\"a lot\n"
- "---\n"
- "of dashes\"/>\n.\n"
- ".\n<h2>`Foo</h2>\n"
- "<p>`</p>\n"
- "<h2>&lt;a title="
- "a title=&quot;a "
- "&quot;a lot</h2>"
- "lot</h2>\n"
- "<p>of dashes&"
- " dashes&quot;/&"
- "&quot;/&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The setext "
- " setext heading "
- " underline "
- " cannot be a ["
- "lazy "
- " continuation\n"
- "line]"
- " in a list item "
- " item or block "
- " block quote:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> Foo\n---\n.\n"
- ".\n<blockquote>\n"
- "<p>Foo</p>\n"
- "</blockquote>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\nbar\n===\n.\n"
- ".\n<blockquote>\n"
- "<p>foo\nbar\n"
- "bar\n===</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- Foo\n---\n.\n"
- "---\n.\n<ul>\n"
- "<li>Foo</li>\n"
- "</ul>\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A blank line is "
- "line is needed "
- " needed between "
- "between a "
- " a paragraph and"
- " and a following"
- "\n"
- "setext heading, "
- ", since "
- " since otherwise"
- " the paragraph "
- " becomes part\n"
- "of the heading'"
- "'s content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\nBar\n---\n.\n"
- "---\n.\n<h2>Foo\n"
- "Bar</h2>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- But in general a
- " a blank line is"
- " line is not "
- " is not required"
- "required before "
- " before or after"
- "\n"
- "setext headings:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "---\nFoo\n---\nBar\n"
- "---\nBar\n---\nBaz\n"
- "---\nBaz\n.\n"
- "Baz\n.\n<hr />\n"
- "<h2>Foo</h2>\n"
- "<h2>Bar</h2>\n"
- "<p>Baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Setext headings "
- " cannot be empty"
- "be empty:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\n====\n.\n"
- ".\n<p>====</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Setext heading "
- "heading text "
- " text lines must"
- " must not be "
- be interpretable
- " as block\n"
- constructs other
- " other than "
- " than paragraphs"
- ".  "
- "So, the line of "
- "line of dashes\n"
- "in these "
- " these examples "
- " gets "
- gets interpreted
- " as a thematic "
- " break:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "---\n---\n.\n"
- "---\n.\n<hr />\n"
- "<hr />\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n-----\n.\n"
- "-----\n.\n<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    foo\n---\n.\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\n-----\n.\n"
- ".\n<blockquote>\n"
- "<p>foo</p>\n"
- "</blockquote>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If you want a "
- " want a heading "
- "heading with "
- "`> foo`"
- " as its literal "
- "literal text, "
- " text, you can\n"
- "use backslash "
- " escapes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\> foo\n------\n.\n"
- "<h2>&gt; foo</h2"
- " foo</h2>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "**Compatibility "
- " note:**"
- "  Most existing "
- " Markdown "
- " implementations"
- "\n"
- do not allow the
- " the text of "
- "text of setext "
- " setext headings"
- headings to span
- " to span "
- to span multiple
- "multiple lines.\n"
- "But there is no "
- " is no consensus"
- " about how to "
- how to interpret
- "\n\n``` markdown\n"
- "Foo\nbar\n---\nbaz\n"
- "```\n\n"
- "One can find "
- " find four "
- " four different "
- " interpretations"
- ":\n\n"
- "1. paragraph \""
- "\"Foo\", heading \""
- "\"bar\""
- "bar\", paragraph "
- "\"baz\"\n"
- "2. paragraph \""
- "\"Foo bar\""
- ", thematic break"
- " break, "
- "break, paragraph"
- " \"baz\"\n"
- "3. paragraph \""
- "\"Foo bar --- baz"
- "--- baz\"\n"
- "4. heading \""
- "\"Foo bar\""
- "\", paragraph \""
- "\"baz\"\n\n"
- "We find "
- " interpretation "
- " 4 most natural,"
- "natural, and "
- " interpretation "
- " 4\n"
- "increases the "
- " the expressive "
- " power of "
- " of CommonMark, "
- ", by allowing\n"
- "multiline "
- " headings.  "
- Authors who want
- "who want "
- " interpretation "
- " 1 can\n"
- put a blank line
- " line after the "
- " the first "
- " first paragraph"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n\nbar\n---\n"
- "bar\n---\nbaz\n.\n"
- ".\n<p>Foo</p>\n"
- "<h2>bar</h2>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Authors who want
- "who want "
- " interpretation "
- " 2 can put blank"
- " blank lines "
- " lines around\n"
- "the thematic "
- " break,\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\nbar\n\n---\n\n"
- "\n---\n\nbaz\n.\n"
- "\nbaz\n.\n<p>Foo\n"
- "<p>Foo\nbar</p>\n"
- "bar</p>\n<hr />\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "or use a "
- " use a thematic "
- " break that "
- " that cannot "
- " cannot count as"
- "count as a ["
- "[setext heading\n"
- "\nunderline]"
- "], such as\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\nbar\n* * *\n"
- "* * *\nbaz\n.\n"
- "baz\n.\n<p>Foo\n"
- "<p>Foo\nbar</p>\n"
- "bar</p>\n<hr />\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Authors who want
- "who want "
- " interpretation "
- " 3 can use "
- " use backslash "
- " escapes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\nbar\n\\---\n"
- "\\---\nbaz\n.\n"
- "baz\n.\n<p>Foo\n"
- "<p>Foo\nbar\n---\n"
- "bar\n---\nbaz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- "Indented code "
- " code blocks\n\n"
- "An "
- "[indented code "
- " code block](@)"
- " is composed of "
- " of one or more\n"
- "[indented chunks"
- "]"
- " separated by "
- " by blank lines."
- "\nAn "
- "[indented chunk]"
- " chunk](@)"
- " is a sequence "
- " of non-blank "
- "-blank lines,\n"
- each preceded by
- " by four or more"
- " or more spaces "
- " spaces of "
- " of indentation."
- ". "
- "The contents of "
- " of the code\n"
- "block are the "
- "are the literal "
- literal contents
- "contents of the "
- " of the lines, "
- "lines, including"
- " trailing\n["
- "[line endings]"
- ", minus four "
- " four spaces of "
- " of indentation."
- "\n"
- An indented code
- " code block has "
- " has no ["
- "[info string].\n\n"
- An indented code
- " code block "
- " block cannot "
- cannot interrupt
- " a paragraph, so"
- ", so there must "
- " must be\n"
- "a blank line "
- " line between a "
- " a paragraph and"
- " and a following"
- " indented code "
- " code block.\n"
- (A blank line is
- " line is not "
- " is not needed, "
- "needed, however,"
- "however, between"
- " between a code "
- " a code block "
- " block and a "
- " and a following"
- "\nparagraph.)\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    a simple\n"
- "      indented "
- " code block\n.\n"
- "<pre><code>a "
- "<code>a simple\n"
- "  indented code "
- " code block\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If there is any "
- is any ambiguity
- " between an "
- " interpretation "
- " of indentation\n"
- "as a code block "
- " block and as "
- " as indicating "
- " that material "
- " belongs to a ["
- "[list\nitem]["
- "item][list items"
- "]"
- ", the list item "
- " interpretation "
- " takes "
- takes precedence
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  - foo\n\n"
- "\n    bar\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<p>bar</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1.  foo\n\n"
- "\n    - bar\n.\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<ul>\n"
- "<li>bar</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "The contents of "
- " of a code block"
- " block are "
- " are literal "
- "literal text, "
- " text, and do "
- " and do not get "
- "not get parsed\n"
- "as Markdown:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    <a/>\n"
- "    *hi*\n\n"
- "\n    - one\n.\n"
- "<pre><code>&lt;a"
- ">&lt;a/&gt;\n"
- "*hi*\n\n- one\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here we have "
- "we have three "
- " three chunks "
- chunks separated
- " by blank lines:"
- " lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    chunk1\n\n"
- "\n    chunk2\n  \n"
- "  \n \n \n"
- " \n \n    chunk3\n"
- ".\n"
- "<pre><code>"
- "><code>chunk1\n\n"
- "\nchunk2\n\n\n\n"
- "\n\n\nchunk3\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Any initial "
- "initial spaces "
- " spaces or tabs "
- "or tabs beyond "
- " beyond four "
- " four spaces of "
- " of indentation "
- " will be "
- will be included
- "included in\n"
- "the content, "
- ", even in "
- even in interior
- "interior blank "
- " blank lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    chunk1\n"
- "      \n"
- "      chunk2\n.\n"
- "<pre><code>"
- "><code>chunk1\n"
- "  \n  chunk2\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- An indented code
- " code block "
- " block cannot "
- cannot interrupt
- " a paragraph.  "
- "(This\n"
- "allows hanging "
- "hanging indents "
- "indents and the "
- "and the like.)\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n    bar\n\n.\n"
- "\n.\n<p>Foo\n"
- "<p>Foo\nbar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, any non"
- " any non-blank "
- "-blank line with"
- " with fewer than"
- " than four "
- " four spaces of "
- " of indentation "
- " ends\n"
- "the code block "
- " immediately.  "
- "So a paragraph "
- " may occur "
- " immediately\n"
- "after indented "
- " code:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    foo\nbar\n.\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "And indented "
- " code can occur "
- " immediately "
- " before and "
- " and after other"
- " other kinds of\n"
- "blocks:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "# Heading\n"
- "    foo\nHeading\n"
- "Heading\n------\n"
- "------\n    foo\n"
- "    foo\n----\n.\n"
- "<h1>Heading</h1>"
- "</h1>\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "<h2>Heading</h2>"
- "</h2>\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The first line "
- " line can be "
- " can be preceded"
- preceded by more
- " by more than "
- " than four "
- " four spaces of "
- " of indentation:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "        foo\n"
- "    bar\n.\n"
- "<pre><code>    "
- ">    foo\nbar\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Blank lines "
- " lines preceding"
- " or following an"
- " an indented "
- " code block\n"
- are not included
- "included in it:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\n    \n    foo\n"
- "    foo\n    \n\n.\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Trailing spaces "
- " spaces or tabs "
- "or tabs are "
- " are included in"
- " in the code "
- " code block'"
- "'s content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    foo  \n.\n"
- "<pre><code>foo  "
- ">foo  \n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "## "
- "Fenced code "
- " code blocks\n\n"
- "A "
- "[code fence](@)"
- " is a sequence\n"
- "of at least "
- " least three "
- " consecutive "
- " backtick "
- " characters ("
- "`` ` ``) or\n"
- ") or\ntildes (`~`"
- ").  "
- "(Tildes and "
- " and backticks "
- " cannot be mixed"
- "be mixed.)\nA "
- "[fenced code "
- " code block](@)\n"
- "begins with a "
- " with a code "
- " a code fence, "
- " fence, preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation."
- ".\n\n"
- "The line with "
- " with the "
- " the opening "
- "opening code "
- " code fence may "
- " may optionally "
- " contain some "
- " some text\n"
- "following the "
- " the code fence;"
- " fence; this is "
- "this is trimmed "
- "trimmed of "
- " of leading and "
- " and trailing\n"
- "spaces or tabs "
- "or tabs and "
- " and called the "
- "[info string](@)"
- ". If the ["
- "[info string]"
- "] comes\n"
- after a backtick
- "backtick fence, "
- " fence, it may "
- " it may not "
- "may not contain "
- "contain any "
- " any backtick\n"
- "characters.  "
- "(The reason for "
- " for this "
- this restriction
- " is that "
- " that otherwise\n"
- some inline code
- " code would be "
- " be incorrectly "
- " interpreted as "
- " as the\n"
- "beginning of a "
- " of a fenced "
- " fenced code "
- " code block.)\n\n"
- "The content of "
- " of the code "
- " code block "
- " block consists "
- " of all "
- " all subsequent "
- " lines, until\n"
- "a closing ["
- "[code fence]"
- " of the same "
- " same type as "
- type as the code
- "the code block\n"
- began with (
- " with (backticks"
- " or tildes), and"
- "), and with at "
- with at least as
- "least as many "
- " many backticks\n"
- or tildes as the
- " as the opening "
- "opening code "
- " code fence.  "
- "If the leading "
- "leading code "
- " code fence is\n"
- "preceded by N "
- " by N spaces of "
- " of indentation,"
- ", then up to N "
- "up to N spaces "
- " spaces of "
- " of indentation "
- " are\n"
- "removed from "
- " from each line "
- " line of the "
- " of the content "
- "content (if "
- " (if present).  "
- "(If a content "
- "content line is "
- "line is not\n"
- "indented, it is "
- " it is preserved"
- " unchanged.  "
- "If it is "
- " it is indented "
- " N spaces or "
- " or less, all\n"
- "of the "
- " the indentation"
- " is removed.)\n\n"
- The closing code
- " code fence may "
- " may be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation,"
- ", and\n"
- "may be followed "
- " only by spaces "
- " spaces or tabs,"
- "or tabs, which "
- ", which are "
- " are ignored.  "
- "If the end of "
- " end of the\n"
- containing block
- " block (or "
- " (or document) "
- ) is reached and
- " and no closing "
- "closing code "
- " code fence\n"
- "has been found, "
- " found, the code"
- "the code block "
- " block contains "
- " all of the "
- " of the lines "
- " lines after the"
- "\n"
- "opening code "
- " code fence "
- " fence until the"
- " the end of the "
- " the containing "
- " block (or\n"
- "document).  "
- "(An alternative "
- " spec would "
- " would require "
- " backtracking in"
- " in the\n"
- "event that a "
- " that a closing "
- "closing code "
- " code fence is "
- " is not found.  "
- "But this makes "
- " makes parsing\n"
- "much less "
- " less efficient,"
- ", and there "
- " there seems to "
- " to be no real "
- no real downside
- "downside to the\n"
- "behavior "
- " described here."
- " here.)\n\n"
- "A fenced code "
- " code block may "
- " may interrupt a"
- " a paragraph, "
- ", and does not "
- " not require\n"
- "a blank line "
- " line either "
- " either before "
- " before or after"
- "or after.\n\n"
- The content of a
- " of a code fence"
- " fence is "
- " is treated as "
- " as literal text"
- " text, not "
- ", not parsed\n"
- "as inlines.  "
- "The first word "
- " word of the ["
- "[info string]"
- " is typically "
- " used to\n"
- "specify the "
- " the language of"
- " of the code "
- " code sample, "
- "sample, and "
- ", and rendered "
- " in the `class`\n"
- attribute of the
- " of the `code`"
- " tag.  "
- "However, this "
- ", this spec does"
- " does not "
- " not mandate any"
- "\n"
- "particular "
- " treatment of "
- " of the ["
- "[info string].\n\n"
- Here is a simple
- a simple example
- " example with "
- " with backticks:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\n<\n >\n```\n.\n"
- "<pre><code>&lt;\n"
- " &gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "With tildes:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~\n<\n >\n~~~\n.\n"
- "<pre><code>&lt;\n"
- " &gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- Fewer than three
- " three backticks"
- " is not enough:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``\nfoo\n``\n.\n"
- "<p><code>foo</"
- ">foo</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- The closing code
- " code fence must"
- " must use the "
- "use the same "
- " same character "
- " as the opening\n"
- "fence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\naaa\n~~~\n```\n"
- "~~~\n```\n.\n"
- "<pre><code>aaa\n"
- "~~~\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~\naaa\n```\n~~~\n"
- "```\n~~~\n.\n"
- "<pre><code>aaa\n"
- "```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- The closing code
- " code fence must"
- " must be at "
- " be at least as "
- " as long as the "
- " as the opening "
- "opening fence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "````\naaa\n```\n"
- "aaa\n```\n``````\n"
- "``````\n.\n"
- "<pre><code>aaa\n"
- "```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~~\naaa\n~~~\n"
- "aaa\n~~~\n~~~~\n.\n"
- "<pre><code>aaa\n"
- "~~~\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Unclosed code "
- " code blocks are"
- " are closed by "
- " by the end of "
- " end of the "
- " of the document"
- "\n"
- "(or the "
- or the enclosing
- " [block quote]["
- "][block quotes]"
- "] or [list item]"
- "][list items]):"
- "]):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\n.\n"
- "<pre><code></"
- "<code></code></"
- "/code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`````\n\n```\naaa\n"
- "```\naaa\n.\n"
- ".\n<pre><code>\n"
- "```\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> ```\n> aaa\n\n"
- "> aaa\n\nbbb\n.\n"
- ".\n<blockquote>\n"
- "<pre><code>aaa\n"
- "</code></pre>\n"
- "</blockquote>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A code block can
- " can have all "
- " all empty lines"
- " lines as its "
- " as its content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\n\n  \n```\n.\n"
- ".\n<pre><code>\n"
- "  \n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A code block can
- " can be empty:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\n```\n.\n"
- "<pre><code></"
- "<code></code></"
- "/code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Fences can be "
- " can be indented"
- "indented.  "
- "If the opening "
- opening fence is
- "fence is "
- " is indented,\n"
- "content lines "
- " lines will have"
- " have equivalent"
- " opening "
- " indentation "
- " removed,\n"
- "if present:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " ```\n aaa\naaa\n"
- "aaa\n```\n.\n"
- "<pre><code>aaa\n"
- "aaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  ```\naaa\n  aaa\n"
- "  aaa\naaa\n  ```\n"
- "  ```\n.\n"
- "<pre><code>aaa\n"
- "aaa\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   ```\n   aaa\n"
- "   aaa\n    aaa\n"
- "    aaa\n  aaa\n"
- "  aaa\n   ```\n.\n"
- "<pre><code>aaa\n"
- " aaa\naaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    ```\n    aaa\n"
- "    aaa\n    ```\n"
- "    ```\n.\n"
- "<pre><code>```\n"
- "aaa\n```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Closing fences "
- " fences may be "
- " may be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation,"
- ", and their\n"
- indentation need
- " need not match "
- " match that of "
- "that of the "
- " of the opening "
- "opening fence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\naaa\n  ```\n.\n"
- "<pre><code>aaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   ```\naaa\n"
- "aaa\n  ```\n.\n"
- "<pre><code>aaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not a "
- " not a closing "
- "closing fence, "
- " fence, because "
- "because it is "
- " it is indented "
- " 4 spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\naaa\n    ```\n"
- "    ```\n.\n"
- "<pre><code>aaa\n"
- "    ```\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- Code fences (
- "fences (opening "
- "opening and "
- " and closing) "
- ) cannot contain
- " contain "
- contain internal
- "internal spaces "
- " spaces or tabs:"
- "or tabs:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``` ```\naaa\n.\n"
- "<p><code> </code"
- "> </code>\n"
- "aaa</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~~~~\naaa\n"
- "aaa\n~~~ ~~\n.\n"
- "<pre><code>aaa\n"
- "~~~ ~~\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Fenced code "
- " code blocks can"
- " can interrupt "
- " paragraphs, and"
- ", and can be "
- " can be followed"
- "\n"
- "directly by "
- " by paragraphs, "
- ", without a "
- " a blank line "
- " line between:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\n```\nbar\n```\n"
- "bar\n```\nbaz\n.\n"
- ".\n<p>foo</p>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Other blocks can
- " can also occur "
- " occur before "
- " before and "
- " and after "
- " after fenced "
- " fenced code "
- " code blocks\n"
- "without an "
- " an intervening "
- " blank line:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\n---\n~~~\nbar\n"
- "~~~\nbar\n~~~\n"
- "bar\n~~~\n# baz\n.\n"
- ".\n<h2>foo</h2>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "<h1>baz</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "An [info string]"
- " can be provided"
- "provided after "
- " after the "
- " the opening "
- "opening code "
- " code fence.\n"
- "Although this "
- " this spec doesn"
- "'"
- "t mandate any "
- " any particular "
- " treatment of\n"
- "the info string,"
- " string, the "
- ", the first word"
- " word is "
- " is typically "
- " used to specify"
- "\n"
- "the language of "
- " of the code "
- " code block. "
- "In HTML output, "
- "output, the "
- ", the language "
- " is\n"
- "normally "
- " indicated by "
- " by adding a "
- " a class to the "
- "`code`"
- " element "
- " consisting\nof "
- "of `language-`"
- " followed by the"
- " by the language"
- "language name.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```ruby\n"
- "def foo(x)\n"
- "  return 3\nend\n"
- "end\n```\n.\n"
- "<pre><code class"
- " class=\"language"
- "language-ruby\">"
- "-ruby\">def foo(x"
- " foo(x)\n"
- "  return 3\nend\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~~    ruby "
- ruby startline=3
- "=3 $%@#$\n"
- "def foo(x)\n"
- "  return 3\nend\n"
- "end\n~~~~~~~\n.\n"
- "<pre><code class"
- " class=\"language"
- "language-ruby\">"
- "-ruby\">def foo(x"
- " foo(x)\n"
- "  return 3\nend\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "````;\n````\n.\n"
- "<pre><code class"
- " class=\"language"
- "language-;\"></"
- "-;\"></code></pre"
- "></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "[Info strings]"
- " for backtick "
- " code blocks "
- " blocks cannot "
- " cannot contain "
- " backticks:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``` aa ```\nfoo\n"
- "foo\n.\n"
- "<p><code>aa</"
- ">aa</code>\n"
- "foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "[Info strings]"
- " for tilde code "
- " code blocks can"
- " can contain "
- " backticks and "
- " and tildes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "~~~ aa ``` ~~~\n"
- "foo\n~~~\n.\n"
- "<pre><code class"
- " class=\"language"
- "language-aa\">foo"
- "-aa\">foo\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Closing code "
- " code fences "
- " fences cannot "
- " cannot have ["
- "[info strings]:"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\n``` aaa\n```\n"
- "```\n.\n"
- "<pre><code>``` "
- ">``` aaa\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "## HTML blocks\n\n"
- "An "
- "[HTML block](@)"
- " is a group of "
- " of lines that "
- " that is treated"
- "\n"
- as raw HTML (and
- " (and will not "
- " not be escaped "
- "escaped in HTML "
- in HTML output).
- "output).\n\n"
- "There are seven "
- " seven kinds of "
- "[HTML block]"
- ", which can be "
- " can be defined "
- defined by their
- "\n"
- "start and end "
- " end conditions."
- ".  "
- The block begins
- " begins with a "
- " with a line "
- " a line that "
- " that meets a\n"
- "[start condition"
- "](@)"
- " (after up to "
- " up to three "
- " three optional "
- " spaces of "
- " of indentation)"
- ").\n"
- It ends with the
- "with the first "
- first subsequent
- " line that meets"
- " meets a "
- meets a matching
- "\n"
- "[end condition]("
- "](@)"
- ", or the last "
- " last line of "
- "line of the "
- " of the document"
- "document, or the"
- ", or the last "
- " last line of\n"
- "the "
- "[container block"
- " block](#"
- "](#container-"
- "-blocks)"
- " containing the "
- " the current "
- "current HTML\n"
- "block, if no "
- ", if no line is "
- " is encountered "
- " that meets the "
- "[end condition]"
- "].  If\n"
- "the first line "
- " line meets both"
- " both the ["
- "[start condition"
- "] and the [end\n"
- "[end\ncondition]"
- ", the block will"
- " will contain "
- "contain just "
- " just that line."
- " line.\n\n"
- "1.  "
- "**Start "
- "Start condition:"
- "**"
- "  line begins "
- " begins with the"
- "with the string "
- "`<pre`,\n"
- ",\n`<script`, "
- ", `<style`, or "
- ", or `<textarea`"
- " (case-"
- case-insensitive
- "), followed by a"
- " by a space,\n"
- "a tab, the "
- ", the string `>`"
- ", or the end of "
- " end of the line"
- "the line.\\\n"
- "**End condition:"
- ":**"
- "  line contains "
- " an end tag\n"
- "`</pre>`, "
- ", `</script>`, "
- ", `</style>`"
- ", or "
- "`</textarea>`"
- " (case-"
- case-insensitive
- "; it\n"
- "need not match "
- " match the start"
- " start tag).\n\n"
- "2.  "
- "**Start "
- "Start condition:"
- "**"
- " line begins "
- " begins with the"
- "with the string "
- "`<!--`.\\\n"
- "**End condition:"
- ":**"
- "  line contains "
- " the string "
- "`-->`.\n\n"
- "3.  "
- "**Start "
- "Start condition:"
- "**"
- " line begins "
- " begins with the"
- "with the string "
- "`<?`.\\\n"
- "**End condition:"
- ":**"
- " line contains "
- " the string `?>`"
- "`?>`.\n\n"
- "4.  "
- "**Start "
- "Start condition:"
- "**"
- " line begins "
- " begins with the"
- "with the string "
- "`<!`\n"
- "followed by an "
- " by an ASCII "
- " ASCII letter.\\\n"
- "**End condition:"
- ":**"
- " line contains "
- " the character "
- "`>`.\n\n"
- "5.  "
- "**Start "
- "Start condition:"
- "**"
- "  line begins "
- " begins with the"
- "with the string\n"
- "`<![CDATA[`.\\\n"
- "**End condition:"
- ":**"
- " line contains "
- " the string "
- "`]]>`.\n\n"
- "6.  "
- "**Start "
- "Start condition:"
- "**"
- " line begins "
- " begins with the"
- "with the string "
- "`<` or `</`\n"
- "followed by one "
- " by one of the "
- " of the strings "
- strings (case-
- case-insensitive
- ") `address`,\n"
- ",\n`article`, "
- ", `aside`, "
- ", `base`, "
- ", `basefont`, "
- ", `blockquote`, "
- ", `body`,\n"
- ",\n`caption`, "
- ", `center`, "
- ", `col`, "
- ", `colgroup`, "
- ", `dd`, "
- "`dd`, `details`"
- ", `dialog`,\n"
- ",\n`dir`, `div`, "
- "`div`, `dl`, "
- ", `dl`, `dt`, "
- "`dt`, `fieldset`"
- ", `figcaption`, "
- ", `figure`,\n"
- ",\n`footer`, "
- ", `form`, "
- "`form`, `frame`"
- "`frame`, "
- ", `frameset`,\n"
- ",\n`h1`, `h2`, "
- ", `h2`, `h3`, "
- ", `h3`, `h4`, "
- ", `h4`, `h5`, "
- ", `h5`, `h6`, "
- ", `h6`, `head`, "
- "`head`, `header`"
- "`header`, `hr`,\n"
- ", `hr`,\n`html`, "
- "`html`, `iframe`"
- "`iframe`, "
- ", `legend`, `li`"
- ", `li`, `link`, "
- "`link`, `main`, "
- "`main`, `menu`, "
- ", `menuitem`,\n"
- ",\n`nav`, "
- ", `noframes`, "
- ", `ol`, "
- "`ol`, `optgroup`"
- ", `option`, `p`"
- ", `p`, `param`,\n"
- ",\n`search`, "
- ", `section`, "
- ", `summary`, "
- ", `table`, "
- ", `tbody`, `td`,"
- ", `td`,\n`tfoot`"
- "\n`tfoot`, `th`, "
- ", `th`, `thead`"
- "`thead`, `title`"
- "`title`, `tr`, "
- ", `tr`, `track`"
- "`track`, `ul`"
- ", `ul`, followed"
- "\n"
- "by a space, a "
- ", a tab, the end"
- " the end of the "
- " of the line, "
- " line, the "
- ", the string `>`"
- "`>`, or\n"
- ", or\nthe string "
- "`/>`.\\\n"
- "**End condition:"
- ":**"
- " line is "
- line is followed
- "followed by a ["
- "[blank line].\n\n"
- "7.  "
- "**Start "
- "Start condition:"
- "**"
- "  line begins "
- " begins with a "
- " with a complete"
- "complete ["
- "[open tag]\n"
- "]\n(with any ["
- "[tag name]"
- "] other than "
- "`pre`, `script`,"
- ",\n`style`, or "
- ", or `textarea`"
- ") or a complete "
- "[closing tag],\n"
- followed by zero
- " by zero or more"
- " or more spaces "
- " spaces and tabs"
- "and tabs, "
- " tabs, followed "
- " by the end of "
- " end of the line"
- "the line.\\\n"
- "**End condition:"
- ":**"
- " line is "
- line is followed
- "followed by a ["
- "[blank line].\n\n"
- "HTML blocks "
- " blocks continue"
- "continue until "
- " until they are "
- " are closed by "
- " by their "
- " appropriate\n["
- "[end condition]"
- ", or the last "
- " last line of "
- "line of the "
- " of the document"
- "document or "
- " or other "
- "[container\nblock"
- "](#container-"
- "-blocks)"
- ".  "
- "This means any "
- " any HTML "
- "**within an HTML"
- "\nblock**"
- " that might "
- " might otherwise"
- " be recognised "
- " as a start "
- " start condition"
- " will\n"
- "be ignored by "
- " by the parser "
- " parser and "
- " and passed "
- " passed through "
- "through as-is, "
- " as-is, without "
- without changing
- "\nthe parser'"
- "'s state.\n\n"
- "For instance, "
- "`<pre>`"
- " within an HTML "
- "an HTML block "
- " block started "
- "started by "
- "`<table>`"
- " will not affect"
- "\n"
- the parser state
- " state; as the "
- " as the HTML "
- " HTML block was "
- " was started in "
- " in by start "
- " start condition"
- " 6, it\n"
- "will end at any "
- " at any blank "
- " blank line. "
- "This can be "
- " be surprising:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<table><tr><td>\n"
- "<pre>\n"
- "**Hello**,\n\n"
- "\n_world_.\n"
- "</pre>\n"
- "</td></tr></"
- "></tr></table>\n"
- ".\n"
- "<table><tr><td>\n"
- "<pre>\n"
- "**Hello**,\n"
- "<p><em>world</em"
- "</em>.\n"
- "</pre></p>\n"
- "</td></tr></"
- "></tr></table>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "In this case, "
- " case, the HTML "
- " HTML block is "
- " is terminated "
- " by the blank "
- " blank line — "
- " line — the "
- "`**Hello**`\n"
- "text remains "
- remains verbatim
- "verbatim — and "
- " — and regular "
- "regular parsing "
- "parsing resumes,"
- "resumes, with a "
- with a paragraph
- ",\nemphasised "
- "`world`"
- " and inline and "
- " and block HTML "
- " HTML following."
- ".\n\n"
- "All types of ["
- "[HTML blocks]"
- " except type 7 "
- " type 7 may "
- " 7 may interrupt"
- "\n"
- "a paragraph.  "
- Blocks of type 7
- " type 7 may not "
- " not interrupt a"
- " a paragraph.\n"
- "(This "
- This restriction
- " is intended to "
- " to prevent "
- prevent unwanted
- "unwanted "
- " interpretation\n"
- "of long tags "
- " tags inside a "
- " a wrapped "
- " paragraph as "
- " as starting "
- " HTML blocks.)\n\n"
- "Some simple "
- " simple examples"
- examples follow.
- " follow.  "
- "Here are some "
- " some basic HTML"
- " HTML blocks\n"
- "of type 6:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<table>\n  <tr>\n"
- "  <tr>\n    <td>\n"
- "           hi\n"
- "    </td>\n"
- "  </tr>\n"
- "</table>\n\nokay.\n"
- "\nokay.\n.\n"
- "okay.\n.\n<table>\n"
- "<table>\n  <tr>\n"
- "  <tr>\n    <td>\n"
- "           hi\n"
- "    </td>\n"
- "  </tr>\n"
- "</table>\n"
- "<p>okay.</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " <div>\n"
- "  *hello*\n"
- "         <foo><a"
- "<foo><a>\n.\n"
- ".\n <div>\n"
- "  *hello*\n"
- "         <foo><a"
- "<foo><a>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A block can also
- "can also start "
- " start with a "
- " with a closing "
- "closing tag:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "</div>\n*foo*\n.\n"
- "*foo*\n.\n</div>\n"
- "</div>\n*foo*\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Here we have two
- "have two HTML "
- " HTML blocks "
- " blocks with a "
- " with a Markdown"
- "Markdown "
- " paragraph "
- " between them:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<DIV CLASS=\"foo\""
- "=\"foo\">\n\n"
- "\n*Markdown*\n\n"
- "\n</DIV>\n.\n"
- "<DIV CLASS=\"foo\""
- "=\"foo\">\n"
- "<p><em>Markdown<"
- "</em></p>\n"
- "</DIV>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The tag on the "
- " on the first "
- " first line can "
- " can be partial,"
- "partial, as long"
- "\n"
- "as it is split "
- " split where "
- " where there "
- " there would be "
- " be whitespace:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div id=\"foo\"\n"
- "  class=\"bar\">\n"
- "</div>\n.\n"
- ".\n<div id=\"foo\"\n"
- "  class=\"bar\">\n"
- "</div>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div id=\"foo\" "
- "=\"foo\" class=\""
- " class=\"bar\n"
- "  baz\">\n</div>\n"
- "</div>\n.\n"
- "<div id=\"foo\" "
- "=\"foo\" class=\""
- " class=\"bar\n"
- "  baz\">\n</div>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- An open tag need
- "tag need not be "
- " not be closed:\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div>\n*foo*\n\n"
- "*foo*\n\n*bar*\n.\n"
- "*bar*\n.\n<div>\n"
- ".\n<div>\n*foo*\n"
- "<p><em>bar</em><"
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "A partial tag "
- " tag need not "
- " not even be "
- " be completed ("
- " (garbage\n"
- "in, garbage out)"
- " out):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div id=\"foo\"\n"
- "*hi*\n.\n"
- ".\n<div id=\"foo\"\n"
- "*hi*\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div class\nfoo\n"
- "foo\n.\n"
- ".\n<div class\n"
- "foo\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The initial tag "
- " tag doesn'"
- "t even need to "
- "need to be a "
- "to be a valid\n"
- "tag, as long as "
- "long as it "
- " as it starts "
- " starts like one"
- "like one:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div *???-&&&-<-"
- "?-&&&-<---\n"
- "*foo*\n.\n"
- "<div *???-&&&-<-"
- "?-&&&-<---\n"
- "*foo*\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- In type 6 blocks
- "6 blocks, the "
- ", the initial "
- initial tag need
- "tag need not be "
- " not be on a "
- "be on a line by\n"
- "itself:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div><a href=\""
- "a href=\"bar\">*"
- "=\"bar\">*foo*</a>"
- "foo*</a></div>\n"
- ".\n"
- "<div><a href=\""
- "a href=\"bar\">*"
- "=\"bar\">*foo*</a>"
- "foo*</a></div>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<table><tr><td>\n"
- "foo\n"
- "</td></tr></"
- "></tr></table>\n"
- ".\n"
- "<table><tr><td>\n"
- "foo\n"
- "</td></tr></"
- "></tr></table>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Everything until
- " until the next "
- " next blank line"
- " line or end of "
- " end of document"
- "\n"
- gets included in
- " in the HTML "
- " HTML block.  "
- "So, in the "
- in the following
- "\n"
- "example, what "
- ", what looks "
- " looks like a "
- " like a Markdown"
- "Markdown code "
- " code block\n"
- is actually part
- " part of the "
- " of the HTML "
- " HTML block, "
- " block, which "
- " which continues"
- " until a blank\n"
- "line or the end "
- "the end of the "
- " of the document"
- "document is "
- " is reached:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div></div>\n"
- "``` c\n"
- "int x = 33;\n```\n"
- "```\n.\n"
- ".\n<div></div>\n"
- "``` c\n"
- "int x = 33;\n```\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "To start an ["
- "[HTML block]"
- " with a tag that"
- "tag that is "
- "*not* in the\n"
- list of block-
- " block-level "
- "-level tags in ("
- " in (6), you "
- "6), you must put"
- must put the tag
- " the tag by\n"
- "itself on the "
- " on the first "
- " first line (and"
- " (and it must be"
- " must be "
- must be complete
- "complete):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"foo\">\n"
- "*bar*\n</a>\n.\n"
- "<a href=\"foo\">\n"
- "*bar*\n</a>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- In type 7 blocks
- "7 blocks, the ["
- "[tag name]"
- " can be anything"
- "anything:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<Warning>\n*bar*\n"
- "</Warning>\n.\n"
- ".\n<Warning>\n"
- "*bar*\n"
- "</Warning>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<i class=\"foo\">\n"
- "*bar*\n</i>\n.\n"
- "<i class=\"foo\">\n"
- "*bar*\n</i>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "</ins>\n*bar*\n.\n"
- "*bar*\n.\n</ins>\n"
- "</ins>\n*bar*\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These rules are "
- " are designed to"
- " to allow us to "
- " us to work with"
- " with tags that\n"
- "can function as "
- " as either block"
- " block-level or "
- " or inline-level"
- "-level tags.\n"
- "The `<del>`"
- " tag is a nice "
- " a nice example."
- "example.  "
- "We can surround "
- " content with\n"
- "`<del>`"
- " tags in three "
- " three different"
- " ways.  "
- "In this case, we"
- "case, we get a "
- " get a raw\n"
- "HTML block, "
- " block, because "
- "because the "
- "`<del>`"
- " tag is on a "
- "is on a line by "
- "line by itself:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<del>\n*foo*\n"
- "*foo*\n</del>\n.\n"
- ".\n<del>\n*foo*\n"
- "*foo*\n</del>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "In this case, we"
- "case, we get a "
- " get a raw HTML "
- " HTML block that"
- " that just "
- " just includes\n"
- "the `<del>`"
- " tag (because it"
- " it ends with "
- " with the "
- " the following "
- " blank\n"
- "line).  "
- "So the contents "
- " get interpreted"
- " as CommonMark:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<del>\n\n*foo*\n\n"
- "\n*foo*\n\n</del>\n"
- "\n</del>\n.\n<del>\n"
- "<p><em>foo</em><"
- "</em></p>\n"
- "</del>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Finally, in this"
- " in this case, "
- " case, the "
- "`<del>`"
- " tags are "
- " are interpreted"
- "\nas [raw HTML] "
- "] *inside*"
- " the CommonMark "
- " paragraph.  "
- "(Because\n"
- "the tag is not "
- " is not on a "
- " on a line by "
- "line by itself, "
- "itself, we get "
- " we get inline "
- " inline HTML\n"
- "rather than an ["
- "[HTML block].)\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<del>*foo*</del>"
- "*</del>\n.\n"
- "<p><del><em>foo<"
- "<em>foo</em></"
- "</em></del></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "HTML tags "
- " tags designed "
- " to contain "
- "contain literal "
- "literal content\n"
- "(`pre`, `script`"
- "`script`, "
- ", `style`, "
- ", `textarea`"
- "), comments, "
- ", processing "
- " instructions,\n"
- and declarations
- " are treated "
- treated somewhat
- "somewhat "
- " differently.\n"
- "Instead of "
- " of ending at "
- " at the first "
- " first blank "
- " blank line, "
- " line, these "
- ", these blocks\n"
- end at the first
- " first line "
- " line containing"
- " a corresponding"
- " end tag.\n"
- "As a result, "
- "result, these "
- ", these blocks "
- " blocks can "
- " can contain "
- "contain blank "
- " blank lines:\n\n"
- "A pre tag (type "
- " (type 1):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<pre language=\""
- "=\"haskell\"><code"
- "\"><code>\n"
- "import "
- Text.HTML.TagSou
- "L.TagSoup\n\n"
- "\nmain :: IO ()\n"
- "main = print $ "
- " $ parseTags "
- " tags\n"
- "</code></pre>\n"
- "okay\n.\n"
- "<pre language=\""
- "=\"haskell\"><code"
- "\"><code>\n"
- "import "
- Text.HTML.TagSou
- "L.TagSoup\n\n"
- "\nmain :: IO ()\n"
- "main = print $ "
- " $ parseTags "
- " tags\n"
- "</code></pre>\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A script tag (
- " tag (type 1):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<script type=\""
- " type=\"text/"
- "\"text/javascript"
- "\">\n"
- "// JavaScript "
- " example\n\n"
- document.getElem
- ".getElementById("
- "(\"demo\")."
- "demo\").innerHTML"
- " = \"Hello "
- Hello JavaScript
- "!\";\n</script>\n"
- "okay\n.\n"
- "<script type=\""
- " type=\"text/"
- "\"text/javascript"
- "\">\n"
- "// JavaScript "
- " example\n\n"
- document.getElem
- ".getElementById("
- "(\"demo\")."
- "demo\").innerHTML"
- " = \"Hello "
- Hello JavaScript
- "!\";\n</script>\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A textarea tag (
- " tag (type 1):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<textarea>\n\n"
- "\n*foo*\n\n_bar_\n\n"
- "\n</textarea>\n.\n"
- ".\n<textarea>\n\n"
- "\n*foo*\n\n_bar_\n\n"
- "\n</textarea>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- A style tag (
- " tag (type 1):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<style\n"
- "  type=\"text/css"
- "text/css\">\n"
- "h1 {color:red;}\n"
- "\n"
- "p {color:blue;}\n"
- "</style>\nokay\n.\n"
- "okay\n.\n<style\n"
- "  type=\"text/css"
- "text/css\">\n"
- "h1 {color:red;}\n"
- "\n"
- "p {color:blue;}\n"
- "</style>\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If there is no "
- " is no matching "
- " end tag, the "
- ", the block will"
- " will end at the"
- "\n"
- "end of the "
- " of the document"
- document (or the
- " (or the "
- or the enclosing
- " [block quote]["
- "][block quotes]\n"
- "]\nor [list item]"
- "][list items]):"
- "]):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<style\n"
- "  type=\"text/css"
- "text/css\">\n\nfoo\n"
- "\nfoo\n.\n<style\n"
- "  type=\"text/css"
- "text/css\">\n\nfoo\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> <div>\n> foo\n\n"
- "> foo\n\nbar\n.\n"
- ".\n<blockquote>\n"
- "<div>\nfoo\n"
- "</blockquote>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- <div>\n- foo\n.\n"
- "- foo\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<div>\n"
- "<div>\n</li>\n"
- "<li>foo</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The end tag can "
- tag can occur on
- "occur on the "
- " on the same "
- " same line as "
- "line as the "
- " as the start "
- " start tag:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<style>p{"
- ">p{color:red;}</"
- ";}</style>\n"
- "*foo*\n.\n"
- "<style>p{"
- ">p{color:red;}</"
- ";}</style>\n"
- "<p><em>foo</em><"
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<!-- foo -->*bar"
- " -->*bar*\n*baz*\n"
- "*baz*\n.\n"
- "<!-- foo -->*bar"
- " -->*bar*\n"
- "<p><em>baz</em><"
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that "
- " that anything "
- " on the last "
- " last line after"
- " after the\n"
- "end tag will be "
- will be included
- "included in the "
- "[HTML block]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<script>\nfoo\n"
- "</script>1. *bar"
- ">1. *bar*\n.\n"
- ".\n<script>\nfoo\n"
- "</script>1. *bar"
- ">1. *bar*\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A comment (type "
- " (type 2):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<!-- Foo\n\nbar\n"
- "\nbar\n   baz -->\n"
- "okay\n.\n<!-- Foo\n"
- "\nbar\n   baz -->\n"
- "<p>okay</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "A processing "
- " instruction ("
- " (type 3):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<?php\n\n"
- "\n  echo '>';\n\n?"
- "\n?>\nokay\n.\n<?"
- ".\n<?php\n\n"
- "\n  echo '>';\n\n?"
- "\n?>\n<p>okay</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A declaration (
- " (type 4):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<!DOCTYPE html>\n"
- ".\n<!"
- "<!DOCTYPE html>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "CDATA (type 5):\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<![CDATA[\n"
- function matchwo
- " matchwo(a,b)\n{\n"
- "  if (a < b && a"
- "< b && a < 0) "
- " a < 0) then {\n"
- "    return 1;\n\n"
- "\n  } else {\n\n"
- "\n    return 0;\n"
- "  }\n}\n]]>\nokay\n"
- "okay\n.\n<!["
- ".\n<![CDATA[\n"
- function matchwo
- " matchwo(a,b)\n{\n"
- "  if (a < b && a"
- "< b && a < 0) "
- " a < 0) then {\n"
- "    return 1;\n\n"
- "\n  } else {\n\n"
- "\n    return 0;\n"
- "  }\n}\n]]>\n"
- "]]>\n<p>okay</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The opening tag "
- " tag can be "
- " can be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation,"
- ", but not\nfour:"
- "four:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  <!-- foo -->\n\n"
- "    <!-- foo -->"
- " foo -->\n.\n"
- "  <!-- foo -->\n"
- "<pre><code>&lt;!"
- ">&lt;!-- foo --&"
- " foo --&gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  <div>\n\n"
- "\n    <div>\n.\n"
- ".\n  <div>\n"
- "<pre><code>&lt;"
- ">&lt;div&gt;\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- An HTML block of
- block of types 1
- "--"
- "6 can interrupt "
- " a paragraph, "
- ", and need not "
- " not be\n"
- "preceded by a "
- " by a blank line"
- " line.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n<div>\nbar\n"
- "bar\n</div>\n.\n"
- ".\n<p>Foo</p>\n"
- "<div>\nbar\n"
- "bar\n</div>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, a "
- ", a following "
- " blank line is "
- "line is needed, "
- "needed, except "
- " except at the "
- " at the end of\n"
- "a document, and "
- ", and except for"
- " for blocks of "
- " of types 1--5, "
- "--5, [above]["
- "[above][HTML\n"
- "][HTML\nblock]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div>\nbar\n"
- "bar\n</div>\n"
- "</div>\n*foo*\n.\n"
- "*foo*\n.\n<div>\n"
- ".\n<div>\nbar\n"
- "bar\n</div>\n"
- "</div>\n*foo*\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "HTML blocks of "
- " of type 7 "
- " type 7 cannot "
- cannot interrupt
- " a paragraph:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n"
- "<a href=\"bar\">\n"
- "baz\n.\n<p>Foo\n"
- "<a href=\"bar\">\n"
- "baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This rule "
- " rule differs "
- "differs from "
- " from John "
- " John Gruber'"
- "s original "
- " Markdown syntax"
- "\n"
- "specification, "
- ", which says:\n\n"
- "> "
- "The only "
- " restrictions "
- " are that block-"
- " block-level "
- "-level HTML "
- " HTML elements —"
- "\n> e.g. `<div>`"
- "`<div>`, "
- ", `<table>`, "
- ", `<pre>`, `<p>`"
- ", etc. — must be"
- " must be "
- " be separated "
- " from\n> "
- "surrounding "
- " content by "
- " by blank lines,"
- " lines, and the "
- "and the start "
- " start and end "
- "and end tags of "
- "tags of the\n> "
- block should not
- " not be indented"
- "indented with "
- " with spaces or "
- " or tabs.\n\n"
- "In some ways "
- " ways Gruber'"
- "s rule is more "
- more restrictive
- " than the one "
- "the one given\n"
- "here:\n\n"
- "- "
- It requires that
- " that an HTML "
- an HTML block be
- "block be "
- " be preceded by "
- " by a blank line"
- " line.\n"
- "- "
- "It does not "
- " not allow the "
- " the start tag "
- " tag to be "
- " to be indented."
- ".\n"
- "- "
- "It requires a "
- " a matching end "
- " end tag, which "
- ", which it also "
- it also does not
- "does not allow "
- " allow to\n  "
- "be indented.\n\n"
- "Most Markdown "
- " implementations"
- " (including some"
- " some of Gruber'"
- "'s own) do not\n"
- "respect all of "
- " all of these "
- " restrictions.\n\n"
- "There is one "
- " is one respect,"
- "respect, however"
- " however, in "
- ", in which "
- " which Gruber'"
- "s rule is more "
- "is more liberal\n"
- "than the one "
- "the one given "
- " given here, "
- " here, since it "
- " it allows blank"
- " blank lines to "
- " to occur inside"
- "\n"
- "an HTML block.  "
- "There are two "
- "are two reasons "
- "reasons for "
- " for disallowing"
- " them here.\n"
- "First, it "
- ", it removes the"
- " the need to "
- "need to parse "
- " parse balanced "
- " tags, which is\n"
- "expensive and "
- " and can require"
- " require "
- " backtracking "
- " from the end of"
- " end of the "
- " of the document"
- "\n"
- "if no matching "
- " end tag is "
- " tag is found. "
- "Second, it "
- ", it provides a "
- " a very simple\n"
- and flexible way
- " way of "
- way of including
- " Markdown "
- " content inside "
- " inside HTML "
- " HTML tags:\n"
- "simply separate "
- " the Markdown "
- " from the HTML "
- " HTML using "
- " using blank "
- " blank lines:\n\n"
- "Compare:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div>\n\n"
- "*Emphasized* "
- "* text.\n\n</div>\n"
- "\n</div>\n.\n<div>\n"
- "<p><em>"
- p><em>Emphasized
- "</em> text.</p>\n"
- "</div>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<div>\n"
- "*Emphasized* "
- "* text.\n</div>\n"
- "</div>\n.\n<div>\n"
- "*Emphasized* "
- "* text.\n</div>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Some Markdown "
- " implementations"
- " have adopted a "
- " a convention of"
- "\n"
- "interpreting "
- " content inside "
- " inside tags as "
- "tags as text if "
- text if the open
- the open tag has
- "\nthe attribute "
- "`markdown=1`"
- ".  "
- "The rule given "
- " given above "
- " above seems a "
- "seems a simpler "
- "simpler and\n"
- more elegant way
- " way of "
- way of achieving
- " the same "
- " same expressive"
- " power, which is"
- "which is also\n"
- "much simpler to "
- " to parse.\n\n"
- "The main "
- " main potential "
- " drawback is "
- " is that one can"
- " one can no "
- " can no longer "
- " longer paste "
- " paste HTML\n"
- "blocks into "
- " into Markdown "
- " documents with "
- " with 100% "
- 100% reliability
- ".  However,\n"
- "*in most cases*"
- " this will work "
- " work fine, "
- " fine, because "
- "because the "
- " the blank lines"
- " lines in\n"
- HTML are usually
- " usually "
- usually followed
- followed by HTML
- " by HTML block "
- " block tags.  "
- "For example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<table>\n\n<tr>\n\n"
- "\n<tr>\n\n<td>\nHi\n"
- "<td>\nHi\n</td>\n\n"
- "</td>\n\n</tr>\n\n"
- "</tr>\n\n</table>\n"
- ".\n<table>\n<tr>\n"
- "<tr>\n<td>\nHi\n"
- "<td>\nHi\n</td>\n"
- "</td>\n</tr>\n"
- "</tr>\n</table>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "There are "
- " are problems, "
- ", however, if "
- ", if the inner "
- " inner tags are "
- " are indented\n"
- "*and*"
- " separated by "
- " by spaces, as "
- ", as then they "
- " they will be "
- " be interpreted "
- " as\n"
- an indented code
- " code block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<table>\n\n  <tr>\n"
- "\n  <tr>\n\n"
- "\n    <td>\n"
- "      Hi\n"
- "    </td>\n\n"
- "\n  </tr>\n\n"
- "\n</table>\n.\n"
- ".\n<table>\n"
- "<table>\n  <tr>\n"
- "<pre><code>&lt;"
- ">&lt;td&gt;\n"
- "  Hi\n"
- "&lt;/td&gt;\n"
- "</code></pre>\n"
- "  </tr>\n"
- "</table>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Fortunately, "
- ", blank lines "
- " lines are "
- " are usually not"
- " not necessary "
- " and can be\n"
- "deleted.  "
- The exception is
- " is inside "
- "`<pre>`"
- " tags, but as "
- but as described
- "\n[above]["
- "][HTML blocks]"
- ", raw HTML "
- " HTML blocks "
- " blocks starting"
- "starting with "
- "`<pre>`\n*can*"
- " contain blank "
- " blank lines.\n\n"
- "## "
- "Link reference "
- " definitions\n\n"
- "A "
- "[link reference "
- " definition](@)\n"
- "consists of a ["
- "[link label]"
- ", optionally "
- " preceded by up "
- " by up to three "
- " three spaces of"
- "\n"
- "indentation, "
- ", followed\n"
- "by a colon (`:`"
- "), optional "
- " spaces or tabs "
- or tabs (
- " tabs (including"
- " up to one\n["
- "[line ending]"
- "]), a ["
- link destination
- "],\n"
- "optional spaces "
- " spaces or tabs "
- or tabs (
- " tabs (including"
- " up to one\n["
- "[line ending]"
- "), and an "
- " and an optional"
- "optional [link\n"
- "[link\ntitle]"
- ", which if it is"
- if it is present
- " present must be"
- " must be "
- " be separated\n"
- "from the ["
- link destination
- "]"
- " by spaces or "
- " or tabs.\n"
- "No further "
- " character may "
- " may occur.\n\n"
- "A ["
- "link reference "
- " definition]\n"
- "does not "
- " not correspond "
- " to a structural"
- " element of a "
- " of a document."
- ".  Instead, it\n"
- "defines a label "
- "a label which "
- " which can be "
- " can be used in "
- "[reference links"
- "]\n"
- and reference-
- "-style [images]"
- " elsewhere in "
- " in the document"
- "document.  [Link"
- "[Link\n"
- "reference "
- " definitions]"
- " can come either"
- " either before "
- " before or after"
- "or after the "
- " the links that "
- " that use\nthem."
- "them.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url \""
- ": /url \"title\"\n\n"
- "\n[foo]\n.\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   [foo]: \n"
- "      /url  \n"
- "           'the "
- "'the title'  \n\n"
- "\n[foo]\n.\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"the "
- "=\"the title\">foo"
- "\">foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[Foo*bar\\]]:my_("
- "\\]]:my_(url) '"
- "(url) 'title ("
- "'title (with "
- " (with parens)'\n"
- "\n[Foo*bar\\]]\n.\n"
- "<p><a href=\"my_("
- "=\"my_(url)\" "
- "(url)\" title=\""
- " title=\"title ("
- "\"title (with "
- " (with parens)\">"
- ")\">Foo*bar]</a><"
- "]</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[Foo bar]:\n"
- "<my url>\n"
- "'title'\n\n"
- "\n[Foo bar]\n.\n"
- "<p><a href=\"my%"
- "=\"my%20url\" "
- "%20url\" title=\""
- " title=\"title\">"
- "\"title\">Foo bar<"
- "Foo bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The title may "
- " may extend over"
- " over multiple "
- " lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url '\n"
- "title\nline1\n"
- "line1\nline2\n'\n\n"
- "'\n\n[foo]\n.\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\"\n"
- "title\nline1\n"
- "line1\nline2\n"
- "\">foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, it may "
- " it may not "
- "may not contain "
- "contain a ["
- "[blank line]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url '"
- ": /url 'title\n\n"
- "with blank line'"
- " line'\n\n[foo]\n.\n"
- "<p>[foo]: /url '"
- ": /url 'title</p"
- "title</p>\n"
- "<p>with blank "
- " blank line'</p>"
- "'</p>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- The title may be
- " may be omitted:"
- "omitted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]:\n/url\n\n"
- "/url\n\n[foo]\n.\n"
- "<p><a href=\"/url"
- "=\"/url\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link "
- link destination
- " may not be "
- " not be omitted:"
- "omitted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]:\n\n[foo]\n.\n"
- ".\n<p>[foo]:</p>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n "
- "However, an "
- ", an empty link "
- link destination
- " may be "
- may be specified
- " using\n "
- "angle brackets:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: <>\n\n"
- "\n[foo]\n.\n"
- "<p><a href=\"\">"
- "href=\"\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "The title must "
- " must be "
- " be separated "
- " from the link "
- link destination
- " by\n"
- "spaces or tabs:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: <bar>(baz"
- "bar>(baz)\n\n"
- "\n[foo]\n.\n"
- "<p>[foo]: <bar>("
- ": <bar>(baz)</p>"
- "baz)</p>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Both title and "
- " and destination"
- " can contain "
- " backslash "
- " escapes\n"
- "and literal "
- " backslashes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url\\bar\\"
- "url\\bar\\*baz \""
- "\\*baz \"foo\\\"bar\\"
- "\\\"bar\\baz\"\n\n"
- "\n[foo]\n.\n"
- "<p><a href=\"/url"
- "=\"/url%5Cbar*baz"
- "*baz\" title=\"foo"
- "=\"foo&quot;bar\\"
- ";bar\\baz\">foo</a"
- "\">foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A link can come "
- " come before its"
- " its "
- " corresponding "
- " definition:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n\n"
- "\n[foo]: url\n.\n"
- "<p><a href=\"url\""
- "=\"url\">foo</a></"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If there are "
- " are several "
- several matching
- "matching "
- " definitions, "
- ", the first one "
- " one takes\n"
- "precedence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n\n"
- "\n[foo]: first\n"
- "[foo]: second\n.\n"
- "<p><a href=\""
- "a href=\"first\">"
- "\"first\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "As noted in the "
- " in the section "
- "section on ["
- "[Links]"
- ", matching of "
- " of labels is\n"
- case-insensitive
- " (see [matches]"
- "matches]).\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[FOO]: /url\n\n"
- "\n[Foo]\n.\n"
- "<p><a href=\"/url"
- "=\"/url\">Foo</a><"
- "Foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[ΑΓΩ]: /φου\n\n"
- "\n[αγω]\n.\n"
- "<p><a href=\"/%CF"
- "=\"/%CF%86%CE%BF%"
- "%CE%BF%CF%85\">"
- "%CF%85\">αγω</a><"
- "αγω</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Whether "
- " something is a "
- "["
- "link reference "
- " definition] is\n"
- "independent of "
- " of whether the "
- " the link "
- " link reference "
- " it defines is\n"
- "used in the "
- " in the document"
- "document.  "
- "Thus, for "
- ", for example, "
- ", the following\n"
- "document "
- " contains just a"
- " just a link "
- a link reference
- " definition, and"
- "\n"
- "no visible "
- "visible content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url\n.\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here is another "
- "another one:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[\nfoo\n]: /url\n"
- "]: /url\nbar\n.\n"
- ".\n<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not a "
- " not a link "
- a link reference
- " definition, "
- ", because there "
- " there are\n"
- characters other
- " other than "
- " than spaces or "
- " or tabs after "
- " after the title"
- " title:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url \""
- ": /url \"title\" "
- "\"title\" ok\n.\n"
- "<p>[foo]: /url &"
- ": /url &quot;"
- " &quot;title&"
- ;title&quot; ok<
- "; ok</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is a link "
- a link reference
- " definition, but"
- ", but it has no "
- " has no title:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url\n"
- "\"title\" ok\n.\n"
- "<p>&quot;title&"
- ;title&quot; ok<
- "; ok</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not a "
- " not a link "
- a link reference
- " definition, "
- ", because it is "
- " it is indented\n"
- "four spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    [foo]: /url "
- "]: /url \"title\"\n"
- "\n[foo]\n.\n"
- "<pre><code>[foo]"
- ">[foo]: /url &"
- ": /url &quot;"
- " &quot;title&"
- ";title&quot;\n"
- "</code></pre>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not a "
- " not a link "
- a link reference
- " definition, "
- ", because it "
- " it occurs "
- " occurs inside\n"
- "a code block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```\n[foo]: /url\n"
- "```\n\n[foo]\n.\n"
- "<pre><code>[foo]"
- ">[foo]: /url\n"
- "</code></pre>\n"
- "<p>[foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A ["
- "link reference "
- " definition]"
- " cannot "
- cannot interrupt
- " a paragraph.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n[bar]: /baz\n"
- "\n[bar]\n.\n<p>Foo\n"
- "[bar]: /baz</p>\n"
- "<p>[bar]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, it can "
- " it can directly"
- "directly follow "
- " follow other "
- " other block "
- " block elements,"
- ", such as "
- such as headings
- "\n"
- "and thematic "
- " breaks, and it "
- " and it need not"
- "need not be "
- " not be followed"
- "followed by a "
- " by a blank line"
- " line.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "# [Foo]\n"
- "[foo]: /url\n"
- "> bar\n.\n"
- "<h1><a href=\"/"
- " href=\"/url\">Foo"
- "url\">Foo</a></h1"
- "</a></h1>\n"
- "<blockquote>\n"
- "<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url\nbar\n"
- "bar\n===\n[foo]\n.\n"
- ".\n<h1>bar</h1>\n"
- "<p><a href=\"/url"
- "=\"/url\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url\n===\n"
- "===\n[foo]\n.\n"
- "[foo]\n.\n<p>===\n"
- "<a href=\"/url\">"
- "=\"/url\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Several ["
- "link reference "
- " definitions]\n"
- "can occur one "
- " one after "
- " after another, "
- ", without "
- " intervening "
- " blank lines.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /foo-url "
- "foo-url \"foo\"\n"
- "[bar]: /bar-url\n"
- "  \"bar\"\n"
- "[baz]: /baz-url\n"
- "\n[foo],\n[bar],\n"
- "[bar],\n[baz]\n.\n"
- "<p><a href=\"/foo"
- "=\"/foo-url\" "
- "-url\" title=\"foo"
- "=\"foo\">foo</a>,\n"
- "<a href=\"/bar-"
- "=\"/bar-url\" "
- "-url\" title=\"bar"
- "=\"bar\">bar</a>,\n"
- "<a href=\"/baz-"
- "=\"/baz-url\">baz<"
- "\">baz</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "["
- "Link reference "
- " definitions]"
- "] can occur\n"
- "inside block "
- block containers
- ", like lists and"
- " and block "
- block quotations
- ".  They\n"
- "affect the "
- " the entire "
- " entire document"
- "document, not "
- ", not just the "
- " the container "
- " in which they\n"
- "are defined:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n\n"
- "\n> [foo]: /url\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\">foo</a><"
- "foo</a></p>\n"
- "<blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## Paragraphs\n\n"
- "A sequence of "
- " of non-blank "
- "-blank lines "
- " lines that "
- " that cannot be "
- " be interpreted "
- " as other\n"
- "kinds of blocks "
- " blocks forms a "
- "[paragraph](@).\n"
- "The contents of "
- " of the "
- of the paragraph
- " are the result "
- " result of "
- " of parsing the\n"
- "paragraph'"
- s raw content as
- " as inlines.  "
- "The paragraph'"
- "'s raw content\n"
- "is formed by "
- by concatenating
- " the lines and "
- " and removing "
- " initial and "
- " and final\n"
- spaces or tabs.
- "\n\n"
- A simple example
- " example with "
- " with two "
- " two paragraphs:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "aaa\n\nbbb\n.\n"
- ".\n<p>aaa</p>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Paragraphs can "
- " can contain "
- contain multiple
- "multiple lines, "
- " lines, but no "
- " but no blank "
- " blank lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "aaa\nbbb\n\nccc\n"
- "\nccc\nddd\n.\n"
- "ddd\n.\n<p>aaa\n"
- "<p>aaa\nbbb</p>\n"
- "bbb</p>\n<p>ccc\n"
- "<p>ccc\nddd</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Multiple blank "
- " blank lines "
- " lines between "
- " paragraphs have"
- " have no effect:"
- " effect:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "aaa\n\n\nbbb\n.\n"
- ".\n<p>aaa</p>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Leading spaces "
- " spaces or tabs "
- "or tabs are "
- " are skipped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  aaa\n bbb\n.\n"
- " bbb\n.\n<p>aaa\n"
- "<p>aaa\nbbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Lines after the "
- " the first may "
- " may be indented"
- "indented any "
- " any amount, "
- "amount, since "
- ", since indented"
- "\n"
- "code blocks "
- " blocks cannot "
- cannot interrupt
- " paragraphs.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "aaa\n"
- "             bbb"
- "bbb\n"
- "                "
- "                "
- "                "
- "               "
- "ccc\n.\n<p>aaa\n"
- "<p>aaa\nbbb\n"
- "bbb\nccc</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, the "
- ", the first line"
- " line may be "
- " may be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation."
- "\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   aaa\nbbb\n.\n"
- "bbb\n.\n<p>aaa\n"
- "<p>aaa\nbbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    aaa\nbbb\n.\n"
- "<pre><code>aaa\n"
- "</code></pre>\n"
- "<p>bbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Final spaces or "
- " or tabs are "
- " are stripped "
- " before inline "
- " inline parsing,"
- "parsing, so a "
- ", so a paragraph"
- "\n"
- "that ends with "
- " with two or "
- " two or more "
- "or more spaces "
- " spaces will not"
- "will not end "
- "not end with a ["
- "[hard line\nbreak"
- "\nbreak]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "aaa     \n"
- "bbb     \n.\n"
- ".\n<p>aaa<br />\n"
- "bbb</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## Blank lines\n\n"
- "[Blank lines]"
- " between block-"
- " block-level "
- "-level elements "
- " are ignored,\n"
- "except for the "
- "for the role "
- " role they play "
- " play in "
- " in determining "
- " whether a [list"
- "[list]\nis [tight"
- "[tight] or ["
- "] or [loose].\n\n"
- "Blank lines at "
- " at the "
- at the beginning
- " and end of the "
- " of the document"
- "document are "
- " are also "
- " also ignored.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  \n\naaa\n  \n\n"
- "aaa\n  \n\n# aaa\n\n"
- "\n# aaa\n\n  \n.\n"
- "  \n.\n<p>aaa</p>\n"
- "<h1>aaa</h1>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "# "
- Container blocks
- "\n\nA "
- "[container block"
- " block](#"
- "](#container-"
- "-blocks)"
- " is a block that"
- " that has other\n"
- "blocks as its "
- " as its contents"
- "contents.  "
- "There are two "
- "are two basic "
- " basic kinds of "
- " of container "
- " blocks:\n["
- "[block quotes]"
- "] and ["
- " and [list items"
- "].\n[Lists]"
- " are meta-"
- " meta-containers"
- " for [list items"
- "].\n\n"
- "We define the "
- " the syntax for "
- " for container "
- " blocks "
- " recursively.  "
- "The general\n"
- "form of the "
- " the definition "
- " is:\n\n"
- "> "
- "If X is a "
- " X is a sequence"
- "sequence of "
- " of blocks, then"
- ", then the "
- " the result of\n"
- "\n> "
- "transforming X "
- " X in such-and-"
- "-and-such a way "
- " a way is a "
- " is a container "
- " of type Y\n> "
- "with these "
- " these blocks as"
- " as its content."
- "content.\n\n"
- "So, we explain "
- "explain what "
- " what counts as "
- " as a block "
- a block quote or
- "quote or list "
- "or list item by "
- " by explaining\n"
- how these can be
- " can be "
- "*generated*"
- " from their "
- " their contents."
- ". "
- "This should "
- " should suffice\n"
- "to define the "
- " the syntax, "
- "syntax, although"
- although it does
- " it does not "
- " not give a "
- " give a recipe "
- " recipe for "
- "*parsing*\n"
- "these "
- " constructions."
- ".  "
- "(A recipe is "
- " is provided "
- " below in the "
- " in the section "
- section entitled
- "\n"
- "[A parsing "
- parsing strategy
- "strategy](#"
- "](#appendix-a-"
- "-a-parsing-"
- parsing-strategy
- "strategy).)\n\n"
- "## Block quotes"
- "\n\nA "
- "[block quote "
- " quote marker](@"
- "](@),\n"
- "optionally "
- " preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation,"
- "\n"
- "consists of (a) "
- " of (a) the "
- a) the character
- " `>`"
- " together with a"
- " with a "
- with a following
- " space of\n"
- "indentation, or "
- ", or (b) a "
- " (b) a single "
- single character
- " `>`"
- " not followed by"
- " by a space of\n"
- "indentation.\n\n"
- "The following "
- " rules define ["
- "[block quotes]:"
- "]:\n\n"
- "1.  "
- "**Basic case.**"
- "  If a string of"
- " of lines *Ls*"
- " constitute a "
- " a sequence\n    "
- of blocks *Bs*
- ", then the "
- " the result of "
- " of prepending a"
- " a [block quote"
- "\n    marker]"
- " to the "
- to the beginning
- " of each line in"
- " line in *Ls*"
- "*Ls*\n    is a "
- "[block quote](#"
- "quote](#block-"
- "(#block-quotes)"
- " containing *Bs*"
- "*Bs*.\n\n"
- "2.  "
- "**Laziness.**"
- "  If a string of"
- " of lines *Ls*"
- " constitute a "
- "[block\n    quote"
- "](#block-quotes)"
- " with contents "
- "*Bs*"
- ", then the "
- " the result of "
- " of deleting\n"
- "\n    "
- "the initial ["
- "block quote "
- " quote marker]"
- "] from one or"
- "\n    "
- "more lines in "
- " in which the "
- " the next "
- " next character "
- " other than a "
- " than a space or"
- "space or tab "
- " or tab after "
- " after the\n    ["
- "block quote "
- " quote marker]"
- "] is ["
- "paragraph "
- " continuation\n"
- "\n    text]"
- " is a block "
- "a block quote "
- " quote with *Bs*"
- " as its content."
- "\n    "
- "[Paragraph "
- " continuation "
- " text](@)"
- " is text\n    "
- "that will be "
- "will be parsed "
- " parsed as part "
- "as part of the "
- " of the content "
- "content of a "
- " of a paragraph,"
- ", but does\n    "
- not occur at the
- " at the "
- at the beginning
- " of the "
- of the paragraph
- ".\n\n"
- "3.  "
- "**"
- Consecutiveness.
- "**"
- "  A document "
- " cannot contain "
- "contain two ["
- "[block\n    "
- "\n    quotes]"
- " in a row unless"
- " unless there is"
- "there is a ["
- "[blank line]"
- "] between them."
- "\n\n"
- "Nothing else "
- " else counts as "
- " as a "
- "[block quote](#"
- "quote](#block-"
- "(#block-quotes)."
- ".\n\n"
- Here is a simple
- a simple example
- " example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> # Foo\n> bar\n"
- "> bar\n> baz\n.\n"
- ".\n<blockquote>\n"
- "<h1>Foo</h1>\n"
- "<p>bar\nbaz</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- The space or tab
- " or tab after "
- " after the `>`"
- " characters can "
- " can be omitted:"
- "omitted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "># Foo\n>bar\n"
- ">bar\n> baz\n.\n"
- ".\n<blockquote>\n"
- "<h1>Foo</h1>\n"
- "<p>bar\nbaz</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The `>`"
- " characters can "
- " can be preceded"
- "preceded by up "
- " by up to three "
- " three spaces of"
- " of indentation:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   > # Foo\n"
- "   > bar\n > baz\n"
- " > baz\n.\n"
- ".\n<blockquote>\n"
- "<h1>Foo</h1>\n"
- "<p>bar\nbaz</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces of "
- " of indentation "
- " is too many:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    > # Foo\n"
- "    > bar\n"
- "    > baz\n.\n"
- "<pre><code>&gt; "
- ">&gt; # Foo\n"
- "&gt; bar\n"
- "&gt; baz\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The Laziness "
- " clause allows "
- " allows us to "
- " us to omit the "
- "`>` before\n["
- "paragraph "
- " continuation "
- " text]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> # Foo\n> bar\n"
- "> bar\nbaz\n.\n"
- ".\n<blockquote>\n"
- "<h1>Foo</h1>\n"
- "<p>bar\nbaz</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A block quote "
- " quote can "
- " can contain "
- "contain some "
- " some lazy and "
- " and some non-"
- " non-lazy\n"
- "continuation "
- " lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> bar\nbaz\n> foo\n"
- "> foo\n.\n"
- ".\n<blockquote>\n"
- "<p>bar\nbaz\n"
- "baz\nfoo</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Laziness only "
- " only applies to"
- " to lines that "
- " that would have"
- " have been "
- " continuations "
- " of\n"
- "paragraphs had "
- " had they been "
- " been prepended "
- " with ["
- "block quote "
- " quote markers]."
- "].\n"
- "For example, the"
- ", the `> `"
- " cannot be "
- " be omitted in "
- " in the second "
- " second line of\n"
- "\n``` markdown\n"
- "> foo\n> ---\n"
- "```\n\n"
- without changing
- "changing the "
- " the meaning:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\n---\n.\n"
- ".\n<blockquote>\n"
- "<p>foo</p>\n"
- "</blockquote>\n"
- "<hr />\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Similarly, if we"
- ", if we omit the"
- "omit the `> `"
- " in the second "
- " second line of\n"
- "\n``` markdown\n"
- "> - foo\n> - bar\n"
- "```\n\n"
- "then the block "
- " block quote "
- " quote ends "
- " ends after the "
- " the first line:"
- " line:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> - foo\n- bar\n.\n"
- ".\n<blockquote>\n"
- "<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n"
- "</blockquote>\n"
- "<ul>\n"
- "<li>bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "For the same "
- " same reason, we"
- ", we can'"
- "'t omit the `> `"
- "`> ` in front of"
- "\n"
- subsequent lines
- " lines of an "
- " of an indented "
- " or fenced code "
- " code block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">     foo\n"
- "    bar\n.\n"
- ".\n<blockquote>\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "</blockquote>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> ```\nfoo\n```\n.\n"
- ".\n<blockquote>\n"
- "<pre><code></"
- "<code></code></"
- "/code></pre>\n"
- "</blockquote>\n"
- "<p>foo</p>\n"
- "<pre><code></"
- "<code></code></"
- "/code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Note that in the
- " in the "
- in the following
- " case, we have a"
- " have a [lazy\n"
- "continuation "
- " line]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\n    - bar\n"
- ".\n<blockquote>\n"
- "<p>foo\n"
- "- bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "To see why, note"
- ", note that in\n\n"
- "```markdown\n"
- "> foo\n"
- ">     - bar\n```\n"
- "```\n\n"
- "the `- bar`"
- " is indented too"
- " too far to "
- " far to start a "
- "start a list, "
- "a list, and can'"
- "'t\n"
- "be an indented "
- " code block "
- " block because "
- because indented
- "indented code "
- " code blocks "
- " blocks cannot\n"
- "interrupt "
- " paragraphs, so "
- ", so it is ["
- "paragraph "
- " continuation "
- " text].\n\n"
- "A block quote "
- " quote can be "
- " can be empty:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">\n.\n"
- ".\n<blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">\n>  \n> \n.\n"
- ".\n<blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A block quote "
- " quote can have "
- " have initial or"
- " or final blank "
- " blank lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">\n> foo\n>  \n.\n"
- ".\n<blockquote>\n"
- "<p>foo</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A blank line "
- " line always "
- always separates
- " block quotes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\n\n> bar\n.\n"
- ".\n<blockquote>\n"
- "<p>foo</p>\n"
- "</blockquote>\n"
- "<blockquote>\n"
- "<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "(Most current "
- current Markdown
- "Markdown "
- " implementations"
- ", including John"
- " John Gruber's\n"
- "'s\noriginal "
- "`Markdown.pl`"
- ", will parse "
- " parse this "
- " this example as"
- " as a single "
- " single block "
- " block quote\n"
- "with two "
- " two paragraphs."
- ".  "
- "But it seems "
- " seems better to"
- " to allow the "
- " the author to "
- " to decide\n"
- "whether two "
- " two block "
- " block quotes or"
- " or one are "
- one are wanted.)
- "wanted.)\n\n"
- "Consecutiveness "
- " means that if "
- "that if we put "
- " we put these "
- " these block "
- " block quotes "
- " quotes together"
- "together,\n"
- "we get a single "
- " single block "
- " block quote:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\n> bar\n.\n"
- ".\n<blockquote>\n"
- "<p>foo\nbar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "To get a block "
- "a block quote "
- " quote with two "
- " two paragraphs,"
- ", use:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> foo\n>\n> bar\n.\n"
- ".\n<blockquote>\n"
- "<p>foo</p>\n"
- "<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Block quotes can
- " can interrupt "
- " paragraphs:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\n> bar\n.\n"
- ".\n<p>foo</p>\n"
- "<blockquote>\n"
- "<p>bar</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "In general, "
- ", blank lines "
- " lines are not "
- "are not needed "
- " needed before "
- " before or after"
- "or after block\n"
- "quotes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> aaa\n***\n> bbb\n"
- "> bbb\n.\n"
- ".\n<blockquote>\n"
- "<p>aaa</p>\n"
- "</blockquote>\n"
- "<hr />\n"
- "<blockquote>\n"
- "<p>bbb</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, because"
- " because of "
- " of laziness, a "
- ", a blank line "
- " line is needed "
- " needed between\n"
- "a block quote "
- " quote and a "
- " and a following"
- " paragraph:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> bar\nbaz\n.\n"
- ".\n<blockquote>\n"
- "<p>bar\nbaz</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> bar\n\nbaz\n.\n"
- ".\n<blockquote>\n"
- "<p>bar</p>\n"
- "</blockquote>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> bar\n>\nbaz\n.\n"
- ".\n<blockquote>\n"
- "<p>bar</p>\n"
- "</blockquote>\n"
- "<p>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "It is a "
- is a consequence
- " of the Laziness"
- "Laziness rule "
- " rule that any "
- " any number\n"
- "of initial `>`"
- s may be omitted
- " omitted on a "
- " a continuation "
- " line of a\n"
- "nested block "
- " block quote:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> > > foo\nbar\n.\n"
- ".\n<blockquote>\n"
- "<blockquote>\n"
- "<blockquote>\n"
- "<p>foo\nbar</p>\n"
- "</blockquote>\n"
- "</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">>> foo\n> bar\n"
- "> bar\n>>baz\n.\n"
- ".\n<blockquote>\n"
- "<blockquote>\n"
- "<blockquote>\n"
- "<p>foo\nbar\n"
- "bar\nbaz</p>\n"
- "</blockquote>\n"
- "</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "When including "
- " an indented "
- " code block in a"
- " in a block "
- "a block quote,\n"
- "remember that "
- " that the ["
- "block quote "
- " quote marker]"
- "] includes\n"
- "\nboth the `>`"
- " and a following"
- " space of "
- " of indentation."
- ".  So "
- "*five spaces*"
- " are needed\n"
- "\nafter the `>`:"
- "`>`:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">     code\n\n"
- "\n>    not code\n"
- ".\n<blockquote>\n"
- "<pre><code>code\n"
- "</code></pre>\n"
- "</blockquote>\n"
- "<blockquote>\n"
- "<p>not code</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "## List items\n\n"
- "A "
- "[list marker](@)"
- " is a\n["
- "bullet list "
- " list marker]"
- "] or an ["
- "ordered list "
- " list marker].\n\n"
- "A "
- "[bullet list "
- " list marker](@)"
- "\nis a `-`, `+`"
- "`-`, `+`, or `*`"
- "`*` character.\n\n"
- "An "
- "[ordered list "
- " list marker](@)"
- "\n"
- is a sequence of
- " of 1--"
- "9 arabic digits "
- " digits (`0-9`"
- "), followed by "
- " by either a\n`.`"
- " character or a "
- "`)`"
- " character.  "
- "(The reason for "
- " for the length\n"
- "limit is that "
- "is that with 10 "
- "with 10 digits "
- " digits we start"
- "we start seeing "
- " seeing integer "
- " overflows\n"
- in some browsers
- "browsers.)\n\n"
- "The following "
- " rules define ["
- "[list items]:\n\n"
- "1.  "
- "**Basic case.**"
- "  If a sequence "
- " of lines *Ls*"
- " constitute a "
- " a sequence of\n"
- "\n    blocks *Bs*"
- " starting with a"
- " with a "
- with a character
- " other than a "
- " than a space or"
- "space or tab, "
- "or tab, and *M*"
- "*M* is\n    "
- a list marker of
- " of width *W*"
- " followed by 1 ≤"
- " by 1 ≤ *N*"
- " ≤ 4 spaces of "
- " of indentation,"
- "\n    "
- "then the result "
- " result of "
- " of prepending "
- "*M*"
- " and the "
- " the following "
- " spaces to the "
- " to the first "
- " first line\n    "
- of *Ls*
- ", and indenting "
- " subsequent "
- " lines of *Ls*"
- "*Ls* by *W + N*"
- " spaces, is a"
- "\n    "
- "list item with "
- "*Bs*"
- " as its contents"
- "contents.  "
- "The type of the "
- " of the list "
- " list item\n    "
- "(bullet or "
- " or ordered) is "
- ") is determined "
- " by the type of "
- type of its list
- its list marker.
- "\n    "
- If the list item
- " item is ordered"
- " ordered, then "
- ", then it is "
- " it is also "
- is also assigned
- assigned a start
- "\n    "
- "number, based on"
- "based on the "
- " on the ordered "
- "ordered list "
- " list marker.\n\n"
- "\n    Exceptions:"
- "\n\n    1. "
- "When the first "
- " first list item"
- " item in a [list"
- "[list]"
- "list] interrupts"
- "\n       "
- a paragraph---
- "that is, when it"
- " when it starts "
- " starts on a "
- " on a line that "
- " that would\n"
- "\n       "
- "otherwise count "
- " count as ["
- "paragraph "
- " continuation "
- " text]---"
- "]---then (a)"
- "then (a)\n       "
- the lines *Ls*
- " must not begin "
- " begin with a "
- " with a blank "
- "a blank line, "
- " line, and (b) "
- "and (b) if\n"
- "\n       "
- the list item is
- " item is ordered"
- " ordered, the "
- ", the start "
- " start number "
- " number must be "
- "must be 1.\n    "
- "2. "
- If any line is a
- " is a ["
- "[thematic break]"
- "]["
- "[thematic breaks"
- "] then\n       "
- that line is not
- " is not a list "
- " a list item.\n\n"
- "For example, let"
- ", let *Ls*"
- " be the lines\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "A paragraph\n"
- "with two lines.\n"
- "\n"
- "    indented "
- " code\n\n"
- "> A block quote."
- " quote.\n.\n"
- "<p>A paragraph\n"
- with two lines.<
- " lines.</p>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<blockquote>\n"
- "<p>A block quote"
- " quote.</p>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- And let *M*
- " be the marker "
- "`1.`, and *N*"
- " = 2.  "
- "Then rule #1 "
- "rule #1 says\n"
- "that the "
- " the following "
- " is an ordered "
- "ordered list "
- " list item with "
- " with start "
- " start number 1,"
- "\n"
- "and the same "
- " same contents "
- " as *Ls*:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1.  A paragraph\n"
- "    with two "
- " two lines.\n\n"
- "        indented"
- "indented code\n\n"
- "    > A block "
- "A block quote.\n"
- ".\n<ol>\n<li>\n"
- "<p>A paragraph\n"
- with two lines.<
- " lines.</p>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<blockquote>\n"
- "<p>A block quote"
- " quote.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The most "
- " most important "
- " thing to notice"
- " notice is that "
- "is that the "
- " the position of"
- "\n"
- "the text after "
- " after the list "
- " list marker "
- " determines how "
- " how much "
- much indentation
- "\n"
- "is needed in "
- " in subsequent "
- " blocks in the "
- " in the list "
- " list item.  "
- "If the list\n"
- "marker takes up "
- " up two spaces "
- " spaces of "
- " of indentation,"
- ", and there are "
- " are three "
- " three spaces "
- " spaces between\n"
- "the list marker "
- " marker and the "
- "and the next "
- " next character "
- " other than a "
- " than a space or"
- "space or tab, "
- "or tab, then "
- ", then blocks\n"
- must be indented
- "indented five "
- " five spaces in "
- " in order to "
- " to fall under "
- " under the list\n"
- "item.\n\n"
- "Here are some "
- " some examples "
- " showing how far"
- " how far content"
- " content must be"
- " must be "
- must be indented
- "indented to be\n"
- "put under the "
- " the list item:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- one\n\n two\n.\n"
- "\n two\n.\n<ul>\n"
- "<li>one</li>\n"
- "</ul>\n"
- "<p>two</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- one\n\n  two\n.\n"
- "  two\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>one</p>\n"
- "<p>two</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " -    one\n\n"
- "\n     two\n.\n"
- ".\n<ul>\n"
- "<li>one</li>\n"
- "</ul>\n"
- "<pre><code> two\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " -    one\n\n"
- "\n      two\n.\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>one</p>\n"
- "<p>two</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "It is tempting "
- " to think of "
- " of this in "
- this in terms of
- terms of columns
- " columns:  the "
- the continuation
- "\n"
- "blocks must be "
- must be indented
- "indented at "
- " at least to the"
- " to the column "
- " column of the "
- " of the first "
- " first character"
- " other than\n"
- "a space or tab "
- " or tab after "
- " after the list "
- " list marker.  "
- "However, that is"
- " that is not "
- " is not quite "
- " quite right.\n"
- "The spaces of "
- " of indentation "
- " after the list "
- " list marker "
- marker determine
- " how much "
- " much relative\n"
- "indentation is "
- " is needed.  "
- "Which column "
- " column this "
- this indentation
- " reaches will "
- " will depend on\n"
- "how the list "
- " list item is "
- item is embedded
- "embedded in "
- " in other "
- " constructions, "
- ", as shown by\n"
- "this example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   > > 1.  one\n"
- ">>\n>>     two\n.\n"
- ".\n<blockquote>\n"
- "<blockquote>\n"
- "<ol>\n<li>\n"
- "<li>\n<p>one</p>\n"
- "<p>two</p>\n"
- "</li>\n</ol>\n"
- "</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here `two`"
- " occurs in the "
- " in the same "
- " same column as "
- " as the list "
- " list marker "
- "`1.`,\n"
- "but is actually "
- " contained in "
- " in the list "
- " list item, "
- " item, because "
- because there is
- "\n"
- "sufficient "
- " indentation "
- " after the last "
- " last containing"
- " blockquote "
- " marker.\n\n"
- "The converse is "
- " is also "
- is also possible
- "possible.  "
- In the following
- " example, the "
- ", the word `two`"
- "`two`\n"
- "occurs far to "
- " far to the "
- " to the right of"
- "right of the "
- " of the initial "
- "initial text of "
- text of the list
- "the list item, "
- "`one`, but\n"
- "it is not "
- " not considered "
- " part of the "
- " of the list "
- " list item, "
- " item, because "
- "because it is "
- " it is not "
- " is not indented"
- "\n"
- "far enough past "
- " past the "
- " the blockquote "
- " marker:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- ">>- one\n>>\n"
- ">>\n  >  > two\n.\n"
- ".\n<blockquote>\n"
- "<blockquote>\n"
- "<ul>\n"
- "<li>one</li>\n"
- "</ul>\n"
- "<p>two</p>\n"
- "</blockquote>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that at "
- "that at least "
- " least one space"
- " space or tab is"
- " tab is needed "
- " needed between "
- between the list
- "the list marker "
- " marker and\n"
- "any following "
- " content, so "
- ", so these are "
- " are not list "
- " list items:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-one\n\n2.two\n.\n"
- ".\n<p>-one</p>\n"
- "<p>2.two</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A list item may "
- " may contain "
- "contain blocks "
- " blocks that are"
- "that are "
- " are separated "
- " by more than\n"
- one blank line.
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n\n\n  bar\n.\n"
- "  bar\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<p>bar</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A list item may "
- " may contain any"
- " any kind of "
- "kind of block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1.  foo\n\n"
- "\n    ```\n"
- "    ```\n    bar\n"
- "    bar\n    ```\n"
- "    ```\n\n"
- "\n    baz\n\n"
- "\n    > bam\n.\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "<p>baz</p>\n"
- "<blockquote>\n"
- "<p>bam</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A list item that
- " that contains "
- " an indented "
- " code block will"
- " will preserve\n"
- "empty lines "
- " lines within "
- " within the code"
- "the code block "
- " block verbatim."
- ".\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- Foo\n\n"
- "\n      bar\n\n\n"
- "\n\n      baz\n.\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>Foo</p>\n"
- "<pre><code>bar\n\n"
- "\n\nbaz\n"
- "</code></pre>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Note that "
- " that ordered "
- "ordered list "
- " list start "
- " start numbers "
- "numbers must be "
- "must be nine "
- "be nine digits "
- " digits or less:"
- "or less:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "123456789. ok\n.\n"
- "<ol start=\""
- "start=\"123456789"
- "\">\n<li>ok</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1234567890. not "
- ". not ok\n.\n"
- "<p>1234567890. "
- ". not ok</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A start number "
- " number may "
- " may begin with "
- " with 0s:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "0. ok\n.\n"
- "<ol start=\"0\">\n"
- "<li>ok</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "003. ok\n.\n"
- "<ol start=\"3\">\n"
- "<li>ok</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A start number "
- " number may not "
- "may not be "
- " not be negative"
- "negative:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-1. not ok\n.\n"
- "<p>-1. not ok</p"
- " ok</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "2.  "
- "**Item starting "
- " with indented "
- " code.**"
- "  If a sequence "
- " of lines *Ls*"
- "*Ls*\n    "
- "constitute a "
- " a sequence of "
- " of blocks *Bs*"
- " starting with "
- " with an "
- with an indented
- "indented code\n"
- "\n    block, and "
- "*M*"
- " is a list "
- " a list marker "
- " marker of width"
- of width *W*
- "*W* followed by"
- "\n    "
- "one space of "
- " of indentation,"
- ", then the "
- " the result of "
- " of prepending "
- "*M* and the\n    "
- "following space "
- " space to the "
- " to the first "
- " first line of "
- "*Ls*"
- ", and indenting "
- " subsequent "
- " lines\n    of "
- "of *Ls* by "
- "*Ls* by *W + 1*"
- " spaces, is a "
- ", is a list item"
- " item with *Bs*"
- " as its contents"
- "contents.\n    "
- "If a line is "
- "line is empty, "
- " empty, then it "
- then it need not
- "need not be "
- " not be indented"
- "indented.  "
- "The type of the\n"
- "\n    "
- list item (
- " item (bullet or"
- " or ordered) is "
- ") is determined "
- " by the type of "
- type of its list
- "\n    "
- "marker.  "
- If the list item
- " item is ordered"
- " ordered, then "
- ", then it is "
- " it is also "
- is also assigned
- "assigned a\n    "
- "start number, "
- "number, based on"
- "based on the "
- " on the ordered "
- "ordered list "
- " list marker.\n\n"
- An indented code
- " code block will"
- " will have to be"
- " to be preceded "
- " by four spaces "
- " spaces of "
- " of indentation\n"
- "beyond the edge "
- " edge of the "
- " of the region "
- " region where "
- " where text will"
- " will be "
- will be included
- "included in the "
- " in the list "
- " list item.\n"
- In the following
- " case that is 6 "
- " is 6 spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n\n"
- "\n      bar\n.\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- And in this case
- " case it is 11 "
- " is 11 spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  10.  foo\n\n"
- "\n           bar\n"
- ".\n"
- "<ol start=\"10\">\n"
- "<li>\n<p>foo</p>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- If the *first*
- " block in the "
- " in the list "
- " list item is an"
- " is an indented "
- " code block,\n"
- "then by rule #2,"
- "rule #2, the "
- "#2, the contents"
- contents must be
- " must be "
- must be preceded
- "preceded by "
- "*one*"
- " space of "
- " of indentation\n"
- "after the list "
- " list marker:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    indented "
- " code\n\n"
- "\nparagraph\n\n"
- "\n    more code\n"
- ".\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<p>paragraph</p>"
- "</p>\n"
- "<pre><code>more "
- ">more code\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1.     indented "
- " code\n\n"
- "\n   paragraph\n\n"
- "       more code"
- " code\n.\n<ol>\n"
- ".\n<ol>\n<li>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<p>paragraph</p>"
- "</p>\n"
- "<pre><code>more "
- ">more code\n"
- "</code></pre>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that an "
- " an additional "
- " space of "
- " of indentation "
- " is interpreted "
- " as space\n"
- "inside the code "
- " code block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- 1.      indented
- "indented code\n\n"
- "\n   paragraph\n\n"
- "       more code"
- " code\n.\n<ol>\n"
- ".\n<ol>\n<li>\n"
- "<pre><code> "
- "><code> indented"
- "indented code\n"
- "</code></pre>\n"
- "<p>paragraph</p>"
- "</p>\n"
- "<pre><code>more "
- ">more code\n"
- "</code></pre>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that rules "
- " rules #1 and #2"
- "1 and #2 only "
- "#2 only apply to"
- "apply to two "
- " to two cases:  "
- "cases:  (a) "
- ":  (a) cases\n"
- "in which the "
- " the lines to be"
- " to be included "
- " in a list item "
- " item begin with"
- " with a\n"
- "character other "
- " other than a "
- " than a space or"
- "space or tab, "
- "or tab, and (b) "
- and (b) cases in
- "cases in which\n"
- "they begin with "
- " with an "
- with an indented
- "indented code\n"
- "block.  "
- "In a case like "
- " like the "
- " the following, "
- ", where the "
- " the first block"
- " block begins "
- " begins with\n"
- "three spaces of "
- " of indentation,"
- ", the rules do "
- " do not allow us"
- allow us to form
- " to form a list "
- " a list item by\n"
- "indenting the "
- " the whole thing"
- " thing and "
- " and prepending "
- " a list marker:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   foo\n\nbar\n.\n"
- ".\n<p>foo</p>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-    foo\n\n  bar\n"
- "\n  bar\n.\n<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n"
- "<p>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not a "
- " a significant "
- " restriction, "
- ", because when a"
- " when a block is"
- "block is "
- " is preceded by "
- " by up to\n"
- "three spaces of "
- " of indentation,"
- ", the "
- " the indentation"
- " can always be "
- " be removed "
- "removed without\n"
- "a change in "
- " interpretation,"
- ", allowing rule "
- " rule #1 to be "
- 1 to be applied.
- "applied.  So, in"
- "\nthe above case:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-  foo\n\n   bar\n"
- "\n   bar\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<p>bar</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "3.  "
- "**Item starting "
- " with a blank "
- a blank line.**
- "  If a sequence "
- " of lines *Ls*"
- "*Ls*\n    "
- "starting with a "
- " with a single ["
- "[blank line]"
- " constitute a ("
- " a (possibly "
- " empty)\n    "
- "sequence of "
- " of blocks *Bs*"
- "*Bs*, and *M*"
- " is a list "
- " a list marker "
- " marker of width"
- "of width *W*,"
- "*W*,\n    "
- "then the result "
- " result of "
- " of prepending "
- "*M*"
- " to the first "
- " first line of "
- "*Ls*, and\n    "
- "preceding "
- " subsequent "
- " lines of *Ls*"
- "*Ls* by *W + 1*"
- " spaces of "
- " of indentation,"
- ", is a\n    "
- "list item with "
- "*Bs*"
- " as its contents"
- "contents.\n    "
- "If a line is "
- "line is empty, "
- " empty, then it "
- then it need not
- "need not be "
- " not be indented"
- "indented.  "
- "The type of the\n"
- "\n    "
- list item (
- " item (bullet or"
- " or ordered) is "
- ") is determined "
- " by the type of "
- type of its list
- "\n    "
- "marker.  "
- If the list item
- " item is ordered"
- " ordered, then "
- ", then it is "
- " it is also "
- is also assigned
- "assigned a\n    "
- "start number, "
- "number, based on"
- "based on the "
- " on the ordered "
- "ordered list "
- " list marker.\n\n"
- "Here are some "
- " some list items"
- " items that "
- " that start with"
- " with a blank "
- a blank line but
- line but are not
- " are not empty:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-\n  foo\n-\n  ```\n"
- "-\n  ```\n  bar\n"
- "  bar\n  ```\n-\n"
- "-\n      baz\n.\n"
- ".\n<ul>\n"
- "<li>foo</li>\n"
- "<li>\n"
- "<pre><code>bar\n"
- "</code></pre>\n"
- "</li>\n<li>\n"
- "<pre><code>baz\n"
- "</code></pre>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "When the list "
- " list item "
- " item starts "
- " starts with a "
- " with a blank "
- "a blank line, "
- " line, the "
- ", the number of "
- " of spaces\n"
- "following the "
- " the list marker"
- " marker doesn'"
- "t change the "
- " the required "
- " indentation:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-   \n  foo\n.\n"
- "  foo\n.\n<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A list item can "
- " can begin with "
- " with at most "
- "at most one "
- " one blank line."
- "\n"
- In the following
- " example, `foo`"
- " is not part of "
- part of the list
- "\nitem:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-\n\n  foo\n.\n<ul>\n"
- "<ul>\n<li></li>\n"
- "</ul>\n"
- "<p>foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Here is an empty
- "an empty bullet "
- " bullet list "
- " list item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n-\n- bar\n.\n"
- "- bar\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li></li>\n"
- "<li>bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "It does not "
- " not matter "
- " matter whether "
- "whether there "
- " there are "
- " are spaces or "
- " or tabs "
- " tabs following "
- " the ["
- "[list marker]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n-   \n"
- "-   \n- bar\n.\n"
- "- bar\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li></li>\n"
- "<li>bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Here is an empty
- an empty ordered
- " ordered list "
- " list item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1. foo\n2.\n"
- "2.\n3. bar\n.\n"
- ".\n<ol>\n"
- "<li>foo</li>\n"
- "<li></li>\n"
- "<li>bar</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A list may start
- " start or end "
- " or end with an "
- "with an empty "
- " empty list item"
- " item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*\n.\n<ul>\n"
- "<ul>\n<li></li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "However, an "
- ", an empty list "
- " list item "
- " item cannot "
- cannot interrupt
- " a paragraph:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\n*\n\nfoo\n1.\n.\n"
- "1.\n.\n<p>foo\n"
- "<p>foo\n*</p>\n"
- "*</p>\n<p>foo\n"
- "<p>foo\n1.</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "4.  "
- "**Indentation.**"
- "  If a sequence "
- " of lines *Ls*"
- " constitutes a "
- " a list item\n"
- "\n    "
- "according to "
- " to rule #1, #2,"
- " #1, #2, or #3, "
- " or #3, then the"
- "then the result "
- " result of "
- " of preceding "
- " each line\n    "
- of *Ls*
- " by up to three "
- " three spaces of"
- " of indentation "
- " (the same for "
- " for each line) "
- " line) also\n    "
- "constitutes a "
- " a list item "
- " item with the "
- " the same "
- " same contents "
- " and attributes."
- ".  If a line is\n"
- "\n    "
- "empty, then it "
- then it need not
- "need not be "
- " not be indented"
- "indented.\n\n"
- "Indented one "
- " one space:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- " 1.  "
- "A paragraph\n"
- "     with two "
- " two lines.\n\n"
- "         "
- "indented code\n\n"
- "     > A block "
- "A block quote.\n"
- ".\n<ol>\n<li>\n"
- "<p>A paragraph\n"
- with two lines.<
- " lines.</p>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<blockquote>\n"
- "<p>A block quote"
- " quote.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Indented two "
- " two spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  1.  "
- "A paragraph\n"
- "      with two "
- " two lines.\n\n"
- "          "
- "indented code\n\n"
- "      > A block "
- "A block quote.\n"
- ".\n<ol>\n<li>\n"
- "<p>A paragraph\n"
- with two lines.<
- " lines.</p>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<blockquote>\n"
- "<p>A block quote"
- " quote.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Indented three "
- " three spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "   1.  "
- "A paragraph\n"
- "       with two "
- " two lines.\n\n"
- "           "
- "indented code\n\n"
- "       > A block"
- " A block quote.\n"
- ".\n<ol>\n<li>\n"
- "<p>A paragraph\n"
- with two lines.<
- " lines.</p>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<blockquote>\n"
- "<p>A block quote"
- " quote.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Four spaces "
- " spaces indent "
- " indent gives a "
- "gives a code "
- " a code block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "    1.  "
- "A paragraph\n"
- "        with two"
- "with two lines.\n"
- "\n"
- "            "
- "indented code\n\n"
- "        > A "
- "> A block quote."
- " quote.\n.\n"
- "<pre><code>1.  "
- "A paragraph\n"
- "    with two "
- " two lines.\n\n"
- "        indented"
- "indented code\n\n"
- "    &gt; A block"
- " A block quote.\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "5.  "
- "**Laziness.**"
- "  If a string of"
- " of lines *Ls*"
- " constitute a "
- "[list\n    item"
- "](#list-items)"
- " with contents "
- "*Bs*"
- ", then the "
- " the result of "
- " of deleting\n"
- "\n    "
- "some or all of "
- " all of the "
- " the indentation"
- " from one or "
- " one or more "
- or more lines in
- "lines in which "
- " which the\n    "
- "next character "
- " other than a "
- " than a space or"
- "space or tab "
- " or tab after "
- " after the "
- " the indentation"
- " is\n    ["
- "paragraph "
- " continuation "
- " text] is a\n    "
- "list item with "
- " with the same "
- " same contents "
- " and attributes."
- ".  "
- "The unindented\n"
- "\n    "
- lines are called
- "\n    "
- "[lazy "
- " continuation "
- " line](@)s.\n\n"
- "Here is an "
- " is an example "
- "example with ["
- "lazy "
- " continuation "
- " lines]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  1.  "
- "A paragraph\n"
- "with two lines.\n"
- "\n"
- "          "
- "indented code\n\n"
- "      > A block "
- "A block quote.\n"
- ".\n<ol>\n<li>\n"
- "<p>A paragraph\n"
- with two lines.<
- " lines.</p>\n"
- "<pre><code>"
- "><code>indented "
- " code\n"
- "</code></pre>\n"
- "<blockquote>\n"
- "<p>A block quote"
- " quote.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Indentation can "
- " can be "
- can be partially
- " deleted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "  1.  "
- "A paragraph\n"
- "    with two "
- " two lines.\n.\n"
- ".\n<ol>\n"
- "<li>A paragraph\n"
- with two lines.<
- " lines.</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These examples "
- " show how "
- " how laziness "
- " can work in "
- "work in nested "
- " structures:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> 1. "
- "> Blockquote\n"
- "continued here.\n"
- ".\n<blockquote>\n"
- "<ol>\n<li>\n"
- "<blockquote>\n"
- "<p>Blockquote\n"
- continued here.<
- " here.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "> 1. "
- "> Blockquote\n"
- "> continued here"
- " here.\n.\n"
- ".\n<blockquote>\n"
- "<ol>\n<li>\n"
- "<blockquote>\n"
- "<p>Blockquote\n"
- continued here.<
- " here.</p>\n"
- "</blockquote>\n"
- "</li>\n</ol>\n"
- "</blockquote>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "6.  "
- "**That's all.**"
- " Nothing that is"
- " that is not "
- " is not counted "
- "counted as a "
- " as a list item "
- " item by rules\n"
- "\n    #1--"
- "--5 counts as a "
- "[list item](#"
- " item](#list-"
- "](#list-items)."
- ".\n\n"
- "The rules for "
- " for sublists "
- " follow from the"
- from the general
- " general rules\n["
- "[above]["
- "][List items]"
- ".  "
- "A sublist must "
- " must be "
- must be indented
- "indented the "
- " the same number"
- "\n"
- "of spaces of "
- " of indentation "
- " a paragraph "
- " would need to "
- "need to be in "
- " be in order to "
- " to be included\n"
- in the list item
- " item.\n\n"
- "So, in this case"
- " case we need "
- "we need two "
- " two spaces "
- " spaces indent:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n  - bar\n"
- "    - baz\n"
- "      - boo\n.\n"
- ".\n<ul>\n<li>foo\n"
- "<li>foo\n<ul>\n"
- "<ul>\n<li>bar\n"
- "<li>bar\n<ul>\n"
- "<ul>\n<li>baz\n"
- "<li>baz\n<ul>\n"
- "<li>boo</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "One is not "
- " is not enough:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n - bar\n"
- " - bar\n  - baz\n"
- "   - boo\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n"
- "<li>baz</li>\n"
- "<li>boo</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here we need "
- "we need four, "
- " four, because "
- because the list
- "the list marker "
- " marker is wider"
- "is wider:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "10) foo\n"
- "    - bar\n.\n"
- "<ol start=\"10\">\n"
- "<li>foo\n<ul>\n"
- "<li>bar</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Three is not "
- " is not enough:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "10) foo\n"
- "   - bar\n.\n"
- "<ol start=\"10\">\n"
- "<li>foo</li>\n"
- "</ol>\n<ul>\n"
- "<li>bar</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A list may be "
- " may be the "
- " be the first "
- " first block in "
- " in a list item:"
- " item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- - foo\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1. - 2. foo\n.\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<ul>\n<li>\n"
- "<ol start=\"2\">\n"
- "<li>foo</li>\n"
- "</ol>\n</li>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A list item can "
- " can contain a "
- " a heading:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- # Foo\n- Bar\n"
- "- Bar\n  ---\n"
- "  ---\n  baz\n.\n"
- "  baz\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<h1>Foo</h1>\n"
- "</li>\n<li>\n"
- "<h2>Bar</h2>\n"
- "baz</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "### Motivation\n\n"
- "John Gruber'"
- "s Markdown spec "
- " spec says the "
- " the following "
- " about list "
- " list items:\n\n"
- "1. \""
- "List markers "
- " typically start"
- " start at the "
- " at the left "
- " left margin, "
- "margin, but may "
- "but may be "
- " may be indented"
- "\n   "
- "by up to three "
- " three spaces. "
- "List markers "
- "markers must be "
- must be followed
- "followed by one "
- " by one or more\n"
- "\n   "
- spaces or a tab.
- "\"\n\n"
- "2. \""
- "To make lists "
- " lists look nice"
- " nice, you can "
- "you can wrap "
- " wrap items with"
- " with hanging "
- hanging indents
- "....\n   "
- "But if you don'"
- "t want to, you "
- "to, you don'"
- "'t have to.\"\n\n"
- "3. \""
- "List items may "
- " may consist of "
- " of multiple "
- " paragraphs. "
- "Each subsequent\n"
- "\n   "
- "paragraph in a "
- " in a list item "
- " item must be "
- must be indented
- "indented by "
- " by either 4 "
- " 4 spaces or one"
- "\n   tab.\"\n\n"
- "4. \""
- It looks nice if
- " nice if you "
- " if you indent "
- " indent every "
- " every line of "
- "line of the "
- " the subsequent "
- " paragraphs,\n   "
- "but here again, "
- " again, Markdown"
- "Markdown will "
- " will allow you "
- " you to be lazy."
- "\"\n\n"
- "5. \""
- "To put a "
- put a blockquote
- " within a list "
- " a list item, "
- " item, the "
- ", the blockquote"
- "'s `>`\n   "
- "delimiters need "
- " need to be "
- " to be indented."
- "\"\n\n"
- "6. \""
- "To put a code "
- " a code block "
- " block within a "
- " a list item, "
- " item, the code "
- " code block "
- " block needs to "
- " to be\n   "
- indented twice —
- " twice — 8 "
- " — 8 spaces or "
- " or two tabs.\"\n\n"
- "These rules "
- " rules specify "
- "specify that a "
- that a paragraph
- " under a list "
- " a list item "
- " item must be "
- must be indented
- "\n"
- four spaces (
- " (presumably, "
- ", from the left "
- " left margin, "
- "margin, rather "
- " rather than the"
- "than the start "
- " start of\n"
- "the list marker,"
- " marker, but "
- ", but this is "
- this is not said
- "not said), and "
- "), and that code"
- " code under a "
- "under a list "
- " a list item\n"
- must be indented
- "indented eight "
- " eight spaces "
- " spaces instead "
- "instead of the "
- " of the usual "
- " usual four.  "
- "They also say\n"
- "that a block "
- "a block quote "
- " quote must be "
- must be indented
- "indented, but "
- ", but not by how"
- " by how much; "
- " much; however, "
- ", the\n"
- "example given "
- " given has four "
- " four spaces "
- " indentation.  "
- Although nothing
- " nothing is said"
- "\n"
- "about other "
- " other kinds of "
- " of block-level "
- "-level content, "
- ", it is "
- " it is certainly"
- " reasonable to\n"
- infer that *all*
- " block elements "
- " under a list "
- " a list item, "
- " item, including"
- " other\n"
- "lists, must be "
- must be indented
- "indented four "
- " four spaces.  "
- "This principle "
- " has been called"
- " called the\n"
- "*four-space rule"
- " rule*.\n\n"
- "The four-space "
- "-space rule is "
- "rule is clear "
- " clear and "
- " and principled,"
- ", and if the "
- if the reference
- "\nimplementation "
- "`Markdown.pl`"
- " had followed it"
- " it, it probably"
- "probably would "
- " would have\n"
- "become the "
- " the standard.  "
- "However, "
- "`Markdown.pl`"
- " allowed "
- " paragraphs and\n"
- "sublists to "
- " to start with "
- " with only two "
- " two spaces "
- " indentation, at"
- ", at least on "
- " on the\n"
- "outer level.  "
- "Worse, its "
- ", its behavior "
- " was "
- was inconsistent
- ": a sublist of "
- " of an\n"
- outer-level list
- " list needed two"
- " two spaces "
- " indentation, "
- ", but a sublist "
- "sublist of this\n"
- "sublist needed "
- " needed three "
- " three spaces.  "
- "It is not "
- " not surprising,"
- ", then, that "
- ", that different"
- "\n"
- "implementations "
- " of Markdown "
- " have developed "
- " very different "
- " rules for\n"
- determining what
- " what comes "
- " comes under a "
- "under a list "
- " a list item.  "
- "(Pandoc and "
- " and python-"
- " python-Markdown"
- "Markdown,\n"
- "for example, "
- ", stuck with "
- " with Gruber'"
- "s syntax "
- " description and"
- " and the four-"
- " four-space\n"
- "rule, while "
- ", while discount"
- "discount, "
- ", redcarpet, "
- ", marked, PHP "
- ", PHP Markdown, "
- ", and others\n"
- "followed "
- "`Markdown.pl`'"
- "s behavior more "
- " more closely.)\n"
- "\n"
- "Unfortunately, "
- ", given the "
- " the divergences"
- " between "
- " implementations"
- ", there\n"
- "is no way to "
- " way to give a "
- " give a spec for"
- "spec for list "
- " list items that"
- " that will be "
- " be guaranteed "
- " not\n"
- "to break any "
- " any existing "
- " documents.  "
- "However, the "
- ", the spec given"
- " given here "
- " here should\n"
- correctly handle
- " handle lists "
- " lists formatted"
- " with either the"
- " the four-space "
- "-space rule or\n"
- "the more "
- " more forgiving "
- "`Markdown.pl`"
- " behavior, "
- ", provided they "
- " they are laid "
- " laid out\n"
- in a way that is
- " that is natural"
- " natural for a "
- " for a human to "
- " to read.\n\n"
- "The strategy "
- " here is to let "
- " to let the "
- "let the width "
- " width and "
- " and indentation"
- " of the list "
- " list marker\n"
- "determine the "
- " the indentation"
- " necessary for "
- " for blocks to "
- " to fall under "
- " under the list\n"
- "item, rather "
- " rather than "
- " than having a "
- " a fixed and "
- " and arbitrary "
- " number.  "
- "The writer can\n"
- "think of the "
- " of the body of "
- body of the list
- the list item as
- " item as a unit "
- " a unit which "
- " which gets "
- " gets indented "
- " to the\n"
- "right enough to "
- " to fit the list"
- "the list marker "
- " marker (and any"
- "(and any "
- " any indentation"
- " on the list\n"
- "marker).  "
- "(The laziness "
- " rule, #5, then "
- "5, then allows "
- " continuation "
- " lines to be\n"
- "unindented if "
- " if needed.)\n\n"
- "This rule is "
- rule is superior
- "superior, we "
- ", we claim, to "
- ", to any rule "
- " rule requiring "
- " a fixed level "
- " level of\n"
- indentation from
- " from the margin"
- " margin.  "
- "The four-space "
- "-space rule is "
- "rule is clear "
- " clear but\n"
- "unnatural. "
- "It is quite "
- " unintuitive "
- " that\n\n"
- "``` markdown\n"
- "- foo\n\n  bar\n\n"
- "\n  bar\n\n  - baz\n"
- "  - baz\n```\n\n"
- should be parsed
- " parsed as two "
- " as two lists "
- " lists with an "
- " an intervening "
- " paragraph,\n\n"
- "``` html\n"
- "<ul>\n"
- "<li>foo</li>\n"
- "</ul>\n"
- "<p>bar</p>\n<ul>\n"
- "<li>baz</li>\n"
- "</ul>\n```\n\n"
- as the four-
- " four-space rule"
- " rule demands, "
- ", rather than a "
- " than a single "
- " single list,\n\n"
- "``` html\n"
- "<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<p>bar</p>\n<ul>\n"
- "<li>baz</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n```\n"
- "```\n\n"
- "The choice of "
- " of four spaces "
- " spaces is "
- " is arbitrary.  "
- "It can be "
- " can be learned,"
- "learned, but it "
- " but it is\n"
- not likely to be
- " to be guessed, "
- ", and it trips "
- " trips up "
- " up beginners "
- " regularly.\n\n"
- Would it help to
- " help to adopt a"
- " adopt a two-"
- " a two-space "
- "-space rule?  "
- "The problem is "
- " is that such\n"
- "a rule, together"
- "together with "
- " with the rule "
- " rule allowing "
- " up to three "
- " three spaces of"
- " of indentation "
- " for\n"
- the initial list
- " list marker, "
- "marker, allows "
- " allows text "
- " text that is "
- that is indented
- "indented "
- "*less than* the\n"
- "original list "
- " list marker to "
- " to be included "
- " in the list "
- " list item. "
- "For example,\n"
- "`Markdown.pl`"
- " parses\n\n"
- "``` markdown\n"
- "   - one\n\n  two\n"
- "```\n\n"
- as a single list
- " list item, with"
- ", with `two`"
- " a continuation "
- " paragraph:\n\n"
- "``` html\n"
- "<ul>\n<li>\n"
- "<li>\n<p>one</p>\n"
- "<p>two</p>\n"
- "</li>\n</ul>\n```\n"
- "```\n\n"
- "and similarly\n"
- "\n``` markdown\n"
- ">   - one\n>\n"
- ">\n>  two\n```\n\n"
- "as\n"
- "\n``` html\n"
- "<blockquote>\n"
- "<ul>\n<li>\n"
- "<li>\n<p>one</p>\n"
- "<p>two</p>\n"
- "</li>\n</ul>\n"
- "</blockquote>\n"
- "```\n\n"
- "This is "
- " is extremely "
- " unintuitive.\n\n"
- "Rather than "
- " than requiring "
- " a fixed indent "
- " indent from the"
- "from the margin,"
- " margin, we "
- ", we could "
- " could require\n"
- a fixed indent (
- "indent (say, two"
- "say, two spaces,"
- " spaces, or even"
- " or even one "
- " one space) from"
- ") from the list "
- " list marker ("
- "marker (which\n"
- "may itself be "
- " be indented).  "
- "This proposal "
- " would remove "
- " remove the last"
- the last anomaly
- "\n"
- "discussed.  "
- "Unlike the spec "
- " spec presented "
- " above, it would"
- "it would count "
- " count the "
- " the following\n"
- "as a list item "
- " item with a "
- " a subparagraph,"
- ", even though "
- " though the "
- " the paragraph "
- "`bar`\n"
- "is not indented "
- " as far as the "
- " as the first "
- " first paragraph"
- " `foo`:\n\n"
- "``` markdown\n"
- " 10. foo\n\n"
- "\n   bar  \n```\n\n"
- "Arguably this "
- " this text does "
- " does read like "
- " like a list "
- " a list item "
- " item with `bar`"
- " as a "
- " a subparagraph,"
- "\n"
- "which may count "
- " count in favor "
- " favor of the "
- " of the proposal"
- "proposal.  "
- "However, on this"
- " on this "
- on this proposal
- "proposal "
- " indented\n"
- "code would have "
- " have to be "
- " to be indented "
- " six spaces "
- " spaces after "
- " after the list "
- " list marker.  "
- "And this\n"
- "would break a "
- "break a lot of "
- " lot of existing"
- "existing "
- " Markdown, which"
- ", which has the "
- "has the pattern:"
- "pattern:\n\n"
- "``` markdown\n"
- "1.  foo\n\n"
- "        indented"
- "indented code\n"
- "```\n\n"
- "where the code "
- " code is "
- code is indented
- "indented eight "
- " eight spaces.  "
- "The spec above, "
- " above, by "
- ", by contrast, "
- ", will\n"
- "parse this text "
- " text as "
- text as expected
- "expected, since "
- ", since the code"
- "the code block'"
- s indentation is
- " is measured\n"
- "from the "
- " the beginning "
- " of `foo`.\n\n"
- "The one case "
- " case that needs"
- " needs special "
- " treatment is a "
- " is a list item "
- " item that "
- "*starts*\n"
- "with indented "
- " code.  "
- "How much "
- much indentation
- " is required in "
- " in that case, "
- " case, since\n"
- "we don't have a "
- "\"first paragraph"
- "\""
- " to measure from"
- " from?  "
- "Rule #2 simply "
- " stipulates\n"
- "that in such "
- "in such cases, "
- " cases, we "
- ", we require one"
- " one space "
- " indentation "
- " from the list "
- " list marker\n"
- "(and then the "
- " the normal four"
- " four spaces for"
- " for the "
- for the indented
- indented code).
- " code).  "
- "This will match "
- " match the\n"
- "four-space rule "
- " rule in cases "
- " cases where the"
- " the list marker"
- " marker plus its"
- plus its initial
- " initial "
- " indentation\n"
- "takes four "
- " four spaces (a "
- " (a common case)"
- " case), but "
- "), but diverge "
- diverge in other
- "in other cases.\n"
- "\n"
- "## Lists\n\n"
- "A [list](@)"
- " is a sequence "
- " of one or more\n"
- "list items ["
- of the same type
- "]"
- ".  "
- "The list items\n"
- may be separated
- " by any number "
- " number of blank"
- "of blank lines.\n"
- "\n"
- "Two list items "
- " items are "
- "[of the same "
- " same type](@)\n"
- "if they begin "
- " begin with a ["
- "[list marker]"
- " of the same "
- " same type.\n"
- Two list markers
- " markers are of "
- " are of the\n"
- same type if (a)
- " if (a) they are"
- "they are bullet "
- " bullet list "
- " list markers "
- "markers using "
- " using the same "
- " same character\n"
- "(`-`, `+`, or "
- "`+`, or `*`"
- ") or (b) they "
- "b) they are "
- " are ordered "
- "ordered list "
- " list numbers "
- numbers with the
- "with the same\n"
- delimiter (
- " (either `.` or "
- "`.` or `)`).\n\n"
- "A list is an "
- "[ordered list](@"
- " list](@)\n"
- "if its "
- " its constituent"
- " list items "
- " items begin "
- " begin with\n["
- "ordered list "
- " list markers]"
- "], and a\n"
- "[bullet list](@)"
- " if its "
- " its constituent"
- " list\n"
- items begin with
- " with ["
- "bullet list "
- " list markers]."
- "].\n\n"
- "The "
- "[start number](@"
- "](@)\nof an ["
- "[ordered list]"
- " is determined "
- " by the list "
- " list number of\n"
- its initial list
- " list item.  "
- "The numbers of "
- " of subsequent "
- " list items are\n"
- "disregarded.\n\n"
- "A list is "
- "[loose](@)"
- " if any of its "
- " its constituent"
- "\n"
- "list items are "
- " are separated "
- " by blank lines,"
- " lines, or if "
- ", or if any of "
- " any of its "
- " its constituent"
- "\n"
- "list items "
- " items directly "
- " contain two "
- " two block-level"
- "-level elements "
- " with a blank "
- "a blank line\n"
- "between them.  "
- Otherwise a list
- " a list is "
- "[tight](@).\n"
- "(The difference "
- " in HTML output "
- " output is that "
- " that paragraphs"
- " in a loose list"
- " list are\n"
- "wrapped in `<p>`"
- " tags, while "
- while paragraphs
- " in a tight list"
- " list are not.)\n"
- "\n"
- "Changing the "
- " the bullet or "
- " or ordered list"
- " list delimiter "
- " starts a new "
- " a new list:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n- bar\n"
- "- bar\n+ baz\n.\n"
- "+ baz\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n"
- "</ul>\n<ul>\n"
- "<li>baz</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1. foo\n2. bar\n"
- "2. bar\n3) baz\n.\n"
- ".\n<ol>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n"
- "</ol>\n"
- "<ol start=\"3\">\n"
- "<li>baz</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "In CommonMark, a"
- ", a list can "
- " can interrupt a"
- " a paragraph. "
- "That is,\n"
- no blank line is
- " line is needed "
- " needed to "
- " to separate a "
- " a paragraph "
- " from a "
- from a following
- "\nlist:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo\n- bar\n- baz\n"
- "- baz\n.\n"
- ".\n<p>Foo</p>\n"
- "<ul>\n"
- "<li>bar</li>\n"
- "<li>baz</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "`Markdown.pl`"
- " does not allow "
- " allow this, "
- " this, through "
- "through fear of "
- " of triggering a"
- " a list\n"
- via a numeral in
- " in a hard-"
- " a hard-wrapped "
- "wrapped line:\n\n"
- "``` markdown\n"
- "The number of "
- " of windows in "
- " in my house is\n"
- "14.  "
- "The number of "
- " of doors is 6.\n"
- "```\n\n"
- "Oddly, though, "
- "`Markdown.pl` "
- " *does*"
- " allow a "
- " a blockquote to"
- "\n"
- "interrupt a "
- " a paragraph, "
- ", even though "
- " though the same"
- "the same "
- " considerations "
- " might\napply.\n\n"
- "In CommonMark, "
- ", we do allow "
- " allow lists to "
- " to interrupt "
- " paragraphs, for"
- "\n"
- "two reasons.  "
- "First, it is "
- ", it is natural "
- "natural and not "
- and not uncommon
- "uncommon for "
- " for people\n"
- "to start lists "
- " lists without "
- "without blank "
- " blank lines:\n\n"
- "``` markdown\n"
- "I need to buy\n"
- "- new shoes\n"
- "- a coat\n"
- "- a plane ticket"
- " ticket\n```\n\n"
- "Second, we are "
- we are attracted
- " to a\n\n"
- "> "
- "[principle of "
- " of uniformity]("
- "](@):\n> "
- "if a chunk of "
- " of text has a "
- " has a certain\n"
- "\n> "
- "meaning, it will"
- " it will "
- it will continue
- continue to have
- " to have the "
- " the same "
- " same meaning "
- meaning when put
- "when put into a\n"
- "\n> "
- "container block "
- " block (such as "
- "such as a list "
- " a list item or "
- " or blockquote)."
- ").\n\n"
- "(Indeed, the "
- ", the spec for ["
- "[list items]"
- "] and ["
- "[block quotes]"
- "] presupposes\n"
- this principle.)
- ".) "
- "This principle "
- " implies that if"
- " that if\n\n"
- "``` markdown\n"
- "  * I need to "
- "need to buy\n"
- "    - new shoes\n"
- "    - a coat\n"
- "    - a plane "
- "a plane ticket\n"
- "```\n\n"
- "is a list item "
- " item containing"
- " a paragraph "
- " followed by a "
- " by a nested "
- " nested sublist,"
- "\n"
- "as all Markdown "
- " implementations"
- " agree it is ("
- " it is (though "
- "(though the "
- " the paragraph\n"
- "may be rendered "
- " without `<p>`"
- " tags, since the"
- " the list is \""
- "\"tight\"),\nthen\n\n"
- "``` markdown\n"
- "I need to buy\n"
- "- new shoes\n"
- "- a coat\n"
- "- a plane ticket"
- " ticket\n```\n\n"
- by itself should
- " should be a "
- " be a paragraph "
- " followed by a "
- " by a nested "
- " nested sublist."
- "sublist.\n\n"
- Since it is well
- " is well "
- well established
- " Markdown "
- " practice to "
- " to allow lists "
- " lists to\n"
- "interrupt "
- " paragraphs "
- " inside list "
- " list items, the"
- ", the ["
- "[principle of\n"
- "\nuniformity]"
- " requires us to "
- " us to allow "
- " allow this "
- " this outside "
- "outside list "
- " list items as\n"
- well.  (
- "["
- reStructuredText
- "](https://"
- docutils.sourcef
- ".sourceforge.net"
- "/rst.html)\n"
- "takes a "
- " a different "
- " approach, "
- ", requiring "
- " blank lines "
- " lines before "
- " before lists\n"
- "even inside "
- " inside other "
- " other list "
- " list items.)\n\n"
- "In order to "
- " to solve the "
- " the problem of "
- " of unwanted "
- " lists in "
- " in paragraphs "
- " with\n"
- "hard-wrapped "
- wrapped numerals
- "numerals, we "
- ", we allow only "
- " only lists "
- " lists starting "
- " with `1` to\n"
- "interrupt "
- " paragraphs.  "
- "Thus,\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "The number of "
- " of windows in "
- " in my house is\n"
- "14.  "
- "The number of "
- " of doors is 6.\n"
- ".\n"
- "<p>The number of"
- " of windows in "
- " in my house is\n"
- "14.  "
- "The number of "
- " of doors is 6.<"
- " is 6.</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- We may still get
- " get an "
- " an unintended "
- " result in cases"
- "in cases like\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "The number of "
- " of windows in "
- " in my house is\n"
- "1.  "
- "The number of "
- " of doors is 6.\n"
- ".\n"
- "<p>The number of"
- " of windows in "
- " in my house is<"
- " is</p>\n<ol>\n"
- "<li>The number "
- " number of doors"
- of doors is 6.</
- " is 6.</li>\n"
- "</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "but this rule "
- " rule should "
- " should prevent "
- "prevent most "
- " most spurious "
- " list captures.\n"
- "\n"
- There can be any
- " be any number "
- " number of blank"
- "of blank lines "
- " lines between "
- "between items:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n\n- bar\n\n\n"
- "- bar\n\n\n- baz\n.\n"
- "- baz\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>bar</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>baz</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n  - bar\n"
- "    - baz\n\n\n"
- "\n\n      bim\n.\n"
- ".\n<ul>\n<li>foo\n"
- "<li>foo\n<ul>\n"
- "<ul>\n<li>bar\n"
- "<li>bar\n<ul>\n"
- "<ul>\n<li>\n"
- "<li>\n<p>baz</p>\n"
- "<p>bim</p>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "To separate "
- " consecutive "
- " lists of the "
- " of the same "
- " same type, or "
- ", or to separate"
- "separate a\n"
- "list from an "
- from an indented
- "indented code "
- " code block that"
- " that would "
- " would otherwise"
- " be parsed\n"
- "as a "
- " a subparagraph "
- " of the final "
- " final list item"
- " item, you can "
- you can insert a
- "insert a blank "
- "a blank HTML\n"
- "comment:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- foo\n- bar\n\n"
- "- bar\n\n<!-- -->\n"
- "\n- baz\n- bim\n.\n"
- "- bim\n.\n<ul>\n"
- "<li>foo</li>\n"
- "<li>bar</li>\n"
- "</ul>\n<!-- -->\n"
- "<ul>\n"
- "<li>baz</li>\n"
- "<li>bim</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "-   foo\n\n"
- "\n    notcode\n\n"
- "\n-   foo\n\n"
- "\n<!-- -->\n\n"
- "\n    code\n.\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<p>notcode</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "</li>\n</ul>\n"
- "</ul>\n<!-- -->\n"
- "<pre><code>code\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "List items need "
- " need not be "
- " not be indented"
- "indented to the "
- " to the same "
- " same level.  "
- "The following\n"
- "list items will "
- " will be treated"
- " treated as "
- " as items at the"
- " at the same "
- " same list level"
- " level,\n"
- "since none is "
- none is indented
- "indented enough "
- " enough to "
- " to belong to "
- " to the previous"
- "previous list\n"
- "item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n - b\n  - c\n"
- "  - c\n   - d\n"
- "   - d\n  - e\n"
- "  - e\n - f\n- g\n"
- "- g\n.\n<ul>\n"
- "<ul>\n<li>a</li>\n"
- "<li>b</li>\n"
- "<li>c</li>\n"
- "<li>d</li>\n"
- "<li>e</li>\n"
- "<li>f</li>\n"
- "<li>g</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1. a\n\n  2. b\n\n"
- "  2. b\n\n   3. c\n"
- "   3. c\n.\n<ol>\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>b</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>c</p>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Note, however, "
- ", that list "
- " list items may "
- " may not be "
- " not be preceded"
- preceded by more
- " by more than\n"
- "three spaces of "
- " of indentation."
- ".  Here `- e`"
- " is treated as a"
- " as a paragraph "
- " continuation\n"
- "line, because it"
- " it is indented "
- " more than three"
- " three spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n - b\n  - c\n"
- "  - c\n   - d\n"
- "   - d\n    - e\n"
- "    - e\n.\n<ul>\n"
- "<ul>\n<li>a</li>\n"
- "<li>b</li>\n"
- "<li>c</li>\n"
- "<li>d\n- e</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "And here, `3. c`"
- " is treated as "
- " as in indented "
- " code block,\n"
- "because it is "
- " it is indented "
- " four spaces and"
- " and preceded by"
- " by a\n"
- "blank line.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1. a\n\n  2. b\n\n"
- "\n    3. c\n.\n"
- ".\n<ol>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>b</p>\n"
- "</li>\n</ol>\n"
- "<pre><code>3. c\n"
- "</code></pre>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is a loose "
- "a loose list, "
- " list, because "
- because there is
- there is a blank
- " a blank line "
- " line between\n"
- "two of the list "
- " list items:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n- b\n\n- c\n.\n"
- "\n- c\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>b</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>c</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "So is this, with"
- ", with a empty "
- "a empty second "
- " second item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "* a\n*\n\n* c\n.\n"
- "\n* c\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li></li>\n"
- "<li>\n<p>c</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These are loose "
- " loose lists, "
- " lists, even "
- ", even though "
- " though there "
- " there are no "
- " are no blank "
- " blank lines "
- " lines between "
- "between the "
- " the items,\n"
- "because one of "
- " one of the "
- " of the items "
- " items directly "
- " contains two "
- " two block-level"
- "-level elements\n"
- "with a blank "
- "a blank line "
- " line between "
- "between them:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n- b\n\n  c\n"
- "\n  c\n- d\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>b</p>\n"
- "<p>c</p>\n</li>\n"
- "</li>\n<li>\n"
- "<li>\n<p>d</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n- b\n\n"
- "\n  [ref]: /url\n"
- "- d\n.\n<ul>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>b</p>\n"
- "</li>\n<li>\n"
- "<li>\n<p>d</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is a tight "
- "a tight list, "
- " list, because "
- "because the "
- " the blank lines"
- " lines are in a "
- " in a code block"
- " block:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n- ```\n  b\n\n\n"
- "  b\n\n\n  ```\n- c\n"
- "- c\n.\n<ul>\n"
- "<ul>\n<li>a</li>\n"
- "<li>\n"
- "<pre><code>b\n\n\n"
- "\n\n</code></pre>\n"
- "</li>\n"
- "<li>c</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is a tight "
- "a tight list, "
- " list, because "
- "because the "
- " the blank line "
- " line is between"
- " between two\n"
- "paragraphs of a "
- " of a sublist.  "
- "So the sublist "
- sublist is loose
- "is loose while\n"
- "the outer list "
- " list is tight:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n  - b\n\n"
- "  - b\n\n    c\n"
- "\n    c\n- d\n.\n"
- "- d\n.\n<ul>\n"
- ".\n<ul>\n<li>a\n"
- "<li>a\n<ul>\n<li>\n"
- "<li>\n<p>b</p>\n"
- "<p>c</p>\n</li>\n"
- "</li>\n</ul>\n"
- "</ul>\n</li>\n"
- "<li>d</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is a tight "
- "a tight list, "
- " list, because "
- "because the "
- " the blank line "
- " line is inside "
- " inside the\n"
- "block quote:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "* a\n  > b\n  >\n"
- "  >\n* c\n.\n<ul>\n"
- ".\n<ul>\n<li>a\n"
- "<blockquote>\n"
- "<p>b</p>\n"
- "</blockquote>\n"
- "</li>\n"
- "<li>c</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This list is "
- "list is tight, "
- " tight, because "
- "because the "
- " the consecutive"
- " block elements\n"
- "are not "
- " not separated "
- " by blank lines:"
- " lines:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n  > b\n  ```\n"
- "  ```\n  c\n  ```\n"
- "  ```\n- d\n.\n"
- "- d\n.\n<ul>\n"
- ".\n<ul>\n<li>a\n"
- "<blockquote>\n"
- "<p>b</p>\n"
- "</blockquote>\n"
- "<pre><code>c\n"
- "</code></pre>\n"
- "</li>\n"
- "<li>d</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- A single-
- single-paragraph
- " list is tight:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n.\n<ul>\n"
- "<ul>\n<li>a</li>\n"
- "</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n  - b\n.\n"
- "  - b\n.\n<ul>\n"
- ".\n<ul>\n<li>a\n"
- "<li>a\n<ul>\n"
- "<ul>\n<li>b</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This list is "
- "list is loose, "
- " loose, because "
- "because of the "
- " of the blank "
- " blank line "
- " line between "
- "between the\n"
- "two block "
- " block elements "
- " in the list "
- " list item:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "1. ```\n   foo\n"
- "   foo\n   ```\n\n"
- "   ```\n\n   bar\n"
- "\n   bar\n.\n<ol>\n"
- ".\n<ol>\n<li>\n"
- "<pre><code>foo\n"
- "</code></pre>\n"
- "<p>bar</p>\n"
- "</li>\n</ol>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here the outer "
- " outer list is "
- "list is loose, "
- " loose, the "
- ", the inner list"
- " list tight:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "* foo\n  * bar\n\n"
- "\n  baz\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>foo</p>\n"
- "<ul>\n"
- "<li>bar</li>\n"
- "</ul>\n"
- "<p>baz</p>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "- a\n  - b\n  - c\n"
- "  - c\n\n- d\n"
- "\n- d\n  - e\n"
- "  - e\n  - f\n.\n"
- "  - f\n.\n<ul>\n"
- ".\n<ul>\n<li>\n"
- "<li>\n<p>a</p>\n"
- "<ul>\n<li>b</li>\n"
- "<li>c</li>\n"
- "</ul>\n</li>\n"
- "</li>\n<li>\n"
- "<li>\n<p>d</p>\n"
- "<ul>\n<li>e</li>\n"
- "<li>f</li>\n"
- "</ul>\n</li>\n"
- "</li>\n</ul>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "# Inlines\n\n"
- "Inlines are "
- " are parsed "
- " sequentially "
- " from the "
- " the beginning "
- " of the "
- of the character
- "\n"
- "stream to the "
- " to the end ("
- " end (left to "
- "left to right, "
- " right, in left-"
- in left-to-right
- "to-right "
- "-right languages"
- ").\n"
- "Thus, for "
- ", for example, "
- ", in\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`hi`lo`\n.\n"
- "<p><code>hi</"
- ">hi</code>lo`</p"
- ">lo`</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "`hi`"
- " is parsed as "
- " as code, "
- " code, leaving "
- "leaving the "
- " the backtick at"
- " at the end as a"
- end as a literal
- "\nbacktick.\n\n\n\n"
- "## Code spans\n\n"
- "A "
- "[backtick string"
- " string](@)\n"
- "is a string of "
- " of one or more "
- or more backtick
- "backtick "
- " characters ("
- "`` ` ``"
- ") that is "
- "that is neither\n"
- "preceded nor "
- " nor followed by"
- " by a backtick.\n"
- "\nA "
- "A [code span](@)"
- " begins with a "
- " with a backtick"
- "backtick string "
- " string and ends"
- "and ends with\n"
- "a backtick "
- " string of equal"
- of equal length.
- " length.  "
- "The contents of "
- " of the code "
- " code span are\n"
- "the characters "
- " between these "
- " these two "
- " two backtick "
- " strings, "
- ", normalized in "
- " in the\n"
- "following ways:"
- "\n\n- First, ["
- "[line endings]"
- " are converted "
- " to [spaces].\n"
- "- "
- If the resulting
- " string both "
- " both begins "
- "*and*"
- " ends with a ["
- "[space]\n  "
- "character, but "
- ", but does not "
- " not consist "
- consist entirely
- "entirely of ["
- "[space]\n  "
- "characters, a "
- ", a single ["
- "[space]"
- " character is "
- " is removed from"
- " from the\n  "
- front and back.
- " back.  "
- "This allows you "
- " you to include "
- "include code "
- " code that "
- " that begins\n  "
- "or ends with "
- " with backtick "
- " characters, "
- ", which must be "
- " be separated by"
- "\n  "
- "whitespace from "
- " from the "
- " the opening or "
- " or closing "
- closing backtick
- backtick strings
- " strings.\n\n"
- This is a simple
- "a simple code "
- " code span:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`foo`\n.\n"
- "<p><code>foo</"
- ">foo</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here two "
- " two backticks "
- " are used, "
- " used, because "
- because the code
- "the code "
- " code contains a"
- " a backtick.\n"
- "This example "
- "example also "
- also illustrates
- " stripping of a "
- " of a single "
- " single leading "
- "leading and\n"
- "trailing space:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`` foo ` bar ``\n"
- ".\n"
- "<p><code>foo ` "
- ">foo ` bar</code"
- "</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This example "
- "example shows "
- " shows the "
- " the motivation "
- " for stripping "
- " leading and "
- " and trailing\n"
- "spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "` `` `\n.\n"
- "<p><code>``</"
- ">``</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Note that only "
- "*one*"
- " space is "
- " is stripped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`  ``  `\n.\n"
- "<p><code> `` </"
- "> `` </code></p>"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "The stripping "
- " only happens if"
- " if the space is"
- space is on both
- "\n"
- "sides of the "
- " of the string:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "` a`\n.\n"
- "<p><code> a</"
- "> a</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Only [spaces]"
- "], and not ["
- "unicode "
- " whitespace]"
- " in general, are"
- "\n"
- stripped in this
- " in this way:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "` b `\n.\n"
- "<p><code> b </"
- "> b </code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "No stripping "
- " occurs if the "
- " if the code "
- " code span "
- " span contains "
- " only spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "` `\n`  `\n.\n"
- "<p><code> </code"
- "> </code>\n"
- "<code>  </code><"
- "</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "[Line endings]"
- " are treated "
- "treated like "
- " like spaces:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``\nfoo\nbar  \n"
- "bar  \nbaz\n``\n.\n"
- "<p><code>foo bar"
- ">foo bar   baz</"
- "   baz</code></p"
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``\nfoo \n``\n.\n"
- "<p><code>foo </"
- ">foo </code></p>"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Interior spaces "
- " spaces are not "
- " not collapsed:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`foo   bar \n"
- "baz`\n.\n"
- "<p><code>foo   "
- ">foo   bar  baz<"
- "  baz</code></p>"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Note that "
- " that browsers "
- " will typically "
- " collapse "
- " consecutive "
- " spaces\n"
- "when rendering "
- "`<code>`"
- " elements, so it"
- ", so it is "
- " is recommended "
- " that\n"
- "the following "
- " CSS be used:\n\n"
- "\n    "
- "code{white-space"
- "-space: pre-wrap"
- "pre-wrap;}\n\n\n"
- "Note that "
- " that backslash "
- " escapes do not "
- " do not work in "
- "work in code "
- "in code spans. "
- "All backslashes\n"
- "are treated "
- " literally:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`foo\\`bar`\n.\n"
- "<p><code>foo\\</"
- ">foo\\</code>bar`"
- ">bar`</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Backslash "
- " escapes are "
- " are never "
- " never needed, "
- "needed, because "
- "because one can "
- "one can always "
- " always choose a"
- "\nstring of *n*"
- " backtick "
- " characters as "
- " as delimiters, "
- ", where the code"
- "the code does\n"
- "not contain any "
- " any strings of "
- " of exactly *n*"
- " backtick "
- " characters.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "``foo`bar``\n.\n"
- "<p><code>foo`bar"
- ">foo`bar</code><"
- "</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "` foo `` bar `\n"
- ".\n"
- "<p><code>foo `` "
- ">foo `` bar</"
- "`` bar</code></p"
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Code span "
- " span backticks "
- " have higher "
- " precedence than"
- " than any other "
- " other inline\n"
- "constructs "
- " except HTML "
- " HTML tags and "
- " and autolinks."
- ".  "
- "Thus, for "
- ", for example, "
- ", this is\n"
- "not parsed as "
- " as emphasized "
- " text, since the"
- " the second `*`"
- " is part of a "
- " of a code\nspan:"
- "span:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo`*`\n.\n"
- "<p>*foo<code>*</"
- code>*</code></p
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "And this is not "
- " is not parsed "
- " parsed as a "
- " as a link:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[not a `link](/"
- "`link](/foo`)\n.\n"
- "<p>[not a <code>"
- "a <code>link](/"
- ">link](/foo</"
- "](/foo</code>)</"
- "code>)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Code spans, HTML"
- ", HTML tags, and"
- ", and autolinks "
- " have the same "
- " same precedence"
- ".\n"
- "Thus, this is "
- "this is code:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`<a href=\"`\">`\n"
- ".\n"
- "<p><code>&lt;a "
- ">&lt;a href=&"
- a href=&quot;</
- "&quot;</code>&"
- "</code>&quot;&gt"
- "quot;&gt;`</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "But this is an "
- " is an HTML tag:"
- " tag:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"`\">`\n.\n"
- "<p><a href=\"`\">`"
- "=\"`\">`</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- And this is code
- " is code:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`<https://"
- "https://foo.bar."
- "foo.bar.`baz>`\n"
- ".\n"
- "<p><code>&lt;"
- ">&lt;https://"
- "https://foo.bar."
- foo.bar.</code>
- ".</code>baz&gt;`"
- "baz&gt;`</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "But this is an "
- " is an autolink:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<https://foo.bar"
- "/foo.bar.`baz>`\n"
- ".\n"
- "<p><a href=\""
- "a href=\"https://"
- "https://foo.bar."
- "foo.bar.%60baz\">"
- "%60baz\">https://"
- "https://foo.bar."
- "foo.bar.`baz</a>"
- "`baz</a>`</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "When a backtick "
- " string is not "
- " is not closed "
- " closed by a "
- " by a matching "
- " backtick string"
- " string,\n"
- "we just have "
- " have literal "
- " backticks:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "```foo``\n.\n"
- "<p>```foo``</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`foo\n.\n"
- ".\n<p>`foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "The following "
- " case also "
- also illustrates
- " the need for "
- " for opening and"
- "\n"
- closing backtick
- backtick strings
- " strings to be "
- " to be equal in "
- " in length:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`foo``bar``\n.\n"
- "<p>`foo<code>bar"
- code>bar</code><
- "</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- "Emphasis and "
- " and strong "
- " strong emphasis"
- "emphasis\n\n"
- "John Gruber'"
- "'s original "
- "[Markdown syntax"
- "\ndescription"
- "](https://"
- daringfireball.n
- reball.net/
- /projects/
- /markdown/syntax
- "/syntax#em)"
- " says:\n\n"
- "> "
- "Markdown treats "
- treats asterisks
- " (`*`"
- ") and "
- " and underscores"
- " (`_`"
- ") as indicators "
- " of\n> "
- "emphasis. "
- "Text wrapped "
- wrapped with one
- "with one `*` or "
- "`*` or `_`"
- " will be wrapped"
- " wrapped with an"
- " with an HTML\n> "
- "`<em>`"
- " tag; double `*`"
- "`*`'s or `_`'"
- "s will be "
- "will be wrapped "
- "wrapped with an "
- "with an HTML "
- "`<strong>`\n> "
- "\n> tag.\n\n"
- "This is enough "
- " enough for most"
- "for most users, "
- " users, but "
- ", but these "
- " these rules "
- " rules leave "
- " leave much "
- " much undecided,"
- "\n"
- "especially when "
- " when it comes "
- " comes to nested"
- " nested emphasis"
- "emphasis.  "
- "The original\n"
- "`Markdown.pl`"
- " test suite "
- " suite makes it "
- " it clear that "
- " that triple "
- "`***` and\n`___`"
- " delimiters can "
- " can be used for"
- "used for strong "
- " strong emphasis"
- "emphasis, and "
- ", and most\n"
- "implementations "
- " have also "
- " also allowed "
- "allowed the "
- " the following "
- " patterns:\n\n"
- "``` markdown\n"
- "***strong emph**"
- " emph***\n"
- "***strong** in "
- "** in emph*\n"
- "***emph* in "
- "* in strong**\n"
- "**in strong *"
- "strong *emph***\n"
- "*in emph **"
- " emph **strong**"
- "strong***\n```\n\n"
- "The following "
- " patterns are "
- " are less widely"
- " widely "
- widely supported
- ", but the intent"
- "\n"
- "is clear and "
- " and they are "
- " are useful ("
- " (especially in "
- " in contexts "
- " like "
- " bibliography\n"
- "entries):\n\n"
- "``` markdown\n"
- "*emph *with emph"
- " emph* in it*\n"
- "**strong **with "
- " **with strong**"
- strong** in it**
- " in it**\n```\n\n"
- "Many "
- " implementations"
- " have also "
- " also restricted"
- " intraword "
- " emphasis to\n"
- "the `*`"
- " forms, to avoid"
- "to avoid "
- " avoid unwanted "
- " emphasis in "
- " in words "
- words containing
- "\n"
- "internal "
- " underscores.  "
- "(It is best "
- is best practice
- "practice to put "
- " to put these in"
- "these in code\n"
- "spans, but users"
- " users often do "
- " do not.)\n\n"
- "``` markdown\n"
- "internal "
- " emphasis: foo*"
- ": foo*bar*baz\n"
- "no emphasis: "
- ": foo_bar_baz\n"
- "```\n\n"
- "The rules given "
- " given below "
- " below capture "
- "capture all of "
- " all of these "
- " these patterns,"
- ", while allowing"
- "\n"
- "for efficient "
- " parsing "
- " strategies that"
- " that do not "
- do not backtrack
- ".\n\n"
- "First, some "
- some definitions
- ".  A "
- "[delimiter run]("
- " run](@)"
- " is either\n"
- "a sequence of "
- " of one or more "
- "`*`"
- " characters that"
- " that is not "
- " is not preceded"
- "preceded or\n"
- "followed by a "
- " by a non-"
- " a non-backslash"
- "-escaped `*`"
- " character, or a"
- ", or a sequence\n"
- "of one or more "
- "`_`"
- " characters that"
- " that is not "
- " is not preceded"
- "preceded or "
- " or followed by\n"
- a non-backslash-
- "-escaped `_`"
- "`_` character.\n\n"
- "A "
- "[left-flanking "
- " delimiter run]("
- " run](@) is\na ["
- "a [delimiter run"
- "]"
- " that is (1) not"
- " (1) not "
- (1) not followed
- "followed by ["
- "Unicode "
- " whitespace],\n"
- "and either (2a) "
- " (2a) not "
- 2a) not followed
- "followed by a ["
- "Unicode "
- " punctuation "
- " character], or\n"
- (2b) followed by
- " by a ["
- "Unicode "
- " punctuation "
- " character] and\n"
- "\npreceded by ["
- "Unicode "
- " whitespace]"
- "] or a ["
- "Unicode "
- " punctuation "
- " character].\n"
- "For purposes of "
- " of this "
- " this definition"
- ", the beginning "
- " and the end of\n"
- "the line count "
- " count as "
- " as Unicode "
- " whitespace.\n\n"
- "A "
- "[right-flanking "
- " delimiter run]("
- " run](@) is\na ["
- "a [delimiter run"
- "]"
- " that is (1) not"
- " (1) not "
- (1) not preceded
- "preceded by ["
- "Unicode "
- " whitespace],\n"
- "and either (2a) "
- " (2a) not "
- 2a) not preceded
- "preceded by a ["
- "Unicode "
- " punctuation "
- " character], or\n"
- (2b) preceded by
- " by a ["
- "Unicode "
- " punctuation "
- " character] and\n"
- "\nfollowed by ["
- "Unicode "
- " whitespace]"
- "] or a ["
- "Unicode "
- " punctuation "
- " character].\n"
- "For purposes of "
- " of this "
- " this definition"
- ", the beginning "
- " and the end of\n"
- "the line count "
- " count as "
- " as Unicode "
- " whitespace.\n\n"
- "Here are some "
- " some examples "
- " of delimiter "
- " runs.\n\n"
- "  - "
- "left-flanking "
- " but not right-"
- " right-flanking:"
- ":\n\n    "
- "```\n    ***abc\n"
- "***abc\n    "
- "      _abc\n    "
- "    **\"abc\"\n    "
- "     _\"abc\"\n"
- "    ```\n\n"
- "  - "
- "right-flanking "
- " but not left-"
- " left-flanking:\n"
- "\n    ```\n    "
- " abc***\n    "
- "     abc_\n    "
- "    \"abc\"**\n    "
- "    \"abc\"_\n"
- "\"abc\"_\n    ```\n\n"
- "  - "
- "Both left and "
- " and right-"
- " right-flanking:"
- ":\n\n    "
- "```\n    "
- " abc***def\n    "
- "    \"abc\"_\"def\"\n"
- "    ```\n\n"
- "  - "
- Neither left nor
- left nor right-
- " right-flanking:"
- ":\n\n    "
- "```\n    "
- "abc *** def\n    "
- "    a _ b\n"
- "a _ b\n    ```\n\n"
- "(The idea of "
- " distinguishing "
- " left-flanking "
- " and right-"
- " right-flanking\n"
- "delimiter runs "
- " runs based on "
- " on the "
- on the character
- " before and the "
- " the character\n"
- after comes from
- " from Roopesh "
- "Roopesh Chander'"
- "'s\n"
- "[vfmd](https://"
- /web.archive.org
- /web/
- /20220608143320/
- "/http://"
- "://www.vfmd.org/"
- /vfmd-spec/
- "/specification/#"
- "/#procedure-for-"
- "-for-identifying"
- "-emphasis-tags)."
- ".\n"
- "vfmd uses the "
- " the terminology"
- " \""
- "emphasis "
- " indicator "
- " string\""
- "\" instead of \""
- "\"delimiter\nrun,\""
- " and its rules "
- " rules for "
- " distinguishing "
- " left- and right"
- " right-flanking "
- " runs\n"
- "are a bit more "
- " more complex "
- complex than the
- "than the ones "
- " ones given here"
- " here.)\n\n"
- "The following "
- " rules define "
- " define emphasis"
- "emphasis and "
- " and strong "
- " strong emphasis"
- "emphasis:\n\n"
- "1.  A single `*`"
- "`*` character "
- "[can open "
- " open emphasis]("
- "](@)\n    "
- iff (if and only
- "and only if) it "
- " if) it is part "
- "is part of a ["
- "left-flanking "
- " delimiter run]."
- "].\n\n"
- "2.  A single `_`"
- "`_` character ["
- "can open "
- " open emphasis]"
- "] iff\n    "
- "it is part of a "
- "["
- "left-flanking "
- " delimiter run]"
- "]\n    "
- "and either (a) "
- " (a) not part of"
- " part of a ["
- "right-flanking "
- " delimiter run]"
- "]\n    "
- or (b) part of a
- " of a ["
- "right-flanking "
- " delimiter run]"
- "]\n    "
- "preceded by a ["
- "Unicode "
- " punctuation "
- " character].\n\n"
- "3.  A single `*`"
- "`*` character "
- "[can close "
- " close emphasis]"
- "](@)\n    "
- "iff it is part "
- "is part of a ["
- "right-flanking "
- " delimiter run]."
- "].\n\n"
- "4.  A single `_`"
- "`_` character ["
- "can close "
- " close emphasis]"
- "] iff\n    "
- "it is part of a "
- "["
- "right-flanking "
- " delimiter run]"
- "]\n    "
- "and either (a) "
- " (a) not part of"
- " part of a ["
- "left-flanking "
- " delimiter run]"
- "]\n    "
- or (b) part of a
- " of a ["
- "left-flanking "
- " delimiter run]"
- "]\n    "
- "followed by a ["
- "Unicode "
- " punctuation "
- " character].\n\n"
- "5.  A double "
- "`**` "
- "[can open strong"
- " strong emphasis"
- "emphasis](@)\n"
- "\n    "
- "iff it is part "
- "is part of a ["
- "left-flanking "
- " delimiter run]."
- "].\n\n"
- "6.  A double "
- "`__` ["
- "can open strong "
- " strong emphasis"
- "] iff\n    "
- "it is part of a "
- "["
- "left-flanking "
- " delimiter run]"
- "]\n    "
- "and either (a) "
- " (a) not part of"
- " part of a ["
- "right-flanking "
- " delimiter run]"
- "]\n    "
- or (b) part of a
- " of a ["
- "right-flanking "
- " delimiter run]"
- "]\n    "
- "preceded by a ["
- "Unicode "
- " punctuation "
- " character].\n\n"
- "7.  A double "
- "`**` "
- "[can close "
- " close strong "
- " strong emphasis"
- "emphasis](@)\n"
- "\n    "
- "iff it is part "
- "is part of a ["
- "right-flanking "
- " delimiter run]."
- "].\n\n"
- "8.  A double "
- "`__` ["
- can close strong
- " strong emphasis"
- "] iff\n    "
- "it is part of a "
- "["
- "right-flanking "
- " delimiter run]"
- "]\n    "
- "and either (a) "
- " (a) not part of"
- " part of a ["
- "left-flanking "
- " delimiter run]"
- "]\n    "
- or (b) part of a
- " of a ["
- "left-flanking "
- " delimiter run]"
- "]\n    "
- "followed by a ["
- "Unicode "
- " punctuation "
- " character].\n\n"
- "9.  "
- "Emphasis begins "
- " begins with a "
- with a delimiter
- " that ["
- "can open "
- " open emphasis]"
- "] and ends\n    "
- with a delimiter
- " that ["
- "can close "
- " close emphasis]"
- ", and that uses "
- " uses the same\n"
- "\n    character ("
- "`_` or `*`"
- ) as the opening
- " opening "
- " delimiter.  The"
- "\n    "
- "opening and "
- " and closing "
- " delimiters must"
- " must belong to "
- " to separate\n"
- "\n    ["
- "[delimiter runs]"
- ".  "
- "If one of the "
- " the delimiters "
- " can both\n    "
- "open and close "
- " close emphasis,"
- ", then the sum "
- "the sum of the "
- " of the lengths "
- "lengths of the\n"
- "\n    "
- "delimiter runs "
- " runs containing"
- " the opening and"
- " and closing "
- " delimiters\n    "
- "must not be a "
- " be a multiple "
- " of 3 unless "
- " unless both "
- " both lengths "
- "lengths are\n    "
- multiples of 3.
- "\n\n10. "
- "Strong emphasis "
- " begins with a "
- with a delimiter
- " that\n    ["
- "can open strong "
- " strong emphasis"
- "]"
- " and ends with a"
- " with a "
- with a delimiter
- " that\n    ["
- can close strong
- " strong emphasis"
- "]"
- ", and that uses "
- " uses the same "
- " same character\n"
- "\n    (`_` or `*`"
- ) as the opening
- " opening "
- " delimiter.  The"
- "\n    "
- "opening and "
- " and closing "
- " delimiters must"
- " must belong to "
- " to separate\n"
- "\n    ["
- "[delimiter runs]"
- ".  "
- "If one of the "
- " the delimiters "
- " can both open\n"
- "\n    "
- and close strong
- " strong emphasis"
- "emphasis, then "
- ", then the sum "
- "the sum of the "
- " of the lengths "
- "lengths of\n    "
- "the delimiter "
- " runs containing"
- " the opening and"
- " and closing\n"
- "\n    "
- "delimiters must "
- " must not be a "
- " be a multiple "
- " of 3 unless "
- " unless both "
- " both lengths\n"
- "\n    "
- are multiples of
- " of 3.\n\n"
- "11. A literal "
- "`*`"
- " character "
- " cannot occur at"
- "occur at the "
- at the beginning
- " or end of\n    "
- "`*`"
- "-delimited "
- " emphasis or "
- "`**`"
- "-delimited "
- " strong emphasis"
- "emphasis, unless"
- ", unless it\n    "
- is backslash-
- "-escaped.\n\n"
- "12. A literal "
- "`_`"
- " character "
- " cannot occur at"
- "occur at the "
- at the beginning
- " or end of\n    "
- "`_`"
- "-delimited "
- " emphasis or "
- "`__`"
- "-delimited "
- " strong emphasis"
- "emphasis, unless"
- ", unless it\n    "
- is backslash-
- "-escaped.\n\n"
- Where rules 1--
- "12 above are "
- " are compatible "
- " with multiple "
- " parsings,\n"
- "the following "
- " principles "
- " resolve "
- " ambiguity:\n\n"
- "13. "
- "The number of "
- " of nestings "
- " should be "
- " be minimized. "
- "Thus, for "
- ", for example,\n"
- "\n    "
- "an "
- " interpretation "
- "`<strong>...</"
- ">...</strong>`"
- " is always "
- always preferred
- " to\n    "
- "`<em><em>...</em"
- ">...</em></em>`."
- ".\n\n"
- "14. "
- "An "
- " interpretation "
- "`<em><strong>..."
- ">...</strong></"
- "></em>`"
- " is always\n    "
- "preferred to "
- "`<strong><em>..."
- "><em>...</em></"
- ".</em></strong>`"
- ".\n\n"
- "15. "
- "When two "
- " two potential "
- " emphasis or "
- " or strong "
- " strong emphasis"
- "emphasis spans "
- " spans overlap,\n"
- "\n    "
- "so that the "
- " the second "
- " second begins "
- " begins before "
- " before the "
- " the first ends "
- " ends and ends "
- " ends after\n    "
- "the first ends, "
- " ends, the first"
- " first takes "
- takes precedence
- ". "
- "Thus, for "
- ", for example,\n"
- "\n    "
- "`*foo _bar* baz_"
- "* baz_`"
- " is parsed as "
- "`<em>foo _bar</"
- " _bar</em> baz_`"
- " rather\n    "
- "\n    than "
- "`*foo <em>bar* "
- em>bar* baz</em>
- "baz</em>`.\n\n"
- "16. "
- "When there are "
- " are two "
- " two potential "
- " emphasis or "
- " or strong "
- " strong emphasis"
- "emphasis spans\n"
- "\n    "
- "with the same "
- " same closing "
- " delimiter, the "
- ", the shorter "
- shorter one (the
- "one (the one "
- "the one that\n"
- "\n    "
- "opens later) "
- " later) takes "
- takes precedence
- ". "
- "Thus, for "
- ", for example,\n"
- "\n    "
- "`**foo **bar baz"
- "*bar baz**`"
- " is parsed as "
- "`**foo <strong>"
- "<strong>bar baz<"
- bar baz</strong>
- "/strong>`\n    "
- "rather than "
- "`<strong>foo **"
- ">foo **bar baz</"
- " baz</strong>`."
- ".\n\n"
- "17. "
- "Inline code "
- " code spans, "
- " spans, links, "
- " links, images, "
- "images, and HTML"
- "and HTML tags "
- " tags group more"
- " more tightly\n"
- "\n    "
- "than emphasis.  "
- "So, when there "
- " there is a "
- " is a choice "
- " choice between "
- "between an "
- " interpretation\n"
- "\n    "
- "that contains "
- " one of these "
- " these elements "
- " and one that "
- " that does not, "
- " not, the\n    "
- "former always "
- " always wins.  "
- "Thus, for "
- ", for example, "
- "`*[foo*](bar)`"
- " is\n    "
- "\n    parsed as "
- "`*<a href=\"bar\">"
- "=\"bar\">foo*</a>`"
- " rather than as"
- "\n    "
- "`<em>[foo</em>]("
- "</em>](bar)`.\n\n"
- "These rules can "
- " can be "
- " be illustrated "
- " through a "
- " a series of "
- " of examples.\n\n"
- "Rule 1:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo bar*\n.\n"
- "<p><em>foo bar</"
- " bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the opening `*`"
- " is followed by\n"
- "whitespace, and "
- ", and hence not "
- " not part of a ["
- "left-flanking "
- " delimiter run]:"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "a * foo bar*\n.\n"
- "<p>a * foo bar*<"
- " bar*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the opening `*`"
- "`*` is preceded\n"
- "by an "
- " an alphanumeric"
- " and followed by"
- " by punctuation,"
- ", and hence\n"
- "not part of a ["
- "left-flanking "
- " delimiter run]:"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "a*\"foo\"*\n.\n"
- "<p>a*&quot;foo&"
- ";foo&quot;*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Unicode "
- " nonbreaking "
- " spaces count as"
- "count as "
- " as whitespace, "
- ", too:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "* a *\n.\n"
- ".\n<p>* a *</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Unicode symbols "
- symbols count as
- "count as "
- " as punctuation,"
- ", too:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*$*alpha.\n\n"
- "\n*£*bravo.\n\n"
- "\n*€*charlie.\n.\n"
- "<p>*$*alpha.</p>"
- ".</p>\n"
- "<p>*£*bravo.</p>"
- ".</p>\n"
- "<p>*€*charlie.</"
- ".</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Intraword "
- " emphasis with "
- "`*`"
- " is permitted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo*bar*\n.\n"
- "<p>foo<em>bar</"
- "em>bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "5*6*78\n.\n"
- "<p>5<em>6</em>78"
- "6</em>78</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 2:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo bar_\n.\n"
- "<p><em>foo bar</"
- " bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the opening `_`"
- " is followed by\n"
- "\nwhitespace:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_ foo bar_\n.\n"
- "<p>_ foo bar_</p"
- " bar_</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the opening `_`"
- "`_` is preceded\n"
- "by an "
- " an alphanumeric"
- " and followed by"
- " by punctuation:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "a_\"foo\"_\n.\n"
- "<p>a_&quot;foo&"
- ";foo&quot;_</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Emphasis with "
- "`_`"
- " is not allowed "
- "allowed inside "
- " inside words:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo_bar_\n.\n"
- "<p>foo_bar_</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "5_6_78\n.\n"
- ".\n<p>5_6_78</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- пристаням_стремя
- "м_стремятся_\n.\n"
- "<p>"
- пристаням_стремя
- м_стремятся_</p>
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here `_`"
- " does not "
- " not generate "
- " emphasis, "
- ", because the "
- " the first "
- " first delimiter"
- " run\n"
- is right-
- " right-flanking "
- " and the second "
- " second left-"
- " left-flanking:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "aa_\"bb\"_cc\n.\n"
- "<p>aa_&quot;bb&"
- quot;bb&quot;_cc
- "quot;_cc</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- This is emphasis
- "emphasis, even "
- ", even though "
- " though the "
- " the opening "
- " delimiter is\n"
- "both left- and "
- "- and right-"
- " right-flanking,"
- ", because it is "
- " it is preceded "
- " by\npunctuation:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo-_(bar)_\n.\n"
- "<p>foo-<em>(bar)"
- em>(bar)</em></p
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 3:\n"
- "\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the closing "
- " delimiter does\n"
- "not match the "
- " the opening "
- " delimiter:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo*\n.\n"
- ".\n<p>_foo*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the closing `*`"
- " is preceded by\n"
- "\nwhitespace:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo bar *\n.\n"
- "<p>*foo bar *</p"
- "bar *</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A line ending "
- " ending also "
- " also counts as "
- " as whitespace:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo bar\n*\n.\n"
- "*\n.\n<p>*foo bar\n"
- "*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the second `*`"
- "`*` is\n"
- "preceded by "
- " by punctuation "
- " and followed by"
- " by an "
- " an alphanumeric"
- "\n"
- (hence it is not
- " is not part of "
- "part of a ["
- "right-flanking "
- " delimiter run]:"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*(*foo)\n.\n"
- "<p>*(*foo)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The point of "
- " of this "
- this restriction
- " is more easily "
- " appreciated\n"
- "with this "
- " this example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*(*foo*)*\n.\n"
- "<p><em>(<em>foo<"
- "<em>foo</em>)</"
- "</em>)</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Intraword "
- " emphasis with "
- "`*` is allowed:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo*bar\n.\n"
- "<p><em>foo</em>"
- "foo</em>bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "Rule 4:\n"
- "\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the closing `_`"
- " is preceded by\n"
- "\nwhitespace:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo bar _\n.\n"
- "<p>_foo bar _</p"
- "bar _</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not emphasis"
- "emphasis, "
- ", because the "
- " the second `_`"
- "`_` is\n"
- "preceded by "
- " by punctuation "
- " and followed by"
- " by an "
- " an alphanumeric"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_(_foo)\n.\n"
- "<p>_(_foo)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- This is emphasis
- "emphasis within "
- " within emphasis"
- "emphasis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_(_foo_)_\n.\n"
- "<p><em>(<em>foo<"
- "<em>foo</em>)</"
- "</em>)</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Intraword "
- " emphasis is "
- " is disallowed "
- " for `_`:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo_bar\n.\n"
- "<p>_foo_bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- _пристаням_стрем
- "ям_стремятся\n.\n"
- "<p>"
- _пристаням_стрем
- ям_стремятся</p>
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo_bar_baz_\n.\n"
- "<p><em>"
- "><em>foo_bar_baz"
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- This is emphasis
- "emphasis, even "
- ", even though "
- " though the "
- " the closing "
- " delimiter is\n"
- "both left- and "
- "- and right-"
- " right-flanking,"
- ", because it is "
- " it is followed "
- " by\npunctuation:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_(bar)_.\n.\n"
- "<p><em>(bar)</em"
- "bar)</em>.</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 5:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo bar**\n.\n"
- "<p><strong>foo "
- ">foo bar</strong"
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the opening "
- " delimiter is\n"
- "followed by "
- " by whitespace:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "** foo bar**\n.\n"
- "<p>** foo bar**<"
- " bar**</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the opening "
- "`**` is preceded"
- "\n"
- "by an "
- " an alphanumeric"
- " and followed by"
- " by punctuation,"
- ", and hence\n"
- "not part of a ["
- "left-flanking "
- " delimiter run]:"
- "]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "a**\"foo\"**\n.\n"
- "<p>a**&quot;foo&"
- ;foo&quot;**</p>
- ";**</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Intraword strong
- " strong emphasis"
- "emphasis with "
- "`**`"
- " is permitted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo**bar**\n.\n"
- "<p>foo<strong>"
- "<strong>bar</"
- ">bar</strong></p"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 6:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo bar__\n.\n"
- "<p><strong>foo "
- ">foo bar</strong"
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the opening "
- " delimiter is\n"
- "followed by "
- " by whitespace:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__ foo bar__\n.\n"
- "<p>__ foo bar__<"
- " bar__</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A line ending "
- " ending counts "
- " counts as "
- " as whitespace:\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__\nfoo bar__\n.\n"
- ".\n<p>__\n"
- "foo bar__</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the opening "
- "`__` is preceded"
- "\n"
- "by an "
- " an alphanumeric"
- " and followed by"
- " by punctuation:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "a__\"foo\"__\n.\n"
- "<p>a__&quot;foo&"
- ;foo&quot;__</p>
- ";__</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Intraword strong
- " strong emphasis"
- "emphasis is "
- " is forbidden "
- " with `__`:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo__bar__\n.\n"
- "<p>foo__bar__</p"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "5__6__78\n.\n"
- "<p>5__6__78</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- пристаням__стрем
- "м__стремятся__\n"
- ".\n"
- "<p>"
- пристаням__стрем
- м__стремятся__</
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo, __bar__, "
- ", baz__\n.\n"
- "<p><strong>foo, "
- ">foo, <strong>"
- "<strong>bar</"
- ">bar</strong>, "
- ">, baz</strong><"
- "strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is strong "
- " strong emphasis"
- "emphasis, even "
- ", even though "
- " though the "
- " the opening "
- " delimiter is\n"
- "both left- and "
- "- and right-"
- " right-flanking,"
- ", because it is "
- " it is preceded "
- " by\npunctuation:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo-__(bar)__\n.\n"
- "<p>foo-<strong>("
- strong>(bar)</
- ">(bar)</strong><"
- "strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "Rule 7:\n"
- "\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the closing "
- " delimiter is "
- " is preceded\n"
- "by whitespace:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo bar **\n.\n"
- "<p>**foo bar **<"
- " bar **</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "(Nor can it be "
- " be interpreted "
- " as an "
- as an emphasized
- " `*foo bar *`"
- ", because of\n"
- "\nRule 11.)\n\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the second `**`"
- "`**` is\n"
- "preceded by "
- " by punctuation "
- " and followed by"
- " by an "
- " an alphanumeric"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**(**foo)\n.\n"
- "<p>**(**foo)</p>"
- "foo)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The point of "
- " of this "
- this restriction
- " is more easily "
- " appreciated\n"
- "with these "
- " these examples:"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*(**foo**)*\n.\n"
- "<p><em>(<strong>"
- "<strong>foo</"
- ">foo</strong>)</"
- ">)</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**Gomphocarpus ("
- " (*Gomphocarpus "
- " physocarpus*, "
- "*, syn.\n"
- "*Asclepias "
- " physocarpa*)**\n"
- ".\n"
- "<p><strong>"
- ">Gomphocarpus (<"
- " (<em>"
- "<em>Gomphocarpus"
- " physocarpus</em"
- "</em>, syn.\n"
- "<em>Asclepias "
- " physocarpa</em>"
- "</em>)</strong><"
- "strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo \"*bar*\" "
- "\"*bar*\" foo**\n.\n"
- "<p><strong>foo &"
- ">foo &quot;<em>"
- ;<em>bar</em>&
- "</em>&quot; foo<"
- ; foo</strong></
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Intraword "
- " emphasis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo**bar\n.\n"
- "<p><strong>foo</"
- ">foo</strong>bar"
- ">bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 8:\n"
- "\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the closing "
- " delimiter is\n"
- "preceded by "
- " by whitespace:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo bar __\n.\n"
- "<p>__foo bar __<"
- " bar __</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is not "
- " is not strong "
- " strong emphasis"
- "emphasis, "
- ", because the "
- " the second `__`"
- "`__` is\n"
- "preceded by "
- " by punctuation "
- " and followed by"
- " by an "
- " an alphanumeric"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__(__foo)\n.\n"
- "<p>__(__foo)</p>"
- ")</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The point of "
- " of this "
- this restriction
- " is more easily "
- " appreciated\n"
- "with this "
- " this example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_(__foo__)_\n.\n"
- "<p><em>(<strong>"
- "<strong>foo</"
- ">foo</strong>)</"
- ">)</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Intraword strong
- " strong emphasis"
- "emphasis is "
- " is forbidden "
- " with `__`:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo__bar\n.\n"
- "<p>__foo__bar</p"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- __пристаням__стр
- "ням__стремятся\n"
- ".\n"
- "<p>"
- __пристаням__стр
- ням__стремятся</
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- __foo__bar__baz_
- "ar__baz__\n.\n"
- "<p><strong>"
- ">foo__bar__baz</"
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is strong "
- " strong emphasis"
- "emphasis, even "
- ", even though "
- " though the "
- " the closing "
- " delimiter is\n"
- "both left- and "
- "- and right-"
- " right-flanking,"
- ", because it is "
- " it is followed "
- " by\npunctuation:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__(bar)__.\n.\n"
- "<p><strong>(bar)"
- ">(bar)</strong>."
- "strong>.</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 9:\n"
- "\n"
- "Any nonempty "
- " sequence of "
- " of inline "
- " inline elements"
- "elements can be "
- " can be the "
- " be the contents"
- "contents of an\n"
- emphasized span.
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo [bar](/url)"
- "](/url)*\n.\n"
- "<p><em>foo <a "
- ">foo <a href=\"/"
- " href=\"/url\">bar"
- "url\">bar</a></em"
- "</a></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo\nbar*\n.\n"
- ".\n<p><em>foo\n"
- "bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "In particular, "
- ", emphasis and "
- " and strong "
- " strong emphasis"
- "emphasis can be "
- " can be nested\n"
- "inside emphasis:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo __bar__ "
- "__bar__ baz_\n.\n"
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong> "
- strong> baz</em>
- "baz</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo _bar_ baz_\n"
- ".\n"
- "<p><em>foo <em>"
- foo <em>bar</em>
- bar</em> baz</em
- " baz</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo_ bar_\n.\n"
- "<p><em><em>foo</"
- em>foo</em> bar<
- em> bar</em></p>
- "/em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo *bar**\n.\n"
- "<p><em>foo <em>"
- foo <em>bar</em>
- bar</em></em></p
- "</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo **bar** baz"
- "** baz*\n.\n"
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong> "
- strong> baz</em>
- "baz</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo**bar**baz*\n"
- ".\n"
- "<p><em>foo<"
- "<em>foo<strong>"
- "<strong>bar</"
- ">bar</strong>baz"
- ">baz</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- Note that in the
- " in the "
- in the preceding
- " case, the "
- " interpretation\n"
- "\n``` markdown\n"
- "<p><em>foo</em><"
- "</em><em>bar<em>"
- ">bar<em></em>baz"
- "</em>baz</em></p"
- "</em></p>\n```\n\n\n"
- "is precluded by "
- " by the "
- by the condition
- " that a "
- that a delimiter
- " that\n"
- "can both open "
- " open and close "
- " close (like the"
- "like the `*`"
- "`*` after `foo`)"
- "`foo`)\n"
- "cannot form "
- " form emphasis "
- " if the sum of "
- " sum of the "
- " of the lengths "
- "lengths of\n"
- "the delimiter "
- " runs containing"
- " the opening and"
- "\n"
- "closing "
- " delimiters is a"
- " is a multiple "
- " of 3 unless\n"
- both lengths are
- " are multiples "
- " of 3.\n\n\n"
- "For the same "
- " same reason, we"
- ", we don'"
- "t get two "
- " two consecutive"
- "\n"
- "emphasis "
- " sections in "
- " in this example"
- " example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo**bar*\n.\n"
- "<p><em>foo**bar<"
- "**bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The same "
- " same condition "
- " ensures that "
- " that the "
- " the following\n"
- "cases are all "
- "are all strong "
- " strong emphasis"
- "emphasis nested "
- " nested inside\n"
- "emphasis, even "
- ", even when the "
- " the interior "
- " whitespace is\n"
- "omitted:\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "***foo** bar*\n.\n"
- "<p><em><strong>"
- "<strong>foo</"
- ">foo</strong> "
- strong> bar</em>
- "bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo **bar***\n.\n"
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong></"
- "></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo**bar***\n.\n"
- "<p><em>foo<"
- "<em>foo<strong>"
- "<strong>bar</"
- ">bar</strong></"
- "></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- When the lengths
- " lengths of the "
- " of the interior"
- interior closing
- " closing and "
- " and opening\n"
- "delimiter runs "
- " runs are *both*"
- " multiples of 3,"
- " of 3, though,\n"
- "they can match "
- " match to create"
- " create emphasis"
- "emphasis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo***bar***baz\n"
- ".\n"
- "<p>foo<em><"
- foo<em><strong>
- "<strong>bar</"
- ">bar</strong></"
- "></em>baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- foo******bar****
- "*bar*********baz"
- "*****baz\n.\n"
- "<p>foo<strong><"
- strong><strong><
- strong><strong>
- "<strong>bar</"
- ">bar</strong></"
- "></strong></"
- "></strong>***baz"
- ">***baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Indefinite "
- " levels of "
- " of nesting are "
- " are possible:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo **bar *baz*"
- " *baz* bim** bop"
- "** bop*\n.\n"
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar <em>"
- bar <em>baz</em>
- baz</em> bim</
- "> bim</strong> "
- strong> bop</em>
- "bop</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo [*bar*](/"
- "*bar*](/url)*\n.\n"
- "<p><em>foo <a "
- ">foo <a href=\"/"
- " href=\"/url\"><em"
- "url\"><em>bar</em"
- ">bar</em></a></"
- "></a></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "There can be no "
- " be no empty "
- " empty emphasis "
- " or strong "
- " strong emphasis"
- "emphasis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "** is not an "
- " not an empty "
- " empty emphasis\n"
- ".\n"
- "<p>** is not an "
- " not an empty "
- " empty emphasis<"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**** is not an "
- " not an empty "
- " empty strong "
- " strong emphasis"
- "emphasis\n.\n"
- "<p>**** is not "
- " is not an empty"
- "an empty strong "
- " strong emphasis"
- "emphasis</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "Rule 10:\n"
- "\n"
- "Any nonempty "
- " sequence of "
- " of inline "
- " inline elements"
- "elements can be "
- " can be the "
- " be the contents"
- "contents of an\n"
- "strongly "
- " emphasized span"
- " span.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo [bar](/url"
- "](/url)**\n.\n"
- "<p><strong>foo <"
- ">foo <a href=\"/"
- " href=\"/url\">bar"
- "url\">bar</a></"
- "</a></strong></p"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo\nbar**\n.\n"
- "<p><strong>foo\n"
- bar</strong></p>
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "In particular, "
- ", emphasis and "
- " and strong "
- " strong emphasis"
- "emphasis can be "
- " can be nested\n"
- "inside strong "
- " strong emphasis"
- "emphasis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo _bar_ "
- " _bar_ baz__\n.\n"
- "<p><strong>foo <"
- ">foo <em>bar</em"
- ">bar</em> baz</"
- "> baz</strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo __bar__ "
- "__bar__ baz__\n.\n"
- "<p><strong>foo <"
- ">foo <strong>bar"
- ">bar</strong> "
- strong> baz</
- "> baz</strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "____foo__ bar__\n"
- ".\n"
- "<p><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong> "
- strong> bar</
- "> bar</strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo **bar****\n"
- ".\n"
- "<p><strong>foo <"
- ">foo <strong>bar"
- ">bar</strong></"
- "></strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo *bar* baz*"
- "* baz**\n.\n"
- "<p><strong>foo <"
- ">foo <em>bar</em"
- ">bar</em> baz</"
- "> baz</strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo*bar*baz**\n"
- ".\n"
- "<p><strong>foo<"
- ">foo<em>bar</em>"
- bar</em>baz</
- em>baz</strong><
- "strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "***foo* bar**\n.\n"
- "<p><strong><em>"
- "><em>foo</em> "
- "</em> bar</"
- "> bar</strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo *bar***\n.\n"
- "<p><strong>foo <"
- ">foo <em>bar</em"
- ">bar</em></"
- "</em></strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Indefinite "
- " levels of "
- " of nesting are "
- " are possible:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo *bar **baz"
- " **baz**\n"
- "bim* bop**\n.\n"
- "<p><strong>foo <"
- ">foo <em>bar <"
- em>bar <strong>
- "<strong>baz</"
- ">baz</strong>\n"
- bim</em> bop</
- "> bop</strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo [*bar*](/"
- "*bar*](/url)**\n"
- ".\n"
- "<p><strong>foo <"
- ">foo <a href=\"/"
- " href=\"/url\"><em"
- "url\"><em>bar</em"
- ">bar</em></a></"
- "></a></strong></"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "There can be no "
- " be no empty "
- " empty emphasis "
- " or strong "
- " strong emphasis"
- "emphasis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__ is not an "
- " not an empty "
- " empty emphasis\n"
- ".\n"
- "<p>__ is not an "
- " not an empty "
- " empty emphasis<"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "____ is not an "
- " not an empty "
- " empty strong "
- " strong emphasis"
- "emphasis\n.\n"
- "<p>____ is not "
- " is not an empty"
- "an empty strong "
- " strong emphasis"
- "emphasis</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "Rule 11:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo ***\n.\n"
- "<p>foo ***</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo *\\**\n.\n"
- "<p>foo <em>*</em"
- "em>*</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo *_*\n.\n"
- "<p>foo <em>_</em"
- "em>_</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo *****\n.\n"
- "<p>foo *****</p>"
- "****</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo **\\***\n.\n"
- "<p>foo <strong>*"
- strong>*</strong
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo **_**\n.\n"
- "<p>foo <strong>_"
- strong>_</strong
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that when "
- " when delimiters"
- " do not match "
- " match evenly, "
- "evenly, Rule 11 "
- " 11 determines\n"
- "that the excess "
- " excess literal "
- "`*`"
- " characters will"
- " will appear "
- " appear outside "
- "outside of the\n"
- "emphasis, rather"
- ", rather than "
- " than inside it:"
- " it:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo*\n.\n"
- "<p>*<em>foo</em>"
- "foo</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo**\n.\n"
- "<p><em>foo</em>*"
- "</em>*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "***foo**\n.\n"
- "<p>*<strong>foo<"
- ">foo</strong></p"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "****foo*\n.\n"
- "<p>***<em>foo</"
- "em>foo</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo***\n.\n"
- "<p><strong>foo</"
- ">foo</strong>*</"
- ">*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo****\n.\n"
- "<p><em>foo</em>*"
- "</em>***</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "Rule 12:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo ___\n.\n"
- "<p>foo ___</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo _\\__\n.\n"
- "<p>foo <em>_</em"
- "em>_</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo _*_\n.\n"
- "<p>foo <em>*</em"
- "em>*</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo _____\n.\n"
- "<p>foo _____</p>"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo __\\___\n.\n"
- "<p>foo <strong>_"
- strong>_</strong
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo __*__\n.\n"
- "<p>foo <strong>*"
- strong>*</strong
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo_\n.\n"
- "<p>_<em>foo</em>"
- "foo</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that when "
- " when delimiters"
- " do not match "
- " match evenly, "
- "evenly, Rule 12 "
- " 12 determines\n"
- "that the excess "
- " excess literal "
- "`_`"
- " characters will"
- " will appear "
- " appear outside "
- "outside of the\n"
- "emphasis, rather"
- ", rather than "
- " than inside it:"
- " it:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo__\n.\n"
- "<p><em>foo</em>_"
- "</em>_</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "___foo__\n.\n"
- "<p>_<strong>foo<"
- ">foo</strong></p"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "____foo_\n.\n"
- "<p>___<em>foo</"
- "em>foo</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo___\n.\n"
- "<p><strong>foo</"
- ">foo</strong>_</"
- ">_</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo____\n.\n"
- "<p><em>foo</em>"
- "foo</em>___</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 13 implies "
- "implies that if "
- that if you want
- "you want "
- " want emphasis "
- " nested directly"
- "directly inside\n"
- "emphasis, you "
- ", you must use "
- " use different "
- " delimiters:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo**\n.\n"
- "<p><strong>foo</"
- ">foo</strong></p"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*_foo_*\n.\n"
- "<p><em><em>foo</"
- em>foo</em></em>
- "em></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__foo__\n.\n"
- "<p><strong>foo</"
- ">foo</strong></p"
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_*foo*_\n.\n"
- "<p><em><em>foo</"
- em>foo</em></em>
- "em></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, strong "
- " strong emphasis"
- "emphasis within "
- " within strong "
- " strong emphasis"
- "emphasis is "
- " is possible "
- " without\n"
- "switching "
- " delimiters:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "****foo****\n.\n"
- "<p><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "____foo____\n.\n"
- "<p><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "Rule 13 can be "
- " can be applied "
- "applied to "
- " to arbitrarily "
- " long sequences "
- " of\ndelimiters:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "******foo******\n"
- ".\n"
- "<p><strong><"
- strong><strong><
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></"
- "></strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 14:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "***foo***\n.\n"
- "<p><em><strong>"
- "<strong>foo</"
- ">foo</strong></"
- "></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_____foo_____\n.\n"
- "<p><em><strong><"
- strong><strong>
- "<strong>foo</"
- ">foo</strong></"
- "></strong></em><"
- "></em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 15:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo _bar* baz_\n"
- ".\n"
- "<p><em>foo _bar<"
- " _bar</em> baz_<"
- "> baz_</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo __bar *baz "
- " *baz bim__ bam*"
- " bam*\n.\n"
- "<p><em>foo <"
- em>foo <strong>
- "<strong>bar *baz"
- bar *baz bim</
- " bim</strong> "
- strong> bam</em>
- "bam</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 16:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**foo **bar baz*"
- "bar baz**\n.\n"
- "<p>**foo <strong"
- " <strong>bar baz"
- ">bar baz</strong"
- "</strong></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo *bar baz*\n"
- ".\n"
- "<p>*foo <em>bar "
- "<em>bar baz</em>"
- "baz</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Rule 17:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*[bar*](/url)\n.\n"
- "<p>*<a href=\"/"
- " href=\"/url\">bar"
- "url\">bar*</a></p"
- "*</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_foo [bar_](/url"
- "](/url)\n.\n"
- "<p>_foo <a href="
- "<a href=\"/url\">"
- "=\"/url\">bar_</a>"
- "bar_</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*<img src=\"foo\" "
- "=\"foo\" title=\"*\""
- "=\"*\"/>\n.\n"
- "<p>*<img src=\""
- " src=\"foo\" title"
- "\" title=\"*\"/></p"
- "\"*\"/></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**<a href=\"**\">\n"
- ".\n"
- "<p>**<a href=\"**"
- "href=\"**\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__<a href=\"__\">\n"
- ".\n"
- "<p>__<a href=\"__"
- "href=\"__\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*a `*`*\n.\n"
- "<p><em>a <code>*"
- " <code>*</code><"
- "</code></em></p>"
- "/em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "_a `_`_\n.\n"
- "<p><em>a <code>_"
- " <code>_</code><"
- "</code></em></p>"
- "/em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "**a<https://"
- "https://foo.bar/"
- "foo.bar/?q=**>\n"
- "q=**>\n.\n"
- "<p>**a<a href=\""
- "a href=\"https://"
- "https://foo.bar/"
- foo.bar/?
- "q=**\">https://"
- "https://foo.bar/"
- foo.bar/?
- "q=**</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "__a<https://"
- "https://foo.bar/"
- "foo.bar/?q=__>\n"
- "q=__>\n.\n"
- "<p>__a<a href=\""
- "a href=\"https://"
- "https://foo.bar/"
- foo.bar/?
- "q=__\">https://"
- "https://foo.bar/"
- foo.bar/?
- "q=__</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "## Links\n\n"
- "A link contains "
- "[link text]"
- " (the visible "
- "visible text), a"
- "text), a ["
- link destination
- "]\n"
- (the URI that is
- " that is the "
- " is the link "
- link destination
- "), and "
- ", and optionally"
- " a [link title]."
- "].\n"
- "There are two "
- "are two basic "
- " basic kinds of "
- " of links in "
- " in Markdown.  "
- "In [inline links"
- "] the\n"
- "destination and "
- " and title are "
- " are given "
- " immediately "
- " after the link "
- " link text.  In\n"
- "[reference links"
- "]"
- " the destination"
- " and title are "
- " are defined "
- " elsewhere in\n"
- "the document.\n\n"
- "A [link text](@)"
- " consists of a "
- " of a sequence "
- " of zero or more"
- "\n"
- "inline elements "
- " enclosed by "
- " by square "
- " square brackets"
- "brackets (`[`"
- "`[` and `]`"
- " and `]`).  The\n"
- "following rules "
- " rules apply:\n\n"
- "- "
- "Links may not "
- "may not contain "
- "contain other "
- " other links, at"
- ", at any level "
- " level of "
- " of nesting. If\n"
- "\n  "
- "multiple "
- " otherwise valid"
- " valid link "
- link definitions
- " appear nested "
- " nested inside "
- " inside each\n  "
- "other, the inner"
- " inner-most "
- "-most definition"
- " is used.\n\n"
- "- "
- "Brackets are "
- " are allowed in "
- " in the ["
- "[link text]"
- " only if (a) "
- " if (a) they\n  "
- are backslash-
- "-escaped or (b) "
- " or (b) they "
- "b) they appear "
- " appear as a "
- " as a matched "
- "matched pair of "
- pair of brackets
- "brackets,\n  "
- "with an open "
- "an open bracket "
- "`[`"
- ", a sequence of "
- " of zero or more"
- " or more inlines"
- " inlines, and\n  "
- "a close bracket "
- "`]`.\n\n"
- "- Backtick ["
- "[code spans], ["
- "], [autolinks]"
- "], and raw ["
- "[HTML tags]"
- " bind more "
- " more tightly\n  "
- "than the "
- " the brackets in"
- " in link text.  "
- "Thus, for "
- ", for example,\n"
- "\n  `` [foo`]` ``"
- " could not be a "
- " be a link text,"
- " text, since the"
- " the second `]`"
- "`]`\n  "
- "is part of a "
- " of a code span."
- " span.\n\n"
- "- "
- "The brackets in "
- " in link text "
- " text bind more "
- " more tightly "
- "tightly than "
- " than markers "
- "markers for\n  ["
- "emphasis and "
- " and strong "
- " strong emphasis"
- "]"
- ". "
- "Thus, for "
- ", for example, "
- "`*[foo*](url)`"
- " is a link.\n\n"
- "A "
- "[link "
- link destination
- "](@)"
- " consists of "
- " of either\n\n"
- "- "
- "a sequence of "
- " of zero or more"
- " or more "
- " more characters"
- " between an "
- " an opening `<`"
- "`<` and a\n  "
- "\n  closing `>`"
- " that contains "
- " no line endings"
- " endings or "
- " or unescaped\n  "
- "`<` or `>`"
- " characters, or"
- "\n\n- "
- "a nonempty "
- " sequence of "
- " of characters "
- " that does not "
- " not start with "
- "`<`,\n  "
- does not include
- " include ["
- "ASCII control "
- " characters]["
- "ASCII control "
- " character]\n  "
- "]\n  or [space]"
- " character, and "
- ", and includes "
- " parentheses "
- " only if (a) "
- " if (a) they are"
- "\n  "
- backslash-
- "-escaped or (b) "
- " or (b) they are"
- they are part of
- " part of a "
- " of a balanced "
- " pair of\n  "
- "unescaped "
- " parentheses.\n  "
- (Implementations
- " may impose "
- " impose limits "
- " limits on "
- " on parentheses "
- " nesting to\n  "
- "avoid "
- " performance "
- " issues, but at "
- " but at least "
- " least three "
- " three levels of"
- " of nesting\n  "
- "should be "
- " be supported.)\n"
- "\nA "
- "[link title](@)"
- "  consists of "
- " of either\n\n"
- "- "
- "a sequence of "
- " of zero or more"
- " or more "
- " more characters"
- " between "
- between straight
- straight double-
- " double-quote\n  "
- "characters (`\"`"
- "), including a "
- "`\"`"
- " character only "
- " only if it is\n"
- "\n  "
- backslash-
- "-escaped, or\n\n"
- "- "
- "a sequence of "
- " of zero or more"
- " or more "
- " more characters"
- " between "
- between straight
- straight single-
- " single-quote\n  "
- "characters (`'`"
- "), including a "
- "`'`"
- " character only "
- " only if it is\n"
- "\n  "
- backslash-
- "-escaped, or\n\n"
- "- "
- "a sequence of "
- " of zero or more"
- " or more "
- " more characters"
- " between "
- between matching
- "matching "
- " parentheses\n  ("
- "(`(...)`"
- "), including a "
- "`(` or `)`"
- " character only "
- " only if it is\n"
- "\n  "
- backslash-
- "-escaped.\n\n"
- "Although ["
- "[link titles]"
- " may span "
- " span multiple "
- " lines, they may"
- "they may not "
- "may not contain\n"
- "a [blank line]."
- "].\n\n"
- "An "
- "[inline link](@)"
- " consists of a ["
- "[link text]"
- " followed "
- " immediately\n"
- "by a left "
- left parenthesis
- " `(`"
- ", an optional ["
- link destination
- "], an optional\n["
- "\n[link title]"
- ", and a right "
- " parenthesis `)`"
- "`)`.\n"
- "These four "
- " four components"
- " may be "
- may be separated
- " by spaces, tabs"
- ", tabs, and up "
- " and up to one "
- " to one line\n"
- "ending.\nIf both "
- "If both ["
- link destination
- "] and ["
- " and [link title"
- "]"
- " are present, "
- ", they *must* be"
- " be\n"
- "separated by "
- " by spaces, tabs"
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending.\n\n"
- "The link'"
- "s text consists "
- " of the inlines "
- " contained\n"
- "in the ["
- "[link text]"
- " (excluding the "
- " the enclosing "
- " square brackets"
- "brackets).\n"
- "The link'"
- "s URI consists "
- " of the link "
- link destination
- ", excluding "
- " enclosing\n"
- "`<...>`"
- " if present, "
- ", with backslash"
- "-escapes in "
- " in effect as "
- " as described\n"
- above.  The link
- "'"
- s title consists
- "consists of the "
- " of the link "
- " link title, "
- "title, excluding"
- " its\n"
- "enclosing "
- " delimiters, "
- ", with backslash"
- "-escapes in "
- " in effect as "
- " as described\n"
- "above.\n\n"
- Here is a simple
- "a simple inline "
- " inline link:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/uri \""
- "](/uri \"title\")\n"
- ".\n"
- "<p><a href=\"/uri"
- "=\"/uri\" title=\""
- " title=\"title\">"
- "\"title\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The title, the "
- ", the link text "
- " text and even \n"
- "the destination "
- " may be omitted:"
- "omitted:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/uri)\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[](./target.md)\n"
- ".\n"
- "<p><a href=\"./"
- "=\"./target.md\"><"
- "\"></a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link]()\n.\n"
- "<p><a href=\"\">"
- "href=\"\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](<>)\n.\n"
- "<p><a href=\"\">"
- "href=\"\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[]()\n.\n"
- "<p><a href=\"\"></"
- "=\"\"></a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "The destination "
- " can only "
- " only contain "
- "contain spaces "
- " spaces if it is"
- "\n"
- "enclosed in "
- " in pointy "
- " pointy brackets"
- "brackets:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/my uri)\n"
- ".\n"
- "<p>[link](/my "
- "](/my uri)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](</my uri>"
- "/my uri>)\n.\n"
- "<p><a href=\"/my%"
- "=\"/my%20uri\">"
- "%20uri\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "The destination "
- " cannot contain "
- "contain line "
- " line endings,\n"
- even if enclosed
- "enclosed in "
- " in pointy "
- " pointy brackets"
- "brackets:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo\nbar)\n"
- "bar)\n.\n"
- ".\n<p>[link](foo\n"
- "bar)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](<foo\n"
- "bar>)\n.\n"
- "<p>[link](<foo\n"
- "bar>)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "The destination "
- " can contain `)`"
- " if it is "
- " it is enclosed\n"
- "in pointy "
- " pointy brackets"
- "brackets:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[a](<b)c>)\n.\n"
- "<p><a href=\"b)c\""
- "=\"b)c\">a</a></p>"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Pointy brackets "
- " that enclose "
- "enclose links "
- " links must be "
- " be unescaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](<foo\\>)\n"
- ".\n"
- "<p>[link](&lt;"
- "](&lt;foo&gt;)</"
- "&gt;)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "These are not "
- "are not links, "
- " links, because "
- "because the "
- " the opening "
- "opening pointy "
- " pointy bracket\n"
- "is not matched "
- matched properly
- "properly:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[a](<b)c\n"
- "[a](<b)c>\n"
- "[a](<b>c)\n.\n"
- "<p>[a](&lt;b)c\n"
- "[a](&lt;b)c&gt;\n"
- "[a](<b>c)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Parentheses "
- " inside the link"
- "the link "
- link destination
- " may be escaped:"
- "escaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](\\(foo\\))\n"
- ".\n"
- "<p><a href=\"(foo"
- "=\"(foo)\">link</a"
- ">link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Any number of "
- " of parentheses "
- " are allowed "
- "allowed without "
- without escaping
- "escaping, as "
- ", as long as "
- long as they are
- "\nbalanced:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo(and("
- "foo(and(bar)))\n"
- ".\n"
- "<p><a href=\"foo("
- "=\"foo(and(bar))\""
- "(bar))\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "However, if you "
- " if you have "
- " have unbalanced"
- " parentheses, "
- ", you need to "
- "need to escape "
- " escape or use "
- " or use the\n"
- "`<...>` form:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo(and("
- "foo(and(bar))\n.\n"
- "<p>[link](foo("
- "](foo(and(bar))<"
- "(bar))</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo\\(and\\"
- "\\(and\\(bar\\))\n.\n"
- "<p><a href=\"foo("
- "=\"foo(and(bar)\">"
- "(bar)\">link</a><"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](<foo(and("
- "foo(and(bar)>)\n"
- ".\n"
- "<p><a href=\"foo("
- "=\"foo(and(bar)\">"
- "(bar)\">link</a><"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Parentheses and "
- " and other "
- " other symbols "
- symbols can also
- "can also be "
- "also be escaped,"
- "escaped, as "
- ", as usual\n"
- "in Markdown:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo\\)\\:)\n"
- ".\n"
- "<p><a href=\"foo)"
- "=\"foo):\">link</a"
- ">link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A link can "
- " can contain "
- contain fragment
- "fragment "
- " identifiers and"
- " and queries:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](#fragment"
- "fragment)\n\n"
- "[link](https://"
- "://example.com#"
- "#fragment)\n\n"
- "[link](https://"
- "://example.com?"
- "foo=3#frag)\n.\n"
- "<p><a href=\"#"
- " href=\"#fragment"
- "fragment\">link</"
- "\">link</a></p>\n"
- "<p><a href=\""
- "a href=\"https://"
- "://example.com#"
- "#fragment\">link<"
- "\">link</a></p>\n"
- "<p><a href=\""
- "a href=\"https://"
- "://example.com?"
- "foo=3#frag\">link"
- "\">link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that a "
- that a backslash
- " before a non-"
- " a non-escapable"
- " character is\n"
- just a backslash
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo\\bar)\n"
- ".\n"
- "<p><a href=\"foo%"
- "=\"foo%5Cbar\">"
- "%5Cbar\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "URL-escaping "
- " should be left "
- "be left alone "
- " alone inside "
- " inside the "
- " the destination"
- ", as all\n"
- "URL-escaped "
- " characters are "
- " are also valid "
- " valid URL "
- " URL characters."
- ". Entity and\n"
- "numerical "
- " character "
- " references in "
- " in the "
- " the destination"
- " will be parsed\n"
- "into the "
- " corresponding "
- " Unicode code "
- " code points, as"
- ", as usual.  "
- "These may\n"
- "be optionally "
- " URL-escaped "
- "escaped when "
- " when written as"
- " as HTML, but "
- ", but this spec\n"
- does not enforce
- " enforce any "
- " any particular "
- " policy for "
- " for rendering "
- " URLs in\n"
- "HTML or other "
- " other formats."
- "formats.  "
- "Renderers may "
- " may make "
- " make different "
- " decisions\n"
- "about how to "
- " how to escape "
- " escape or "
- " or normalize "
- " URLs in the "
- " in the output.\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](foo%20b&"
- "foo%20b&auml;)\n"
- ".\n"
- "<p><a href=\"foo%"
- "=\"foo%20b%C3%A4\""
- "%C3%A4\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that, "
- " that, because "
- "because titles "
- " titles can "
- " can often be "
- " be parsed as "
- " as destinations"
- ",\n"
- "if you try to "
- " try to omit the"
- "omit the "
- " the destination"
- " and keep the "
- " the title, you'"
- "'ll\n"
- "get unexpected "
- " results:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](\"title\")\n"
- ".\n"
- "<p><a href=\"%"
- " href=\"%22title%"
- "22title%22\">link"
- "22\">link</a></p>"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Titles may be in
- " be in single "
- " single quotes, "
- "quotes, double "
- " double quotes, "
- "quotes, or "
- ", or parentheses"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/url \""
- "](/url \"title\")\n"
- "[link](/url '"
- "](/url 'title')\n"
- "[link](/url ("
- "](/url (title))\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">link</a>"
- "link</a>\n"
- "<a href=\"/url\" "
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">link</a>"
- "link</a>\n"
- "<a href=\"/url\" "
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Backslash "
- " escapes and "
- " and entity and "
- " and numeric "
- " character "
- " references\n"
- "may be used in "
- "used in titles:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/url \""
- "](/url \"title \\\""
- "title \\\"&quot;\")"
- "&quot;\")\n.\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title &"
- "\"title &quot;&"
- " &quot;&quot;\">"
- "&quot;\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Titles must be "
- " be separated "
- " from the link "
- " link using "
- " using spaces, "
- "spaces, tabs, "
- ", tabs, and up "
- " and up to one "
- " to one line\n"
- "ending.\nOther ["
- "Unicode "
- " whitespace]"
- " like non-"
- " non-breaking "
- " space doesn'"
- "'t work.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/url \""
- "](/url \"title\")\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url%C2%A0%"
- "%C2%A0%22title%"
- "22title%22\">link"
- "22\">link</a></p>"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Nested balanced "
- " quotes are not "
- "are not allowed "
- "allowed without "
- without escaping
- "escaping:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/url \""
- "](/url \"title \""
- "\"title \"and\" "
- " \"and\" title\")\n"
- ".\n"
- "<p>[link](/url &"
- "](/url &quot;"
- " &quot;title &"
- ;title &quot;and
- "quot;and&quot; "
- "&quot; title&"
- ; title&quot;)</
- "quot;)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "But it is easy "
- "is easy to work "
- "to work around "
- " around this by "
- "this by using a "
- " a different "
- " quote type:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](/url '"
- "](/url 'title \""
- "'title \"and\" "
- " \"and\" title')\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title &"
- "\"title &quot;and"
- "quot;and&quot; "
- "&quot; title\">"
- " title\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "(Note:  "
- "`Markdown.pl`"
- " did allow "
- " allow double "
- " double quotes "
- " quotes inside a"
- inside a double-
- " double-quoted\n"
- "title, and its "
- "and its test "
- " test suite "
- " suite included "
- " a test "
- " demonstrating "
- " this.\n"
- "But it is hard "
- is hard to see a
- "to see a good "
- a good rationale
- " for the extra "
- extra complexity
- " this\n"
- "brings, since "
- ", since there "
- " there are "
- " are already "
- "already many "
- " many ways---"
- "backslash "
- " escaping,\n"
- "entity and "
- " and numeric "
- " character "
- " references, or "
- ", or using a "
- " a different\n"
- "quote type for "
- " for the "
- " the enclosing "
- " title---"
- "to write titles "
- " containing\n"
- "double quotes.  "
- "`Markdown.pl`'"
- "s handling of "
- " of titles has a"
- " has a number\n"
- of other strange
- " strange "
- strange features
- "features.  "
- "For example, it "
- ", it allows "
- " allows single-"
- " single-quoted\n"
- titles in inline
- " inline links, "
- " links, but not "
- " not reference "
- " links.  And, in"
- "\n"
- "reference links "
- " links but not "
- "but not inline "
- " inline links, "
- " links, it "
- ", it allows a "
- " a title to "
- " to begin\nwith "
- "with `\"`"
- " and end with "
- "`)`.  "
- ".  `Markdown.pl`"
- " 1.0.1 even "
- " even allows\n"
- "titles with no "
- "with no closing "
- " quotation mark,"
- " mark, though "
- " though 1.0.2b8 "
- 1.0.2b8 does not
- "does not.\n"
- "It seems "
- seems preferable
- " to adopt a "
- "adopt a simple, "
- "simple, rational"
- "rational rule "
- " rule that works"
- "\n"
- "the same way in "
- " way in inline "
- " inline links "
- " links and link "
- " link reference "
- " definitions.)\n\n"
- "Spaces, tabs, "
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending is "
- " is allowed "
- "allowed around "
- " around the "
- " the destination"
- " and\ntitle:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link](   /uri\n"
- "  \"title\"  )\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\" title=\""
- " title=\"title\">"
- "\"title\">link</a>"
- "link</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "But it is not "
- " is not allowed "
- "allowed between "
- between the link
- "the link text "
- " text and the\n"
- "following "
- " parenthesis:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link] (/uri)\n.\n"
- "<p>[link] (/uri)"
- "] (/uri)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link text "
- " text may "
- " may contain "
- contain balanced
- "balanced "
- " brackets, but "
- ", but not "
- " not unbalanced "
- " ones,\n"
- "unless they are "
- " are escaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link [foo [bar]"
- " [bar]]](/uri)\n"
- ".\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [foo [bar"
- "foo [bar]]</a></"
- "]]</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link] bar](/uri"
- "](/uri)\n.\n"
- "<p>[link] bar](/"
- "] bar](/uri)</p>"
- "uri)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link [bar](/uri"
- "](/uri)\n.\n"
- "<p>[link <a href"
- " <a href=\"/uri\">"
- "=\"/uri\">bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link \\[bar](/"
- "\\[bar](/uri)\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link text "
- " text may "
- " may contain "
- "contain inline "
- " inline content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link *foo **bar"
- " **bar** `#`*](/"
- " `#`*](/uri)\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link <em"
- link <em>foo <
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong> <"
- "> <code>#</code>"
- "#</code></em></a"
- "</em></a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[!["
- "moon](moon.jpg)]"
- ")](/uri)\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\"><img src"
- "<img src=\""
- " src=\"moon.jpg\" "
- "\" alt=\"moon\" /><"
- "\" /></a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, links "
- ", links may not "
- "may not contain "
- "contain other "
- " other links, at"
- ", at any level "
- " level of "
- " of nesting.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo [bar](/uri)"
- "](/uri)](/uri)\n"
- ".\n"
- "<p>[foo <a href="
- "<a href=\"/uri\">"
- "=\"/uri\">bar</a>]"
- "bar</a>](/uri)</"
- "(/uri)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo *[bar [baz]"
- " [baz](/uri)](/"
- "/uri)](/uri)*](/"
- "uri)*](/uri)\n.\n"
- "<p>[foo <em>[bar"
- "<em>[bar <a href"
- " <a href=\"/uri\">"
- "=\"/uri\">baz</a>]"
- "baz</a>](/uri)</"
- "(/uri)</em>](/"
- "</em>](/uri)</p>"
- "uri)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![[["
- "foo](uri1)](uri2"
- ")](uri2)](uri3)\n"
- ".\n"
- "<p><img src=\""
- " src=\"uri3\" alt="
- "\" alt=\"[foo]("
- "=\"[foo](uri2)\" /"
- "uri2)\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These cases "
- cases illustrate
- " the precedence "
- " of link text "
- " text grouping "
- " over\n"
- "emphasis "
- " grouping:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*[foo*](/uri)\n.\n"
- "<p>*<a href=\"/"
- " href=\"/uri\">foo"
- "uri\">foo*</a></p"
- "*</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo *bar](baz*)"
- "](baz*)\n.\n"
- "<p><a href=\"baz*"
- "=\"baz*\">foo *bar"
- foo *bar</a></p>
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that "
- " that brackets "
- " that *aren't*"
- " part of links "
- " links do not "
- " do not take\n"
- "precedence:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo [bar* baz]\n"
- ".\n"
- "<p><em>foo [bar<"
- " [bar</em> baz]<"
- "> baz]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These cases "
- cases illustrate
- " the precedence "
- " of HTML tags, "
- " tags, code "
- ", code spans,\n"
- "and autolinks "
- " over link "
- " link grouping:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo <bar attr=\""
- " attr=\"](baz)\">\n"
- ".\n"
- "<p>[foo <bar "
- " <bar attr=\"]("
- "attr=\"](baz)\"></"
- "baz)\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo`](/uri)`\n.\n"
- "<p>[foo<code>](/"
- "code>](/uri)</"
- (/uri)</code></p
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo<https://"
- "://example.com/?"
- "search=](uri)>\n"
- ".\n"
- "<p>[foo<a href=\""
- "a href=\"https://"
- "://example.com/?"
- "search=%5D(uri)\""
- "5D(uri)\">https:/"
- ">https://"
- "://example.com/?"
- "search=](uri)</a"
- "(uri)</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "There are three "
- " three kinds of "
- "[reference link]"
- " link](@)s:\n"
- "[full](#full-"
- "(#full-reference"
- "-link), "
- "[collapsed](#"
- "](#collapsed-"
- "-reference-link)"
- ",\nand "
- "[shortcut](#"
- "](#shortcut-"
- "-reference-link)"
- ".\n\n"
- "A "
- "[full reference "
- " link](@)\n"
- "consists of a ["
- "[link text]"
- " immediately "
- " followed by a ["
- "[link label]\n"
- "]\nthat [matches]"
- "matches] a ["
- "link reference "
- " definition]"
- " elsewhere in "
- " in the document"
- "document.\n\n"
- "A "
- "[link label](@)"
- "  begins with a "
- " with a left "
- " a left bracket "
- "bracket (`[`"
- "`[`) and ends\n"
- "with the first "
- " first right "
- " right bracket ("
- "`]`"
- ") that is not "
- is not backslash
- "-escaped.\n"
- "Between these "
- " these brackets "
- " there must be "
- must be at least
- "at least one "
- " one character "
- " that is not a "
- " not a space,\n"
- "tab, or line "
- "or line ending.\n"
- Unescaped square
- " square bracket "
- " characters are "
- " are not allowed"
- " allowed inside "
- " inside the\n"
- "opening and "
- " and closing "
- "closing square "
- " square brackets"
- "brackets of ["
- "[link labels]"
- "].  A link\n"
- "label can have "
- " have at most "
- "at most 999 "
- " 999 characters "
- " inside the "
- " the square\n"
- "brackets.\n\n"
- "One label "
- "[matches](@)\n"
- "another just in "
- "just in case "
- "in case their "
- their normalized
- " forms are equal"
- " equal.  "
- "To normalize a\n"
- "label, strip off"
- " off the opening"
- " opening and "
- " and closing "
- closing brackets
- "brackets,\n"
- "perform the "
- "*Unicode case "
- " case fold*"
- ", strip leading "
- "leading and "
- " and trailing\n"
- "spaces, tabs, "
- ", tabs, and line"
- and line endings
- " endings, and "
- ", and collapse "
- " consecutive "
- " internal\n"
- "spaces, tabs, "
- ", tabs, and line"
- and line endings
- " endings to a "
- " to a single "
- " single space.  "
- "If there are "
- " are multiple\n"
- "matching "
- " reference link "
- link definitions
- ", the one that "
- " that comes "
- " comes first in "
- " in the\n"
- document is used
- " is used.  "
- (It is desirable
- " in such cases "
- " cases to emit a"
- " emit a warning."
- "warning.)\n\n"
- "The link'"
- "s URI and title "
- " title are "
- " are provided by"
- " by the matching"
- "matching [link\n"
- "reference "
- " definition].\n\n"
- Here is a simple
- a simple example
- " example:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][bar]\n\n"
- "[bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The rules for "
- " for the ["
- "[link text]"
- " are the same as"
- " same as with\n["
- "[inline links]"
- "].  Thus:\n\n"
- "The link text "
- " text may "
- " may contain "
- contain balanced
- "balanced "
- " brackets, but "
- ", but not "
- " not unbalanced "
- " ones,\n"
- "unless they are "
- " are escaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link [foo [bar]"
- " [bar]]][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [foo [bar"
- "foo [bar]]</a></"
- "]]</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link \\[bar][ref"
- "bar][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link ["
- "\">link [bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link text "
- " text may "
- " may contain "
- "contain inline "
- " inline content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[link *foo **bar"
- " **bar** `#`*]["
- "* `#`*][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">link <em"
- link <em>foo <
- em>foo <strong>
- "<strong>bar</"
- ">bar</strong> <"
- "> <code>#</code>"
- "#</code></em></a"
- "</em></a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[!["
- "moon](moon.jpg)]"
- ")][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\"><img src"
- "<img src=\""
- " src=\"moon.jpg\" "
- "\" alt=\"moon\" /><"
- "\" /></a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "However, links "
- ", links may not "
- "may not contain "
- "contain other "
- " other links, at"
- ", at any level "
- " level of "
- " of nesting.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo [bar](/uri)"
- "](/uri)][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo <a href="
- "<a href=\"/uri\">"
- "=\"/uri\">bar</a>]"
- "bar</a>]<a href="
- "<a href=\"/uri\">"
- "=\"/uri\">ref</a><"
- "ref</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo *bar [baz]["
- " [baz][ref]*]["
- "[ref]*][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo <em>bar "
- "<em>bar <a href="
- "<a href=\"/uri\">"
- "=\"/uri\">baz</a><"
- "baz</a></em>]<a "
- "/em>]<a href=\"/"
- " href=\"/uri\">ref"
- "uri\">ref</a></p>"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- (In the examples
- "examples above, "
- " above, we have "
- "we have two ["
- "shortcut "
- " reference links"
- "]\n"
- "\ninstead of one "
- "["
- "full reference "
- " link].)\n\n"
- "The following "
- " cases "
- cases illustrate
- " the precedence "
- " of link text "
- " text grouping "
- " over\n"
- "emphasis "
- " grouping:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*[foo*][ref]\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>*<a href=\"/"
- " href=\"/uri\">foo"
- "uri\">foo*</a></p"
- "*</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo *bar][ref]*"
- "][ref]*\n\n"
- "\n[ref]: /uri\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">foo *bar"
- foo *bar</a>*</p
- "</a>*</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These cases "
- cases illustrate
- " the precedence "
- " of HTML tags, "
- " tags, code "
- ", code spans,\n"
- "and autolinks "
- " over link "
- " link grouping:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo <bar attr=\""
- " attr=\"][ref]\">\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo <bar "
- " <bar attr=\"]["
- "attr=\"][ref]\"></"
- "ref]\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo`][ref]`\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo<code>]["
- "<code>][ref]</"
- "][ref]</code></p"
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo<https://"
- "://example.com/?"
- "search=][ref]>\n\n"
- "\n[ref]: /uri\n.\n"
- "<p>[foo<a href=\""
- "a href=\"https://"
- "://example.com/?"
- search=%5D%5Bref
- "5D%5Bref%5D\">"
- "%5D\">https://"
- "://example.com/?"
- "search=][ref]</a"
- "[ref]</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Matching is case
- " is case-"
- case-insensitive
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][BaR]\n\n"
- "[bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Unicode case "
- " case fold is "
- "fold is used:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[ẞ]\n\n[SS]: /url\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\">ẞ</a></p"
- "ẞ</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Consecutive "
- " internal spaces"
- " spaces, tabs, "
- ", tabs, and line"
- and line endings
- " endings are "
- " are treated as "
- " as one space "
- " space for\n"
- "purposes of "
- " of determining "
- " matching:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[Foo\n"
- "  bar]: /url\n\n"
- "\n[Baz][Foo bar]\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\">Baz</a><"
- "Baz</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "No spaces, tabs,"
- ", tabs, or line "
- "or line endings "
- "endings are "
- " are allowed "
- "allowed between "
- "between the ["
- "[link text]"
- "] and the\n["
- "\n[link label]:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo] [bar]\n\n"
- "[bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p>[foo] <a href"
- " <a href=\"/url\" "
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n[bar]\n\n"
- "[bar]: /url \""
- ": /url \"title\"\n"
- ".\n<p>[foo]\n"
- "<a href=\"/url\" "
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "This is a "
- " is a departure "
- " from John "
- " John Gruber'"
- "s original "
- " Markdown syntax"
- "\n"
- "description, "
- ", which "
- which explicitly
- " allows "
- " whitespace "
- " between the "
- " the link\n"
- "text and the "
- "and the link "
- " link label.  "
- "It brings "
- brings reference
- " links in line "
- "in line with\n["
- "[inline links]"
- ", which ("
- which (according
- " to both "
- to both original
- "original "
- " Markdown and\n"
- "this spec) "
- " spec) cannot "
- " cannot have "
- " have whitespace"
- " after the link "
- " link text.  "
- "More\n"
- "importantly, it "
- ", it prevents "
- " inadvertent "
- " capture of "
- " of consecutive\n"
- "["
- "shortcut "
- " reference links"
- "]"
- ". "
- If whitespace is
- " is allowed "
- "allowed between "
- "between the\n"
- "link text and "
- " and the link "
- " link label, "
- " label, then in "
- "then in the "
- in the following
- " we will have\n"
- "a single "
- single reference
- " link, not two "
- not two shortcut
- "shortcut "
- " reference links"
- " links, as\n"
- "intended:\n\n"
- "``` markdown\n"
- "[foo]\n[bar]\n\n"
- "\n[foo]: /url1\n"
- "[bar]: /url2\n"
- "```\n\n"
- "(Note that ["
- "shortcut "
- " reference links"
- "]"
- " were introduced"
- " by Gruber\n"
- "himself in a "
- " in a beta "
- " a beta version "
- "version of "
- "`Markdown.pl`"
- ", but never "
- " never included\n"
- "in the official "
- " syntax "
- " description.  "
- Without shortcut
- "shortcut "
- " reference\n"
- "links, it is "
- ", it is harmless"
- "harmless to "
- " to allow space "
- " space between "
- between the link
- "the link text "
- " text and\n"
- "link label; but "
- "; but once "
- " once shortcut "
- " references are "
- " are introduced,"
- ", it is\n"
- too dangerous to
- " to allow this, "
- " this, as it "
- as it frequently
- " leads to\n"
- "unintended "
- " results.)\n\n"
- "When there are "
- " are multiple "
- " matching ["
- "link reference "
- " definitions],\n"
- "the first is "
- " is used:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]: /url1\n\n"
- "\n[foo]: /url2\n\n"
- "\n[bar][foo]\n.\n"
- "<p><a href=\"/"
- " href=\"/url1\">"
- "\"/url1\">bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that "
- " that matching "
- " is performed on"
- " on normalized "
- " strings, not "
- ", not parsed\n"
- inline content.
- "content.  "
- So the following
- " does not match,"
- " match, even "
- ", even though "
- " though the\n"
- "labels define "
- " equivalent "
- " inline content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[bar][foo\\!]\n\n"
- "\n[foo!]: /url\n.\n"
- ".\n<p>[bar][foo!]"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "[Link labels]"
- " cannot contain "
- contain brackets
- "brackets, unless"
- ", unless they "
- " they are\n"
- backslash-
- "-escaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][ref[]\n\n"
- "\n[ref[]: /uri\n.\n"
- "<p>[foo][ref[]</"
- "[ref[]</p>\n"
- "<p>[ref[]: /uri<"
- "]: /uri</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][ref[bar]]\n"
- "\n"
- "[ref[bar]]: /uri"
- "]]: /uri\n.\n"
- "<p>[foo][ref[bar"
- "[ref[bar]]</p>\n"
- "<p>[ref[bar]]: /"
- "bar]]: /uri</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[[[foo]]]\n\n"
- "[[[foo]]]: /url\n"
- ".\n"
- "<p>[[[foo]]]</p>"
- "]]]</p>\n"
- "<p>[[[foo]]]: /"
- "]]]: /url</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][ref\\[]\n\n"
- "\n[ref\\[]: /uri\n"
- ".\n"
- "<p><a href=\"/uri"
- "=\"/uri\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that in "
- "that in this "
- "in this example "
- "`]`"
- " is not "
- is not backslash
- "-escaped:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[bar\\\\]: /uri\n\n"
- "\n[bar\\\\]\n.\n"
- "<p><a href=\"/uri"
- "=\"/uri\">bar\\</a>"
- "bar\\</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A [link label]"
- " must contain at"
- " at least one "
- " one character "
- " that is not a "
- " not a space, "
- " space, tab, or\n"
- "line ending:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[]\n\n[]: /uri\n.\n"
- ".\n<p>[]</p>\n"
- "<p>[]: /uri</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[\n ]\n\n[\n"
- " ]\n\n[\n ]: /uri\n"
- ".\n<p>[\n]</p>\n"
- "]</p>\n<p>[\n"
- "]: /uri</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A "
- "[collapsed "
- " reference link]"
- " link](@)\n"
- "consists of a ["
- "[link label]"
- "] that [matches]"
- "matches] a\n["
- "link reference "
- " definition]"
- " elsewhere in "
- " in the\n"
- "document, "
- ", followed by "
- " by the string "
- "`[]`.\n"
- "The contents of "
- " of the link "
- " link label are "
- " are parsed as "
- " as inlines,\n"
- "which are used "
- " used as the "
- " as the link'"
- "s text.  "
- "The link'"
- "s URI and title "
- " title are\n"
- "provided by the "
- " by the matching"
- "matching "
- " reference link "
- " link definition"
- ".  Thus,\n"
- "`[foo][]`"
- " is equivalent "
- " to `[foo][foo]`"
- ".\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[*foo* bar][]\n\n"
- "[*foo* bar]: /"
- " bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\"><"
- "title\"><em>foo</"
- em>foo</em> bar<
- "em> bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link labels "
- " labels are case"
- are case-
- case-insensitive
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[Foo][]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">Foo</a><"
- "Foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "As with full "
- " full reference "
- " links, spaces, "
- "spaces, tabs, or"
- "tabs, or line "
- "or line endings "
- "endings are not\n"
- "allowed between "
- "between the two "
- "the two sets of "
- sets of brackets
- "brackets:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo] \n[]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a>\n"
- "[]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A "
- "[shortcut "
- " reference link]"
- " link](@)\n"
- "consists of a ["
- "[link label]"
- "] that [matches]"
- "matches] a\n["
- "link reference "
- " definition]"
- " elsewhere in "
- " in the\n"
- "document and is "
- " and is not "
- " is not followed"
- "followed by `[]`"
- " or a link label"
- " label.\n"
- "The contents of "
- " of the link "
- " link label are "
- " are parsed as "
- " as inlines,\n"
- "which are used "
- " used as the "
- " as the link'"
- "s text.  "
- "The link'"
- "'s URI and title"
- "\n"
- "are provided by "
- " by the matching"
- "matching link "
- " link reference "
- " definition.\n"
- "Thus, `[foo]`"
- " is equivalent "
- " to `[foo][]`.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[*foo* bar]\n\n"
- "[*foo* bar]: /"
- " bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\"><"
- "title\"><em>foo</"
- em>foo</em> bar<
- "em> bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[[*foo* bar]]\n\n"
- "[*foo* bar]: /"
- " bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p>[<a href=\"/"
- " href=\"/url\" "
- "=\"/url\" title=\""
- " title=\"title\"><"
- "title\"><em>foo</"
- em>foo</em> bar<
- "em> bar</a>]</p>"
- "/a>]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[[bar [foo]\n\n"
- "\n[foo]: /url\n.\n"
- "<p>[[bar <a href"
- " <a href=\"/url\">"
- "=\"/url\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link labels "
- " labels are case"
- are case-
- case-insensitive
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[Foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><a href=\"/url"
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">Foo</a><"
- "Foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A space after "
- " after the link "
- " link text "
- " text should be "
- " be preserved:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo] bar\n\n"
- "\n[foo]: /url\n.\n"
- "<p><a href=\"/url"
- "=\"/url\">foo</a> "
- "foo</a> bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- If you just want
- " want bracketed "
- " text, you can "
- " can backslash-"
- "-escape the\n"
- "opening bracket "
- bracket to avoid
- "to avoid links:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\[foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n<p>[foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that this "
- " this is a link,"
- " a link, because"
- " because a link "
- " a link label "
- " label ends with"
- " with the first\n"
- "following "
- " closing bracket"
- " bracket:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo*]: /url\n\n"
- "\n*[foo*]\n.\n"
- "<p>*<a href=\"/"
- " href=\"/url\">foo"
- "url\">foo*</a></p"
- "*</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Full and "
- " and collapsed "
- " references take"
- " take precedence"
- " over shortcut\n"
- "references:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][bar]\n\n"
- "\n[foo]: /url1\n"
- "[bar]: /url2\n.\n"
- "<p><a href=\"/"
- " href=\"/url2\">"
- "\"/url2\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][]\n\n"
- "\n[foo]: /url1\n.\n"
- "<p><a href=\"/"
- " href=\"/url1\">"
- "\"/url1\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "Inline links "
- " links also take"
- " take precedence"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo]()\n\n"
- "\n[foo]: /url1\n.\n"
- "<p><a href=\"\">"
- "href=\"\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo](not a link"
- " a link)\n\n"
- "\n[foo]: /url1\n.\n"
- "<p><a href=\"/"
- " href=\"/url1\">"
- "\"/url1\">foo</a>("
- "foo</a>(not a "
- ">(not a link)</p"
- "link)</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- In the following
- " case "
- "`[bar][baz]`"
- " is parsed as a "
- " as a reference,"
- "\n`[foo]`"
- " as normal text:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][bar][baz]\n"
- "\n[baz]: /url\n.\n"
- "<p>[foo]<a href="
- "<a href=\"/url\">"
- "=\"/url\">bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here, though, "
- "`[foo][bar]`"
- " is parsed as a "
- " as a reference,"
- ", since\n`[bar]`"
- " is defined:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][bar][baz]\n"
- "\n[baz]: /url1\n"
- "[bar]: /url2\n.\n"
- "<p><a href=\"/"
- " href=\"/url2\">"
- "\"/url2\">foo</a><"
- "foo</a><a href=\""
- "a href=\"/url1\">"
- "\"/url1\">baz</a><"
- "baz</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Here `[foo]`"
- " is not parsed "
- " parsed as a "
- " as a shortcut "
- " reference, "
- ", because it\n"
- is followed by a
- " by a link label"
- " label (even "
- " (even though "
- "`[bar]`"
- " is not defined)"
- "defined):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "[foo][bar][baz]\n"
- "\n[baz]: /url1\n"
- "[foo]: /url2\n.\n"
- "<p>[foo]<a href="
- "<a href=\"/url1\">"
- "\"/url1\">bar</a><"
- "bar</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n\n"
- "## Images\n\n"
- "Syntax for "
- " for images is "
- " is like the "
- " the syntax for "
- " for links, with"
- ", with one\n"
- "difference. "
- "Instead of ["
- "[link text]"
- "], we have an\n"
- "[image "
- " description](@)"
- ".  "
- "The rules for "
- " for this are "
- " are the\n"
- "same as for ["
- "[link text]"
- ", except that (a"
- " that (a) an\n"
- "image "
- " description "
- " starts with "
- "`![`"
- " rather than `[`"
- "`[`, and\n"
- "(b) an image "
- " description may"
- " may contain "
- "contain links.\n"
- "An image "
- " description has"
- " has inline "
- " inline elements"
- "\n"
- as its contents.
- ".  "
- When an image is
- "image is "
- " is rendered to "
- " to HTML,\n"
- "this is "
- " is standardly "
- " used as the "
- " as the image's "
- "'s `alt`"
- "`alt` attribute."
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "!["
- "foo](/url \"title"
- " \"title\")\n.\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo\" "
- "=\"foo\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo *bar*]\n\n"
- "[foo *bar*]: "
- "bar*]: train.jpg"
- " \"train & tracks"
- "& tracks\"\n.\n"
- "<p><img src=\""
- " src=\"train.jpg\""
- "\" alt=\"foo bar\" "
- " bar\" title=\""
- " title=\"train &"
- "\"train &amp; "
- " &amp; tracks\" /"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo !["
- "bar](/url)](/"
- "/url)](/url2)\n.\n"
- "<p><img src=\"/"
- " src=\"/url2\" alt"
- "\" alt=\"foo bar\" "
- " bar\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "!["
- "foo [bar](/url)]"
- "](/url)](/url2)\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url2\" alt"
- "\" alt=\"foo bar\" "
- " bar\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Though this spec
- " spec is "
- " is concerned "
- " with parsing, "
- ", not rendering,"
- ", it is\n"
- recommended that
- " that in "
- " in rendering to"
- " to HTML, only "
- ", only the plain"
- " plain string "
- " string content\n"
- "of the ["
- "image "
- " description]"
- " be used.  "
- "Note that in\n"
- "the above "
- " above example, "
- ", the alt "
- " alt attribute'"
- "'s value is "
- "`foo bar`, not "
- "`foo\n"
- "[bar](/url)` or "
- "`foo <a href=\"/"
- " href=\"/url\">bar"
- "url\">bar</a>`"
- ".  "
- "Only the plain "
- " plain string\n"
- "content is "
- " is rendered, "
- ", without "
- " formatting.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo *bar*][]\n\n"
- "[foo *bar*]: "
- "bar*]: train.jpg"
- " \"train & tracks"
- "& tracks\"\n.\n"
- "<p><img src=\""
- " src=\"train.jpg\""
- "\" alt=\"foo bar\" "
- " bar\" title=\""
- " title=\"train &"
- "\"train &amp; "
- " &amp; tracks\" /"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "!["
- "foo *bar*]["
- " *bar*][foobar]\n"
- "\n"
- "[FOOBAR]: "
- "]: train.jpg \""
- " \"train & tracks"
- "& tracks\"\n.\n"
- "<p><img src=\""
- " src=\"train.jpg\""
- "\" alt=\"foo bar\" "
- " bar\" title=\""
- " title=\"train &"
- "\"train &amp; "
- " &amp; tracks\" /"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "!["
- "foo](train.jpg)\n"
- ".\n"
- "<p><img src=\""
- " src=\"train.jpg\""
- "\" alt=\"foo\" /></"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "My !["
- "foo bar](/path/"
- "](/path/to/"
- "/to/train.jpg  \""
- "  \"title\"   )\n.\n"
- "<p>My <img src=\""
- " src=\"/path/to/"
- "/to/train.jpg\" "
- "\" alt=\"foo bar\" "
- " bar\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo](<url>)\n.\n"
- "<p><img src=\"url"
- "src=\"url\" alt=\""
- "\" alt=\"foo\" /></"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![](/url)\n.\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Reference-style:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo][bar]\n\n"
- "\n[bar]: /url\n.\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo\" /></"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo][bar]\n\n"
- "\n[BAR]: /url\n.\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo\" /></"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Collapsed:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo][]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo\" "
- "=\"foo\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![*foo* bar][]\n\n"
- "[*foo* bar]: /"
- " bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo bar\" "
- " bar\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The labels are "
- " are case-"
- case-insensitive
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![Foo][]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"Foo\" "
- "=\"Foo\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "As with "
- " with reference "
- " links, spaces, "
- "spaces, tabs, "
- ", tabs, and line"
- and line endings
- " endings, are "
- ", are not "
- "are not allowed\n"
- "between the two "
- "the two sets of "
- sets of brackets
- "brackets:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo] \n[]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo\" "
- "=\"foo\" title=\""
- " title=\"title\" /"
- "title\" />\n"
- "[]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Shortcut:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo\" "
- "=\"foo\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![*foo* bar]\n\n"
- "[*foo* bar]: /"
- " bar]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"foo bar\" "
- " bar\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that link "
- " link labels "
- " labels cannot "
- " cannot contain "
- " unescaped "
- " brackets:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![[foo]]\n\n"
- "[[foo]]: /url \""
- ": /url \"title\"\n"
- ".\n<p>![["
- "<p>![[foo]]</p>\n"
- "<p>[[foo]]: /url"
- "]]: /url &quot;"
- " &quot;title&"
- ;title&quot;</p>
- ";</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "The link labels "
- " labels are case"
- are case-
- case-insensitive
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "![Foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n"
- "<p><img src=\"/"
- " src=\"/url\" alt="
- "\" alt=\"Foo\" "
- "=\"Foo\" title=\""
- " title=\"title\" /"
- "title\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- If you just want
- " want a literal "
- "`!`"
- " followed by "
- " by bracketed "
- " text, you can\n"
- backslash-escape
- "-escape the "
- " the opening `[`"
- "`[`:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "!\\[foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n<p>![foo]</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "If you want a "
- " want a link "
- " a link after a "
- "after a literal "
- "`!`"
- ", backslash-"
- "-escape the\n`!`:"
- "`!`:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "\\![foo]\n\n"
- "[foo]: /url \""
- ": /url \"title\"\n"
- ".\n<p>!"
- "<a href=\"/url\" "
- "=\"/url\" title=\""
- " title=\"title\">"
- "\"title\">foo</a><"
- "foo</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## Autolinks\n\n"
- "[Autolink](@)"
- "s are absolute "
- " URIs and email "
- " email addresses"
- " inside\n`<` and "
- "`<` and `>`"
- ". "
- "They are parsed "
- " parsed as links"
- "as links, with "
- ", with the URL "
- the URL or email
- or email address
- "\n"
- "as the link "
- " link label.\n\n"
- "A "
- "[URI autolink](@"
- "](@)"
- " consists of `<`"
- ", followed by an"
- "\n[absolute URI]"
- "] followed by "
- "`>`"
- ".  "
- "It is parsed as\n"
- "a link to the "
- " to the URI, "
- " URI, with the "
- " the URI as the "
- " as the link'"
- "'s label.\n\n"
- "An "
- "[absolute URI](@"
- " URI](@),\n"
- "for these "
- " these purposes,"
- ", consists of a "
- "[scheme]"
- " followed by a "
- " by a colon (`:`"
- "`:`)\n"
- followed by zero
- " by zero or more"
- " or more "
- " more characters"
- " other than ["
- "[ASCII control\n"
- "\ncharacters]["
- "ASCII control "
- " character], ["
- "], [space], `<`"
- "], `<`, and `>`."
- "`>`.\n"
- "If the URI "
- the URI includes
- "includes these "
- these characters
- ", they must be "
- must be percent-
- "percent-encoded\n"
- "(e.g. `%20`"
- " for a space).\n\n"
- "For purposes of "
- " of this spec, a"
- " spec, a "
- "[scheme](@)"
- " is any sequence"
- "\nof 2--"
- "32 characters "
- " beginning with "
- " with an ASCII "
- " ASCII letter "
- " letter and "
- " and followed\n"
- "by any "
- " any combination"
- " of ASCII "
- " ASCII letters, "
- ", digits, or the"
- ", or the symbols"
- " symbols plus\n(\""
- "(\"+\"), period (\""
- "\".\""
- ".\"), or hyphen ("
- "\"-\").\n\n"
- "Here are some "
- " some valid "
- " valid autolinks"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<http://"
- "://foo.bar.baz>\n"
- ".\n"
- "<p><a href=\"http"
- "=\"http://"
- "://foo.bar.baz\">"
- "\">http://"
- "://foo.bar.baz</"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<https://"
- "://foo.bar.baz/"
- /test?
- q=hello&id=22&
- "&id=22&boolean>\n"
- ".\n"
- "<p><a href=\""
- "a href=\"https://"
- "://foo.bar.baz/"
- /test?
- q=hello&amp;id=
- "&amp;id=22&amp;"
- "=22&amp;boolean\""
- "boolean\">https:/"
- ">https://"
- "://foo.bar.baz/"
- /test?
- q=hello&amp;id=
- "&amp;id=22&amp;"
- "=22&amp;boolean<"
- "boolean</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<irc://foo.bar:"
- "foo.bar:2233/baz"
- "2233/baz>\n.\n"
- "<p><a href=\"irc:"
- "=\"irc://foo.bar:"
- "foo.bar:2233/baz"
- "2233/baz\">irc://"
- "\">irc://foo.bar:"
- "foo.bar:2233/baz"
- 2233/baz</a></p>
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Uppercase is "
- " is also fine:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<MAILTO:FOO@"
- "@BAR.BAZ>\n.\n"
- "<p><a href=\""
- "href=\"MAILTO:FOO"
- "@BAR.BAZ\">"
- "\">MAILTO:FOO@"
- "@BAR.BAZ</a></p>"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Note that many "
- " many strings "
- "strings that "
- " that count as ["
- "[absolute URIs]"
- "] for\n"
- purposes of this
- " of this spec "
- " spec are not "
- "are not valid "
- " valid URIs, "
- " URIs, because "
- "because their\n"
- "schemes are not "
- " not registered "
- " or because of "
- " of other "
- " other problems\n"
- "with their "
- " their syntax:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a+b+c:d>\n.\n"
- "<p><a href=\"a+b+"
- "=\"a+b+c:d\">a+b+"
- "\">a+b+c:d</a></p"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<made-up-scheme:"
- "-scheme://foo,"
- "://foo,bar>\n.\n"
- "<p><a href=\"made"
- "=\"made-up-scheme"
- "-scheme://foo,"
- "://foo,bar\">made"
- "\">made-up-scheme"
- "-scheme://foo,"
- "://foo,bar</a></"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<https://../>\n.\n"
- "<p><a href=\""
- "a href=\"https://"
- "https://../\">"
- "://../\">https://"
- "https://../</a><"
- "../</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<localhost:5001/"
- ":5001/foo>\n.\n"
- "<p><a href=\""
- " href=\"localhost"
- ":5001/foo\">"
- "/foo\">localhost:"
- ":5001/foo</a></p"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Spaces are not "
- "are not allowed "
- "allowed in "
- " in autolinks:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<https://foo.bar"
- /foo.bar/baz bim
- "/baz bim>\n.\n"
- "<p>&lt;https://"
- "https://foo.bar/"
- foo.bar/baz bim&
- "baz bim&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Backslash-
- "-escapes do not "
- " do not work "
- " work inside "
- inside autolinks
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<https://"
- "://example.com/\\"
- "/\\[\\>\n.\n"
- "<p><a href=\""
- "a href=\"https://"
- "://example.com/%"
- "/%5C%5B%5C\">"
- "%5B%5C\">https://"
- "://example.com/\\"
- "/\\[\\</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "An "
- "[email autolink]"
- "](@)\n"
- "consists of `<`"
- ", followed by an"
- " by an ["
- "[email address],"
- "],\nfollowed by "
- "`>`.  The link'"
- "s label is the "
- " is the email "
- " email address,\n"
- "and the URL is "
- "`mailto:`"
- " followed by the"
- " by the email "
- " email address.\n"
- "\nAn "
- "[email address]("
- "](@),\n"
- "for these "
- " these purposes,"
- ", is anything "
- " that matches\n"
- "the "
- "["
- "non-normative "
- " regex from the "
- " the HTML5\nspec"
- "](https://"
- html.spec.whatwg
- c.whatwg.org/
- /multipage/
- "/forms.html#e-"
- "#e-mail-state-("
- "-state-(type="
- "-(type=email)):"
- ":\n\n    "
- "/^[a-zA-Z0-9.!"
- "#$%&'*+/=?"
- "^_`{|}~-]+@[a-zA"
- "]+@[a-zA-Z0-9](?"
- "-Z0-9](?:[a-zA-"
- "?:[a-zA-Z0-9-]{"
- "-Z0-9-]{0,61}[a-"
- "0,61}[a-zA-Z0-9]"
- "zA-Z0-9])?\n    "
- "(?:\\.[a-zA-Z0-9]"
- "zA-Z0-9](?:[a-zA"
- "(?:[a-zA-Z0-9-]{"
- "-Z0-9-]{0,61}[a-"
- "0,61}[a-zA-Z0-9]"
- "zA-Z0-9])?)*$/\n\n"
- "Examples of "
- " of email "
- " email autolinks"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<foo@"
- "@bar.example.com"
- ">\n.\n"
- "<p><a href=\""
- "href=\"mailto:foo"
- "@bar.example.com"
- "\">foo@"
- "@bar.example.com"
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<foo+special@"
- special@Bar.baz-
- Bar.baz-bar0.com
- "bar0.com>\n.\n"
- "<p><a href=\""
- "href=\"mailto:foo"
- +special@Bar.baz
- "@Bar.baz-bar0."
- "-bar0.com\">foo+"
- "\">foo+special@"
- special@Bar.baz-
- Bar.baz-bar0.com
- bar0.com</a></p>
- "</a></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Backslash-
- "-escapes do not "
- " do not work "
- " work inside "
- " inside email "
- " email autolinks"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<foo\\+@"
- "@bar.example.com"
- ">\n.\n"
- "<p>&lt;foo+@"
- "@bar.example.com"
- "&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "These are not "
- " not autolinks:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<>\n.\n"
- "<p>&lt;&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "< https://"
- "https://foo.bar "
- "foo.bar >\n.\n"
- "<p>&lt; https://"
- "https://foo.bar "
- foo.bar &gt;</p>
- "&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<m:abc>\n.\n"
- "<p>&lt;m:abc&gt;"
- "&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<foo.bar.baz>\n.\n"
- "<p>&lt;"
- ">&lt;foo.bar.baz"
- "&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "https://"
- "://example.com\n"
- ".\n"
- "<p>https://"
- "://example.com</"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- foo@
- "@bar.example.com"
- "\n.\n"
- "<p>foo@"
- "@bar.example.com"
- "</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## Raw HTML\n\n"
- "Text between `<`"
- "`<` and `>`"
- " that looks like"
- " like an HTML "
- "an HTML tag is "
- " tag is parsed "
- " parsed as a\n"
- raw HTML tag and
- " tag and will be"
- " will be "
- will be rendered
- rendered in HTML
- " in HTML without"
- " without "
- without escaping
- "escaping.\n"
- "Tag and "
- " and attribute "
- " names are not "
- "are not limited "
- "limited to "
- " to current HTML"
- " HTML tags,\n"
- so custom tags (
- " tags (and even,"
- " even, say, "
- ", say, DocBook "
- "DocBook tags) "
- " tags) may be "
- " may be used.\n\n"
- "Here is the "
- " is the grammar "
- grammar for tags
- "for tags:\n\n"
- "A [tag name](@)"
- " consists of an "
- " of an ASCII "
- " ASCII letter\n"
- followed by zero
- " by zero or more"
- " or more ASCII "
- " ASCII letters, "
- ", digits, or\n"
- "hyphens (`-`).\n\n"
- "An "
- "[attribute](@)"
- " consists of "
- " of spaces, tabs"
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending,\n"
- "an ["
- "[attribute name]"
- ", and an "
- " and an optional"
- "\n["
- "attribute value "
- " specification]."
- "].\n\n"
- "An "
- "[attribute name]"
- " name](@)\n"
- "consists of an "
- " of an ASCII "
- " ASCII letter, "
- "`_`, or `:`"
- ", followed by "
- " by zero or more"
- " or more ASCII\n"
- "letters, digits,"
- " digits, `_`, "
- "`_`, `.`, `:`"
- "`.`, `:`, or `-`"
- ".  "
- "(Note:  This is "
- "This is the XML\n"
- "specification "
- " restricted to "
- " to ASCII.  "
- HTML5 is laxer.)
- " laxer.)\n\n"
- "An "
- "[attribute value"
- " value "
- " specification]("
- "](@)\n"
- "consists of "
- " of optional "
- " spaces, tabs, "
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending,\na "
- "a `=`"
- " character, "
- ", optional "
- " spaces, tabs, "
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending,\n"
- "and an ["
- "[attribute value"
- "].\n\n"
- "An "
- "[attribute value"
- " value](@)\n"
- "consists of an ["
- "unquoted "
- " attribute value"
- "],\na ["
- "single-quoted "
- quoted attribute
- " value], or a ["
- "double-quoted "
- quoted attribute
- " value].\n\n"
- "An "
- "[unquoted "
- " attribute value"
- " value](@)\n"
- "is a nonempty "
- " string of "
- " of characters "
- " not\n"
- including spaces
- " spaces, tabs, "
- ", tabs, line "
- ", line endings, "
- "`\"`, `'`, `=`, "
- ", `=`, `<`, `>`"
- "`<`, `>`, or "
- "`>`, or `` ` ``."
- "`` ` ``.\n\n"
- "A "
- "[single-quoted "
- quoted attribute
- " value](@)\n"
- "consists of `'`"
- ", zero or more\n"
- "characters not "
- " not including "
- "`'`"
- ", and a final "
- "`'`.\n\n"
- "A "
- "[double-quoted "
- quoted attribute
- " value](@)\n"
- "consists of `\"`"
- ", zero or more\n"
- "characters not "
- " not including "
- "`\"`"
- ", and a final "
- "`\"`.\n\n"
- "An [open tag](@)"
- " consists of a "
- "`<`"
- " character, a ["
- "[tag name],\n"
- "],\nzero or more "
- "[attributes]"
- ", optional "
- " spaces, tabs, "
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending,\n"
- "an optional `/`"
- " character, and "
- ", and a `>`"
- "`>` character.\n\n"
- "A "
- "[closing tag](@)"
- " consists of the"
- " of the string "
- "`</`, a\n["
- ", a\n[tag name]"
- ", optional "
- " spaces, tabs, "
- ", tabs, and up "
- " and up to one "
- " to one line "
- " line ending, "
- "ending, and the "
- " the character\n"
- "`>`.\n\n"
- "An "
- "[HTML comment](@"
- "](@)"
- " consists of "
- "`<!-->`, "
- ", `<!--->`, or  "
- ", or  `<!--`"
- ", a string of\n"
- "characters not "
- " not including "
- " the string "
- "`-->`, and `-->`"
- "`-->` (see the\n"
- "[HTML spec]("
- " spec](https://"
- html.spec.whatwg
- c.whatwg.org/
- /multipage/
- "/parsing.html#"
- "#markup-"
- "-declaration-"
- "-open-state)).\n\n"
- "A "
- "[processing "
- " instruction](@)"
- "\n"
- "consists of the "
- " of the string "
- "`<?`, a string\n"
- "of characters "
- " not including "
- " the string `?>`"
- ", and the string"
- "\n`?>`.\n\n"
- "A "
- "[declaration](@)"
- " consists of the"
- " of the string "
- "`<!`"
- ", an ASCII "
- " ASCII letter, "
- "letter, zero or "
- "zero or more\n"
- "characters not "
- " not including "
- " the character "
- "`>`"
- ", and the "
- " the character "
- "`>`.\n\n"
- "A "
- "[CDATA section]("
- "](@) consists of"
- "\nthe string "
- "`<![CDATA[`"
- ", a string of "
- " of characters "
- " not including "
- " the string\n"
- "`]]>`"
- ", and the string"
- " string `]]>`.\n\n"
- "An [HTML tag](@)"
- " consists of an "
- "[open tag], a ["
- ", a [closing tag"
- "],\nan ["
- "an [HTML comment"
- "], a ["
- "processing "
- " instruction]"
- "], a ["
- ", a [declaration"
- "],\nor a ["
- "[CDATA section]."
- "].\n\n"
- "Here are some "
- " some simple "
- " simple open "
- " open tags:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a><bab><c2c>\n.\n"
- "<p><a><bab><c2c>"
- "><c2c></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Empty elements:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a/><b2/>\n.\n"
- "<p><a/><b2/></p>"
- "b2/></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Whitespace is "
- " is allowed:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a  /><b2\n"
- "data=\"foo\" >\n.\n"
- ".\n<p><a  /><b2\n"
- "data=\"foo\" ></p>"
- "\" ></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "With attributes:"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a foo=\"bar\" bam"
- "bar\" bam = 'baz "
- " = 'baz <em>\"</"
- " <em>\"</em>'\n"
- "_boolean zoop:33"
- " zoop:33=zoop:33"
- "=zoop:33 />\n.\n"
- "<p><a foo=\"bar\" "
- "=\"bar\" bam = '"
- " bam = 'baz <em>"
- "baz <em>\"</em>'\n"
- "_boolean zoop:33"
- " zoop:33=zoop:33"
- "=zoop:33 /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Custom tag names
- " names can be "
- " can be used:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- Foo <responsive-
- "-image src=\""
- " src=\"foo.jpg\" /"
- "\" />\n.\n"
- "<p>Foo <"
- ">Foo <responsive"
- "-image src=\""
- " src=\"foo.jpg\" /"
- "\" /></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Illegal tag "
- " tag names, not "
- ", not parsed as "
- " as HTML:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<33> <__>\n.\n"
- "<p>&lt;33&gt; &"
- 33&gt; &lt;__&gt
- "lt;__&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Illegal "
- " attribute names"
- " names:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a h*#ref=\"hi\">\n"
- ".\n"
- "<p>&lt;a h*#ref="
- " h*#ref=&quot;hi"
- "&quot;hi&quot;&"
- "&quot;&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Illegal "
- " attribute "
- " values:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"hi'> <a"
- "\"hi'> <a href=hi"
- " href=hi'>\n.\n"
- "<p>&lt;a href=&"
- "a href=&quot;hi'"
- "quot;hi'&gt; &lt"
- "&gt; &lt;a href="
- ";a href=hi'&gt;<"
- "hi'&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Illegal "
- " whitespace:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "< a><\n"
- "foo><bar/ >\n"
- "<foo bar=baz\n"
- "bim!bop />\n.\n"
- "<p>&lt; a&gt;&lt"
- "a&gt;&lt;\n"
- "foo&gt;&lt;bar/ "
- "lt;bar/ &gt;\n"
- "&lt;foo bar=baz\n"
- bim!
- "bop /&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Missing "
- " whitespace:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href='"
- " href='bar'title"
- "=title>\n.\n"
- "<p>&lt;a href='"
- " href='bar'title"
- "=title&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Closing tags:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "</a></foo >\n.\n"
- "<p></a></foo ></"
- "/foo ></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Illegal "
- " attributes in "
- " in closing tag:"
- " tag:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "</a href=\"foo\">\n"
- ".\n"
- "<p>&lt;/a href=&"
- a href=&quot;foo
- quot;foo&quot;&
- "&quot;&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Comments:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- foo <!-- this is
- " this is a --\n"
- "comment - with "
- " - with hyphens "
- "hyphens -->\n.\n"
- "<p>foo <!-- this"
- "!-- this is a --"
- " is a --\n"
- "comment - with "
- " - with hyphens "
- "hyphens --></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- foo <!--> foo --
- "> foo -->\n\n"
- foo <!---> foo -
- "-> foo -->\n.\n"
- "<p>foo <!--> foo"
- "!--> foo --&gt;<"
- " --&gt;</p>\n"
- "<p>foo <!---> "
- " <!---> foo --&"
- " foo --&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Processing "
- " instructions:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- foo <?
- "php echo $a; ?>\n"
- ">\n.\n<p>foo <?"
- php echo $a; ?
- "></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Declarations:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- foo <!
- ELEMENT br EMPTY
- "br EMPTY>\n.\n"
- ".\n<p>foo <!"
- ELEMENT br EMPTY
- "br EMPTY></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "CDATA sections:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo <!["
- "CDATA[>&<]]>\n.\n"
- ".\n<p>foo <!["
- "CDATA[>&<]]></p>"
- "<]]></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Entity and "
- " and numeric "
- " character "
- " references are "
- " are preserved "
- " in HTML\n"
- "attributes:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo <a href=\"&"
- " href=\"&ouml;\">\n"
- ".\n"
- "<p>foo <a href=\""
- "a href=\"&ouml;\">"
- "&ouml;\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Backslash "
- " escapes do not "
- " do not work in "
- "work in HTML "
- " HTML attributes"
- ":\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo <a href=\"\\*\""
- "=\"\\*\">\n.\n"
- "<p>foo <a href=\""
- "a href=\"\\*\"></p>"
- "\\*\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"\\\"\">\n.\n"
- "<p>&lt;a href=&"
- a href=&quot;&
- "=&quot;&quot;&"
- ;&quot;&quot;&gt
- "quot;&gt;</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- Hard line breaks
- "\n\n"
- A line ending (
- ending (not in a
- "not in a code "
- " a code span or "
- span or HTML tag
- "HTML tag) that "
- ") that is "
- that is preceded
- "\n"
- "by two or more "
- "or more spaces "
- " spaces and does"
- "and does not "
- " not occur at "
- " at the end of a"
- "end of a block\n"
- "is parsed as a "
- "[hard line break"
- " break](@)"
- " (rendered\n"
- "\nin HTML as a "
- "`<br />` tag):\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo  \nbaz\n.\n"
- ".\n<p>foo<br />\n"
- "baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "For a more "
- " a more visible "
- " alternative, a "
- ", a backslash "
- " before the\n["
- "[line ending]"
- " may be used "
- "be used instead "
- "instead of two "
- " of two or more "
- "or more spaces:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\\\nbaz\n.\n"
- ".\n<p>foo<br />\n"
- "baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "More than two "
- " two spaces can "
- " can be used:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo       \nbaz\n"
- "baz\n.\n"
- ".\n<p>foo<br />\n"
- "baz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Leading spaces "
- " spaces at the "
- at the beginning
- " of the next "
- " next line are "
- " are ignored:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo  \n     bar\n"
- ".\n<p>foo<br />\n"
- "bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\\\n     bar\n.\n"
- ".\n<p>foo<br />\n"
- "bar</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Hard line breaks
- " breaks can "
- " can occur "
- " occur inside "
- " inside emphasis"
- "emphasis, links,"
- ", links, and "
- ", and other "
- other constructs
- "\n"
- "that allow "
- " allow inline "
- " inline content:"
- "content:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo  \nbar*\n.\n"
- "<p><em>foo<br />"
- "<br />\n"
- "bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "*foo\\\nbar*\n.\n"
- "<p><em>foo<br />"
- "<br />\n"
- "bar</em></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Hard line breaks
- " breaks do not "
- " do not occur "
- " occur inside "
- " inside code "
- " code spans\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`code  \nspan`\n.\n"
- "<p><code>code   "
- ">code   span</"
- "span</code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "`code\\\nspan`\n.\n"
- "<p><code>code\\ "
- ">code\\ span</"
- "\\ span</code></p"
- "code></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "or HTML tags:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"foo  \n"
- "bar\">\n.\n"
- "<p><a href=\"foo"
- "=\"foo  \n"
- "bar\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "<a href=\"foo\\\n"
- "bar\">\n.\n"
- "<p><a href=\"foo\\"
- "=\"foo\\\n"
- "bar\"></p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- Hard line breaks
- " breaks are for "
- " for separating "
- " inline content "
- content within a
- "within a block.\n"
- "Neither syntax "
- " syntax for hard"
- "for hard line "
- " line breaks "
- " breaks works at"
- works at the end
- " the end of a "
- " of a paragraph "
- " or\n"
- "other block "
- " block element:\n"
- "\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\\\n.\n"
- ".\n<p>foo\\</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo  \n.\n"
- ".\n<p>foo</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "### foo\\\n.\n"
- ".\n<h3>foo\\</h3>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "### foo  \n.\n"
- ".\n<h3>foo</h3>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "## "
- Soft line breaks
- "\n\n"
- "A regular line "
- " line ending ("
- ending (not in a
- "not in a code "
- " a code span or "
- span or HTML tag
- "HTML tag) that "
- ") that is not\n"
- "preceded by two "
- " by two or more "
- "or more spaces "
- " spaces or a "
- " or a backslash "
- " is parsed as a\n"
- "[softbreak](@)"
- ".  "
- "(A soft line "
- " line break may "
- " may be rendered"
- rendered in HTML
- " in HTML either "
- " either as a\n["
- "[line ending]"
- " or as a space. "
- "The result will "
- " will be the "
- " be the same in\n"
- "browsers. "
- "In the examples "
- " here, a ["
- "[line ending]"
- "] will be used.)"
- "\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo\nbaz\n.\n"
- "baz\n.\n<p>foo\n"
- "<p>foo\nbaz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Spaces at the "
- " at the end of "
- " end of the line"
- "the line and "
- " and beginning "
- " of the next "
- " next line are\n"
- "removed:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "foo \n baz\n.\n"
- " baz\n.\n<p>foo\n"
- "<p>foo\nbaz</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "A conforming "
- " parser may "
- " may render a "
- " a soft line "
- " line break in "
- " in HTML either "
- " either as a\n"
- "line ending or "
- " or as a space.\n"
- "\n"
- "A renderer may "
- " may also "
- " also provide an"
- " an option to "
- " to render soft "
- " soft line "
- " line breaks\n"
- "as hard line "
- " line breaks.\n\n"
- "## "
- Textual content
- "\n\n"
- "Any characters "
- " not given an "
- " interpretation "
- " by the above "
- " above rules "
- " rules will\n"
- "be parsed as "
- " as plain "
- " plain textual "
- textual content.
- "content.\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "hello $.;'there\n"
- ".\n"
- "<p>hello $.;'"
- " $.;'there</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Foo χρῆν\n.\n"
- "<p>Foo χρῆν</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "Internal spaces "
- " spaces are "
- " are preserved "
- " verbatim:\n\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "```````` example"
- " example\n"
- "Multiple     "
- "     spaces\n.\n"
- "<p>Multiple     "
- "     spaces</p>\n"
- "````````````````"
- "````````````````"
- "````````````````"
- "````````\n\n\n"
- "<!-- END TESTS -"
- " TESTS -->\n\n"
- "# "
- "Appendix: A "
- ": A parsing "
- parsing strategy
- "strategy\n\n"
- In this appendix
- "appendix we "
- " we describe "
- " some features "
- " of the parsing "
- parsing strategy
- "\n"
- "used in the "
- " the CommonMark "
- " reference "
- " implementations"
- ".\n\n"
- "## Overview\n\n"
- "Parsing has two "
- "has two phases:\n"
- "\n1. "
- "In the first "
- " first phase, "
- " phase, lines of"
- "lines of input "
- " input are "
- " are consumed "
- " and the block\n"
- structure of the
- " of the document"
- "---"
- "its division "
- " into paragraphs"
- ", block quotes,\n"
- "list items, and "
- ", and so on---"
- is constructed.
- ".  "
- Text is assigned
- "assigned to "
- " to these\n"
- "blocks but not "
- "but not parsed. "
- "Link reference "
- " definitions are"
- " are parsed and "
- " and a\n"
- "map of links is "
- " is constructed."
- ".\n\n"
- "2. "
- "In the second "
- " second phase, "
- " phase, the raw "
- "the raw text "
- " text contents "
- " of paragraphs "
- " and headings\n"
- "are parsed into "
- " into sequences "
- " of Markdown "
- " inline elements"
- elements (
- " (strings,\n"
- "code spans, "
- " spans, links, "
- " links, emphasis"
- "emphasis, and so"
- ", and so on), "
- "so on), using "
- ", using the map "
- "the map of link\n"
- "references "
- " constructed in "
- " in phase 1.\n\n"
- At each point in
- "point in "
- " in processing, "
- ", the document "
- " is represented "
- " as a tree of\n"
- "**blocks**"
- ".  "
- "The root of the "
- " of the tree is "
- "tree is a "
- "`document`"
- " block.  The "
- "`document`\n"
- "may have any "
- " any number of "
- " of other blocks"
- " blocks as "
- "**children**"
- ".  "
- "These children\n"
- "may, in turn, "
- " turn, have "
- ", have other "
- " other blocks as"
- " as children.  "
- "The last child "
- " child of a "
- " of a block\n"
- "is normally "
- " considered "
- "**open**"
- ", meaning that "
- " that subsequent"
- " lines of input\n"
- "can alter its "
- " its contents.  "
- (Blocks that are
- "that are not "
- are not open are
- "open are "
- "**closed**.)\n"
- "Here, for "
- ", for example, "
- ", is a possible "
- " document tree, "
- " tree, with the "
- " the open blocks"
- "\n"
- marked by arrows
- " arrows:\n\n"
- "``` tree\n"
- "-> document\n"
- "  -> block_quote"
- "\n"
- "       paragraph"
- "\n"
- "         \"Lorem "
- "\"Lorem ipsum "
- " ipsum dolor\\"
- " dolor\\nsit amet"
- " amet.\"\n"
- "    -> list ("
- "> list (type="
- " (type=bullet "
- "=bullet tight="
- " tight=true "
- true bullet_char
- "=-)\n"
- "         "
- "list_item\n"
- "           "
- "paragraph\n"
- "             \""
- "\"Qui *quodsi "
- quodsi iracundia
- "*\"\n"
- "      -> "
- "-> list_item\n"
- "        -> "
- "-> paragraph\n"
- "             \""
- "\"aliquando id\"\n"
- "```\n\n"
- "## "
- "Phase 1: block "
- " block structure"
- "\n\n"
- "Each line that "
- " that is "
- " is processed "
- " has an effect "
- " effect on this "
- "on this tree.  "
- "The line is\n"
- "analyzed and, "
- " and, depending "
- " on its contents"
- "contents, the "
- ", the document "
- " may be altered\n"
- "in one or more "
- "or more of the "
- of the following
- " ways:\n\n"
- "1. "
- One or more open
- " open blocks may"
- " may be closed.\n"
- "2. "
- "One or more new "
- " new blocks may "
- " may be created "
- "created as "
- " as children of "
- " of the\n   "
- last open block.
- "\n3. "
- "Text may be "
- " may be added to"
- "added to the "
- " to the last ("
- " last (deepest) "
- ") open block "
- " block remaining"
- "\n   on the tree."
- "\n\n"
- "Once a line has "
- " has been "
- " incorporated "
- " into the tree "
- " tree in this "
- "in this way,\n"
- "it can be "
- can be discarded
- ", so input can "
- " can be read in "
- read in a stream
- "a stream.\n\n"
- "For each line, "
- " line, we follow"
- " follow this "
- " this procedure:"
- ":\n\n"
- "1. "
- First we iterate
- " iterate through"
- " through the "
- " the open blocks"
- " blocks, "
- "blocks, starting"
- "starting with "
- " with the\n"
- "root document, "
- ", and descending"
- " through last "
- " last children "
- " down to the "
- " to the last\n"
- "open block.  "
- "Each block "
- " block imposes a"
- " a condition "
- " that the line "
- " line must "
- " must satisfy\n"
- "if the block is "
- " is to remain "
- " remain open.  "
- "For example, a "
- ", a block quote "
- " quote requires "
- " a\n`>`"
- " character.  "
- "A paragraph "
- " requires a non-"
- " a non-blank "
- "-blank line.\n"
- In this phase we
- "phase we may "
- " we may match "
- " match all or "
- " all or just "
- "or just some of "
- some of the open
- "\n"
- "blocks.  "
- "But we cannot "
- " cannot close "
- " close unmatched"
- " blocks yet, "
- " yet, because we"
- " we may have a\n["
- "lazy "
- " continuation "
- " line].\n\n"
- "2.  "
- "Next, after "
- " after consuming"
- " the "
- the continuation
- " markers for "
- " for existing\n"
- "blocks, we look "
- "we look for new "
- "for new block "
- " block starts ("
- "starts (e.g. `>`"
- " for a block "
- "a block quote).\n"
- "If we encounter "
- " a new block "
- " block start, we"
- ", we close any "
- " any blocks "
- blocks unmatched
- "\n"
- in step 1 before
- "1 before "
- " before creating"
- creating the new
- " the new block "
- " block as a "
- " as a child of "
- " of the last\n"
- "matched "
- " container block"
- " block.\n\n"
- "3.  "
- "Finally, we look"
- " we look at the "
- at the remainder
- " of the line ("
- " line (after "
- " (after block\n"
- "markers like `>`"
- ", list markers, "
- ", and "
- " and indentation"
- " have been "
- " been consumed)."
- "\n"
- "This is text "
- is text that can
- "that can be "
- " be incorporated"
- " into the last "
- " last open\n"
- "block (a "
- " (a paragraph, "
- ", code block, "
- " block, heading,"
- "heading, or raw "
- " or raw HTML).\n\n"
- "Setext headings "
- " are formed when"
- " when we see a "
- " see a line of a"
- " of a paragraph\n"
- "that is a ["
- "setext heading "
- " underline].\n\n"
- "Reference link "
- link definitions
- " are detected "
- " when a "
- when a paragraph
- " is closed;\n"
- "the accumulated "
- " text lines are "
- " are parsed to "
- " to see if they "
- "if they begin "
- " begin with\n"
- "one or more "
- " more reference "
- " link "
- link definitions
- ".  "
- "Any remainder "
- " becomes a\n"
- normal paragraph
- ".\n\n"
- "We can see how "
- "see how this "
- " this works by "
- " by considering "
- " how the tree "
- " tree above is\n"
- "generated by "
- " by four lines "
- " lines of "
- " of Markdown:\n\n"
- "``` markdown\n"
- "> Lorem ipsum "
- " ipsum dolor\n"
- "sit amet.\n"
- "> - Qui *quodsi "
- quodsi iracundia
- "*\n"
- "> - aliquando id"
- " id\n```\n\n"
- "At the outset, "
- "outset, our "
- ", our document "
- " model is just\n\n"
- "``` tree\n"
- "-> document\n"
- "```\n\n"
- "The first line "
- " line of our "
- " of our text,\n\n"
- "``` markdown\n"
- "> Lorem ipsum "
- " ipsum dolor\n"
- "```\n\n"
- "causes a "
- "`block_quote`"
- " block to be "
- " to be created "
- "created as a "
- " as a child of "
- " of our\nopen "
- "open `document`"
- " block, and a "
- "`paragraph`"
- " block as a "
- " as a child of\n"
- "the "
- "`block_quote`"
- ".  "
- Then the text is
- " text is added "
- " added to the "
- " to the last "
- " last open\n"
- "block, the "
- "`paragraph`:\n\n"
- "``` tree\n"
- "-> document\n"
- "  -> block_quote"
- "\n"
- "    -> paragraph"
- "\n"
- "         \"Lorem "
- "\"Lorem ipsum "
- " ipsum dolor\"\n"
- "```\n\n"
- "The next line,\n"
- "\n``` markdown\n"
- "sit amet.\n```\n\n"
- "is a \""
- "lazy "
- " continuation\""
- "\" of the open "
- "`paragraph`"
- ", so it gets "
- "it gets added\n"
- to the paragraph
- "'s text:\n\n"
- "``` tree\n"
- "-> document\n"
- "  -> block_quote"
- "\n"
- "    -> paragraph"
- "\n"
- "         \"Lorem "
- "\"Lorem ipsum "
- " ipsum dolor\\"
- " dolor\\nsit amet"
- " amet.\"\n```\n\n"
- "The third line,\n"
- "\n``` markdown\n"
- "> - Qui *quodsi "
- quodsi iracundia
- "*\n```\n\n"
- "causes the "
- "`paragraph`"
- " block to be "
- " to be closed, "
- "closed, and a "
- ", and a new "
- "`list` block\n"
- "opened as a "
- " as a child of "
- " of the "
- "`block_quote`"
- ".  A `list_item`"
- " is also\n"
- added as a child
- " a child of the "
- "`list`, and a "
- "`paragraph`"
- " as a child of\n"
- "\nthe `list_item`"
- ".  "
- The text is then
- " is then added "
- " added to the "
- " to the new "
- "`paragraph`:\n\n"
- "``` tree\n"
- "-> document\n"
- "  -> block_quote"
- "\n"
- "       paragraph"
- "\n"
- "         \"Lorem "
- "\"Lorem ipsum "
- " ipsum dolor\\"
- " dolor\\nsit amet"
- " amet.\"\n"
- "    -> list ("
- "> list (type="
- " (type=bullet "
- "=bullet tight="
- " tight=true "
- true bullet_char
- "=-)\n"
- "      -> "
- "-> list_item\n"
- "        -> "
- "-> paragraph\n"
- "             \""
- "\"Qui *quodsi "
- quodsi iracundia
- "*\"\n```\n\n"
- "The fourth line,"
- "\n\n``` markdown\n"
- "> - aliquando id"
- " id\n```\n\n"
- "causes the "
- "`list_item`"
- " (and its child "
- " child the "
- "`paragraph`"
- ") to be closed,\n"
- "\nand a new "
- "`list_item`"
- " opened up as "
- " up as child of "
- " of the `list`"
- "`list`.  A "
- ".  A `paragraph`"
- "\n"
- "is added as a "
- " as a child of "
- " of the new "
- "`list_item`"
- ", to contain the"
- " the text.\n"
- "We thus obtain "
- " obtain the "
- " the final tree:"
- " tree:\n\n"
- "``` tree\n"
- "-> document\n"
- "  -> block_quote"
- "\n"
- "       paragraph"
- "\n"
- "         \"Lorem "
- "\"Lorem ipsum "
- " ipsum dolor\\"
- " dolor\\nsit amet"
- " amet.\"\n"
- "    -> list ("
- "> list (type="
- " (type=bullet "
- "=bullet tight="
- " tight=true "
- true bullet_char
- "=-)\n"
- "         "
- "list_item\n"
- "           "
- "paragraph\n"
- "             \""
- "\"Qui *quodsi "
- quodsi iracundia
- "*\"\n"
- "      -> "
- "-> list_item\n"
- "        -> "
- "-> paragraph\n"
- "             \""
- "\"aliquando id\"\n"
- "```\n\n"
- "## "
- "Phase 2: inline "
- inline structure
- "\n\n"
- "Once all of the "
- " of the input "
- " input has been "
- " been parsed, "
- "parsed, all open"
- "all open blocks "
- " blocks are "
- " are closed.\n\n"
- "We then \""
- "\"walk the tree,\""
- " visiting every "
- " every node, and"
- ", and parse raw\n"
- "string contents "
- " of paragraphs "
- " and headings as"
- " as inlines.  "
- "At this\n"
- "point we have "
- we have seen all
- "seen all the "
- "all the link "
- " link reference "
- " definitions, so"
- ", so we can\n"
- "resolve "
- " reference links"
- " links as we go."
- " we go.\n\n"
- "``` tree\n"
- "document\n"
- "  block_quote\n"
- "    paragraph\n"
- "      str \"Lorem"
- " \"Lorem ipsum "
- " ipsum dolor\"\n"
- "      softbreak\n"
- "      str \"sit "
- " \"sit amet.\"\n"
- "    list (type="
- " (type=bullet "
- "=bullet tight="
- " tight=true "
- true bullet_char
- "=-)\n"
- "      list_item\n"
- "        "
- "paragraph\n"
- "          str \""
- "str \"Qui \"\n"
- "          emph\n"
- "            str "
- "str \"quodsi "
- quodsi iracundia
- "\"\n"
- "      list_item\n"
- "        "
- "paragraph\n"
- "          str \""
- "str \"aliquando "
- " id\"\n```\n\n"
- "Notice how the ["
- "[line ending]"
- " in the first "
- " first paragraph"
- " has\n"
- been parsed as a
- " as a "
- "`softbreak`"
- ", and the "
- " the asterisks "
- " in the first "
- " first list item"
- "\nhave become an "
- "`emph`.\n\n"
- "### "
- An algorithm for
- " for parsing "
- "parsing nested "
- " nested emphasis"
- "emphasis and "
- " and links\n\n"
- "By far the "
- " the trickiest "
- " part of inline "
- " inline parsing "
- "parsing is "
- " is handling "
- " emphasis,\n"
- "strong emphasis,"
- ", links, and "
- ", and images.  "
- "This is done "
- "is done using "
- " using the "
- " the following\n"
- "algorithm.\n\n"
- "When we'"
- "re parsing "
- "parsing inlines "
- "inlines and we "
- " and we hit "
- " we hit either\n\n"
- "- a run of `*`"
- "`*` or `_`"
- " characters, or\n"
- "- a `[` or `![`"
- " or `![`\n\n"
- we insert a text
- " a text node "
- " node with these"
- " these symbols "
- "symbols as its "
- " as its literal "
- "literal content,"
- "content, and we\n"
- add a pointer to
- " to this text "
- " text node to "
- "node to the "
- "[delimiter stack"
- " stack](@).\n\n"
- "The ["
- "[delimiter stack"
- "]"
- " is a doubly "
- " doubly linked "
- " linked list.  "
- "Each\n"
- element contains
- "contains a "
- " a pointer to a "
- " to a text node,"
- " node, plus "
- plus information
- " about\n\n"
- "- "
- "the type of "
- " of delimiter ("
- "`[`, `![`, `*`, "
- ", `*`, `_`)\n"
- "- "
- "the number of "
- " of delimiters,\n"
- "- "
- "whether the "
- " the delimiter "
- " is \"active\""
- " (all are active"
- " active to start"
- "to start), and\n"
- "- "
- "whether the "
- " the delimiter "
- " is a potential "
- " opener, a "
- ", a potential "
- " closer,\n  "
- "or both (which "
- " (which depends "
- "depends on what "
- "on what sort of "
- " of characters "
- " precede\n  "
- "and follow the "
- " the delimiters)"
- ").\n\n"
- "When we hit a "
- "`]`"
- " character, we "
- ", we call the "
- "*look for link "
- " link or image*\n"
- "procedure (see "
- " (see below).\n\n"
- "When we hit the "
- "hit the end of "
- " end of the "
- " of the input, "
- " input, we call "
- "we call the "
- "*process "
- process emphasis
- "*\n"
- "procedure (see "
- " (see below), "
- "below), with "
- "`stack_bottom`"
- " = NULL.\n\n"
- "#### "
- "*look for link "
- " link or image*\n"
- "\n"
- "Starting at the "
- " at the top of "
- " top of the "
- of the delimiter
- " stack, we look "
- " look backwards\n"
- "through the "
- " the stack for "
- " for an opening "
- "`[` or `![`"
- "`![` delimiter."
- "\n\n- If we don'"
- "t find one, we "
- "one, we return a"
- return a literal
- " literal text "
- " text node `]`."
- "`]`.\n\n"
- "- "
- "If we do find "
- "do find one, but"
- "one, but it'"
- "'s not *active*"
- ", we remove the "
- " the inactive\n  "
- "delimiter from "
- " from the stack,"
- " stack, and "
- ", and return a "
- " a literal text "
- " text node `]`."
- "`]`.\n\n"
- "- "
- "If we find one "
- " one and it'"
- "s active, then "
- ", then we parse "
- " parse ahead to "
- " to see if\n  "
- "we have an "
- "have an inline "
- " inline link/"
- " link/image, "
- "image, reference"
- " link/image, "
- "image, collapsed"
- " reference\n  "
- "link/image, or "
- ", or shortcut "
- " reference link/"
- " link/image.\n\n  "
- "+ If we don'"
- "t, then we "
- "then we remove "
- " remove the "
- " the opening "
- " delimiter from "
- " from the\n    "
- "delimiter stack "
- " stack and "
- " and return a "
- " a literal text "
- " text node `]`."
- "`]`.\n\n  "
- "+ If we do, then"
- "\n\n    * "
- We return a link
- " a link or image"
- "or image node "
- " node whose "
- " whose children "
- " are the inlines"
- "\n      "
- "after the text "
- " text node "
- " node pointed to"
- " to by the "
- " by the opening "
- " delimiter.\n\n"
- "\n    * We run "
- "*process "
- process emphasis
- "*"
- " on these "
- " these inlines, "
- ", with the `[`"
- "`[` opener"
- " opener\n      "
- "\n      as "
- "`stack_bottom`."
- ".\n\n    "
- "* "
- "We remove the "
- " the opening "
- " delimiter.\n\n"
- "\n    * "
- "If we have a "
- " have a link ("
- "a link (and not "
- and not an image
- "an image), we "
- "), we also set "
- " set all\n      "
- "`[`"
- " delimiters "
- " before the "
- " the opening "
- " delimiter to "
- "*inactive*"
- ".  (This\n      "
- "will prevent us "
- " us from getting"
- " getting links "
- " links within "
- " within links.)\n"
- "\n"
- "#### "
- "*process "
- process emphasis
- "*\n\n"
- "Parameter "
- "`stack_bottom`"
- " sets a lower "
- a lower bound to
- bound to how far
- " how far we\n"
- "descend in the ["
- "[delimiter stack"
- "]"
- ".  "
- "If it is NULL, "
- " NULL, we can\n"
- "go all the way "
- "the way to the "
- " to the bottom."
- " bottom.  "
- "Otherwise, we "
- ", we stop before"
- "\nvisiting "
- "`stack_bottom`."
- ".\n\n"
- "Let "
- "`"
- current_position
- "`"
- " point to the "
- " to the element "
- "element on the ["
- "[delimiter stack"
- "]\njust above "
- "`stack_bottom`"
- " (or the first "
- " first element "
- "element if "
- "`stack_bottom`\n"
- "\nis NULL).\n\n"
- We keep track of
- "track of the "
- "`openers_bottom`"
- " for each "
- " each delimiter\n"
- "type (`*`, `_`"
- "), indexed to "
- " to the length "
- " length of the "
- " of the closing "
- " delimiter run\n"
- "(modulo 3) and "
- " 3) and to "
- " and to whether "
- "whether the "
- " the closing "
- " delimiter can "
- " can also be an\n"
- "opener.  "
- "Initialize this "
- " this to "
- "`stack_bottom`."
- ".\n\n"
- "Then we repeat "
- " repeat the "
- " the following "
- " until we run "
- " we run out of "
- out of potential
- "\nclosers:\n\n"
- "- Move "
- "`"
- current_position
- "`"
- " forward in the "
- in the delimiter
- " stack (if "
- " (if needed)\n  "
- "until we find "
- "we find the "
- " the first "
- " first potential"
- " closer with "
- " with delimiter "
- "`*` or `_`.\n  "
- "(This will be "
- "will be the "
- be the potential
- " closer closest\n"
- "\n  "
- to the beginning
- " of the input --"
- " the first one "
- " one in parse "
- " parse order.)\n\n"
- "- "
- "Now, look back "
- " back in the "
- " in the stack ("
- " stack (staying "
- "staying above "
- "`stack_bottom`"
- " and\n  the "
- "`openers_bottom`"
- " for this "
- " this delimiter "
- " type) for the\n"
- "\n  "
- "first matching "
- " potential "
- " opener (\""
- "\"matching\""
- " means same "
- " same delimiter)"
- ").\n\n"
- "- "
- "If one is found:"
- "\n\n  + "
- "Figure out "
- " out whether we "
- " we have "
- we have emphasis
- "emphasis or "
- " or strong "
- " strong emphasis"
- "emphasis:\n    "
- "if both closer "
- " closer and "
- " and opener "
- " opener spans "
- " spans have "
- " have length >= "
- " >= 2, we have\n"
- "\n    "
- "strong, "
- ", otherwise "
- " regular.\n\n  "
- "+ "
- "Insert an emph "
- "an emph or "
- "emph or strong "
- " strong emph "
- " emph node "
- node accordingly
- ", after\n    "
- "the text node "
- " corresponding "
- " to the opener.\n"
- "\n  + "
- "Remove any "
- " any delimiters "
- " between the "
- " the opener and "
- " and closer from"
- "\n    "
- "the delimiter "
- " stack.\n\n  "
- "+ "
- "Remove 1 (for "
- " 1 (for regular "
- regular emph) or
- "emph) or 2 (for "
- " 2 (for strong "
- " strong emph) "
- emph) delimiters
- "\n    "
- from the opening
- " opening and "
- " and closing "
- "closing text "
- " text nodes.  "
- "If they become "
- " become empty\n"
- "\n    "
- "as a result, "
- "result, remove "
- " remove them and"
- "them and remove "
- " remove the "
- " corresponding "
- " element\n    "
- of the delimiter
- " stack.  "
- "If the closing "
- "closing node is "
- "node is removed,"
- "removed, reset\n"
- "\n    "
- "`"
- current_position
- "`"
- " to the next "
- " next element in"
- " in the stack.\n\n"
- "- "
- If none is found
- "is found:\n\n  "
- "+ Set "
- "`openers_bottom`"
- " to the element "
- "element before "
- "`"
- current_position
- "`.\n    "
- "(We know that "
- " that there are "
- " are no openers "
- openers for this
- for this kind of
- " kind of closer "
- " closer up to "
- " up to and\n    "
- "including this "
- " this point, so "
- ", so this puts a"
- " puts a lower "
- a lower bound on
- "bound on future "
- " future searches"
- "searches.)\n\n  "
- "+ "
- If the closer at
- " at "
- "`"
- current_position
- "`"
- " is not a "
- " not a potential"
- " opener,\n    "
- "remove it from "
- "it from the "
- " the delimiter "
- " stack (since we"
- since we know it
- " know it can't"
- "'t\n    "
- "be a closer "
- " closer either)."
- "either).\n\n  "
- "+ Advance "
- "`"
- current_position
- "`"
- " to the next "
- " next element in"
- " in the stack.\n\n"
- "After we'"
- "re done, we "
- ", we remove all "
- " all delimiters "
- " above "
- "`stack_bottom`"
- " from the\n"
- delimiter stack.
- "\n"
